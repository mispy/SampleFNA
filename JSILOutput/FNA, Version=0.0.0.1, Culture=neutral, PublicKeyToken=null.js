/* Generated by JSIL v0.8.1 build 270. See http://jsil.org/ for more information. */ 
var $asm00 = JSIL.DeclareAssembly("FNA, Version=0.0.0.1, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Xna");
JSIL.DeclareNamespace("Microsoft.Xna.Framework");
JSIL.DeclareNamespace("Microsoft.Xna.Framework.Content");
/* class Microsoft.Xna.Framework.Content.ContentTypeReader */ 

(function ContentTypeReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReaderManager)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.File)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ContentTypeReader__ctor (targetType) {
    this.targetType = targetType;
  };

  function ContentTypeReader_get_TargetType () {
    return this.targetType;
  };

  function ContentTypeReader_get_TypeVersion () {
    return 0;
  };

  function ContentTypeReader_Initialize (manager) {
  };

  function ContentTypeReader_Normalize (fileName, extensions) {
    if ($T04().Exists(fileName)) {
      var result = fileName;
    } else {

      for (var i = 0; i < (extensions.length | 0); i = ((i + 1) | 0)) {
        var ext = extensions[i];
        var fileNamePlusExt = (JSIL.ConcatString(fileName, ext));
        if ($T04().Exists(fileNamePlusExt)) {
          result = fileNamePlusExt;
          return result;
        }
      }
      result = null;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ContentTypeReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      ContentTypeReader__ctor
    );

    $.Method({Static:false, Public:true }, "get_TargetType", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type")), 
      ContentTypeReader_get_TargetType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_TypeVersion", 
      JSIL.MethodSignature.Return($.Int32), 
      ContentTypeReader_get_TypeVersion
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")), 
      ContentTypeReader_Initialize
    );

    $.Method({Static:true , Public:false}, "Normalize", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])]), 
      ContentTypeReader_Normalize
    );

    $.Field({Static:false, Public:false}, "targetType", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "TargetType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeVersion", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ContentTypeReader`1 */ 

(function ContentTypeReader$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function ContentTypeReader$b1__ctor () {
    $T00().prototype._ctor.call(this, $thisType.T.get(this));
  };

  function ContentTypeReader$b1_Read$00 (input, existingInstance) {
    var $s00 = new JSIL.MethodSignature($thisType.T.get(this), [$asm00.Microsoft.Xna.Framework.Content.ContentReader, $thisType.T.get(this)]);
    if (existingInstance === null) {
      var result = JSIL.CloneParameter($thisType.T.get(this), $s00.CallVirtual("Read", null, this, input, (
            $thisType.T.get(this).IsValueType
               ? JSIL.CreateInstanceOfType($thisType.T.get(this))
               : null)
        ));
    } else {
      result = JSIL.CloneParameter($thisType.T.get(this), $s00.CallVirtual("Read", null, this, input, JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(existingInstance))));
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), 
      Name: "Microsoft.Xna.Framework.Content.ContentTypeReader`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ContentTypeReader$b1__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object]), 
      ContentTypeReader$b1_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Texture3DReader */ 

(function Texture3DReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Texture3D))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture3D)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };

  function Texture3DReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Texture3DReader_Read$00 (reader, existingInstance) {
    var format = $T03().$Cast(reader.ReadInt32());
    var width = (reader.ReadInt32() | 0);
    var height = (reader.ReadInt32() | 0);
    var depth = (reader.ReadInt32() | 0);
    var levelCount = (reader.ReadInt32() | 0);
    if (existingInstance === null) {
      var texture = new ($T02())(reader.get_GraphicsDevice(), width, height, depth, (levelCount > 1), format);
    } else {
      texture = existingInstance;
    }

    for (var i = 0; i < levelCount; i = ((i + 1) | 0)) {
      var dataSize = (reader.ReadInt32() | 0);
      var data = reader.ReadBytes(dataSize);
      $S00().CallVirtual("SetData$b1", [$asm01.System.Byte], texture, 
        i, 
        0, 
        0, 
        width, 
        height, 
        0, 
        depth, 
        data, 
        0, 
        dataSize
      );
      width = ($T08().Max(width >> 1, 1) | 0);
      height = ($T08().Max(height >> 1, 1) | 0);
      depth = ($T08().Max(depth >> 1, 1) | 0);
    }
    return texture;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture3D")]), 
      Name: "Microsoft.Xna.Framework.Content.Texture3DReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Texture3DReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture3D"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture3D")]), 
      Texture3DReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Graphics");
/* interface Microsoft.Xna.Framework.Graphics.IRenderTarget */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.IRenderTarget", false, [], function ($) {
    $.Method({}, "get_Width", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Height", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_RenderTargetUsage", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage")));
    $.Method({}, "get_DepthStencilFormat", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")));
    $.Method({}, "get_DepthStencilBuffer", JSIL.MethodSignature.Return($.UInt32));
    $.Property({}, "Width");
    $.Property({}, "Height");
    $.Property({}, "RenderTargetUsage");
    $.Property({}, "DepthStencilFormat");
    $.Property({}, "DepthStencilBuffer");
  }, []);

/* class Microsoft.Xna.Framework.Graphics.GraphicsResource */ 

(function GraphicsResource$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.WeakReference))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.WeakReference)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.GC)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm01.System.WeakReference))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Predicate$b1.Of($asm01.System.WeakReference))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.WeakReference")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.WeakReference"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function GraphicsResource__ctor () {
    var obj = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T03().Enter(obj = $thisType.resourcesLock, /* ref */ flag);
      this.selfReference = $S01().Construct(this);
      $thisType.resources.Add(this.selfReference);
    } finally {
      if (flag.get()) {
        $T03().Exit(obj);
      }
    }
  };

  function GraphicsResource_$lDoGraphicsDeviceResetting$gb__3 (wr) {
    return !wr.get_IsAlive();
  };

  function GraphicsResource_add_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T06().Combine(eventHandler2, value);
      eventHandler = $T07().CompareExchange$b1($T05())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsResource_Dispose$00 () {
    this.Dispose(true);
    $T08().SuppressFinalize(this);
  };

  function GraphicsResource_Dispose$01 (disposing) {
    var obj = null;
    if (!(!disposing || (this.Disposing === null))) {
      this.Disposing(this, $T09().Empty);
    }
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T03().Enter(obj = $thisType.resourcesLock, /* ref */ flag);
      $thisType.resources.Remove(this.selfReference);
    } finally {
      if (flag.get()) {
        $T03().Exit(obj);
      }
    }
    this.selfReference = null;
    this.GraphicsResource$GraphicsDevice$value = null;
    this.GraphicsResource$IsDisposed$value = true;
  };

  function GraphicsResource_DisposeAll () {
    var obj = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T03().Enter(obj = $thisType.resourcesLock, /* ref */ flag);
      var array = $T01().prototype.ToArray.call($thisType.resources);

      for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
        var resource = array[i];
        var target = resource.get_Target();
        if (target !== null) {
          $IM00().Call($T0C().$As(target), null);
        }
      }
      $thisType.resources.Clear();
    } finally {
      if (flag.get()) {
        $T03().Exit(obj);
      }
    }
  };

  function GraphicsResource_DoGraphicsDeviceResetting () {
    var $temp00;
    var obj = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T03().Enter(obj = $thisType.resourcesLock, /* ref */ flag);

      for (var a$0 = $thisType.resources._items, i$0 = 0, l$0 = ($thisType.resources._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var resource = a$0[i$0];
        var target = resource.get_Target();
        if (target !== null) {
          ($thisType.$As(target)).GraphicsDeviceResetting();
        }
      }
      $T01().prototype.RemoveAll.call($thisType.resources, $T0D().New($thisType, $thisType.$lDoGraphicsDeviceResetting$gb__3, function () { return JSIL.GetMethodInfo($thisType, "$lDoGraphicsDeviceResetting$gb__3", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.WeakReference]), true); }));
    } finally {
      if (flag.get()) {
        $T03().Exit(obj);
      }
    }
  };

  function GraphicsResource_Finalize () {
    try {
    } finally {
      $T00().prototype.Finalize.call(this);
    }
  };

  function GraphicsResource_get_GraphicsDevice () {
    return this.GraphicsResource$GraphicsDevice$value;
  };

  function GraphicsResource_get_IsDisposed () {
    return this.GraphicsResource$IsDisposed$value;
  };

  function GraphicsResource_get_Name () {
    return this.GraphicsResource$Name$value;
  };

  function GraphicsResource_get_Tag () {
    return this.GraphicsResource$Tag$value;
  };

  function GraphicsResource_GraphicsDeviceResetting () {
  };

  function GraphicsResource_remove_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T06().Remove(eventHandler2, value);
      eventHandler = $T07().CompareExchange$b1($T05())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsResource_set_GraphicsDevice (value) {
    this.GraphicsResource$GraphicsDevice$value = value;
  };

  function GraphicsResource_set_IsDisposed (value) {
    this.GraphicsResource$IsDisposed$value = value;
  };

  function GraphicsResource_set_Name (value) {
    this.GraphicsResource$Name$value = value;
  };

  function GraphicsResource_set_Tag (value) {
    this.GraphicsResource$Tag$value = value;
  };

  function GraphicsResource_toString () {
    return (
      $T0F().IsNullOrEmpty(this.GraphicsResource$Name$value)
         ? $T00().prototype.toString.call(this)
         : this.GraphicsResource$Name$value)
    ;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.GraphicsResource", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      GraphicsResource__ctor
    );

    $.Method({Static:true , Public:false}, "$lDoGraphicsDeviceResetting$gb__3", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.WeakReference")]), 
      GraphicsResource_$lDoGraphicsDeviceResetting$gb__3
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsResource_add_Disposing
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      GraphicsResource_Dispose$00
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      GraphicsResource_Dispose$01
    );

    $.Method({Static:true , Public:false}, "DisposeAll", 
      JSIL.MethodSignature.Void, 
      GraphicsResource_DisposeAll
    );

    $.Method({Static:true , Public:false}, "DoGraphicsDeviceResetting", 
      JSIL.MethodSignature.Void, 
      GraphicsResource_DoGraphicsDeviceResetting
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      GraphicsResource_Finalize
    );

    $.Method({Static:false, Public:true }, "get_GraphicsDevice", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      GraphicsResource_get_GraphicsDevice
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      GraphicsResource_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      GraphicsResource_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Object), 
      GraphicsResource_get_Tag
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "GraphicsDeviceResetting", 
      JSIL.MethodSignature.Void, 
      GraphicsResource_GraphicsDeviceResetting
    );

    $.Method({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsResource_remove_Disposing
    );

    $.Method({Static:false, Public:false}, "set_GraphicsDevice", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      GraphicsResource_set_GraphicsDevice
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      GraphicsResource_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      GraphicsResource_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Tag", 
      JSIL.MethodSignature.Action($.Object), 
      GraphicsResource_set_Tag
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      GraphicsResource_toString
    );

    $.Field({Static:false, Public:false}, "selfReference", $asm01.TypeRef("System.WeakReference")); 
    $.Field({Static:true , Public:false}, "resourcesLock", $.Object); 
    $.Field({Static:true , Public:false}, "resources", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.WeakReference")])); 
    $.Field({Static:false, Public:false}, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "GraphicsResource$GraphicsDevice$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsResource$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsResource$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsResource$Tag$value", $.Object)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate4", $asm01.TypeRef("System.Predicate`1", [$asm01.TypeRef("System.WeakReference")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function GraphicsResource__cctor () {
      $thisType.resourcesLock = new ($T00())();
      $thisType.resources = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      GraphicsResource__cctor
    );

    $.Property({Static:false, Public:true }, "GraphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"));

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Tag", $.Object);

    $.Event({Static:false, Public:true }, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.Texture */ 

(function Texture$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm03.System.Diagnostics.Debug)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };

  function Texture__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Texture_$lDispose$gb__6 () {
    $T03().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.DeleteTexture(this.texture);
  };

  function Texture_CalculateMipLevels (width, height, depth) {
    var levels = 1;
    var size = ($T05().Max($T05().Max(width, height), depth) | 0);

    while (size > 1) {
      size = ((size / 2) | 0);
      levels = ((levels + 1) | 0);
    }
    return levels;
  };

  function Texture_Dispose$00 (disposing) {
    if (!this.GraphicsResource$IsDisposed$value) {
      $T02().AddDisposeAction($T07().New(this, $thisType.prototype.$lDispose$gb__6, function () { return JSIL.GetMethodInfo($thisType, "$lDispose$gb__6", JSIL.MethodSignature.Void, false); }));
    }
    $T00().prototype.Dispose.call(this, disposing);
  };

  function Texture_get_Format () {
    return this.Texture$Format$value;
  };

  function Texture_get_LevelCount () {
    return this.Texture$LevelCount$value;
  };

  function Texture_GetFormatSize () {
    switch ((this.Texture$Format$value).valueOf()) {
      case 0: 
      case 8: 
      case 9: 
      case 10: 
      case 13: 
      case 17: 
        var result = 4;
        break;

      case 1: 
      case 2: 
      case 3: 
      case 7: 
      case 16: 
        result = 2;
        break;

      case 4: 
        result = 8;
        break;

      case 5: 
      case 6: 
        result = 16;
        break;

      case 11: 
      case 14: 
      case 18: 
        result = 8;
        break;

      case 12: 
        result = 1;
        break;

      case 15: 
        result = 16;
        break;

      default: 
        throw $S00().Construct("Should be a value defined in SurfaceFormat", "Format");

    }
    return result;
  };

  function Texture_GetGLSurfaceFormat () {
    switch ((this.Texture$Format$value).valueOf()) {
      case 0: 
        this.glInternalFormat = $T09().GL_RGBA;
        this.glFormat = $T09().GL_RGBA;
        this.glType = $T09().GL_UNSIGNED_BYTE;
        break;

      case 1: 
        this.glInternalFormat = $T09().GL_RGB;
        this.glFormat = $T09().GL_RGB;
        this.glType = $T09().GL_UNSIGNED_SHORT_5_6_5;
        break;

      case 2: 
        this.glInternalFormat = $T09().GL_RGBA;
        this.glFormat = $T09().GL_BGRA;
        this.glType = $T09().GL_UNSIGNED_SHORT_5_5_5_1;
        break;

      case 3: 
        this.glInternalFormat = $T09().GL_RGBA4;
        this.glFormat = $T09().GL_BGRA;
        this.glType = $T09().GL_UNSIGNED_SHORT_4_4_4_4;
        break;

      case 4: 
        this.glInternalFormat = $T09().GL_COMPRESSED_RGBA_S3TC_DXT1_EXT;
        this.glFormat = $T09().GL_COMPRESSED_TEXTURE_FORMATS;
        break;

      case 5: 
        this.glInternalFormat = $T09().GL_COMPRESSED_RGBA_S3TC_DXT3_EXT;
        this.glFormat = $T09().GL_COMPRESSED_TEXTURE_FORMATS;
        break;

      case 6: 
        this.glInternalFormat = $T09().GL_COMPRESSED_RGBA_S3TC_DXT5_EXT;
        this.glFormat = $T09().GL_COMPRESSED_TEXTURE_FORMATS;
        break;

      case 7: 
        this.glInternalFormat = $T09().GL_RG8I;
        this.glFormat = $T09().GL_RG;
        this.glType = $T09().GL_BYTE;
        break;

      case 8: 
        this.glInternalFormat = $T09().GL_RGBA8I;
        this.glFormat = $T09().GL_RGBA;
        this.glType = $T09().GL_BYTE;
        break;

      case 9: 
        this.glInternalFormat = $T09().GL_RGB10_A2_EXT;
        this.glFormat = $T09().GL_RGBA;
        this.glType = $T09().GL_UNSIGNED_INT_10_10_10_2;
        break;

      case 10: 
        this.glInternalFormat = $T09().GL_RG16;
        this.glFormat = $T09().GL_RG;
        this.glType = $T09().GL_UNSIGNED_SHORT;
        break;

      case 11: 
        this.glInternalFormat = $T09().GL_RGBA16;
        this.glFormat = $T09().GL_RGBA;
        this.glType = $T09().GL_UNSIGNED_SHORT;
        break;

      case 12: 
        this.glInternalFormat = $T09().GL_LUMINANCE;
        this.glFormat = $T09().GL_LUMINANCE;
        this.glType = $T09().GL_UNSIGNED_BYTE;
        break;

      case 13: 
        this.glInternalFormat = $T09().GL_R32F;
        this.glFormat = $T09().GL_RED;
        this.glType = $T09().GL_FLOAT;
        break;

      case 14: 
        this.glInternalFormat = $T09().GL_RG32F;
        this.glFormat = $T09().GL_RG;
        this.glType = $T09().GL_FLOAT;
        break;

      case 15: 
        this.glInternalFormat = $T09().GL_RGBA32F;
        this.glFormat = $T09().GL_RGBA;
        this.glType = $T09().GL_FLOAT;
        break;

      case 16: 
        this.glInternalFormat = $T09().GL_R16F;
        this.glFormat = $T09().GL_RED;
        this.glType = $T09().GL_HALF_FLOAT;
        break;

      case 17: 
        this.glInternalFormat = $T09().GL_RG16F;
        this.glFormat = $T09().GL_RG;
        this.glType = $T09().GL_HALF_FLOAT;
        break;

      case 18: 
      case 19: 
        this.glInternalFormat = $T09().GL_RGBA16F;
        this.glFormat = $T09().GL_RGBA;
        this.glType = $T09().GL_HALF_FLOAT;
        break;

      default: 
        throw $S01().Construct();

    }
  };

  function Texture_GetPitch (width) {
    $T0B().Assert((width | 0) > 0, "The width is negative!");
    if (!(!((this.Texture$Format$value === $T0C().Dxt1) || 
          (this.Texture$Format$value === $T0C().Dxt3)) && (this.Texture$Format$value !== $T0C().Dxt5))) {
      var result = Math.imul((((((width | 0) + 3) | 0) / 4) | 0), this.GetFormatSize());
    } else {
      result = Math.imul(width, this.GetFormatSize());
    }
    return result;
  };

  function Texture_GraphicsDeviceResetting () {
  };

  function Texture_set_Format (value) {
    this.Texture$Format$value = value;
  };

  function Texture_set_LevelCount (value) {
    this.Texture$LevelCount$value = (value | 0);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.Texture", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Texture__ctor
    );

    $.Method({Static:false, Public:false}, "$lDispose$gb__6", 
      JSIL.MethodSignature.Void, 
      Texture_$lDispose$gb__6
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "CalculateMipLevels", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      Texture_CalculateMipLevels
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      Texture_Dispose$00
    );

    $.Method({Static:false, Public:true }, "get_Format", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")), 
      Texture_get_Format
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LevelCount", 
      JSIL.MethodSignature.Return($.Int32), 
      Texture_get_LevelCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "GetFormatSize", 
      JSIL.MethodSignature.Return($.Int32), 
      Texture_GetFormatSize
    );

    $.Method({Static:false, Public:false}, "GetGLSurfaceFormat", 
      JSIL.MethodSignature.Void, 
      Texture_GetGLSurfaceFormat
    );

    $.Method({Static:false, Public:false}, "GetPitch", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      Texture_GetPitch
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GraphicsDeviceResetting", 
      JSIL.MethodSignature.Void, 
      Texture_GraphicsDeviceResetting
    );

    $.Method({Static:false, Public:false}, "set_Format", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")), 
      Texture_set_Format
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_LevelCount", 
      JSIL.MethodSignature.Action($.Int32), 
      Texture_set_LevelCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture")); 
    $.Field({Static:false, Public:false}, "glInternalFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")); 
    $.Field({Static:false, Public:false}, "glFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")); 
    $.Field({Static:false, Public:false}, "glType", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")); 
    $.Field({Static:false, Public:false}, "Texture$Format$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Texture$LevelCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Format", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"));

    $.Property({Static:false, Public:true }, "LevelCount", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.TextureCube */ 

(function TextureCube$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureCube_$l$gc__DisplayClassa)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Threading)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CubeMapFace)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandle)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandleType)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };

  function TextureCube__ctor (graphicsDevice, size, mipMap, format) {
    var $closure0 = new ($T04())();
    $closure0.graphicsDevice = graphicsDevice;
    $closure0.size = (size | 0);
    $closure0.mipMap = mipMap;
    $T05().prototype._ctor.call(this);
    $closure0.$l$g4__this = this;
    if ($closure0.graphicsDevice === null) {
      throw $S00().Construct("graphicsDevice");
    }
    this.GraphicsResource$GraphicsDevice$value = $closure0.graphicsDevice;
    this.TextureCube$Size$value = ($closure0.size | 0);
    this.Texture$LevelCount$value = ((
      $closure0.mipMap
         ? $T05().CalculateMipLevels($closure0.size, 0, 0)
         : 1)
     | 0);
    this.Texture$Format$value = format;
    this.GetGLSurfaceFormat();
    $T08().ForceToMainThread($T09().New($closure0, $T04().prototype.$l_ctor$gb__8, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.TextureCube_$l$gc__DisplayClassa, "$l_ctor$gb__8", JSIL.MethodSignature.Void, false); }));
  };

  function TextureCube_get_Size () {
    return this.TextureCube$Size$value;
  };

  function TextureCube_GetData$b1$00 (T, cubeMapFace, data) {
    $S01().CallVirtual("GetData$b1", [T], this, 
      cubeMapFace, 
      0, 
      null, 
      data, 
      0, 
      data.length
    );
  };

  function TextureCube_GetData$b1$01 (T, cubeMapFace, data, startIndex, elementCount) {
    $S01().CallVirtual("GetData$b1", [T], this, 
      cubeMapFace, 
      0, 
      null, 
      data, 
      startIndex, 
      elementCount
    );
  };

  function TextureCube_GetData$b1$02 (T, cubeMapFace, level, rect, data, startIndex, elementCount) {
    if (!((data !== null) && ((data.length | 0) !== 0))) {
      throw $S02().Construct("data cannot be null");
    }
    if ((data.length | 0) < (((startIndex | 0) + (elementCount | 0)) | 0)) {
      throw $S02().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T0D(), ["The data passed has a length of ", (data.length).toString(), " but ", (elementCount).toString(), " pixels have been requested."])));
    }
    (this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).BindTexture(this.texture);
    if (this.glFormat === $T10().GL_COMPRESSED_TEXTURE_FORMATS) {
      throw $S03().Construct("GetData, CompressedTexture");
    }
    if (rect === null) {
      var ptr = $T12().Alloc(data, $T13().Pinned).MemberwiseClone();
      try {
        this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetTexImage(
          $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T10().GL_TEXTURE_CUBE_MAP_POSITIVE_X + (cubeMapFace.valueOf() | 0)), 
          0, 
          this.glFormat, 
          this.glType, 
          ptr.AddrOfPinnedObject().MemberwiseClone()
        );
      } finally {
        ptr.Free();
      }
    } else {
      var texData = JSIL.Array.New(T, Math.imul(this.TextureCube$Size$value, this.TextureCube$Size$value));
      ptr = $T12().Alloc(texData, $T13().Pinned).MemberwiseClone();
      try {
        this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetTexImage(
          $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T10().GL_TEXTURE_CUBE_MAP_POSITIVE_X + (cubeMapFace.valueOf() | 0)), 
          0, 
          this.glFormat, 
          this.glType, 
          ptr.AddrOfPinnedObject().MemberwiseClone()
        );
      } finally {
        ptr.Free();
      }
      var region = JSIL.Nullable_Value(rect);
      var curPixel = -1;

      for (var row = (region.Y | 0); row < (((region.Y | 0) + (region.Height | 0)) | 0); row = ((row + 1) | 0)) {

        for (var col = (region.X | 0); col < (((region.X | 0) + (region.Width | 0)) | 0); col = ((col + 1) | 0)) {
          curPixel = ((curPixel + 1) | 0);
          if (curPixel >= (startIndex | 0)) {
            if (curPixel > (elementCount | 0)) {
              return;
            }
            data[((curPixel - (startIndex | 0)) | 0)] = JSIL.CloneParameter(T, texData[((Math.imul(row, this.TextureCube$Size$value) + col) | 0)]);
          }
        }
      }
    }
  };

  function TextureCube_set_Size (value) {
    this.TextureCube$Size$value = (value | 0);
  };

  function TextureCube_SetData$b1$03 (T, cubeMapFace, data) {
    $S04().CallVirtual("SetData$b1", [T], this, 
      cubeMapFace, 
      0, 
      null, 
      data, 
      0, 
      data.length
    );
  };

  function TextureCube_SetData$b1$04 (T, cubeMapFace, data, startIndex, elementCount) {
    $S04().CallVirtual("SetData$b1", [T], this, 
      cubeMapFace, 
      0, 
      null, 
      data, 
      startIndex, 
      elementCount
    );
  };

  function TextureCube_SetData$b1$05 (T, cubeMapFace, level, rect, data, startIndex, elementCount) {
    var $closure0 = new ($asm00.Microsoft.Xna.Framework.Graphics.TextureCube_$l$gc__DisplayClassd$b1.Of(T)) ();
    $closure0.cubeMapFace = cubeMapFace;
    $closure0.level = (level | 0);
    $closure0.data = data;
    $closure0.startIndex = (startIndex | 0);
    $closure0.elementCount = (elementCount | 0);
    $closure0.$l$g4__this = this;
    if ($closure0.data === null) {
      throw $S00().Construct("data");
    }
    if (rect !== null) {
      $closure0.xOffset = (JSIL.Nullable_Value(rect).X | 0);
      $closure0.yOffset = (JSIL.Nullable_Value(rect).Y | 0);
      $closure0.width = (JSIL.Nullable_Value(rect).Width | 0);
      $closure0.height = (JSIL.Nullable_Value(rect).Height | 0);
    } else {
      $closure0.xOffset = 0;
      $closure0.yOffset = 0;
      $closure0.width = ($T15().Max(1, (this.TextureCube$Size$value | 0) >> ($closure0.level | 0)) | 0);
      $closure0.height = ($T15().Max(1, (this.TextureCube$Size$value | 0) >> ($closure0.level | 0)) | 0);
    }
    $T08().ForceToMainThread($T09().New($closure0, $asm00.Microsoft.Xna.Framework.Graphics.TextureCube_$l$gc__DisplayClassd$b1.Of(T).prototype.$lSetData$gb__c, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.TextureCube_$l$gc__DisplayClassd$b1.Of(T), "$lSetData$gb__c", JSIL.MethodSignature.Void, false); }));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture"), 
      Name: "Microsoft.Xna.Framework.Graphics.TextureCube", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Int32, 
          $.Boolean, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
        ]), 
      TextureCube__ctor
    );

    $.Method({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32), 
      TextureCube_get_Size
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace"), $jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      TextureCube_GetData$b1$00
    );

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32
        ], ["T"]), 
      TextureCube_GetData$b1$01
    );

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace"), $.Int32, 
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32
        ], ["T"]), 
      TextureCube_GetData$b1$02
    );

    $.Method({Static:false, Public:false}, "set_Size", 
      JSIL.MethodSignature.Action($.Int32), 
      TextureCube_set_Size
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace"), $jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      TextureCube_SetData$b1$03
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32
        ], ["T"]), 
      TextureCube_SetData$b1$04
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace"), $.Int32, 
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32
        ], ["T"]), 
      TextureCube_SetData$b1$05
    );

    $.Field({Static:false, Public:false}, "TextureCube$Size$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Size", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.TextureCube+<>c__DisplayClassa */ 

(function $l$gc__DisplayClassa$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureCube)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };

  function $l$gc__DisplayClassa__ctor () {
  };

  function $l$gc__DisplayClassa_$l_ctor$gb__8 () {
    this.$l$g4__this.texture = (this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).CreateTexture($T03().__Type__, this.$l$g4__this.Texture$Format$value, this.mipMap);
    if (this.$l$g4__this.glFormat === $T05().GL_COMPRESSED_TEXTURE_FORMATS) {

      for (var i = 0; i < 6; i = ((i + 1) | 0)) {

        for (var j = 0; j < (this.$l$g4__this.Texture$LevelCount$value | 0); j = ((j + 1) | 0)) {
          var levelSize = ($T07().Max((this.size | 0) >> j, 1) | 0);
          this.graphicsDevice.GraphicsDevice$GLDevice$value.glCompressedTexImage2D(
            $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T05().GL_TEXTURE_CUBE_MAP_POSITIVE_X + i), 
            j, 
            (this.$l$g4__this.glInternalFormat).valueOf(), 
            levelSize, 
            levelSize, 
            0, 
            Math.imul(Math.imul(((((levelSize + 3) | 0) / 4) | 0), ((((levelSize + 3) | 0) / 4) | 0)), (this.$l$g4__this).GetFormatSize()), 
            $T08().Zero.MemberwiseClone()
          );
        }
      }
    } else {

      for (i = 0; i < 6; i = ((i + 1) | 0)) {

        for (j = 0; j < (this.$l$g4__this.Texture$LevelCount$value | 0); j = ((j + 1) | 0)) {
          levelSize = ($T07().Max((this.size | 0) >> j, 1) | 0);
          this.graphicsDevice.GraphicsDevice$GLDevice$value.glTexImage2D(
            $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T05().GL_TEXTURE_CUBE_MAP_POSITIVE_X + i), 
            j, 
            (this.$l$g4__this.glInternalFormat).valueOf(), 
            levelSize, 
            levelSize, 
            0, 
            this.$l$g4__this.glFormat, 
            this.$l$g4__this.glType, 
            $T08().Zero.MemberwiseClone()
          );
        }
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.TextureCube+<>c__DisplayClassa", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassa__ctor
    );

    $.Method({Static:false, Public:true }, "$l.ctor$gb__8", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassa_$l_ctor$gb__8
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCube")); 
    $.Field({Static:false, Public:true }, "graphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Field({Static:false, Public:true }, "size", $.Int32); 
    $.Field({Static:false, Public:true }, "mipMap", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.TextureCube+<>c__DisplayClassd`1 */ 

(function $l$gc__DisplayClassd$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandleType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int64")]))) ();
  };

  function $l$gc__DisplayClassd$b1__ctor () {
  };

  function $l$gc__DisplayClassd$b1_$lSetData$gb__c () {
    var dataHandle = $T00().Alloc(this.data, $T01().Pinned).MemberwiseClone();
    var elementSizeInBytes = ($S00().CallStatic($T03(), "SizeOf", null, $thisType.T.get(this)) | 0);
    var startByte = Math.imul(this.startIndex, elementSizeInBytes);
    var dataPtr = $S01().CallStatic($T04(), "op_Explicit", null, $T05().op_Addition(
        (dataHandle.AddrOfPinnedObject().MemberwiseClone()).ToInt64(), 
        $T05().FromNumber(startByte)
      )).MemberwiseClone();
    try {
      (this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).BindTexture(this.$l$g4__this.texture);
      if (this.$l$g4__this.glFormat === $T09().GL_COMPRESSED_TEXTURE_FORMATS) {
        if ((this.elementCount | 0) > 0) {
          var dataLength = Math.imul(this.elementCount, elementSizeInBytes);
        } else {
          dataLength = (((this.data.length | 0) - startByte) | 0);
        }
        this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glCompressedTexSubImage2D(
          $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T09().GL_TEXTURE_CUBE_MAP_POSITIVE_X + ((this.cubeMapFace).valueOf() | 0)), 
          this.level, 
          this.xOffset, 
          this.yOffset, 
          this.width, 
          this.height, 
          this.$l$g4__this.glInternalFormat, 
          dataLength, 
          dataPtr.MemberwiseClone()
        );
      } else {
        this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glTexSubImage2D(
          $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T09().GL_TEXTURE_CUBE_MAP_POSITIVE_X + ((this.cubeMapFace).valueOf() | 0)), 
          this.level, 
          this.xOffset, 
          this.yOffset, 
          this.width, 
          this.height, 
          this.$l$g4__this.glFormat, 
          this.$l$g4__this.glType, 
          dataPtr.MemberwiseClone()
        );
      }
    } finally {
      dataHandle.Free();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.TextureCube+<>c__DisplayClassd`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassd$b1__ctor
    );

    $.Method({Static:false, Public:true }, "$lSetData$gb__c", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassd$b1_$lSetData$gb__c
    );

    $.Field({Static:false, Public:true }, "xOffset", $.Int32); 
    $.Field({Static:false, Public:true }, "yOffset", $.Int32); 
    $.Field({Static:false, Public:true }, "width", $.Int32); 
    $.Field({Static:false, Public:true }, "height", $.Int32); 
    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCube")); 
    $.Field({Static:false, Public:true }, "cubeMapFace", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace")); 
    $.Field({Static:false, Public:true }, "level", $.Int32); 
    $.Field({Static:false, Public:true }, "data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "startIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "elementCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.RenderTargetCube */ 

(function RenderTargetCube$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthFormat)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RenderTargetUsage)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RenderTargetCube_$l$gc__DisplayClass11)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureCube)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Threading)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };

  function RenderTargetCube__ctor$00 (graphicsDevice, size, mipMap, preferredFormat, preferredDepthFormat) {
    $thisType.prototype._ctor.call(this, 
      graphicsDevice, 
      size, 
      mipMap, 
      preferredFormat, 
      preferredDepthFormat, 
      0, 
      $T05().DiscardContents
    );
  };

  function RenderTargetCube__ctor$01 (graphicsDevice, size, mipMap, preferredFormat, preferredDepthFormat, preferredMultiSampleCount, usage) {
    var $closure0 = new ($T06())();
    $closure0.graphicsDevice = graphicsDevice;
    $closure0.size = (size | 0);
    $closure0.preferredDepthFormat = preferredDepthFormat;
    $T07().prototype._ctor.call(this, $closure0.graphicsDevice, $closure0.size, mipMap, preferredFormat);
    $closure0.$l$g4__this = this;
    this.set_DepthStencilFormat($closure0.preferredDepthFormat);
    this.RenderTargetCube$MultiSampleCount$value = (preferredMultiSampleCount | 0);
    this.set_RenderTargetUsage(usage);
    if ($closure0.preferredDepthFormat !== $T04().None) {
      $T08().ForceToMainThread($T09().New($closure0, $T06().prototype.$l_ctor$gb__f, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.RenderTargetCube_$l$gc__DisplayClass11, "$l_ctor$gb__f", JSIL.MethodSignature.Void, false); }));
    }
  };

  function RenderTargetCube_$lDispose$gb__13 () {
    if ((this.glDepthStencilBuffer >>> 0) !== 0) {
      $T0B().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.DeleteRenderbuffer(this.glDepthStencilBuffer);
    }
  };

  function RenderTargetCube_add_ContentLost (value) {
    var eventHandler = this.ContentLost;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0D().Combine(eventHandler2, value);
      eventHandler = $T0E().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "ContentLost"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function RenderTargetCube_Dispose$02 (disposing) {
    if (!this.GraphicsResource$IsDisposed$value) {
      $T00().AddDisposeAction($T09().New(this, $thisType.prototype.$lDispose$gb__13, function () { return JSIL.GetMethodInfo($thisType, "$lDispose$gb__13", JSIL.MethodSignature.Void, false); }));
      $T10().prototype.Dispose.call(this, disposing);
    }
  };

  function RenderTargetCube_get_DepthStencilFormat () {
    return this.RenderTargetCube$DepthStencilFormat$value;
  };

  function RenderTargetCube_get_IsContentLost () {
    return false;
  };

  function RenderTargetCube_get_MultiSampleCount () {
    return this.RenderTargetCube$MultiSampleCount$value;
  };

  function RenderTargetCube_get_RenderTargetUsage () {
    return this.RenderTargetCube$RenderTargetUsage$value;
  };

  function RenderTargetCube_Microsoft_Xna_Framework_Graphics_IRenderTarget_get_DepthStencilBuffer () {
    return this.glDepthStencilBuffer;
  };

  function RenderTargetCube_Microsoft_Xna_Framework_Graphics_IRenderTarget_get_Height () {
    return this.TextureCube$Size$value;
  };

  function RenderTargetCube_Microsoft_Xna_Framework_Graphics_IRenderTarget_get_Width () {
    return this.TextureCube$Size$value;
  };

  function RenderTargetCube_remove_ContentLost (value) {
    var eventHandler = this.ContentLost;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0D().Remove(eventHandler2, value);
      eventHandler = $T0E().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "ContentLost"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function RenderTargetCube_set_DepthStencilFormat (value) {
    this.RenderTargetCube$DepthStencilFormat$value = value;
  };

  function RenderTargetCube_set_MultiSampleCount (value) {
    this.RenderTargetCube$MultiSampleCount$value = (value | 0);
  };

  function RenderTargetCube_set_RenderTargetUsage (value) {
    this.RenderTargetCube$RenderTargetUsage$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCube"), 
      Name: "Microsoft.Xna.Framework.Graphics.RenderTargetCube", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Int32, 
          $.Boolean, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")
        ]), 
      RenderTargetCube__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Int32, 
          $.Boolean, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"), $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage")
        ]), 
      RenderTargetCube__ctor$01
    );

    $.Method({Static:false, Public:false}, "$lDispose$gb__13", 
      JSIL.MethodSignature.Void, 
      RenderTargetCube_$lDispose$gb__13
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "add_ContentLost", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      RenderTargetCube_add_ContentLost
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      RenderTargetCube_Dispose$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DepthStencilFormat", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")), 
      RenderTargetCube_get_DepthStencilFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsContentLost", 
      JSIL.MethodSignature.Return($.Boolean), 
      RenderTargetCube_get_IsContentLost
    );

    $.Method({Static:false, Public:true }, "get_MultiSampleCount", 
      JSIL.MethodSignature.Return($.Int32), 
      RenderTargetCube_get_MultiSampleCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_RenderTargetUsage", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage")), 
      RenderTargetCube_get_RenderTargetUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IRenderTarget.get_DepthStencilBuffer", 
      JSIL.MethodSignature.Return($.UInt32), 
      RenderTargetCube_Microsoft_Xna_Framework_Graphics_IRenderTarget_get_DepthStencilBuffer
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IRenderTarget"), "get_DepthStencilBuffer");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IRenderTarget.get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      RenderTargetCube_Microsoft_Xna_Framework_Graphics_IRenderTarget_get_Height
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IRenderTarget"), "get_Height");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IRenderTarget.get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      RenderTargetCube_Microsoft_Xna_Framework_Graphics_IRenderTarget_get_Width
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IRenderTarget"), "get_Width");

    $.Method({Static:false, Public:true }, "remove_ContentLost", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      RenderTargetCube_remove_ContentLost
    );

    $.Method({Static:false, Public:false}, "set_DepthStencilFormat", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")), 
      RenderTargetCube_set_DepthStencilFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_MultiSampleCount", 
      JSIL.MethodSignature.Action($.Int32), 
      RenderTargetCube_set_MultiSampleCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RenderTargetUsage", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage")), 
      RenderTargetCube_set_RenderTargetUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "glDepthStencilBuffer", $.UInt32); 
    $.Field({Static:false, Public:false}, "ContentLost", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "RenderTargetCube$DepthStencilFormat$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RenderTargetCube$MultiSampleCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RenderTargetCube$RenderTargetUsage$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "DepthStencilFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"));

    $.Property({Static:false, Public:true }, "MultiSampleCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "RenderTargetUsage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage"));

    $.Property({Static:false, Public:true }, "IsContentLost", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IRenderTarget.Width", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IRenderTarget.Height", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IRenderTarget.DepthStencilBuffer", $.UInt32);

    $.Event({Static:false, Public:true }, "ContentLost", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IRenderTarget")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.RenderTargetCube+<>c__DisplayClass11 */ 

(function $l$gc__DisplayClass11$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };

  function $l$gc__DisplayClass11__ctor () {
  };

  function $l$gc__DisplayClass11_$l_ctor$gb__f () {
    this.$l$g4__this.glDepthStencilBuffer = ((this.graphicsDevice.GraphicsDevice$GLDevice$value).GenRenderbuffer(this.size, this.size, this.preferredDepthFormat) >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.RenderTargetCube+<>c__DisplayClass11", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass11__ctor
    );

    $.Method({Static:false, Public:true }, "$l.ctor$gb__f", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass11_$l_ctor$gb__f
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetCube")); 
    $.Field({Static:false, Public:true }, "graphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Field({Static:false, Public:true }, "size", $.Int32); 
    $.Field({Static:false, Public:true }, "preferredDepthFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs */ 

(function ResourceCreatedEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function ResourceCreatedEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ResourceCreatedEventArgs_get_Resource () {
    return this.ResourceCreatedEventArgs$Resource$value;
  };

  function ResourceCreatedEventArgs_set_Resource (value) {
    this.ResourceCreatedEventArgs$Resource$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.EventArgs"), 
      Name: "Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ResourceCreatedEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_Resource", 
      JSIL.MethodSignature.Return($.Object), 
      ResourceCreatedEventArgs_get_Resource
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Resource", 
      JSIL.MethodSignature.Action($.Object), 
      ResourceCreatedEventArgs_set_Resource
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ResourceCreatedEventArgs$Resource$value", $.Object)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Resource", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs */ 

(function ResourceDestroyedEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function ResourceDestroyedEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ResourceDestroyedEventArgs_get_Name () {
    return this.ResourceDestroyedEventArgs$Name$value;
  };

  function ResourceDestroyedEventArgs_get_Tag () {
    return this.ResourceDestroyedEventArgs$Tag$value;
  };

  function ResourceDestroyedEventArgs_set_Name (value) {
    this.ResourceDestroyedEventArgs$Name$value = value;
  };

  function ResourceDestroyedEventArgs_set_Tag (value) {
    this.ResourceDestroyedEventArgs$Tag$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.EventArgs"), 
      Name: "Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ResourceDestroyedEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ResourceDestroyedEventArgs_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Object), 
      ResourceDestroyedEventArgs_get_Tag
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      ResourceDestroyedEventArgs_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Tag", 
      JSIL.MethodSignature.Action($.Object), 
      ResourceDestroyedEventArgs_set_Tag
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ResourceDestroyedEventArgs$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ResourceDestroyedEventArgs$Tag$value", $.Object)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Tag", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Audio");
/* class Microsoft.Xna.Framework.Audio.NoAudioHardwareException */ 

(function NoAudioHardwareException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Runtime.InteropServices.ExternalException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")]))) ();
  };

  function NoAudioHardwareException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function NoAudioHardwareException__ctor$01 (message) {
    $T00().prototype._ctor.call(this, message);
  };

  function NoAudioHardwareException__ctor$02 (message, innerException) {
    $S00().Call($T00().prototype, "_ctor", null, this, message, innerException);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Runtime.InteropServices.ExternalException"), 
      Name: "Microsoft.Xna.Framework.Audio.NoAudioHardwareException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NoAudioHardwareException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      NoAudioHardwareException__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")]), 
      NoAudioHardwareException__ctor$02
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ContentExtensions */ 

(function ContentExtensions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.PropertyInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Reflection.BindingFlags)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Reflection.PropertyInfo))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm05.System.Linq.Enumerable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.PropertyInfo))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Predicate$b1.Of($asm01.System.Reflection.PropertyInfo))) ();
  };

  function ContentExtensions_$lGetAllProperties$gb__0 (p) {
    return ($T01().op_Inequality(p.GetGetMethod(true), null) && $T01().op_Equality(
        p.GetGetMethod(true), 
        (p.GetGetMethod(true)).GetBaseDefinition()
      ));
  };

  function ContentExtensions_GetAllFields (type) {
    return type.GetFields($T03().$Flags("DeclaredOnly", "Instance", "NonPublic", "Public"));
  };

  function ContentExtensions_GetAllProperties (type) {
    var allProps = $T05().ToList$b1($T00())($T06().$Cast(type.GetProperties($T03().$Flags("DeclaredOnly", "Instance", "NonPublic", "Public"))));
    return $T04().prototype.ToArray.call($T04().prototype.FindAll.call(allProps, $T07().New($thisType, $thisType.$lGetAllProperties$gb__0, function () { return JSIL.GetMethodInfo($thisType, "$lGetAllProperties$gb__0", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.Reflection.PropertyInfo]), true); })));
  };

  function ContentExtensions_GetDefaultConstructor (type) {
    return type.GetConstructor($T03().$Flags("Instance", "NonPublic", "Public"), null, JSIL.Array.New($T02(), 0), null);
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Content.ContentExtensions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "$lGetAllProperties$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.PropertyInfo")]), 
      ContentExtensions_$lGetAllProperties$gb__0
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "GetAllFields", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.FieldInfo")]), [$asm01.TypeRef("System.Type")]), 
      ContentExtensions_GetAllFields
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetAllProperties", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.PropertyInfo")]), [$asm01.TypeRef("System.Type")]), 
      ContentExtensions_GetAllProperties
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDefaultConstructor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.ConstructorInfo"), [$asm01.TypeRef("System.Type")]), 
      ContentExtensions_GetDefaultConstructor
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate1", $asm01.TypeRef("System.Predicate`1", [$asm01.TypeRef("System.Reflection.PropertyInfo")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* struct Microsoft.Xna.Framework.BoundingBox */ 

(function BoundingBox$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.ContainmentType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingSphere)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingFrustum)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Ray)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Plane)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.PlaneIntersectionType)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm01.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Single")]), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Single")]), [$asm00.TypeRef("Microsoft.Xna.Framework.Ray")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")])]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Vector3).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Vector3).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function BoundingBox__ctor (min, max) {
    this.Min = min.MemberwiseClone();
    this.Max = max.MemberwiseClone();
  };

  function BoundingBox_Contains$00 (/* ref */ box, /* ref */ result) {
    result.set($S01().CallVirtual("Contains", null, this, box.get()));
  };

  function BoundingBox_Contains$01 (/* ref */ sphere, /* ref */ result) {
    result.set($S02().CallVirtual("Contains", null, this, sphere.get()));
  };

  function BoundingBox_Contains$02 ($point) {
    var point = new JSIL.BoxedVariable($point.MemberwiseClone());
    var result = new JSIL.BoxedVariable($asm00.Microsoft.Xna.Framework.ContainmentType.Disjoint);
    $S03().CallVirtual("Contains", null, this, /* ref */ point, /* ref */ result);
    return result.get();
  };

  function BoundingBox_Contains$03 (box) {
    if (!(!((+box.Max.X < +this.Min.X) || 
          (+box.Min.X > +this.Max.X) || 
          (+box.Max.Y < +this.Min.Y) || 
          (+box.Min.Y > +this.Max.Y) || 
          (+box.Max.Z < +this.Min.Z)) && (+box.Min.Z <= +this.Max.Z))) {
      var result = $T01().Disjoint;
    } else if (!((+box.Min.X < +this.Min.X) || 
        (+box.Max.X > +this.Max.X) || 
        (+box.Min.Y < +this.Min.Y) || 
        (+box.Max.Y > +this.Max.Y) || 
        (+box.Min.Z < +this.Min.Z) || (+box.Max.Z > +this.Max.Z))) {
      result = $T01().Contains;
    } else {
      result = $T01().Intersects;
    }
    return result;
  };

  function BoundingBox_Contains$04 (frustum) {
    var contained = new JSIL.BoxedVariable($asm00.Microsoft.Xna.Framework.ContainmentType.Disjoint);
    var corners = frustum.GetCorners();

  $loop0: 
    for (var i = 0; i < (corners.length | 0); i = ((i + 1) | 0)) {
      $S03().CallVirtual("Contains", null, this, /* ref */ new JSIL.ArrayElementReference(corners, i), /* ref */ contained);
      if (contained.get() === $T01().Disjoint) {
        break $loop0;
      }
    }
    if (i === (corners.length | 0)) {
      var result = $T01().Contains;
    } else if (i !== 0) {
      result = $T01().Intersects;
    } else {

      for (i = ((i + 1) | 0); i < (corners.length | 0); i = ((i + 1) | 0)) {
        $S03().CallVirtual("Contains", null, this, /* ref */ new JSIL.ArrayElementReference(corners, i), /* ref */ contained);
        if (contained.get() !== $T01().Contains) {
          result = $T01().Intersects;
          return result;
        }
      }
      result = $T01().Contains;
    }
    return result;
  };

  function BoundingBox_Contains$05 (sphere) {
    if (!(((+sphere.Center.X - +this.Min.X) < +sphere.Radius) || 
        ((+sphere.Center.Y - +this.Min.Y) < +sphere.Radius) || 
        ((+sphere.Center.Z - +this.Min.Z) < +sphere.Radius) || 
        ((+this.Max.X - +sphere.Center.X) < +sphere.Radius) || 
        ((+this.Max.Y - +sphere.Center.Y) < +sphere.Radius) || ((+this.Max.Z - +sphere.Center.Z) < +sphere.Radius))) {
      var result = $T01().Contains;
    } else {
      var dmin = 0;
      var e = +sphere.Center.X - +this.Min.X;
      if (e < 0) {
        if (e < -sphere.Radius) {
          result = $T01().Disjoint;
          return result;
        }
        dmin += e * e;
      } else {
        e = +sphere.Center.X - +this.Max.X;
        if (e > 0) {
          if (e > +sphere.Radius) {
            result = $T01().Disjoint;
            return result;
          }
          dmin += e * e;
        }
      }
      e = +sphere.Center.Y - +this.Min.Y;
      if (e < 0) {
        if (e < -sphere.Radius) {
          result = $T01().Disjoint;
          return result;
        }
        dmin += e * e;
      } else {
        e = +sphere.Center.Y - +this.Max.Y;
        if (e > 0) {
          if (e > +sphere.Radius) {
            result = $T01().Disjoint;
            return result;
          }
          dmin += e * e;
        }
      }
      e = +sphere.Center.Z - +this.Min.Z;
      if (e < 0) {
        if (e < -sphere.Radius) {
          result = $T01().Disjoint;
          return result;
        }
        dmin += e * e;
      } else {
        e = +sphere.Center.Z - +this.Max.Z;
        if (e > 0) {
          if (e > +sphere.Radius) {
            result = $T01().Disjoint;
            return result;
          }
          dmin += e * e;
        }
      }
      if (dmin <= (+sphere.Radius * +sphere.Radius)) {
        result = $T01().Intersects;
      } else {
        result = $T01().Disjoint;
      }
    }
    return result;
  };

  function BoundingBox_Contains$06 (/* ref */ point, /* ref */ result) {
    if (!(!((+point.get().X < +this.Min.X) || 
          (+point.get().X > +this.Max.X) || 
          (+point.get().Y < +this.Min.Y) || 
          (+point.get().Y > +this.Max.Y) || 
          (+point.get().Z < +this.Min.Z)) && (+point.get().Z <= +this.Max.Z))) {
      result.set($T01().Disjoint);
    } else if (!(!($T07().WithinEpsilon(point.get().X, this.Min.X) || 
          $T07().WithinEpsilon(point.get().X, this.Max.X) || 
          $T07().WithinEpsilon(point.get().Y, this.Min.Y) || 
          $T07().WithinEpsilon(point.get().Y, this.Max.Y) || 
          $T07().WithinEpsilon(point.get().Z, this.Min.Z)) && !$T07().WithinEpsilon(point.get().Z, this.Max.Z))) {
      result.set($T01().Intersects);
    } else {
      result.set($T01().Contains);
    }
  };

  function BoundingBox_CreateFromPoints (points) {
    if (points === null) {
      throw $S04().Construct("points");
    }
    var empty = true;
    var minVec = $thisType.MaxVector3.MemberwiseClone();
    var maxVec = $thisType.MinVector3.MemberwiseClone();
    var enumerator = $IM00().Call(points, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var ptVector = $IM02().Call(enumerator, null).MemberwiseClone();
        minVec.X = +(
          (+minVec.X < +ptVector.X)
             ? minVec.X
             : ptVector.X)
        ;
        minVec.Y = +(
          (+minVec.Y < +ptVector.Y)
             ? minVec.Y
             : ptVector.Y)
        ;
        minVec.Z = +(
          (+minVec.Z < +ptVector.Z)
             ? minVec.Z
             : ptVector.Z)
        ;
        maxVec.X = +(
          (+maxVec.X > +ptVector.X)
             ? maxVec.X
             : ptVector.X)
        ;
        maxVec.Y = +(
          (+maxVec.Y > +ptVector.Y)
             ? maxVec.Y
             : ptVector.Y)
        ;
        maxVec.Z = +(
          (+maxVec.Z > +ptVector.Z)
             ? maxVec.Z
             : ptVector.Z)
        ;
        empty = false;
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    if (empty) {
      throw $S05().Construct("Collection is empty", "points");
    }
    return new $thisType(minVec.MemberwiseClone(), maxVec.MemberwiseClone());
  };

  function BoundingBox_CreateFromSphere$07 ($sphere) {
    var sphere = new JSIL.BoxedVariable($sphere.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateFromSphere(/* ref */ sphere, /* ref */ result);
    return result.get();
  };

  function BoundingBox_CreateFromSphere$08 (/* ref */ sphere, /* ref */ result) {
    var corner = $S00().Construct(sphere.get().Radius);
    result.get().Min = $T00().op_Subtraction(sphere.get().Center.MemberwiseClone(), corner);
    result.get().Max = $T00().op_Addition(sphere.get().Center.MemberwiseClone(), corner);
  };

  function BoundingBox_CreateMerged$09 ($original, $additional) {
    var additional = new JSIL.BoxedVariable($additional.MemberwiseClone());
    var original = new JSIL.BoxedVariable($original.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateMerged(/* ref */ original, /* ref */ additional, /* ref */ result);
    return result.get();
  };

  function BoundingBox_CreateMerged$0A (/* ref */ original, /* ref */ additional, /* ref */ result) {
    result.get().Min.X = +$T0F().Min(original.get().Min.X, additional.get().Min.X);
    result.get().Min.Y = +$T0F().Min(original.get().Min.Y, additional.get().Min.Y);
    result.get().Min.Z = +$T0F().Min(original.get().Min.Z, additional.get().Min.Z);
    result.get().Max.X = +$T0F().Max(original.get().Max.X, additional.get().Max.X);
    result.get().Max.Y = +$T0F().Max(original.get().Max.Y, additional.get().Max.Y);
    result.get().Max.Z = +$T0F().Max(original.get().Max.Z, additional.get().Max.Z);
  };

  function BoundingBox_Equals$0B (other) {
    return ($T00().op_Equality(this.Min.MemberwiseClone(), other.Min.MemberwiseClone()) && $T00().op_Equality(this.Max.MemberwiseClone(), other.Max.MemberwiseClone()));
  };

  function BoundingBox_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function BoundingBox_get_DebugDisplayString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T11(), ["Min( ", (this.Min).get_DebugDisplayString(), " ) \r\n", "Max( ", (this.Max).get_DebugDisplayString(), " )"]));
  };

  function BoundingBox_GetCorners$0C () {
    return JSIL.Array.New($T00(), [$S06().Construct(this.Min.X, this.Max.Y, this.Max.Z), $S06().Construct(this.Max.X, this.Max.Y, this.Max.Z), $S06().Construct(this.Max.X, this.Min.Y, this.Max.Z), $S06().Construct(this.Min.X, this.Min.Y, this.Max.Z), $S06().Construct(this.Min.X, this.Max.Y, this.Min.Z), $S06().Construct(this.Max.X, this.Max.Y, this.Min.Z), $S06().Construct(this.Max.X, this.Min.Y, this.Min.Z), $S06().Construct(this.Min.X, this.Min.Y, this.Min.Z)]);
  };

  function BoundingBox_GetCorners$0D (corners) {
    if (corners === null) {
      throw $S04().Construct("corners");
    }
    if ((corners.length | 0) < 8) {
      throw $S07().Construct("corners", "Not Enought Corners");
    }
    corners[0].X = +this.Min.X;
    corners[0].Y = +this.Max.Y;
    corners[0].Z = +this.Max.Z;
    corners[1].X = +this.Max.X;
    corners[1].Y = +this.Max.Y;
    corners[1].Z = +this.Max.Z;
    corners[2].X = +this.Max.X;
    corners[2].Y = +this.Min.Y;
    corners[2].Z = +this.Max.Z;
    corners[3].X = +this.Min.X;
    corners[3].Y = +this.Min.Y;
    corners[3].Z = +this.Max.Z;
    corners[4].X = +this.Min.X;
    corners[4].Y = +this.Max.Y;
    corners[4].Z = +this.Min.Z;
    corners[5].X = +this.Max.X;
    corners[5].Y = +this.Max.Y;
    corners[5].Z = +this.Min.Z;
    corners[6].X = +this.Max.X;
    corners[6].Y = +this.Min.Y;
    corners[6].Z = +this.Min.Z;
    corners[7].X = +this.Min.X;
    corners[7].Y = +this.Min.Y;
    corners[7].Z = +this.Min.Z;
  };

  function BoundingBox_GetHashCode () {
    return ((((this.Min).GetHashCode() | 0) + ((this.Max).GetHashCode() | 0)) | 0);
  };

  function BoundingBox_Intersects$0E (ray) {
    return $S08().CallVirtual("Intersects", null, ray, this);
  };

  function BoundingBox_Intersects$0F (/* ref */ ray, /* ref */ result) {
    result.set($S09().CallVirtual("Intersects", null, this, ray.get().MemberwiseClone()));
  };

  function BoundingBox_Intersects$10 (frustum) {
    return $S0A().CallVirtual("Intersects", null, frustum, this);
  };

  function BoundingBox_Intersects$11 (/* ref */ sphere, /* ref */ result) {
    result.set($S0B().CallVirtual("Intersects", null, this, sphere.get()));
  };

  function BoundingBox_Intersects$12 ($box) {
    var box = new JSIL.BoxedVariable($box.MemberwiseClone());
    var result = new JSIL.BoxedVariable(false);
    $S0C().CallVirtual("Intersects", null, this, /* ref */ box, /* ref */ result);
    return result.get();
  };

  function BoundingBox_Intersects$13 ($plane) {
    var plane = new JSIL.BoxedVariable($plane.MemberwiseClone());
    var result = new JSIL.BoxedVariable($asm00.Microsoft.Xna.Framework.PlaneIntersectionType.Front);
    $S0D().CallVirtual("Intersects", null, this, /* ref */ plane, /* ref */ result);
    return result.get();
  };

  function BoundingBox_Intersects$14 (/* ref */ box, /* ref */ result) {
    if (!((+this.Max.X < +box.get().Min.X) || (+this.Min.X > +box.get().Max.X))) {
      if (!((+this.Max.Y >= +box.get().Min.Y) && (+this.Min.Y <= +box.get().Max.Y))) {
        result.set(false);
      } else {
        result.set((+this.Max.Z >= +box.get().Min.Z) && 
          (+this.Min.Z <= +box.get().Max.Z));
      }
    } else {
      result.set(false);
    }
  };

  function BoundingBox_Intersects$15 (sphere) {
    if (!(((+sphere.Center.X - +this.Min.X) <= +sphere.Radius) || 
        ((+sphere.Center.Y - +this.Min.Y) <= +sphere.Radius) || 
        ((+sphere.Center.Z - +this.Min.Z) <= +sphere.Radius) || 
        ((+this.Max.X - +sphere.Center.X) <= +sphere.Radius) || 
        ((+this.Max.Y - +sphere.Center.Y) <= +sphere.Radius) || ((+this.Max.Z - +sphere.Center.Z) <= +sphere.Radius))) {
      var result = true;
    } else {
      var dmin = 0;
      if ((+sphere.Center.X - +this.Min.X) <= +sphere.Radius) {
        dmin += (+sphere.Center.X - +this.Min.X) * (+sphere.Center.X - +this.Min.X);
      } else if ((+this.Max.X - +sphere.Center.X) <= +sphere.Radius) {
        dmin += (+sphere.Center.X - +this.Max.X) * (+sphere.Center.X - +this.Max.X);
      }
      if ((+sphere.Center.Y - +this.Min.Y) <= +sphere.Radius) {
        dmin += (+sphere.Center.Y - +this.Min.Y) * (+sphere.Center.Y - +this.Min.Y);
      } else if ((+this.Max.Y - +sphere.Center.Y) <= +sphere.Radius) {
        dmin += (+sphere.Center.Y - +this.Max.Y) * (+sphere.Center.Y - +this.Max.Y);
      }
      if ((+sphere.Center.Z - +this.Min.Z) <= +sphere.Radius) {
        dmin += (+sphere.Center.Z - +this.Min.Z) * (+sphere.Center.Z - +this.Min.Z);
      } else if ((+this.Max.Z - +sphere.Center.Z) <= +sphere.Radius) {
        dmin += (+sphere.Center.Z - +this.Max.Z) * (+sphere.Center.Z - +this.Max.Z);
      }
      result = dmin <= (+sphere.Radius * +sphere.Radius);
    }
    return result;
  };

  function BoundingBox_Intersects$16 (/* ref */ plane, /* ref */ result) {
    var positiveVertex = new ($T00())(), negativeVertex = new ($T00())();
    if (+plane.get().Normal.X >= 0) {
      positiveVertex.X = +this.Max.X;
      negativeVertex.X = +this.Min.X;
    } else {
      positiveVertex.X = +this.Min.X;
      negativeVertex.X = +this.Max.X;
    }
    if (+plane.get().Normal.Y >= 0) {
      positiveVertex.Y = +this.Max.Y;
      negativeVertex.Y = +this.Min.Y;
    } else {
      positiveVertex.Y = +this.Min.Y;
      negativeVertex.Y = +this.Max.Y;
    }
    if (+plane.get().Normal.Z >= 0) {
      positiveVertex.Z = +this.Max.Z;
      negativeVertex.Z = +this.Min.Z;
    } else {
      positiveVertex.Z = +this.Min.Z;
      negativeVertex.Z = +this.Max.Z;
    }
    var distance = +$T00().Dot(plane.get().Normal, negativeVertex) + +plane.get().D;
    if (distance > 0) {
      result.set($T16().Front);
    } else {
      distance = +$T00().Dot(plane.get().Normal, positiveVertex) + +plane.get().D;
      if (distance < 0) {
        result.set($T16().Back);
      } else {
        result.set($T16().Intersecting);
      }
    }
  };

  function BoundingBox_op_Equality (a, b) {
    return a.Equals(b.MemberwiseClone());
  };

  function BoundingBox_op_Inequality (a, b) {
    return !a.Equals(b.MemberwiseClone());
  };

  function BoundingBox_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T11(), ["{{Min:", (this.Min).toString(), " Max:", (this.Max).toString(), "}}"]));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.BoundingBox", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      BoundingBox__ctor
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]), 
      BoundingBox_Contains$00
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]), 
      BoundingBox_Contains$01
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      BoundingBox_Contains$02
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$.Type]), 
      BoundingBox_Contains$03
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")]), 
      BoundingBox_Contains$04
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), 
      BoundingBox_Contains$05
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]), 
      BoundingBox_Contains$06
    );

    $.Method({Static:true , Public:true }, "CreateFromPoints", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])]), 
      BoundingBox_CreateFromPoints
    );

    $.Method({Static:true , Public:true }, "CreateFromSphere", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), 
      BoundingBox_CreateFromSphere$07
    );

    $.Method({Static:true , Public:true }, "CreateFromSphere", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      BoundingBox_CreateFromSphere$08
    );

    $.Method({Static:true , Public:true }, "CreateMerged", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      BoundingBox_CreateMerged$09
    );

    $.Method({Static:true , Public:true }, "CreateMerged", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      BoundingBox_CreateMerged$0A
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      BoundingBox_Equals$0B
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      BoundingBox_Object_Equals
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      BoundingBox_get_DebugDisplayString
    );

    $.Method({Static:false, Public:true }, "GetCorners", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])), 
      BoundingBox_GetCorners$0C
    );

    $.Method({Static:false, Public:true }, "GetCorners", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])), 
      BoundingBox_GetCorners$0D
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      BoundingBox_GetHashCode
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("Microsoft.Xna.Framework.Ray")]), 
      BoundingBox_Intersects$0E
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Ray")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Nullable`1", [$.Single])])]), 
      BoundingBox_Intersects$0F
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")]), 
      BoundingBox_Intersects$10
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      BoundingBox_Intersects$11
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      BoundingBox_Intersects$12
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), 
      BoundingBox_Intersects$13
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      BoundingBox_Intersects$14
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), 
      BoundingBox_Intersects$15
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])]), 
      BoundingBox_Intersects$16
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      BoundingBox_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      BoundingBox_op_Inequality
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      BoundingBox_toString
    );

    $.Constant({Static:true , Public:true }, "CornerCount", 8); 
    $.Field({Static:false, Public:true }, "Min", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:true }, "Max", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxVector3", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MinVector3", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    function BoundingBox__cctor () {
      $thisType.MaxVector3 = new $asm00.Microsoft.Xna.Framework.Vector3();
      $thisType.MinVector3 = new $asm00.Microsoft.Xna.Framework.Vector3();
      $thisType.MaxVector3 = $S00().Construct(3.40282347E+38);
      $thisType.MinVector3 = $S00().Construct(-3.40282347E+38);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BoundingBox__cctor
    );

    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; });

})();

/* class Microsoft.Xna.Framework.BoundingFrustum */ 

(function BoundingFrustum$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Plane)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.ContainmentType)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingBox)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.PlaneIntersectionType)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingSphere)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Plane"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $asm01.TypeRef("System.Single"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")])]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")])]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.String")]))) ();
  };

  function BoundingFrustum__ctor (value) {
    this.corners = JSIL.Array.New($T01(), 8);
    this.planes = JSIL.Array.New($T02(), 6);
    this.matrix = value.MemberwiseClone();
    this.CreatePlanes();
    this.CreateCorners();
  };

  function BoundingFrustum_Contains$00 (frustum) {
    if ($thisType.op_Equality(this, frustum)) {
      var result = $T03().Contains;
    } else {
      var containsAll = true;
      var containsOne = false;
      var array = frustum.corners;

      for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
        var corner = array[i].MemberwiseClone();
        var cornerResult = $S00().CallVirtual("Contains", null, this, corner.MemberwiseClone());
        if (!((cornerResult !== $T03().Contains) && (cornerResult !== $T03().Intersects))) {
          containsOne = true;
        } else if (cornerResult === $T03().Disjoint) {
          containsAll = false;
        }
      }
      if (containsAll) {
        result = $T03().Contains;
      } else if (containsOne) {
        result = $T03().Intersects;
      } else {
        result = $T03().Disjoint;
      }
    }
    return result;
  };

  function BoundingFrustum_Contains$01 ($box) {
    var box = new JSIL.BoxedVariable($box.MemberwiseClone());
    var result = new JSIL.BoxedVariable($T03().Disjoint);
    $S01().CallVirtual("Contains", null, this, /* ref */ box, /* ref */ result);
    return result.get();
  };

  function BoundingFrustum_Contains$02 (/* ref */ box, /* ref */ result) {
    var $temp00;
    $temp00 = new JSIL.ArrayElementReference(null, -1);
    var intersects = false;
    var i = 0;
    var planeIntersectionType = new JSIL.BoxedVariable($asm00.Microsoft.Xna.Framework.PlaneIntersectionType.Front);

    while (i < 6) {
      planeIntersectionType.set($T08().Front);
      $S02().CallVirtual("Intersects", null, box.get(), /* ref */ $temp00.retarget(this.planes, i), /* ref */ planeIntersectionType);
      switch ((planeIntersectionType.get()).valueOf()) {
        case 0: 
          result.set($T03().Disjoint);
          return;

        case 2: 
          intersects = true;
          break;

      }
      i = ((i + 1) | 0);
    }
    result.set((
        intersects
           ? $T03().Intersects
           : $T03().Contains)
    );
  };

  function BoundingFrustum_Contains$03 ($sphere) {
    var sphere = new JSIL.BoxedVariable($sphere.MemberwiseClone());
    var result = new JSIL.BoxedVariable($T03().Disjoint);
    $S03().CallVirtual("Contains", null, this, /* ref */ sphere, /* ref */ result);
    return result.get();
  };

  function BoundingFrustum_Contains$04 (/* ref */ sphere, /* ref */ result) {
    var $temp00;
    $temp00 = new JSIL.ArrayElementReference(null, -1);
    var intersects = false;
    var i = 0;
    var planeIntersectionType = new JSIL.BoxedVariable($asm00.Microsoft.Xna.Framework.PlaneIntersectionType.Front);

    while (i < 6) {
      planeIntersectionType.set($T08().Front);
      $S04().CallVirtual("Intersects", null, sphere.get(), /* ref */ $temp00.retarget(this.planes, i), /* ref */ planeIntersectionType);
      switch ((planeIntersectionType.get()).valueOf()) {
        case 0: 
          result.set($T03().Disjoint);
          return;

        case 2: 
          intersects = true;
          break;

      }
      i = ((i + 1) | 0);
    }
    result.set((
        intersects
           ? $T03().Intersects
           : $T03().Contains)
    );
  };

  function BoundingFrustum_Contains$05 ($point) {
    var point = new JSIL.BoxedVariable($point);
    var result = new JSIL.BoxedVariable($T03().Disjoint);
    $S05().CallVirtual("Contains", null, this, /* ref */ point, /* ref */ result);
    return result.get();
  };

  function BoundingFrustum_Contains$06 (/* ref */ point, /* ref */ result) {
    var intersects = false;

  $loop0: 
    for (var i = 0; i < 6; i = ((i + 1) | 0)) {
      var classifyPoint = (((+point.get().X * +this.planes[i].Normal.X) + (+point.get().Y * +this.planes[i].Normal.Y)) + (+point.get().Z * +this.planes[i].Normal.Z)) + +this.planes[i].D;
      if (classifyPoint > 0) {
        result.set($T03().Disjoint);
        return;
      }
      if (classifyPoint === 0) {
        intersects = true;
        break $loop0;
      }
    }
    result.set((
        intersects
           ? $T03().Intersects
           : $T03().Contains)
    );
  };

  function BoundingFrustum_CreateCorners () {
    $thisType.IntersectionPoint(/* ref */ new JSIL.ArrayElementReference(this.planes, 0), /* ref */ new JSIL.ArrayElementReference(this.planes, 2), /* ref */ new JSIL.ArrayElementReference(this.planes, 4), /* ref */ new JSIL.ArrayElementReference(this.corners, 0));
    $thisType.IntersectionPoint(/* ref */ new JSIL.ArrayElementReference(this.planes, 0), /* ref */ new JSIL.ArrayElementReference(this.planes, 3), /* ref */ new JSIL.ArrayElementReference(this.planes, 4), /* ref */ new JSIL.ArrayElementReference(this.corners, 1));
    $thisType.IntersectionPoint(/* ref */ new JSIL.ArrayElementReference(this.planes, 0), /* ref */ new JSIL.ArrayElementReference(this.planes, 3), /* ref */ new JSIL.ArrayElementReference(this.planes, 5), /* ref */ new JSIL.ArrayElementReference(this.corners, 2));
    $thisType.IntersectionPoint(/* ref */ new JSIL.ArrayElementReference(this.planes, 0), /* ref */ new JSIL.ArrayElementReference(this.planes, 2), /* ref */ new JSIL.ArrayElementReference(this.planes, 5), /* ref */ new JSIL.ArrayElementReference(this.corners, 3));
    $thisType.IntersectionPoint(/* ref */ new JSIL.ArrayElementReference(this.planes, 1), /* ref */ new JSIL.ArrayElementReference(this.planes, 2), /* ref */ new JSIL.ArrayElementReference(this.planes, 4), /* ref */ new JSIL.ArrayElementReference(this.corners, 4));
    $thisType.IntersectionPoint(/* ref */ new JSIL.ArrayElementReference(this.planes, 1), /* ref */ new JSIL.ArrayElementReference(this.planes, 3), /* ref */ new JSIL.ArrayElementReference(this.planes, 4), /* ref */ new JSIL.ArrayElementReference(this.corners, 5));
    $thisType.IntersectionPoint(/* ref */ new JSIL.ArrayElementReference(this.planes, 1), /* ref */ new JSIL.ArrayElementReference(this.planes, 3), /* ref */ new JSIL.ArrayElementReference(this.planes, 5), /* ref */ new JSIL.ArrayElementReference(this.corners, 6));
    $thisType.IntersectionPoint(/* ref */ new JSIL.ArrayElementReference(this.planes, 1), /* ref */ new JSIL.ArrayElementReference(this.planes, 2), /* ref */ new JSIL.ArrayElementReference(this.planes, 5), /* ref */ new JSIL.ArrayElementReference(this.corners, 7));
  };

  function BoundingFrustum_CreatePlanes () {
    this.planes[0] = $S06().Construct(-this.matrix.M13, -this.matrix.M23, -this.matrix.M33, -this.matrix.M43);
    this.planes[1] = $S06().Construct((+this.matrix.M13 - +this.matrix.M14), (+this.matrix.M23 - +this.matrix.M24), (+this.matrix.M33 - +this.matrix.M34), (+this.matrix.M43 - +this.matrix.M44));
    this.planes[2] = $S06().Construct((-this.matrix.M14 - +this.matrix.M11), (-this.matrix.M24 - +this.matrix.M21), (-this.matrix.M34 - +this.matrix.M31), (-this.matrix.M44 - +this.matrix.M41));
    this.planes[3] = $S06().Construct((+this.matrix.M11 - +this.matrix.M14), (+this.matrix.M21 - +this.matrix.M24), (+this.matrix.M31 - +this.matrix.M34), (+this.matrix.M41 - +this.matrix.M44));
    this.planes[4] = $S06().Construct((+this.matrix.M12 - +this.matrix.M14), (+this.matrix.M22 - +this.matrix.M24), (+this.matrix.M32 - +this.matrix.M34), (+this.matrix.M42 - +this.matrix.M44));
    this.planes[5] = $S06().Construct((-this.matrix.M14 - +this.matrix.M12), (-this.matrix.M24 - +this.matrix.M22), (-this.matrix.M34 - +this.matrix.M32), (-this.matrix.M44 - +this.matrix.M42));
    this.NormalizePlane(/* ref */ new JSIL.ArrayElementReference(this.planes, 0));
    this.NormalizePlane(/* ref */ new JSIL.ArrayElementReference(this.planes, 1));
    this.NormalizePlane(/* ref */ new JSIL.ArrayElementReference(this.planes, 2));
    this.NormalizePlane(/* ref */ new JSIL.ArrayElementReference(this.planes, 3));
    this.NormalizePlane(/* ref */ new JSIL.ArrayElementReference(this.planes, 4));
    this.NormalizePlane(/* ref */ new JSIL.ArrayElementReference(this.planes, 5));
  };

  function BoundingFrustum_Equals$07 (other) {
    return $thisType.op_Equality(this, other);
  };

  function BoundingFrustum_Object_Equals (obj) {
    var f = $thisType.$As(obj);
    return (!(JSIL.ObjectEquals(f, null)) && $thisType.op_Equality(this, f));
  };

  function BoundingFrustum_get_Bottom () {
    return this.planes[5];
  };

  function BoundingFrustum_get_DebugDisplayString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T0C(), ["Near( ", (this.planes[0]).get_DebugDisplayString(), " ) \r\n", "Far( ", (this.planes[1]).get_DebugDisplayString(), " ) \r\n", "Left( ", (this.planes[2]).get_DebugDisplayString(), " ) \r\n", "Right( ", (this.planes[3]).get_DebugDisplayString(), " ) \r\n", "Top( ", (this.planes[4]).get_DebugDisplayString(), " ) \r\n", "Bottom( ", (this.planes[5]).get_DebugDisplayString(), " ) "]));
  };

  function BoundingFrustum_get_Far () {
    return this.planes[1];
  };

  function BoundingFrustum_get_Left () {
    return this.planes[2];
  };

  function BoundingFrustum_get_Matrix () {
    return this.matrix;
  };

  function BoundingFrustum_get_Near () {
    return this.planes[0];
  };

  function BoundingFrustum_get_Right () {
    return this.planes[3];
  };

  function BoundingFrustum_get_Top () {
    return this.planes[4];
  };

  function BoundingFrustum_GetCorners$08 () {
    return $T05().$Cast(JSIL.Array.Clone(this.corners));
  };

  function BoundingFrustum_GetCorners$09 (corners) {
    if (corners === null) {
      throw $S07().Construct("corners");
    }
    if ((corners.length | 0) < 8) {
      throw $S08().Construct("corners");
    }
    JSIL.Array.CopyTo(this.corners, corners, 0);
  };

  function BoundingFrustum_GetHashCode () {
    return (this.matrix).GetHashCode();
  };

  function BoundingFrustum_IntersectionPoint (/* ref */ a, /* ref */ b, /* ref */ c, /* ref */ result) {
    var cross = new JSIL.BoxedVariable(new ($T01())());
    var f = new JSIL.BoxedVariable(0);
    var v = new JSIL.BoxedVariable(new ($T01())());
    var v2 = new JSIL.BoxedVariable(new ($T01())());
    var v3 = new JSIL.BoxedVariable(new ($T01())());
    $T01().Cross(/* ref */ new JSIL.MemberReference(b, "Normal"), /* ref */ new JSIL.MemberReference(c, "Normal"), /* ref */ cross);
    $T01().Dot(/* ref */ new JSIL.MemberReference(a, "Normal"), /* ref */ cross, /* ref */ f);
    f.set(+f.get() * -1);
    $T01().Cross(/* ref */ new JSIL.MemberReference(b, "Normal"), /* ref */ new JSIL.MemberReference(c, "Normal"), /* ref */ cross);
    $S09().CallStatic($T01(), "Multiply", null, /* ref */ cross, a.get().D, /* ref */ v);
    $T01().Cross(/* ref */ new JSIL.MemberReference(c, "Normal"), /* ref */ new JSIL.MemberReference(a, "Normal"), /* ref */ cross);
    $S09().CallStatic($T01(), "Multiply", null, /* ref */ cross, b.get().D, /* ref */ v2);
    $T01().Cross(/* ref */ new JSIL.MemberReference(a, "Normal"), /* ref */ new JSIL.MemberReference(b, "Normal"), /* ref */ cross);
    $S09().CallStatic($T01(), "Multiply", null, /* ref */ cross, c.get().D, /* ref */ v3);
    result.get().X = +((((+v.get().X + +v2.get().X) + +v3.get().X) / +f.get()));
    result.get().Y = +((((+v.get().Y + +v2.get().Y) + +v3.get().Y) / +f.get()));
    result.get().Z = +((((+v.get().Z + +v2.get().Z) + +v3.get().Z) / +f.get()));
  };

  function BoundingFrustum_Intersects$0A (frustum) {
    return ($S0A().CallVirtual("Contains", null, this, frustum) !== $T03().Disjoint);
  };

  function BoundingFrustum_Intersects$0B ($box) {
    var box = new JSIL.BoxedVariable($box.MemberwiseClone());
    var result = new JSIL.BoxedVariable(false);
    $S0B().CallVirtual("Intersects", null, this, /* ref */ box, /* ref */ result);
    return result.get();
  };

  function BoundingFrustum_Intersects$0C (/* ref */ box, /* ref */ result) {
    var containment = new JSIL.BoxedVariable($T03().Disjoint);
    $S01().CallVirtual("Contains", null, this, /* ref */ box, /* ref */ containment);
    result.set(containment.get() !== $T03().Disjoint);
  };

  function BoundingFrustum_Intersects$0D ($sphere) {
    var sphere = new JSIL.BoxedVariable($sphere.MemberwiseClone());
    var result = new JSIL.BoxedVariable(false);
    $S0C().CallVirtual("Intersects", null, this, /* ref */ sphere, /* ref */ result);
    return result.get();
  };

  function BoundingFrustum_Intersects$0E (/* ref */ sphere, /* ref */ result) {
    var containment = new JSIL.BoxedVariable($T03().Disjoint);
    $S03().CallVirtual("Contains", null, this, /* ref */ sphere, /* ref */ containment);
    result.set(containment.get() !== $T03().Disjoint);
  };

  function BoundingFrustum_NormalizePlane (/* ref */ p) {
    var factor = +((1 / +(p.get().Normal).Length()));
    p.get().Normal.X *= factor;
    p.get().Normal.Y *= factor;
    p.get().Normal.Z *= factor;
    p.get().D *= factor;
  };

  function BoundingFrustum_op_Equality (a, b) {
    if (JSIL.ObjectEquals(a, null)) {
      var result = (JSIL.ObjectEquals(b, null));
    } else if (JSIL.ObjectEquals(b, null)) {
      result = (JSIL.ObjectEquals(a, null));
    } else {
      result = $T00().op_Equality(a.matrix.MemberwiseClone(), b.matrix.MemberwiseClone());
    }
    return result;
  };

  function BoundingFrustum_op_Inequality (a, b) {
    return !$thisType.op_Equality(a, b);
  };

  function BoundingFrustum_set_Matrix (value) {
    this.matrix = value.MemberwiseClone();
    this.CreatePlanes();
    this.CreateCorners();
  };

  function BoundingFrustum_toString () {
    var sb = $S0D().Construct(256);
    $S0E().CallVirtual("Append", null, sb, "{Near:");
    $S0E().CallVirtual("Append", null, sb, (this.planes[0].MemberwiseClone()).toString());
    $S0E().CallVirtual("Append", null, sb, " Far:");
    $S0E().CallVirtual("Append", null, sb, (this.planes[1].MemberwiseClone()).toString());
    $S0E().CallVirtual("Append", null, sb, " Left:");
    $S0E().CallVirtual("Append", null, sb, (this.planes[2].MemberwiseClone()).toString());
    $S0E().CallVirtual("Append", null, sb, " Right:");
    $S0E().CallVirtual("Append", null, sb, (this.planes[3].MemberwiseClone()).toString());
    $S0E().CallVirtual("Append", null, sb, " Top:");
    $S0E().CallVirtual("Append", null, sb, (this.planes[4].MemberwiseClone()).toString());
    $S0E().CallVirtual("Append", null, sb, " Bottom:");
    $S0E().CallVirtual("Append", null, sb, (this.planes[5].MemberwiseClone()).toString());
    $S0E().CallVirtual("Append", null, sb, "}");
    return sb.toString();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.BoundingFrustum", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      BoundingFrustum__ctor
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$.Type]), 
      BoundingFrustum_Contains$00
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), 
      BoundingFrustum_Contains$01
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]), 
      BoundingFrustum_Contains$02
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), 
      BoundingFrustum_Contains$03
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]), 
      BoundingFrustum_Contains$04
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      BoundingFrustum_Contains$05
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]), 
      BoundingFrustum_Contains$06
    );

    $.Method({Static:false, Public:false}, "CreateCorners", 
      JSIL.MethodSignature.Void, 
      BoundingFrustum_CreateCorners
    );

    $.Method({Static:false, Public:false}, "CreatePlanes", 
      JSIL.MethodSignature.Void, 
      BoundingFrustum_CreatePlanes
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      BoundingFrustum_Equals$07
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      BoundingFrustum_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Bottom", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Plane")), 
      BoundingFrustum_get_Bottom
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      BoundingFrustum_get_DebugDisplayString
    );

    $.Method({Static:false, Public:true }, "get_Far", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Plane")), 
      BoundingFrustum_get_Far
    );

    $.Method({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Plane")), 
      BoundingFrustum_get_Left
    );

    $.Method({Static:false, Public:true }, "get_Matrix", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      BoundingFrustum_get_Matrix
    );

    $.Method({Static:false, Public:true }, "get_Near", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Plane")), 
      BoundingFrustum_get_Near
    );

    $.Method({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Plane")), 
      BoundingFrustum_get_Right
    );

    $.Method({Static:false, Public:true }, "get_Top", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Plane")), 
      BoundingFrustum_get_Top
    );

    $.Method({Static:false, Public:true }, "GetCorners", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])), 
      BoundingFrustum_GetCorners$08
    );

    $.Method({Static:false, Public:true }, "GetCorners", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])), 
      BoundingFrustum_GetCorners$09
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      BoundingFrustum_GetHashCode
    );

    $.Method({Static:true , Public:false}, "IntersectionPoint", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])
        ]), 
      BoundingFrustum_IntersectionPoint
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      BoundingFrustum_Intersects$0A
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), 
      BoundingFrustum_Intersects$0B
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      BoundingFrustum_Intersects$0C
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), 
      BoundingFrustum_Intersects$0D
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      BoundingFrustum_Intersects$0E
    );

    $.Method({Static:false, Public:false}, "NormalizePlane", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")])), 
      BoundingFrustum_NormalizePlane
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      BoundingFrustum_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      BoundingFrustum_op_Inequality
    );

    $.Method({Static:false, Public:true }, "set_Matrix", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      BoundingFrustum_set_Matrix
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      BoundingFrustum_toString
    );

    $.Constant({Static:true , Public:true }, "CornerCount", 8); 
    $.Constant({Static:true , Public:false}, "PlaneCount", 6); 
    $.Field({Static:false, Public:false}, "matrix", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "corners", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "planes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")])); 
    $.Property({Static:false, Public:true }, "Matrix", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true }, "Near", $asm00.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:true }, "Far", $asm00.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:true }, "Left", $asm00.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:true }, "Right", $asm00.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:true }, "Top", $asm00.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:true }, "Bottom", $asm00.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; });

})();

/* struct Microsoft.Xna.Framework.BoundingSphere */ 

(function BoundingSphere$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingBox)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.ContainmentType)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingFrustum)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Ray)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Plane)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.PlaneIntersectionType)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm01.TypeRef("System.Single"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")])]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Single")])])]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Single")]), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Boolean")])]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Vector3).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Vector3).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function BoundingSphere__ctor (center, radius) {
    this.Center = center.MemberwiseClone();
    this.Radius = +radius;
  };

  function BoundingSphere_Contains$00 (/* ref */ box, /* ref */ result) {
    result.set($S00().CallVirtual("Contains", null, this, box.get().MemberwiseClone()));
  };

  function BoundingSphere_Contains$01 (/* ref */ sphere, /* ref */ result) {
    result.set($S01().CallVirtual("Contains", null, this, sphere.get()));
  };

  function BoundingSphere_Contains$02 (/* ref */ point, /* ref */ result) {
    result.set($S02().CallVirtual("Contains", null, this, point.get().MemberwiseClone()));
  };

  function BoundingSphere_Contains$03 (box) {
    var inside = true;
    var corners = box.GetCorners();

  $loop0: 
    for (var i = 0; i < (corners.length | 0); i = ((i + 1) | 0)) {
      var corner = corners[i].MemberwiseClone();
      if ($S02().CallVirtual("Contains", null, this, corner.MemberwiseClone()) === $T03().Disjoint) {
        inside = false;
        break $loop0;
      }
    }
    if (inside) {
      var result = $T03().Contains;
    } else {
      var dmin = 0;
      if (+this.Center.X < +box.Min.X) {
        dmin += (+this.Center.X - +box.Min.X) * (+this.Center.X - +box.Min.X);
      } else if (+this.Center.X > +box.Max.X) {
        dmin += (+this.Center.X - +box.Max.X) * (+this.Center.X - +box.Max.X);
      }
      if (+this.Center.Y < +box.Min.Y) {
        dmin += (+this.Center.Y - +box.Min.Y) * (+this.Center.Y - +box.Min.Y);
      } else if (+this.Center.Y > +box.Max.Y) {
        dmin += (+this.Center.Y - +box.Max.Y) * (+this.Center.Y - +box.Max.Y);
      }
      if (+this.Center.Z < +box.Min.Z) {
        dmin += (+this.Center.Z - +box.Min.Z) * (+this.Center.Z - +box.Min.Z);
      } else if (+this.Center.Z > +box.Max.Z) {
        dmin += (+this.Center.Z - +box.Max.Z) * (+this.Center.Z - +box.Max.Z);
      }
      if (dmin <= (+this.Radius * +this.Radius)) {
        result = $T03().Intersects;
      } else {
        result = $T03().Disjoint;
      }
    }
    return result;
  };

  function BoundingSphere_Contains$04 (frustum) {
    var inside = true;
    var corners = frustum.GetCorners();
    var array = corners;

  $loop0: 
    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var corner = array[i].MemberwiseClone();
      if ($S02().CallVirtual("Contains", null, this, corner.MemberwiseClone()) === $T03().Disjoint) {
        inside = false;
        break $loop0;
      }
    }
    if (inside) {
      var result = $T03().Contains;
    } else {
      if (0 <= (+this.Radius * +this.Radius)) {
        result = $T03().Intersects;
      } else {
        result = $T03().Disjoint;
      }
    }
    return result;
  };

  function BoundingSphere_Contains$05 (sphere) {
    var sqDistance = new JSIL.BoxedVariable(0);
    $T00().DistanceSquared(/* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ sqDistance);
    if (+sqDistance.get() > ((+sphere.Radius + +this.Radius) * (+sphere.Radius + +this.Radius))) {
      var result = $T03().Disjoint;
    } else if (+sqDistance.get() <= ((+this.Radius * +sphere.Radius) * (+this.Radius - +sphere.Radius))) {
      result = $T03().Contains;
    } else {
      result = $T03().Intersects;
    }
    return result;
  };

  function BoundingSphere_Contains$06 ($point) {
    var point = new JSIL.BoxedVariable($point);
    var sqDistance = new JSIL.BoxedVariable(0);
    var sqRadius = +this.Radius * +this.Radius;
    $T00().DistanceSquared(/* ref */ point, /* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ sqDistance);
    if (+sqDistance.get() > sqRadius) {
      var result = $T03().Disjoint;
    } else if (+sqDistance.get() < sqRadius) {
      result = $T03().Contains;
    } else {
      result = $T03().Intersects;
    }
    return result;
  };

  function BoundingSphere_CreateFromBoundingBox$07 ($box) {
    var box = new JSIL.BoxedVariable($box.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateFromBoundingBox(/* ref */ box, /* ref */ result);
    return result.get();
  };

  function BoundingSphere_CreateFromBoundingBox$08 (/* ref */ box, /* ref */ result) {
    var center = $S03().Construct(+(((+box.get().Min.X + +box.get().Max.X) / 2)), +(((+box.get().Min.Y + +box.get().Max.Y) / 2)), +(((+box.get().Min.Z + +box.get().Max.Z) / 2)));
    var radius = +$T00().Distance(center.MemberwiseClone(), box.get().Max.MemberwiseClone());
    result.set(new $thisType(center.MemberwiseClone(), radius));
  };

  function BoundingSphere_CreateFromFrustum (frustum) {
    return $thisType.CreateFromPoints($T09().$Cast(frustum.GetCorners()));
  };

  function BoundingSphere_CreateFromPoints (points) {
    if (points === null) {
      throw $S04().Construct("points");
    }
    var minx = $S03().Construct(3.40282347E+38, 3.40282347E+38, 3.40282347E+38);
    var maxx = $T00().op_UnaryNegation(minx.MemberwiseClone());
    var miny = minx.MemberwiseClone();
    var maxy = $T00().op_UnaryNegation(minx.MemberwiseClone());
    var minz = minx.MemberwiseClone();
    var maxz = $T00().op_UnaryNegation(minx.MemberwiseClone());
    var numPoints = 0;
    var enumerator = $IM00().Call(points, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var pt = $IM02().Call(enumerator, null).MemberwiseClone();
        numPoints = ((numPoints + 1) | 0);
        if (+pt.X < +minx.X) {
          minx = pt.MemberwiseClone();
        }
        if (+pt.X > +maxx.X) {
          maxx = pt.MemberwiseClone();
        }
        if (+pt.Y < +miny.Y) {
          miny = pt.MemberwiseClone();
        }
        if (+pt.Y > +maxy.Y) {
          maxy = pt.MemberwiseClone();
        }
        if (+pt.Z < +minz.Z) {
          minz = pt.MemberwiseClone();
        }
        if (+pt.Z > +maxz.Z) {
          maxz = pt.MemberwiseClone();
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    if (numPoints === 0) {
      throw $S05().Construct("You should have at least one point in points.");
    }
    var sqDistX = +$T00().DistanceSquared(maxx.MemberwiseClone(), minx.MemberwiseClone());
    var sqDistY = +$T00().DistanceSquared(maxy.MemberwiseClone(), miny.MemberwiseClone());
    var sqDistZ = +$T00().DistanceSquared(maxz.MemberwiseClone(), minz.MemberwiseClone());
    var min = minx;
    var max = maxx;
    if (!((sqDistY <= sqDistX) || (sqDistY <= sqDistZ))) {
      max = maxy;
      min = miny;
    }
    if (!((sqDistZ <= sqDistX) || (sqDistZ <= sqDistY))) {
      max = maxz;
      min = minz;
    }
    var center = $S06().CallStatic($T00(), "op_Multiply", null, $T00().op_Addition(min.MemberwiseClone(), max).MemberwiseClone(), 0.5);
    var radius = +$T00().Distance(max.MemberwiseClone(), center.MemberwiseClone());
    var sqRadius = radius * radius;
    enumerator = $IM00().Call(points, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        pt = $IM02().Call(enumerator, null).MemberwiseClone();
        var diff = $T00().op_Subtraction(pt.MemberwiseClone(), center);
        var sqDist = +diff.LengthSquared();
        if (sqDist > sqRadius) {
          var distance = Math.fround(Math.sqrt(sqDist));
          var direction = $S07().CallStatic($T00(), "op_Division", null, diff.MemberwiseClone(), distance);
          var G = $T00().op_Subtraction(center.MemberwiseClone(), $S08().CallStatic($T00(), "op_Multiply", null, radius, direction.MemberwiseClone()));
          center = $S07().CallStatic($T00(), "op_Division", null, $T00().op_Addition(G.MemberwiseClone(), pt).MemberwiseClone(), 2);
          radius = +$T00().Distance(pt.MemberwiseClone(), center.MemberwiseClone());
          sqRadius = radius * radius;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    return new $thisType(center.MemberwiseClone(), radius);
  };

  function BoundingSphere_CreateMerged$09 ($original, $additional) {
    var additional = new JSIL.BoxedVariable($additional.MemberwiseClone());
    var original = new JSIL.BoxedVariable($original.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateMerged(/* ref */ original, /* ref */ additional, /* ref */ result);
    return result.get();
  };

  function BoundingSphere_CreateMerged$0A (/* ref */ original, /* ref */ additional, /* ref */ result) {
    var ocenterToaCenter = $T00().Subtract(additional.get().Center.MemberwiseClone(), original.get().Center);
    var distance = +ocenterToaCenter.Length();
    if (distance <= (+original.get().Radius + +additional.get().Radius)) {
      if (distance <= (+original.get().Radius - +additional.get().Radius)) {
        result.set(original.get().MemberwiseClone());
        return;
      }
      if (distance <= (+additional.get().Radius - +original.get().Radius)) {
        result.set(additional.get().MemberwiseClone());
        return;
      }
    }
    var leftRadius = +$T0F().Max(+original.get().Radius - distance, additional.get().Radius);
    var Rightradius = +$T0F().Max(+original.get().Radius + distance, additional.get().Radius);
    ocenterToaCenter = $T00().op_Addition(ocenterToaCenter.MemberwiseClone(), $S08().CallStatic($T00(), "op_Multiply", null, +(((leftRadius - Rightradius) / (2 * +ocenterToaCenter.Length()))), ocenterToaCenter.MemberwiseClone()));
    result.set(new $thisType());
    result.get().Center = $T00().op_Addition(original.get().Center.MemberwiseClone(), ocenterToaCenter);
    result.get().Radius = +(((leftRadius + Rightradius) / 2));
  };

  function BoundingSphere_Equals$0B (other) {
    return ($T00().op_Equality(this.Center.MemberwiseClone(), other.Center.MemberwiseClone()) && $T10().WithinEpsilon(this.Radius, other.Radius));
  };

  function BoundingSphere_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function BoundingSphere_get_DebugDisplayString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T12(), ["Pos( ", (this.Center).get_DebugDisplayString(), " ) \r\n", "Radius( ", (this.Radius).toString(), " ) "]));
  };

  function BoundingSphere_GetHashCode () {
    return ((((this.Center).GetHashCode() | 0) + ((this.Radius).GetHashCode() | 0)) | 0);
  };

  function BoundingSphere_Intersects$0C (box) {
    return $S09().CallVirtual("Intersects", null, box, this);
  };

  function BoundingSphere_Intersects$0D (/* ref */ box, /* ref */ result) {
    $S0A().CallVirtual("Intersects", null, box.get(), new JSIL.BoxedVariable(this), /* ref */ result);
  };

  function BoundingSphere_Intersects$0E (/* ref */ sphere, /* ref */ result) {
    var sqDistance = new JSIL.BoxedVariable(0);
    $T00().DistanceSquared(/* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ sqDistance);
    result.set(+sqDistance.get() <= ((+sphere.get().Radius + +this.Radius) * (+sphere.get().Radius + +this.Radius)));
  };

  function BoundingSphere_Intersects$0F (/* ref */ ray, /* ref */ result) {
    $S0B().CallVirtual("Intersects", null, ray.get(), new JSIL.BoxedVariable(this), /* ref */ result);
  };

  function BoundingSphere_Intersects$10 (ray) {
    return $S0C().CallVirtual("Intersects", null, ray, this);
  };

  function BoundingSphere_Intersects$11 ($sphere) {
    var sphere = new JSIL.BoxedVariable($sphere.MemberwiseClone());
    var result = new JSIL.BoxedVariable(false);
    $S0D().CallVirtual("Intersects", null, this, /* ref */ sphere, /* ref */ result);
    return result.get();
  };

  function BoundingSphere_Intersects$12 ($plane) {
    var plane = new JSIL.BoxedVariable($plane.MemberwiseClone());
    var result = new JSIL.BoxedVariable($T16().Front);
    $S0E().CallVirtual("Intersects", null, this, /* ref */ plane, /* ref */ result);
    return result.get();
  };

  function BoundingSphere_Intersects$13 (/* ref */ plane, /* ref */ result) {
    var distance = new JSIL.BoxedVariable(0);
    $T00().Dot(/* ref */ new JSIL.MemberReference(plane, "Normal"), /* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ distance);
    distance.set(+distance.get() + +plane.get().D);
    if (+distance.get() > +this.Radius) {
      result.set($T16().Front);
    } else if (+distance.get() < -this.Radius) {
      result.set($T16().Back);
    } else {
      result.set($T16().Intersecting);
    }
  };

  function BoundingSphere_op_Equality (a, b) {
    return a.Equals(b.MemberwiseClone());
  };

  function BoundingSphere_op_Inequality (a, b) {
    return !a.Equals(b.MemberwiseClone());
  };

  function BoundingSphere_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T12(), ["{{Center:", (this.Center).toString(), " Radius:", (this.Radius).toString(), "}}"]));
  };

  function BoundingSphere_Transform$14 (matrix) {
    var sphere = new $thisType();
    sphere.Center = $S0F().CallStatic($T00(), "Transform", null, this.Center.MemberwiseClone(), matrix.MemberwiseClone());
    sphere.Radius = +this.Radius * Math.fround(Math.sqrt($T0F().Max(((+matrix.M11 * +matrix.M11) + (+matrix.M12 * +matrix.M12)) + (+matrix.M13 * +matrix.M13), $T0F().Max(((+matrix.M21 * +matrix.M21) + (+matrix.M22 * +matrix.M22)) + (+matrix.M23 * +matrix.M23), ((+matrix.M31 * +matrix.M31) + (+matrix.M32 * +matrix.M32)) + (+matrix.M33 * +matrix.M33)))));
    return sphere;
  };

  function BoundingSphere_Transform$15 (/* ref */ matrix, /* ref */ result) {
    result.get().Center = $S0F().CallStatic($T00(), "Transform", null, this.Center.MemberwiseClone(), matrix.get().MemberwiseClone());
    result.get().Radius = +this.Radius * Math.fround(Math.sqrt($T0F().Max(((+matrix.get().M11 * +matrix.get().M11) + (+matrix.get().M12 * +matrix.get().M12)) + (+matrix.get().M13 * +matrix.get().M13), $T0F().Max(((+matrix.get().M21 * +matrix.get().M21) + (+matrix.get().M22 * +matrix.get().M22)) + (+matrix.get().M23 * +matrix.get().M23), ((+matrix.get().M31 * +matrix.get().M31) + (+matrix.get().M32 * +matrix.get().M32)) + (+matrix.get().M33 * +matrix.get().M33)))));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.BoundingSphere", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single]), 
      BoundingSphere__ctor
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]), 
      BoundingSphere_Contains$00
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]), 
      BoundingSphere_Contains$01
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType")])]), 
      BoundingSphere_Contains$02
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), 
      BoundingSphere_Contains$03
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")]), 
      BoundingSphere_Contains$04
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$.Type]), 
      BoundingSphere_Contains$05
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      BoundingSphere_Contains$06
    );

    $.Method({Static:true , Public:true }, "CreateFromBoundingBox", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), 
      BoundingSphere_CreateFromBoundingBox$07
    );

    $.Method({Static:true , Public:true }, "CreateFromBoundingBox", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      BoundingSphere_CreateFromBoundingBox$08
    );

    $.Method({Static:true , Public:true }, "CreateFromFrustum", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")]), 
      BoundingSphere_CreateFromFrustum
    );

    $.Method({Static:true , Public:true }, "CreateFromPoints", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])]), 
      BoundingSphere_CreateFromPoints
    );

    $.Method({Static:true , Public:true }, "CreateMerged", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      BoundingSphere_CreateMerged$09
    );

    $.Method({Static:true , Public:true }, "CreateMerged", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      BoundingSphere_CreateMerged$0A
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      BoundingSphere_Equals$0B
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      BoundingSphere_Object_Equals
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      BoundingSphere_get_DebugDisplayString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      BoundingSphere_GetHashCode
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), 
      BoundingSphere_Intersects$0C
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      BoundingSphere_Intersects$0D
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      BoundingSphere_Intersects$0E
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Ray")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Nullable`1", [$.Single])])]), 
      BoundingSphere_Intersects$0F
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("Microsoft.Xna.Framework.Ray")]), 
      BoundingSphere_Intersects$10
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      BoundingSphere_Intersects$11
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), 
      BoundingSphere_Intersects$12
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])]), 
      BoundingSphere_Intersects$13
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      BoundingSphere_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      BoundingSphere_op_Inequality
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      BoundingSphere_toString
    );

    $.Method({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      BoundingSphere_Transform$14
    );

    $.Method({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      BoundingSphere_Transform$15
    );

    $.Field({Static:false, Public:true }, "Center", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:true }, "Radius", $.Single); 
    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; });

})();

/* enum Microsoft.Xna.Framework.ContainmentType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.ContainmentType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Disjoint: 0, 
    Contains: 1, 
    Intersects: 2, 
  }
);

/* class Microsoft.Xna.Framework.Content.Vector2Reader */ 

(function Vector2Reader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };

  function Vector2Reader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Vector2Reader_Read$00 (input, existingInstance) {
    return input.ReadVector2();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Name: "Microsoft.Xna.Framework.Content.Vector2Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Vector2Reader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Vector2Reader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Curve */ 

(function Curve$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.CurveKeyCollection)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.CurveTangent)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.CurveKey)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.CurveContinuity)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.CurveLoopType)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Curve"), [$asm00.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection")]))) ();
  };

  function Curve__ctor$00 () {
    this.Curve$Keys$value = new ($T00())();
  };

  function Curve__ctor$01 (keys) {
    this.Curve$Keys$value = keys;
  };

  function Curve_Clone () {
    var curve = $S00().Construct((this.Curve$Keys$value).Clone());
    curve.Curve$PreLoop$value = this.Curve$PreLoop$value;
    curve.Curve$PostLoop$value = this.Curve$PostLoop$value;
    return curve;
  };

  function Curve_ComputeTangent$02 (keyIndex, tangentType) {
    this.ComputeTangent(keyIndex, tangentType, tangentType);
  };

  function Curve_ComputeTangent$03 (keyIndex, tangentInType, tangentOutType) {
    var p2 = 0, p3 = 0, v2 = 0, v3 = 0;
    var key = (this.Curve$Keys$value).get_Item(keyIndex);
    var p = p2 = p3 = +key.CurveKey$Position$value;
    var v = v2 = v3 = +key.CurveKey$Value$value;
    if ((keyIndex | 0) > 0) {
      p2 = +(this.Curve$Keys$value).get_Item((((keyIndex | 0) - 1) | 0)).CurveKey$Position$value;
      v2 = +(this.Curve$Keys$value).get_Item((((keyIndex | 0) - 1) | 0)).CurveKey$Value$value;
    }
    if ((keyIndex | 0) < ((((this.Curve$Keys$value).get_Count() | 0) - 1) | 0)) {
      p3 = +(this.Curve$Keys$value).get_Item((((keyIndex | 0) + 1) | 0)).CurveKey$Position$value;
      v3 = +(this.Curve$Keys$value).get_Item((((keyIndex | 0) + 1) | 0)).CurveKey$Value$value;
    }
    switch (tangentInType.valueOf()) {
      case 0: 
        key.CurveKey$TangentIn$value = 0;
        break;

      case 1: 
        key.CurveKey$TangentIn$value = v - v2;
        break;

      case 2: 
        var pn = p3 - p2;
        if ($T05().WithinEpsilon(pn, 0)) {
          key.CurveKey$TangentIn$value = 0;
        } else {
          key.CurveKey$TangentIn$value = (v3 - v2) * +(((p - p2) / pn));
        }
        break;

    }
    switch (tangentOutType.valueOf()) {
      case 0: 
        key.CurveKey$TangentOut$value = 0;
        break;

      case 1: 
        key.CurveKey$TangentOut$value = v3 - v;
        break;

      case 2: 
        pn = p3 - p2;
        if ((Math.abs(pn)) < 1.401298E-45) {
          key.CurveKey$TangentOut$value = 0;
        } else {
          key.CurveKey$TangentOut$value = (v3 - v2) * +(((p3 - p) / pn));
        }
        break;

    }
  };

  function Curve_ComputeTangents$04 (tangentType) {
    this.ComputeTangents(tangentType, tangentType);
  };

  function Curve_ComputeTangents$05 (tangentInType, tangentOutType) {

    for (var i = 0; i < ((this.Curve$Keys$value).get_Count() | 0); i = ((i + 1) | 0)) {
      this.ComputeTangent(i, tangentInType, tangentOutType);
    }
  };

  function Curve_Evaluate (position) {
    var first = (this.Curve$Keys$value).get_Item(0);
    var last = (this.Curve$Keys$value).get_Item(((((this.Curve$Keys$value).get_Count() | 0) - 1) | 0));
    if (+position < +first.CurveKey$Position$value) {
      switch ((this.Curve$PreLoop$value).valueOf()) {
        case 0: 
          var result = +first.CurveKey$Value$value;
          return result;

        case 1: 
          var cycle = (this.GetNumberOfCycle(position) | 0);
          var virtualPos = +position - (+cycle * (+last.CurveKey$Position$value - +first.CurveKey$Position$value));
          result = +this.GetCurvePosition(virtualPos);
          return result;

        case 2: 
          cycle = (this.GetNumberOfCycle(position) | 0);
          virtualPos = +position - (+cycle * (+last.CurveKey$Position$value - +first.CurveKey$Position$value));
          result = +this.GetCurvePosition(virtualPos) + (+cycle * (+last.CurveKey$Value$value - +first.CurveKey$Value$value));
          return result;

        case 3: 
          cycle = (this.GetNumberOfCycle(position) | 0);
          if (0 === (+cycle % 2)) {
            virtualPos = +position - (+cycle * (+last.CurveKey$Position$value - +first.CurveKey$Position$value));
          } else {
            virtualPos = ((+last.CurveKey$Position$value - +position) + +first.CurveKey$Position$value) + (+cycle * (+last.CurveKey$Position$value - +first.CurveKey$Position$value));
          }
          result = +this.GetCurvePosition(virtualPos);
          return result;

        case 4: 
          result = +first.CurveKey$Value$value - (+first.CurveKey$TangentIn$value * (+first.CurveKey$Position$value - +position));
          return result;

      }
    } else if (+position > +last.CurveKey$Position$value) {
      switch ((this.Curve$PostLoop$value).valueOf()) {
        case 0: 
          result = +last.CurveKey$Value$value;
          return result;

        case 1: 
          cycle = (this.GetNumberOfCycle(position) | 0);
          virtualPos = +position - (+cycle * (+last.CurveKey$Position$value - +first.CurveKey$Position$value));
          result = +this.GetCurvePosition(virtualPos);
          return result;

        case 2: 
          cycle = (this.GetNumberOfCycle(position) | 0);
          virtualPos = +position - (+cycle * (+last.CurveKey$Position$value - +first.CurveKey$Position$value));
          result = +this.GetCurvePosition(virtualPos) + (+cycle * (+last.CurveKey$Value$value - +first.CurveKey$Value$value));
          return result;

        case 3: 
          cycle = (this.GetNumberOfCycle(position) | 0);
          virtualPos = +position - (+cycle * (+last.CurveKey$Position$value - +first.CurveKey$Position$value));
          if (0 === (+cycle % 2)) {
            virtualPos = +position - (+cycle * (+last.CurveKey$Position$value - +first.CurveKey$Position$value));
          } else {
            virtualPos = ((+last.CurveKey$Position$value - +position) + +first.CurveKey$Position$value) + (+cycle * (+last.CurveKey$Position$value - +first.CurveKey$Position$value));
          }
          result = +this.GetCurvePosition(virtualPos);
          return result;

        case 4: 
          result = +last.CurveKey$Value$value + (+first.CurveKey$TangentOut$value * (+position - +last.CurveKey$Position$value));
          return result;

      }
    }
    result = +this.GetCurvePosition(position);
    return result;
  };

  function Curve_get_IsConstant () {
    return (((this.Curve$Keys$value).get_Count() | 0) <= 1);
  };

  function Curve_get_Keys () {
    return this.Curve$Keys$value;
  };

  function Curve_get_PostLoop () {
    return this.Curve$PostLoop$value;
  };

  function Curve_get_PreLoop () {
    return this.Curve$PreLoop$value;
  };

  function Curve_GetCurvePosition (position) {
    var prev = (this.Curve$Keys$value).get_Item(0);

    for (var i = 1; i < ((this.Curve$Keys$value).get_Count() | 0); i = ((i + 1) | 0)) {
      var next = (this.Curve$Keys$value).get_Item(i);
      if (+next.CurveKey$Position$value >= +position) {
        if (prev.CurveKey$Continuity$value === $T07().Step) {
          if (+position >= 1) {
            var result = +next.CurveKey$Value$value;
          } else {
            result = +prev.CurveKey$Value$value;
          }
        } else {
          var t = +(((+position - +prev.CurveKey$Position$value) / (+next.CurveKey$Position$value - +prev.CurveKey$Position$value)));
          var ts = t * t;
          var tss = ts * t;
          result = ((((((2 * tss) - (3 * ts)) + 1) * +prev.CurveKey$Value$value) + (((tss - (2 * ts)) + t) * +prev.CurveKey$TangentOut$value)) + (((3 * ts) - (2 * tss)) * +next.CurveKey$Value$value)) + ((tss - ts) * +next.CurveKey$TangentIn$value);
        }
        return result;
      }
      prev = next;
    }
    result = 0;
    return result;
  };

  function Curve_GetNumberOfCycle (position) {
    var cycle = +(((+position - +(this.Curve$Keys$value).get_Item(0).CurveKey$Position$value) / (+(this.Curve$Keys$value).get_Item(((((this.Curve$Keys$value).get_Count() | 0) - 1) | 0)).CurveKey$Position$value - +(this.Curve$Keys$value).get_Item(0).CurveKey$Position$value)));
    if (cycle < 0) {
      cycle -= 1;
    }
    return ((cycle) | 0);
  };

  function Curve_set_Keys (value) {
    this.Curve$Keys$value = value;
  };

  function Curve_set_PostLoop (value) {
    this.Curve$PostLoop$value = value;
  };

  function Curve_set_PreLoop (value) {
    this.Curve$PreLoop$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Curve", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Curve__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection")), 
      Curve__ctor$01
    );

    $.Method({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      Curve_Clone
    );

    $.Method({Static:false, Public:true }, "ComputeTangent", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.CurveTangent")]), 
      Curve_ComputeTangent$02
    );

    $.Method({Static:false, Public:true }, "ComputeTangent", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.CurveTangent"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.CurveTangent")
        ]), 
      Curve_ComputeTangent$03
    );

    $.Method({Static:false, Public:true }, "ComputeTangents", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.CurveTangent")), 
      Curve_ComputeTangents$04
    );

    $.Method({Static:false, Public:true }, "ComputeTangents", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.CurveTangent"), $asm00.TypeRef("Microsoft.Xna.Framework.CurveTangent")]), 
      Curve_ComputeTangents$05
    );

    $.Method({Static:false, Public:true }, "Evaluate", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      Curve_Evaluate
    );

    $.Method({Static:false, Public:true }, "get_IsConstant", 
      JSIL.MethodSignature.Return($.Boolean), 
      Curve_get_IsConstant
    );

    $.Method({Static:false, Public:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection")), 
      Curve_get_Keys
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PostLoop", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.CurveLoopType")), 
      Curve_get_PostLoop
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PreLoop", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.CurveLoopType")), 
      Curve_get_PreLoop
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "GetCurvePosition", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      Curve_GetCurvePosition
    );

    $.Method({Static:false, Public:false}, "GetNumberOfCycle", 
      new JSIL.MethodSignature($.Int32, [$.Single]), 
      Curve_GetNumberOfCycle
    );

    $.Method({Static:false, Public:false}, "set_Keys", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection")), 
      Curve_set_Keys
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PostLoop", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.CurveLoopType")), 
      Curve_set_PostLoop
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PreLoop", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.CurveLoopType")), 
      Curve_set_PreLoop
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Curve$Keys$value", $asm00.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Curve$PostLoop$value", $asm00.TypeRef("Microsoft.Xna.Framework.CurveLoopType"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Curve$PreLoop$value", $asm00.TypeRef("Microsoft.Xna.Framework.CurveLoopType"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "IsConstant", $.Boolean);

    $.Property({Static:false, Public:true }, "Keys", $asm00.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection"));

    $.Property({Static:false, Public:true }, "PostLoop", $asm00.TypeRef("Microsoft.Xna.Framework.CurveLoopType"));

    $.Property({Static:false, Public:true }, "PreLoop", $asm00.TypeRef("Microsoft.Xna.Framework.CurveLoopType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.CurveContinuity */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.CurveContinuity", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Smooth: 0, 
    Step: 1, 
  }
);

/* class Microsoft.Xna.Framework.CurveKey */ 

(function CurveKey$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.CurveContinuity)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.CurveKey"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.CurveContinuity")
      ]))) ();
  };

  function CurveKey__ctor$00 (position, value) {
    $thisType.prototype._ctor.call(this, 
      position, 
      value, 
      0, 
      0, 
      $T01().Smooth
    );
  };

  function CurveKey__ctor$01 (position, value, tangentIn, tangentOut) {
    $thisType.prototype._ctor.call(this, 
      position, 
      value, 
      tangentIn, 
      tangentOut, 
      $T01().Smooth
    );
  };

  function CurveKey__ctor$02 (position, value, tangentIn, tangentOut, continuity) {
    this.CurveKey$Position$value = +position;
    this.CurveKey$Value$value = +value;
    this.CurveKey$TangentIn$value = +tangentIn;
    this.CurveKey$TangentOut$value = +tangentOut;
    this.CurveKey$Continuity$value = continuity;
  };

  function CurveKey_Clone () {
    return $S00().Construct(this.CurveKey$Position$value, this.CurveKey$Value$value, this.CurveKey$TangentIn$value, this.CurveKey$TangentOut$value, this.CurveKey$Continuity$value);
  };

  function CurveKey_CompareTo (other) {
    return JSIL.CompareValues(this.CurveKey$Position$value, other.CurveKey$Position$value);
  };

  function CurveKey_Equals$03 (other) {
    return $thisType.op_Equality(this, other);
  };

  function CurveKey_Object_Equals (obj) {
    return $thisType.op_Equality($thisType.$As(obj), this);
  };

  function CurveKey_get_Continuity () {
    return this.CurveKey$Continuity$value;
  };

  function CurveKey_get_Position () {
    return this.CurveKey$Position$value;
  };

  function CurveKey_get_TangentIn () {
    return this.CurveKey$TangentIn$value;
  };

  function CurveKey_get_TangentOut () {
    return this.CurveKey$TangentOut$value;
  };

  function CurveKey_get_Value () {
    return this.CurveKey$Value$value;
  };

  function CurveKey_GetHashCode () {
    return ((((((this.CurveKey$Position$value).GetHashCode() | 0) ^ ((this.CurveKey$Value$value).GetHashCode() | 0)) ^ ((this.CurveKey$TangentIn$value).GetHashCode() | 0)) ^ ((this.CurveKey$TangentOut$value).GetHashCode() | 0)) ^ ((this.CurveKey$Continuity$value).GetHashCode() | 0));
  };

  function CurveKey_op_Equality (a, b) {
    if (JSIL.ObjectEquals(a, null)) {
      var result = (JSIL.ObjectEquals(b, null));
    } else if (JSIL.ObjectEquals(b, null)) {
      result = (JSIL.ObjectEquals(a, null));
    } else {
      result = !((+a.CurveKey$Position$value !== +b.CurveKey$Position$value) || 
        (+a.CurveKey$Value$value !== +b.CurveKey$Value$value) || 
        (+a.CurveKey$TangentIn$value !== +b.CurveKey$TangentIn$value) || 
        (+a.CurveKey$TangentOut$value !== +b.CurveKey$TangentOut$value)) && 
      (a.CurveKey$Continuity$value === b.CurveKey$Continuity$value);
    }
    return result;
  };

  function CurveKey_op_Inequality (a, b) {
    return !$thisType.op_Equality(a, b);
  };

  function CurveKey_set_Continuity (value) {
    this.CurveKey$Continuity$value = value;
  };

  function CurveKey_set_Position (value) {
    this.CurveKey$Position$value = +value;
  };

  function CurveKey_set_TangentIn (value) {
    this.CurveKey$TangentIn$value = +value;
  };

  function CurveKey_set_TangentOut (value) {
    this.CurveKey$TangentOut$value = +value;
  };

  function CurveKey_set_Value (value) {
    this.CurveKey$Value$value = +value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.CurveKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single]), 
      CurveKey__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      CurveKey__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm00.TypeRef("Microsoft.Xna.Framework.CurveContinuity")
        ]), 
      CurveKey__ctor$02
    );

    $.Method({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      CurveKey_Clone
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type]), 
      CurveKey_CompareTo
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      CurveKey_Equals$03
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      CurveKey_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Continuity", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.CurveContinuity")), 
      CurveKey_get_Continuity
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Single), 
      CurveKey_get_Position
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TangentIn", 
      JSIL.MethodSignature.Return($.Single), 
      CurveKey_get_TangentIn
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TangentOut", 
      JSIL.MethodSignature.Return($.Single), 
      CurveKey_get_TangentOut
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Single), 
      CurveKey_get_Value
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      CurveKey_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      CurveKey_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      CurveKey_op_Inequality
    );

    $.Method({Static:false, Public:true }, "set_Continuity", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.CurveContinuity")), 
      CurveKey_set_Continuity
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Position", 
      JSIL.MethodSignature.Action($.Single), 
      CurveKey_set_Position
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TangentIn", 
      JSIL.MethodSignature.Action($.Single), 
      CurveKey_set_TangentIn
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TangentOut", 
      JSIL.MethodSignature.Action($.Single), 
      CurveKey_set_TangentOut
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Single), 
      CurveKey_set_Value
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CurveKey$Continuity$value", $asm00.TypeRef("Microsoft.Xna.Framework.CurveContinuity"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CurveKey$Position$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CurveKey$TangentIn$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CurveKey$TangentOut$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CurveKey$Value$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Continuity", $asm00.TypeRef("Microsoft.Xna.Framework.CurveContinuity"));

    $.Property({Static:false, Public:true }, "Position", $.Single);

    $.Property({Static:false, Public:true }, "TangentIn", $.Single);

    $.Property({Static:false, Public:true }, "TangentOut", $.Single);

    $.Property({Static:false, Public:true }, "Value", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm01.TypeRef("System.IComparable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.CurveKeyCollection */ 

(function CurveKeyCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.CurveKey))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.CurveKey)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.CurveKey))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IndexOutOfRangeException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.CurveKey")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IndexOutOfRangeException"), null))) ();
  };

  function CurveKeyCollection__ctor () {
    this.isReadOnly = false;
    this.innerlist = $S00().Construct();
  };

  function CurveKeyCollection_Add (item) {
    if ($T01().op_Equality(item, null)) {
      throw $S01().Construct("item");
    }
    if (((this.innerlist).get_Count() | 0) === 0) {
      (this.innerlist).Add(item);
    } else {

      for (var i = 0; i < ((this.innerlist).get_Count() | 0); i = ((i + 1) | 0)) {
        if (+item.CurveKey$Position$value < +(this.innerlist).get_Item(i).CurveKey$Position$value) {
          (this.innerlist).Insert(i, item);
          return;
        }
      }
      (this.innerlist).Add(item);
    }
  };

  function CurveKeyCollection_Clear () {
    (this.innerlist).Clear();
  };

  function CurveKeyCollection_Clone () {
    var $temp00;
    var ckc = new $thisType();

    for (var a$0 = this.innerlist._items, i$0 = 0, l$0 = (this.innerlist._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var key = a$0[i$0];
      ckc.Add(key);
    }
    return ckc;
  };

  function CurveKeyCollection_Contains (item) {
    return (this.innerlist).Contains(item);
  };

  function CurveKeyCollection_CopyTo (array, arrayIndex) {
    (this.innerlist).CopyTo(array, arrayIndex);
  };

  function CurveKeyCollection_get_Count () {
    return (this.innerlist).get_Count();
  };

  function CurveKeyCollection_get_IsReadOnly () {
    return this.isReadOnly;
  };

  function CurveKeyCollection_get_Item (index) {
    return (this.innerlist).get_Item(index);
  };

  function CurveKeyCollection_GetEnumerator () {
    return $T00().prototype.GetEnumerator.call(this.innerlist);
  };

  function CurveKeyCollection_IndexOf (item) {
    return (this.innerlist).IndexOf(item);
  };

  function CurveKeyCollection_Remove (item) {
    return (this.innerlist).Remove(item);
  };

  function CurveKeyCollection_RemoveAt (index) {
    (this.innerlist).RemoveAt(index);
  };

  function CurveKeyCollection_set_Item (index, value) {
    if ($T01().op_Equality(value, null)) {
      throw $S01().Construct("value");
    }
    if ((index | 0) >= ((this.innerlist).get_Count() | 0)) {
      throw $S02().Construct();
    }
    if ($T06().WithinEpsilon((this.innerlist).get_Item(index).CurveKey$Position$value, value.CurveKey$Position$value)) {
      (this.innerlist).set_Item(index, value);
    } else {
      (this.innerlist).RemoveAt(index);
      (this.innerlist).Add(value);
    }
  };

  function CurveKeyCollection_System_Collections_IEnumerable_GetEnumerator () {
    return $T00().prototype.GetEnumerator.call(this.innerlist);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.CurveKeyCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CurveKeyCollection__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.CurveKey")), 
      CurveKeyCollection_Add
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      CurveKeyCollection_Clear
    );

    $.Method({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      CurveKeyCollection_Clone
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.CurveKey")]), 
      CurveKeyCollection_Contains
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.CurveKey")]), $.Int32]), 
      CurveKeyCollection_CopyTo
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      CurveKeyCollection_get_Count
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      CurveKeyCollection_get_IsReadOnly
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.CurveKey"), [$.Int32]), 
      CurveKeyCollection_get_Item
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.CurveKey")])), 
      CurveKeyCollection_GetEnumerator
    );

    $.Method({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.CurveKey")]), 
      CurveKeyCollection_IndexOf
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.CurveKey")]), 
      CurveKeyCollection_Remove
    );

    $.Method({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32), 
      CurveKeyCollection_RemoveAt
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.CurveKey")]), 
      CurveKeyCollection_set_Item
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      CurveKeyCollection_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean); 
    $.Field({Static:false, Public:false}, "innerlist", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.CurveKey")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.CurveKey"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm00.TypeRef("Microsoft.Xna.Framework.CurveKey")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.CurveKey")]), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum Microsoft.Xna.Framework.CurveLoopType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.CurveLoopType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Constant: 0, 
    Cycle: 1, 
    CycleOffset: 2, 
    Oscillate: 3, 
    Linear: 4, 
  }
);

/* enum Microsoft.Xna.Framework.CurveTangent */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.CurveTangent", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Flat: 0, 
    Linear: 1, 
    Smooth: 2, 
  }
);

/* enum Microsoft.Xna.Framework.DisplayOrientation */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.DisplayOrientation", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Default: 0, 
    LandscapeLeft: 1, 
    LandscapeRight: 2, 
    Portrait: 4, 
  }
);

/* class Microsoft.Xna.Framework.Game */ 

(function Game$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Action$b2.Of($asm00.Microsoft.Xna.Framework.IDrawable, $asm00.Microsoft.Xna.Framework.GameTime))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Action$b2.Of($asm00.Microsoft.Xna.Framework.IUpdateable, $asm00.Microsoft.Xna.Framework.GameTime))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game_SortingFilteringCollection$b1.Of($asm00.Microsoft.Xna.Framework.IDrawable))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Predicate$b1.Of($asm00.Microsoft.Xna.Framework.IDrawable))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Action$b2.Of($asm00.Microsoft.Xna.Framework.IDrawable, $asm01.System.EventHandler$b1.Of($asm01.System.EventArgs)))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Comparison$b1.Of($asm00.Microsoft.Xna.Framework.IDrawable))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game_SortingFilteringCollection$b1.Of($asm00.Microsoft.Xna.Framework.IUpdateable))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Predicate$b1.Of($asm00.Microsoft.Xna.Framework.IUpdateable))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Action$b2.Of($asm00.Microsoft.Xna.Framework.IUpdateable, $asm01.System.EventHandler$b1.Of($asm01.System.EventArgs)))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Comparison$b1.Of($asm00.Microsoft.Xna.Framework.IUpdateable))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.LaunchParameters)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameServiceContainer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameComponentCollection)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GamePlatform)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IDrawable)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IUpdateable)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Collections.Generic.Comparer$b1.Of($asm01.System.Int32))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.ObjectDisposedException)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IGameComponent)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Collections.ObjectModel.Collection$b1.Of($asm00.Microsoft.Xna.Framework.IGameComponent))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameComponentCollectionEventArgs)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.GC)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReaderManager)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm00.Microsoft.Xna.Framework.GameComponentCollectionEventArgs))) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchPanelState)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IGraphicsDeviceManager)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm03.System.Diagnostics.Stopwatch)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.NoAudioHardwareException)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.GameTime"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), [$asm01.TypeRef("System.IServiceProvider")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ObjectDisposedException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Int32")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IDrawable.Draw)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IUpdateable.Update)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IDrawable.get_Visible)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IDrawable.add_VisibleChanged)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IDrawable.remove_VisibleChanged)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IDrawable.get_DrawOrder)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IDrawable.add_DrawOrderChanged)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IDrawable.remove_DrawOrderChanged)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IUpdateable.get_Enabled)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IUpdateable.add_EnabledChanged)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IUpdateable.remove_EnabledChanged)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IUpdateable.get_UpdateOrder)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IUpdateable.add_UpdateOrderChanged)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IUpdateable.remove_UpdateOrderChanged)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IGameComponent.Initialize)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.get_GraphicsDevice)) ();
  };

  function Game__ctor () {
    this._drawables = new ($T02())($T03().New($thisType, $thisType.$l_ctor$gb__0, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__0", new JSIL.MethodSignature($asm01.System.Boolean, [$asm00.Microsoft.Xna.Framework.IDrawable]), true); }), $T04().New($thisType, $thisType.$l_ctor$gb__1, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__1", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.IDrawable, $asm01.System.EventHandler$b1.Of($asm01.System.EventArgs)]), true); }), $T04().New($thisType, $thisType.$l_ctor$gb__2, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__2", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.IDrawable, $asm01.System.EventHandler$b1.Of($asm01.System.EventArgs)]), true); }), $T05().New($thisType, $thisType.$l_ctor$gb__3, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__3", new JSIL.MethodSignature($asm01.System.Int32, [$asm00.Microsoft.Xna.Framework.IDrawable, $asm00.Microsoft.Xna.Framework.IDrawable]), true); }), $T04().New($thisType, $thisType.$l_ctor$gb__4, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__4", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.IDrawable, $asm01.System.EventHandler$b1.Of($asm01.System.EventArgs)]), true); }), $T04().New($thisType, $thisType.$l_ctor$gb__5, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__5", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.IDrawable, $asm01.System.EventHandler$b1.Of($asm01.System.EventArgs)]), true); }));
    this._updateables = new ($T06())($T07().New($thisType, $thisType.$l_ctor$gb__6, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__6", new JSIL.MethodSignature($asm01.System.Boolean, [$asm00.Microsoft.Xna.Framework.IUpdateable]), true); }), $T08().New($thisType, $thisType.$l_ctor$gb__7, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__7", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.IUpdateable, $asm01.System.EventHandler$b1.Of($asm01.System.EventArgs)]), true); }), $T08().New($thisType, $thisType.$l_ctor$gb__8, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__8", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.IUpdateable, $asm01.System.EventHandler$b1.Of($asm01.System.EventArgs)]), true); }), $T09().New($thisType, $thisType.$l_ctor$gb__9, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__9", new JSIL.MethodSignature($asm01.System.Int32, [$asm00.Microsoft.Xna.Framework.IUpdateable, $asm00.Microsoft.Xna.Framework.IUpdateable]), true); }), $T08().New($thisType, $thisType.$l_ctor$gb__a, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__a", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.IUpdateable, $asm01.System.EventHandler$b1.Of($asm01.System.EventArgs)]), true); }), $T08().New($thisType, $thisType.$l_ctor$gb__b, function () { return JSIL.GetMethodInfo($thisType, "$l_ctor$gb__b", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.IUpdateable, $asm01.System.EventHandler$b1.Of($asm01.System.EventArgs)]), true); }));
    this._initialized = false;
    this._isFixedTimeStep = true;
    this._targetElapsedTime = $T0A().FromTicks($T0B().Create(166667, 0, 0)).MemberwiseClone();
    this._inactiveSleepTime = $T0A().FromSeconds(0.02).MemberwiseClone();
    this._maxElapsedTime = $T0A().FromMilliseconds(500).MemberwiseClone();
    this._gameTime = $S00().Construct();
    this._previousTicks = $T0B().Create(0, 0, 0);
    $thisType._instance = this;
    this.Game$LaunchParameters$value = new ($T0D())();
    this._services = new ($T0E())();
    this._components = new ($T0F())();
    this._content = $S01().Construct(this._services);
    this.Platform = $T11().Create(this);
    (this.Platform).add_Activated($T12().New(this, this.OnActivated, function () { return JSIL.GetMethodInfo($thisType, "OnActivated", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
    (this.Platform).add_Deactivated($T12().New(this, this.OnDeactivated, function () { return JSIL.GetMethodInfo($thisType, "OnDeactivated", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
    (this._services).AddService($T11().__Type__, this.Platform);
  };

  function Game_$l_cctor$gb__18 (drawable, gameTime) {
    $IM00().Call(drawable, null, gameTime);
  };

  function Game_$l_cctor$gb__19 (updateable, gameTime) {
    $IM01().Call(updateable, null, gameTime);
  };

  function Game_$l_ctor$gb__0 (d) {
    return $IM02().Call(d, null);
  };

  function Game_$l_ctor$gb__1 (d, handler) {
    $IM03().Call(d, null, handler);
  };

  function Game_$l_ctor$gb__2 (d, handler) {
    $IM04().Call(d, null, handler);
  };

  function Game_$l_ctor$gb__3 (d1, d2) {
    return $S02().CallVirtual("Compare", null, $T15().get_Default(), 
      $IM05().Call(d1, null), 
      $IM05().Call(d2, null)
    );
  };

  function Game_$l_ctor$gb__4 (d, handler) {
    $IM06().Call(d, null, handler);
  };

  function Game_$l_ctor$gb__5 (d, handler) {
    $IM07().Call(d, null, handler);
  };

  function Game_$l_ctor$gb__6 (u) {
    return $IM08().Call(u, null);
  };

  function Game_$l_ctor$gb__7 (u, handler) {
    $IM09().Call(u, null, handler);
  };

  function Game_$l_ctor$gb__8 (u, handler) {
    $IM0A().Call(u, null, handler);
  };

  function Game_$l_ctor$gb__9 (u1, u2) {
    return $S02().CallVirtual("Compare", null, $T15().get_Default(), 
      $IM0B().Call(u1, null), 
      $IM0B().Call(u2, null)
    );
  };

  function Game_$l_ctor$gb__a (u, handler) {
    $IM0C().Call(u, null, handler);
  };

  function Game_$l_ctor$gb__b (u, handler) {
    $IM0D().Call(u, null, handler);
  };

  function Game_add_Activated (value) {
    var eventHandler = this.Activated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T16().Combine(eventHandler2, value);
      eventHandler = $T17().CompareExchange$b1($T12())(/* ref */ new JSIL.MemberReference(this, "Activated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Game_add_Deactivated (value) {
    var eventHandler = this.Deactivated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T16().Combine(eventHandler2, value);
      eventHandler = $T17().CompareExchange$b1($T12())(/* ref */ new JSIL.MemberReference(this, "Deactivated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Game_add_Disposed (value) {
    var eventHandler = this.Disposed;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T16().Combine(eventHandler2, value);
      eventHandler = $T17().CompareExchange$b1($T12())(/* ref */ new JSIL.MemberReference(this, "Disposed"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Game_add_Exiting (value) {
    var eventHandler = this.Exiting;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T16().Combine(eventHandler2, value);
      eventHandler = $T17().CompareExchange$b1($T12())(/* ref */ new JSIL.MemberReference(this, "Exiting"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Game_AssertNotDisposed () {
    if (this._isDisposed) {
      var name = (JSIL.GetType(this)).get_Name();
      throw $S03().Construct(name, $T18().Format("The {0} object was used after being Disposed.", name));
    }
  };

  function Game_BeginDraw () {
    return true;
  };

  function Game_BeginRun () {
  };

  function Game_CategorizeComponent (component) {
    var updateable = $T14().$As(component);
    if (updateable !== null) {
      (this._updateables).Add(updateable);
    }
    var drawable = $T13().$As(component);
    if (drawable !== null) {
      (this._drawables).Add(drawable);
    }
  };

  function Game_CategorizeComponents () {
    this.DecategorizeComponents();

    for (var i = 0; i < ((this.get_Components()).get_Count() | 0); i = ((i + 1) | 0)) {
      this.CategorizeComponent($S04().CallVirtual("get_Item", null, this.get_Components(), i));
    }
  };

  function Game_Components_ComponentAdded (sender, e) {
    $IM0E().Call(e.GameComponentCollectionEventArgs$GameComponent$value, null);
    this.CategorizeComponent(e.GameComponentCollectionEventArgs$GameComponent$value);
  };

  function Game_Components_ComponentRemoved (sender, e) {
    this.DecategorizeComponent(e.GameComponentCollectionEventArgs$GameComponent$value);
  };

  function Game_DecategorizeComponent (component) {
    var updateable = $T14().$As(component);
    if (updateable !== null) {
      (this._updateables).Remove(updateable);
    }
    var drawable = $T13().$As(component);
    if (drawable !== null) {
      (this._drawables).Remove(drawable);
    }
  };

  function Game_DecategorizeComponents () {
    (this._updateables).Clear();
    (this._drawables).Clear();
  };

  function Game_Dispose$00 () {
    this.Dispose(true);
    $T20().SuppressFinalize(this);
    this.Raise$b1($T21())(this.Disposed, $T21().Empty);
  };

  function Game_Dispose$01 (disposing) {
    if (!this._isDisposed) {
      if (disposing) {

        for (var i = 0; i < ((this._components).get_Count() | 0); i = ((i + 1) | 0)) {
          var disposable = $T23().$As($S04().CallVirtual("get_Item", null, this._components, i));
          if (disposable !== null) {
            $IM0F().Call(disposable, null);
          }
        }
        this._components = null;
        if (this._content !== null) {
          (this._content).Dispose();
          this._content = null;
        }
        if (this._graphicsDeviceManager !== null) {
          $T24().FlushCache();
          $IM0F().Call($T23().$As(this._graphicsDeviceManager), null);
          this._graphicsDeviceManager = null;
        }
        if (this.Platform !== null) {
          (this.Platform).remove_Activated($T12().New(this, this.OnActivated, function () { return JSIL.GetMethodInfo($thisType, "OnActivated", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
          (this.Platform).remove_Deactivated($T12().New(this, this.OnDeactivated, function () { return JSIL.GetMethodInfo($thisType, "OnDeactivated", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
          (this._services).RemoveService($T11().__Type__);
          (this.Platform).Dispose();
          this.Platform = null;
        }
        $T25().ClearTypeCreators();
      }
      this._isDisposed = true;
      $thisType._instance = null;
    }
  };

  function Game_DoDraw (gameTime) {
    this.AssertNotDisposed();
    if (!(!(this.Platform).BeforeDraw(gameTime) || !this.BeginDraw())) {
      this.Draw(gameTime);
      this.EndDraw();
    }
  };

  function Game_DoExiting () {
    this.OnExiting(this, $T21().Empty);
    this.UnloadContent();
  };

  function Game_DoInitialize () {
    this.AssertNotDisposed();
    (this.Platform).BeforeInitialize();
    this.Initialize();
    this.CategorizeComponents();
    (this._components).add_ComponentAdded($T26().New(this, $thisType.prototype.Components_ComponentAdded, function () { return JSIL.GetMethodInfo($thisType, "Components_ComponentAdded", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm00.Microsoft.Xna.Framework.GameComponentCollectionEventArgs]), false); }));
    (this._components).add_ComponentRemoved($T26().New(this, $thisType.prototype.Components_ComponentRemoved, function () { return JSIL.GetMethodInfo($thisType, "Components_ComponentRemoved", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm00.Microsoft.Xna.Framework.GameComponentCollectionEventArgs]), false); }));
  };

  function Game_DoUpdate (gameTime) {
    this.AssertNotDisposed();
    if ((this.Platform).BeforeUpdate(gameTime)) {
      this.Update(gameTime);
      ($T27().TouchPanelState$CurrentTimestamp$value = gameTime.GameTime$TotalGameTime$value.MemberwiseClone());
    }
  };

  function Game_Draw (gameTime) {
    $T02().prototype.ForEachFilteredItem$b1($T0C()).call(this._drawables, $thisType.DrawAction, gameTime);
  };

  function Game_EndDraw () {
    (this.Platform).Present();
  };

  function Game_EndRun () {
  };

  function Game_Exit () {
    (this.Platform).Exit();
    this._suppressDraw = true;
  };

  function Game_Finalize () {
    try {
      this.Dispose(false);
    } finally {
      $T1E().prototype.Finalize.call(this);
    }
  };

  function Game_get_Components () {
    return this._components;
  };

  function Game_get_Content () {
    return this._content;
  };

  function Game_get_GraphicsDevice () {
    if (this._graphicsDeviceService === null) {
      this._graphicsDeviceService = $T28().$Cast((this.get_Services()).GetService($T28().__Type__));
      if (this._graphicsDeviceService === null) {
        throw $S05().Construct("No Graphics Device Service");
      }
    }
    return $IM10().Call(this._graphicsDeviceService, null);
  };

  function Game_get_graphicsDeviceManager () {
    if (this._graphicsDeviceManager === null) {
      this._graphicsDeviceManager = $T2A().$Cast((this.get_Services()).GetService($T2A().__Type__));
      if (this._graphicsDeviceManager === null) {
        throw $S05().Construct("No Graphics Device Manager");
      }
    }
    return $T2B().$Cast(this._graphicsDeviceManager);
  };

  function Game_get_InactiveSleepTime () {
    return this._inactiveSleepTime;
  };

  function Game_get_Initialized () {
    return this._initialized;
  };

  function Game_get_Instance () {
    return $thisType._instance;
  };

  function Game_get_IsActive () {
    return (this.Platform).get_IsActive();
  };

  function Game_get_IsFixedTimeStep () {
    return this._isFixedTimeStep;
  };

  function Game_get_IsMouseVisible () {
    return (this.Platform).get_IsMouseVisible();
  };

  function Game_get_LaunchParameters () {
    return this.Game$LaunchParameters$value;
  };

  function Game_get_Services () {
    return this._services;
  };

  function Game_get_TargetElapsedTime () {
    return this._targetElapsedTime;
  };

  function Game_get_Window () {
    return (this.Platform).get_Window();
  };

  function Game_Initialize () {

    for (var i = 0; i < ((this.get_Components()).get_Count() | 0); i = ((i + 1) | 0)) {
      $IM0E().Call($S04().CallVirtual("get_Item", null, this.get_Components(), i), null);
    }
    this._graphicsDeviceService = $T28().$Cast((this.get_Services()).GetService($T28().__Type__));
    if (!((this._graphicsDeviceService === null) || ($IM10().Call(this._graphicsDeviceService, null) === null))) {
      this.LoadContent();
    }
  };

  function Game_LoadContent () {
  };

  function Game_Log (Message) {
    if (this.Platform !== null) {
      (this.Platform).Log(Message);
    }
  };

  function Game_OnActivated (sender, args) {
    this.AssertNotDisposed();
    this.Raise$b1($T21())(this.Activated, args);
  };

  function Game_OnDeactivated (sender, args) {
    this.AssertNotDisposed();
    this.Raise$b1($T21())(this.Deactivated, args);
  };

  function Game_OnExiting (sender, args) {
    this.Raise$b1($T21())(this.Exiting, args);
  };

  function Game_Raise$b1 (TEventArgs, handler, e) {
    if (handler !== null) {
      handler(this, JSIL.CloneParameter(TEventArgs, e));
    }
  };

  function Game_remove_Activated (value) {
    var eventHandler = this.Activated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T16().Remove(eventHandler2, value);
      eventHandler = $T17().CompareExchange$b1($T12())(/* ref */ new JSIL.MemberReference(this, "Activated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Game_remove_Deactivated (value) {
    var eventHandler = this.Deactivated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T16().Remove(eventHandler2, value);
      eventHandler = $T17().CompareExchange$b1($T12())(/* ref */ new JSIL.MemberReference(this, "Deactivated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Game_remove_Disposed (value) {
    var eventHandler = this.Disposed;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T16().Remove(eventHandler2, value);
      eventHandler = $T17().CompareExchange$b1($T12())(/* ref */ new JSIL.MemberReference(this, "Disposed"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Game_remove_Exiting (value) {
    var eventHandler = this.Exiting;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T16().Remove(eventHandler2, value);
      eventHandler = $T17().CompareExchange$b1($T12())(/* ref */ new JSIL.MemberReference(this, "Exiting"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Game_ResetElapsedTime () {
    if (this._initialized) {
      (this.Platform).ResetElapsedTime();
      (this._gameTimer).Reset();
      (this._gameTimer).Start();
      this._accumulatedElapsedTime = $T0A().Zero.MemberwiseClone();
      (this._gameTime.GameTime$ElapsedGameTime$value = $T0A().Zero.MemberwiseClone());
      this._previousTicks = $T0B().Create(0, 0, 0);
    }
  };

  function Game_Run ($exception) {
    this.AssertNotDisposed();
    if (!(this.Platform).BeforeRun()) {
      this.BeginRun();
      this._gameTimer = $T2D().StartNew();
    } else {
      if (!this._initialized) {
        this.DoInitialize();
        this._initialized = true;
      }
      this.BeginRun();
      this._gameTimer = $T2D().StartNew();
      try {
        (this.Platform).RunLoop();
      } catch ($exception) {
        if ($T2F().$Is($exception)) {
          (this.Platform).ShowRuntimeError((this.get_Window()).get_Title(), "Could not find a suitable audio device. Verify that a sound card is\ninstalled, and check the driver properties to make sure it is not disabled.");
        } else {
          throw $exception;
        }
      }
      this.EndRun();
      this.DoExiting();
    }
  };

  function Game_RunOneFrame () {
    if ((this.Platform !== null) && (this.Platform).BeforeRun()) {
      if (!this._initialized) {
        this.DoInitialize();
        this._gameTimer = $T2D().StartNew();
        this._initialized = true;
      }
      this.BeginRun();
      this.Tick();
      this.EndRun();
    }
  };

  function Game_set_Content (value) {
    if (value === null) {
      throw $S06().Construct();
    }
    this._content = value;
  };

  function Game_set_InactiveSleepTime (value) {
    if ($T0A().op_LessThan(value.MemberwiseClone(), $T0A().Zero.MemberwiseClone())) {
      throw $S07().Construct("The time must be positive.", null);
    }
    if ($T0A().op_Inequality(this._inactiveSleepTime.MemberwiseClone(), value.MemberwiseClone())) {
      this._inactiveSleepTime = value.MemberwiseClone();
    }
  };

  function Game_set_IsFixedTimeStep (value) {
    this._isFixedTimeStep = value;
  };

  function Game_set_IsMouseVisible (value) {
    (this.Platform).set_IsMouseVisible(value);
  };

  function Game_set_LaunchParameters (value) {
    this.Game$LaunchParameters$value = value;
  };

  function Game_set_TargetElapsedTime (value) {
    value = (this.Platform).TargetElapsedTimeChanging(value).MemberwiseClone();
    if ($T0A().op_LessThanOrEqual(value.MemberwiseClone(), $T0A().Zero.MemberwiseClone())) {
      throw $S07().Construct("The time must be positive and non-zero.", null);
    }
    if ($T0A().op_Inequality(value.MemberwiseClone(), this._targetElapsedTime.MemberwiseClone())) {
      this._targetElapsedTime = value.MemberwiseClone();
      (this.Platform).TargetElapsedTimeChanged();
    }
  };

  function Game_SuppressDraw () {
    this._suppressDraw = true;
  };

  function Game_Tick () {

  $loop0: 
    while (true) {
      var currentTicks = ((this._gameTimer).get_Elapsed()).get_Ticks();
      this._accumulatedElapsedTime = $T0A().op_Addition(this._accumulatedElapsedTime, $T0A().FromTicks($T0B().op_Subtraction(currentTicks, this._previousTicks))).MemberwiseClone();
      this._previousTicks = currentTicks;
      if (!this.get_IsFixedTimeStep() || !$T0A().op_LessThan(this._accumulatedElapsedTime.MemberwiseClone(), this.get_TargetElapsedTime().MemberwiseClone())) {
        break $loop0;
      }
      var sleepTime = ((($T0A().op_Subtraction(this.get_TargetElapsedTime(), this._accumulatedElapsedTime)).get_TotalMilliseconds()) | 0);
      $S08().CallStatic($T33(), "Sleep", null, sleepTime);
    }
    if ($T0A().op_GreaterThan(this._accumulatedElapsedTime.MemberwiseClone(), this._maxElapsedTime.MemberwiseClone())) {
      this._accumulatedElapsedTime = this._maxElapsedTime.MemberwiseClone();
    }
    if (this.get_IsFixedTimeStep()) {
      (this._gameTime.GameTime$ElapsedGameTime$value = this.get_TargetElapsedTime().MemberwiseClone());
      var stepCount = 0;

      while ($T0A().op_GreaterThanOrEqual(this._accumulatedElapsedTime.MemberwiseClone(), this.get_TargetElapsedTime().MemberwiseClone())) {
        this._gameTime.GameTime$TotalGameTime$value = $T0A().op_Addition(this._gameTime.GameTime$TotalGameTime$value, this.get_TargetElapsedTime()).MemberwiseClone();
        this._accumulatedElapsedTime = $T0A().op_Subtraction(this._accumulatedElapsedTime, this.get_TargetElapsedTime()).MemberwiseClone();
        stepCount = ((stepCount + 1) | 0);
        this.DoUpdate(this._gameTime);
      }
      this._updateFrameLag = (((this._updateFrameLag | 0) + ($T34().Max(0, ((stepCount - 1) | 0)) | 0)) | 0);
      if (this._gameTime.GameTime$IsRunningSlowly$value) {
        if ((this._updateFrameLag | 0) === 0) {
          this._gameTime.GameTime$IsRunningSlowly$value = false;
        }
      } else if ((this._updateFrameLag | 0) >= 5) {
        this._gameTime.GameTime$IsRunningSlowly$value = true;
      }
      if (!((stepCount !== 1) || ((this._updateFrameLag | 0) <= 0))) {
        this._updateFrameLag = (((this._updateFrameLag | 0) - 1) | 0);
      }
      (this._gameTime.GameTime$ElapsedGameTime$value = $T0A().FromTicks($T0B().op_Multiplication(
            (this.get_TargetElapsedTime()).get_Ticks(), 
            $T0B().FromNumber(stepCount)
          )).MemberwiseClone());
    } else {
      (this._gameTime.GameTime$ElapsedGameTime$value = this._accumulatedElapsedTime.MemberwiseClone());
      this._gameTime.GameTime$TotalGameTime$value = $T0A().op_Addition(this._gameTime.GameTime$TotalGameTime$value, this._accumulatedElapsedTime).MemberwiseClone();
      this._accumulatedElapsedTime = $T0A().Zero.MemberwiseClone();
      this.DoUpdate(this._gameTime);
    }
    if (this._suppressDraw) {
      this._suppressDraw = false;
    } else {
      this.DoDraw(this._gameTime);
    }
  };

  function Game_UnloadContent () {
  };

  function Game_Update (gameTime) {
    $T06().prototype.ForEachFilteredItem$b1($T0C()).call(this._updateables, $thisType.UpdateAction, gameTime);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Game", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Game__ctor
    );

    $.Method({Static:true , Public:false}, "$l.cctor$gb__18", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm00.TypeRef("Microsoft.Xna.Framework.GameTime")]), 
      Game_$l_cctor$gb__18
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.cctor$gb__19", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm00.TypeRef("Microsoft.Xna.Framework.GameTime")]), 
      Game_$l_cctor$gb__19
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable")]), 
      Game_$l_ctor$gb__0
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__1", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]), 
      Game_$l_ctor$gb__1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__2", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]), 
      Game_$l_ctor$gb__2
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__3", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm00.TypeRef("Microsoft.Xna.Framework.IDrawable")]), 
      Game_$l_ctor$gb__3
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__4", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]), 
      Game_$l_ctor$gb__4
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__5", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]), 
      Game_$l_ctor$gb__5
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__6", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable")]), 
      Game_$l_ctor$gb__6
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__7", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]), 
      Game_$l_ctor$gb__7
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__8", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]), 
      Game_$l_ctor$gb__8
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__9", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable")]), 
      Game_$l_ctor$gb__9
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__a", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]), 
      Game_$l_ctor$gb__a
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$l.ctor$gb__b", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]), 
      Game_$l_ctor$gb__b
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "add_Activated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      Game_add_Activated
    );

    $.Method({Static:false, Public:true }, "add_Deactivated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      Game_add_Deactivated
    );

    $.Method({Static:false, Public:true }, "add_Disposed", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      Game_add_Disposed
    );

    $.Method({Static:false, Public:true }, "add_Exiting", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      Game_add_Exiting
    );

    $.Method({Static:false, Public:false}, "AssertNotDisposed", 
      JSIL.MethodSignature.Void, 
      Game_AssertNotDisposed
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "BeginDraw", 
      JSIL.MethodSignature.Return($.Boolean), 
      Game_BeginDraw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "BeginRun", 
      JSIL.MethodSignature.Void, 
      Game_BeginRun
    );

    $.Method({Static:false, Public:false}, "CategorizeComponent", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent")), 
      Game_CategorizeComponent
    );

    $.Method({Static:false, Public:false}, "CategorizeComponents", 
      JSIL.MethodSignature.Void, 
      Game_CategorizeComponents
    );

    $.Method({Static:false, Public:false}, "Components_ComponentAdded", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")]), 
      Game_Components_ComponentAdded
    );

    $.Method({Static:false, Public:false}, "Components_ComponentRemoved", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")]), 
      Game_Components_ComponentRemoved
    );

    $.Method({Static:false, Public:false}, "DecategorizeComponent", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent")), 
      Game_DecategorizeComponent
    );

    $.Method({Static:false, Public:false}, "DecategorizeComponents", 
      JSIL.MethodSignature.Void, 
      Game_DecategorizeComponents
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Game_Dispose$00
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      Game_Dispose$01
    );

    $.Method({Static:false, Public:false}, "DoDraw", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Game_DoDraw
    );

    $.Method({Static:false, Public:false}, "DoExiting", 
      JSIL.MethodSignature.Void, 
      Game_DoExiting
    );

    $.Method({Static:false, Public:false}, "DoInitialize", 
      JSIL.MethodSignature.Void, 
      Game_DoInitialize
    );

    $.Method({Static:false, Public:false}, "DoUpdate", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Game_DoUpdate
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Game_Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EndDraw", 
      JSIL.MethodSignature.Void, 
      Game_EndDraw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EndRun", 
      JSIL.MethodSignature.Void, 
      Game_EndRun
    );

    $.Method({Static:false, Public:true }, "Exit", 
      JSIL.MethodSignature.Void, 
      Game_Exit
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      Game_Finalize
    );

    $.Method({Static:false, Public:true }, "get_Components", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollection")), 
      Game_get_Components
    );

    $.Method({Static:false, Public:true }, "get_Content", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")), 
      Game_get_Content
    );

    $.Method({Static:false, Public:true }, "get_GraphicsDevice", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      Game_get_GraphicsDevice
    );

    $.Method({Static:false, Public:false}, "get_graphicsDeviceManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")), 
      Game_get_graphicsDeviceManager
    );

    $.Method({Static:false, Public:true }, "get_InactiveSleepTime", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      Game_get_InactiveSleepTime
    );

    $.Method({Static:false, Public:false}, "get_Initialized", 
      JSIL.MethodSignature.Return($.Boolean), 
      Game_get_Initialized
    );

    $.Method({Static:true , Public:false}, "get_Instance", 
      JSIL.MethodSignature.Return($.Type), 
      Game_get_Instance
    );

    $.Method({Static:false, Public:true }, "get_IsActive", 
      JSIL.MethodSignature.Return($.Boolean), 
      Game_get_IsActive
    );

    $.Method({Static:false, Public:true }, "get_IsFixedTimeStep", 
      JSIL.MethodSignature.Return($.Boolean), 
      Game_get_IsFixedTimeStep
    );

    $.Method({Static:false, Public:true }, "get_IsMouseVisible", 
      JSIL.MethodSignature.Return($.Boolean), 
      Game_get_IsMouseVisible
    );

    $.Method({Static:false, Public:true }, "get_LaunchParameters", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.LaunchParameters")), 
      Game_get_LaunchParameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Services", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.GameServiceContainer")), 
      Game_get_Services
    );

    $.Method({Static:false, Public:true }, "get_TargetElapsedTime", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      Game_get_TargetElapsedTime
    );

    $.Method({Static:false, Public:true }, "get_Window", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.GameWindow")), 
      Game_get_Window
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      Game_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      JSIL.MethodSignature.Void, 
      Game_LoadContent
    );

    $.Method({Static:false, Public:false}, "Log", 
      JSIL.MethodSignature.Action($.String), 
      Game_Log
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:false, Public:false, Virtual:true }, "OnActivated", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      Game_OnActivated
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnDeactivated", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      Game_OnDeactivated
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnExiting", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      Game_OnExiting
    );

    $.Method({Static:false, Public:false}, "Raise", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.EventHandler`1", ["!!0"]), "!!0"], ["TEventArgs"]), 
      Game_Raise$b1
    );

    $.Method({Static:false, Public:true }, "remove_Activated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      Game_remove_Activated
    );

    $.Method({Static:false, Public:true }, "remove_Deactivated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      Game_remove_Deactivated
    );

    $.Method({Static:false, Public:true }, "remove_Disposed", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      Game_remove_Disposed
    );

    $.Method({Static:false, Public:true }, "remove_Exiting", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      Game_remove_Exiting
    );

    $.Method({Static:false, Public:true }, "ResetElapsedTime", 
      JSIL.MethodSignature.Void, 
      Game_ResetElapsedTime
    );

    $.Method({Static:false, Public:true }, "Run", 
      JSIL.MethodSignature.Void, 
      Game_Run
    );

    $.Method({Static:false, Public:true }, "RunOneFrame", 
      JSIL.MethodSignature.Void, 
      Game_RunOneFrame
    );

    $.Method({Static:false, Public:true }, "set_Content", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")), 
      Game_set_Content
    );

    $.Method({Static:false, Public:true }, "set_InactiveSleepTime", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.TimeSpan")), 
      Game_set_InactiveSleepTime
    );

    $.Method({Static:false, Public:true }, "set_IsFixedTimeStep", 
      JSIL.MethodSignature.Action($.Boolean), 
      Game_set_IsFixedTimeStep
    );

    $.Method({Static:false, Public:true }, "set_IsMouseVisible", 
      JSIL.MethodSignature.Action($.Boolean), 
      Game_set_IsMouseVisible
    );

    $.Method({Static:false, Public:false}, "set_LaunchParameters", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.LaunchParameters")), 
      Game_set_LaunchParameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TargetElapsedTime", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.TimeSpan")), 
      Game_set_TargetElapsedTime
    );

    $.Method({Static:false, Public:true }, "SuppressDraw", 
      JSIL.MethodSignature.Void, 
      Game_SuppressDraw
    );

    $.Method({Static:false, Public:true }, "Tick", 
      JSIL.MethodSignature.Void, 
      Game_Tick
    );

    $.Method({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      JSIL.MethodSignature.Void, 
      Game_UnloadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Game_Update
    );

    $.Field({Static:false, Public:false}, "Platform", $asm00.TypeRef("Microsoft.Xna.Framework.GamePlatform")); 
    $.Field({Static:false, Public:false}, "_components", $asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollection")); 
    $.Field({Static:false, Public:false}, "_services", $asm00.TypeRef("Microsoft.Xna.Framework.GameServiceContainer")); 
    $.Field({Static:false, Public:false}, "_content", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")); 
    $.Field({Static:false, Public:false}, "_drawables", $asm00.TypeRef("Microsoft.Xna.Framework.Game+SortingFilteringCollection`1", [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable")])); 
    $.Field({Static:false, Public:false}, "_updateables", $asm00.TypeRef("Microsoft.Xna.Framework.Game+SortingFilteringCollection`1", [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable")])); 
    $.Field({Static:false, Public:false}, "_graphicsDeviceManager", $asm00.TypeRef("Microsoft.Xna.Framework.IGraphicsDeviceManager")); 
    $.Field({Static:false, Public:false}, "_graphicsDeviceService", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService")); 
    $.Field({Static:false, Public:false}, "_initialized", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isFixedTimeStep", $.Boolean); 
    $.Field({Static:false, Public:false}, "_targetElapsedTime", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "_inactiveSleepTime", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxElapsedTime", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "_suppressDraw", $.Boolean); 
    $.Field({Static:true , Public:false}, "_instance", $.Type, null); 
    $.Field({Static:false, Public:false}, "_isDisposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "Activated", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Deactivated", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Disposed", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Exiting", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "_accumulatedElapsedTime", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_gameTime", $asm00.TypeRef("Microsoft.Xna.Framework.GameTime")); 
    $.Field({Static:false, Public:false}, "_gameTimer", $asm03.TypeRef("System.Diagnostics.Stopwatch")); 
    $.Field({Static:false, Public:false}, "_previousTicks", $.Int64); 
    $.Field({Static:false, Public:false}, "_updateFrameLag", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DrawAction", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm00.TypeRef("Microsoft.Xna.Framework.GameTime")]), function ($pi) {
        return $pi.CS$$l$g9__CachedAnonymousMethodDelegate1a;
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "UpdateAction", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm00.TypeRef("Microsoft.Xna.Framework.GameTime")]), function ($pi) {
        return $pi.CS$$l$g9__CachedAnonymousMethodDelegate1b;
      }); 
    $.Field({Static:false, Public:false}, "Game$LaunchParameters$value", $asm00.TypeRef("Microsoft.Xna.Framework.LaunchParameters"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegatec", $asm01.TypeRef("System.Predicate`1", [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegated", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegatee", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegatef", $asm01.TypeRef("System.Comparison`1", [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate10", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate11", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate12", $asm01.TypeRef("System.Predicate`1", [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate13", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate14", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate15", $asm01.TypeRef("System.Comparison`1", [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate16", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate17", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate1a", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IDrawable"), $asm00.TypeRef("Microsoft.Xna.Framework.GameTime")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate1b", $asm01.TypeRef("System.Action`2", [$asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), $asm00.TypeRef("Microsoft.Xna.Framework.GameTime")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function Game__cctor () {
      $thisType._instance = null;
      $thisType.DrawAction = $T00().New($thisType, $thisType.$l_cctor$gb__18, function () { return JSIL.GetMethodInfo($thisType, "$l_cctor$gb__18", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.IDrawable, $asm00.Microsoft.Xna.Framework.GameTime]), true); });
      $thisType.UpdateAction = $T01().New($thisType, $thisType.$l_cctor$gb__19, function () { return JSIL.GetMethodInfo($thisType, "$l_cctor$gb__19", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.IUpdateable, $asm00.Microsoft.Xna.Framework.GameTime]), true); });
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Game__cctor
    );

    $.Property({Static:false, Public:true }, "LaunchParameters", $asm00.TypeRef("Microsoft.Xna.Framework.LaunchParameters"));

    $.Property({Static:false, Public:true }, "Components", $asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollection"));

    $.Property({Static:false, Public:true }, "InactiveSleepTime", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IsActive", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMouseVisible", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetElapsedTime", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IsFixedTimeStep", $.Boolean);

    $.Property({Static:false, Public:true }, "Services", $asm00.TypeRef("Microsoft.Xna.Framework.GameServiceContainer"));

    $.Property({Static:false, Public:true }, "Content", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"));

    $.Property({Static:false, Public:true }, "GraphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"));

    $.Property({Static:false, Public:true }, "Window", $asm00.TypeRef("Microsoft.Xna.Framework.GameWindow"))
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "Initialized", $.Boolean);

    $.Property({Static:false, Public:false}, "graphicsDeviceManager", $asm00.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager"));

    $.Property({Static:true , Public:false}, "Instance", $.Type);

    $.Event({Static:false, Public:true }, "Activated", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "Deactivated", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "Disposed", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "Exiting", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Game+SortingFilteringCollection`1 */ 

(function SortingFilteringCollection$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Comparison$b1.Of($asm01.System.Int32))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Int32))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.Comparer$b1.Of($asm01.System.Int32))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.IEnumerable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Int32")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Comparison`1", [$asm01.TypeRef("System.Int32")])]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerable.GetEnumerator)) ();
  };

  function SortingFilteringCollection$b1__ctor (filter, filterChangedSubscriber, filterChangedUnsubscriber, sort, sortChangedSubscriber, sortChangedUnsubscriber) {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$thisType.T.get(this)]), null);
    var $s01 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Game+AddJournalEntry`1", [$thisType.T.get(this)])]), null);
    this._items = $s00.Construct();
    this._addJournal = $s01.Construct();
    this._removeJournal = $S00().Construct();
    this._cachedFilteredItems = $s00.Construct();
    this._shouldRebuildCache = true;
    this._filter = filter;
    this._filterChangedSubscriber = filterChangedSubscriber;
    this._filterChangedUnsubscriber = filterChangedUnsubscriber;
    this._sort = sort;
    this._sortChangedSubscriber = sortChangedSubscriber;
    this._sortChangedUnsubscriber = sortChangedUnsubscriber;
    this._addJournalSortComparison = $asm01.System.Comparison$b1.Of($asm00.Microsoft.Xna.Framework.Game_AddJournalEntry$b1.Of($thisType.T.get(this))).New(this, $thisType.Of($thisType.T.get(this)).prototype.CompareAddJournalEntry, function () { return JSIL.GetMethodInfo($thisType.Of($thisType.T.get(this)), "CompareAddJournalEntry", new JSIL.MethodSignature($asm01.System.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Game+AddJournalEntry`1", [$thisType.T.get(this)]), $asm00.TypeRef("Microsoft.Xna.Framework.Game+AddJournalEntry`1", [$thisType.T.get(this)])]), false); });
  };

  function SortingFilteringCollection$b1_$l_cctor$gb__1c (x, y) {
    return $S01().CallVirtual("Compare", null, $T03().get_Default(), y, x);
  };

  function SortingFilteringCollection$b1_Add (item) {
    (this._addJournal).Add(new ($asm00.Microsoft.Xna.Framework.Game_AddJournalEntry$b1.Of($thisType.T.get(this))) ((this._addJournal).get_Count(), JSIL.CloneParameter($thisType.T.get(this), item)));
    $thisType.Of($thisType.T.get(this)).prototype.InvalidateCache.call(this);
  };

  function SortingFilteringCollection$b1_Clear () {

    for (var i = 0; i < ((this._items).get_Count() | 0); i = ((i + 1) | 0)) {
      this._filterChangedUnsubscriber(
        JSIL.CloneParameter($thisType.T.get(this), (this._items).get_Item(i)), 
        $T04().New(this, $thisType.Of($thisType.T.get(this)).prototype.Item_FilterPropertyChanged, function () { return JSIL.GetMethodInfo($thisType.Of($thisType.T.get(this)), "Item_FilterPropertyChanged", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); })
      );
      this._sortChangedUnsubscriber(
        JSIL.CloneParameter($thisType.T.get(this), (this._items).get_Item(i)), 
        $T04().New(this, $thisType.Of($thisType.T.get(this)).prototype.Item_SortPropertyChanged, function () { return JSIL.GetMethodInfo($thisType.Of($thisType.T.get(this)), "Item_SortPropertyChanged", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); })
      );
    }
    (this._addJournal).Clear();
    (this._removeJournal).Clear();
    (this._items).Clear();
    $thisType.Of($thisType.T.get(this)).prototype.InvalidateCache.call(this);
  };

  function SortingFilteringCollection$b1_CompareAddJournalEntry (x, y) {
    var result = (this._sort(JSIL.CloneParameter(this.T, x.Item), JSIL.CloneParameter(this.T, y.Item)) | 0);
    if (result !== 0) {
      var result2 = result;
    } else {
      result2 = (((x.Order | 0) - (y.Order | 0)) | 0);
    }
    return result2;
  };

  function SortingFilteringCollection$b1_Contains (item) {
    return (this._items).Contains(JSIL.CloneParameter($thisType.T.get(this), item));
  };

  function SortingFilteringCollection$b1_CopyTo (array, arrayIndex) {
    (this._items).CopyTo(array, arrayIndex);
  };

  function SortingFilteringCollection$b1_ForEachFilteredItem$b1 (TUserData, action, userData) {
    if (this._shouldRebuildCache) {
      $thisType.Of($thisType.T.get(this)).prototype.ProcessRemoveJournal.call(this);
      $thisType.Of($thisType.T.get(this)).prototype.ProcessAddJournal.call(this);
      (this._cachedFilteredItems).Clear();

      for (var i = 0; i < ((this._items).get_Count() | 0); i = ((i + 1) | 0)) {
        if (this._filter(JSIL.CloneParameter($thisType.T.get(this), (this._items).get_Item(i)))) {
          (this._cachedFilteredItems).Add(JSIL.CloneParameter($thisType.T.get(this), (this._items).get_Item(i)));
        }
      }
      this._shouldRebuildCache = false;
    }

    for (i = 0; i < ((this._cachedFilteredItems).get_Count() | 0); i = ((i + 1) | 0)) {
      action(JSIL.CloneParameter($thisType.T.get(this), (this._cachedFilteredItems).get_Item(i)), JSIL.CloneParameter(TUserData, userData));
    }
    if (this._shouldRebuildCache) {
      (this._cachedFilteredItems).Clear();
    }
  };

  function SortingFilteringCollection$b1_get_Count () {
    return (this._items).get_Count();
  };

  function SortingFilteringCollection$b1_get_IsReadOnly () {
    return false;
  };

  function SortingFilteringCollection$b1_GetEnumerator () {
    return $asm01.System.Collections.Generic.List$b1.Of($thisType.T.get(this)).prototype.GetEnumerator.call(this._items);
  };

  function SortingFilteringCollection$b1_InvalidateCache () {
    this._shouldRebuildCache = true;
  };

  function SortingFilteringCollection$b1_Item_FilterPropertyChanged (sender, e) {
    $thisType.Of($thisType.T.get(this)).prototype.InvalidateCache.call(this);
  };

  function SortingFilteringCollection$b1_Item_SortPropertyChanged (sender, e) {
    var item = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(sender));
    var index = ((this._items).IndexOf(JSIL.CloneParameter($thisType.T.get(this), item)) | 0);
    (this._addJournal).Add(new ($asm00.Microsoft.Xna.Framework.Game_AddJournalEntry$b1.Of($thisType.T.get(this))) ((this._addJournal).get_Count(), JSIL.CloneParameter($thisType.T.get(this), item)));
    (this._removeJournal).Add(index);
    $thisType.Of($thisType.T.get(this)).prototype.UnsubscribeFromItemEvents.call(this, JSIL.CloneParameter($thisType.T.get(this), item));
    $thisType.Of($thisType.T.get(this)).prototype.InvalidateCache.call(this);
  };

  function SortingFilteringCollection$b1_ProcessAddJournal () {
    var $s00 = new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Comparison`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Game+AddJournalEntry`1", [$thisType.T.get(this)])])]);
    if (((this._addJournal).get_Count() | 0) !== 0) {
      $s00.Call($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Game_AddJournalEntry$b1.Of($thisType.T.get(this))).prototype, "Sort", null, this._addJournal, this._addJournalSortComparison);
      var iAddJournal = 0;

      for (var iItems = 0; (iItems < ((this._items).get_Count() | 0)) && (iAddJournal < ((this._addJournal).get_Count() | 0)); iItems = ((iItems + 1) | 0)) {
        var addJournalItem = JSIL.CloneParameter(this.T, (this._addJournal).get_Item(iAddJournal).Item);
        if ((this._sort(JSIL.CloneParameter($thisType.T.get(this), addJournalItem), JSIL.CloneParameter($thisType.T.get(this), (this._items).get_Item(iItems))) | 0) < 0) {
          $thisType.Of($thisType.T.get(this)).prototype.SubscribeToItemEvents.call(this, JSIL.CloneParameter($thisType.T.get(this), addJournalItem));
          (this._items).Insert(iItems, JSIL.CloneParameter($thisType.T.get(this), addJournalItem));
          iAddJournal = ((iAddJournal + 1) | 0);
        }
      }

      for (; iAddJournal < ((this._addJournal).get_Count() | 0); iAddJournal = ((iAddJournal + 1) | 0)) {
        addJournalItem = JSIL.CloneParameter(this.T, (this._addJournal).get_Item(iAddJournal).Item);
        $thisType.Of($thisType.T.get(this)).prototype.SubscribeToItemEvents.call(this, JSIL.CloneParameter($thisType.T.get(this), addJournalItem));
        (this._items).Add(JSIL.CloneParameter($thisType.T.get(this), addJournalItem));
      }
      (this._addJournal).Clear();
    }
  };

  function SortingFilteringCollection$b1_ProcessRemoveJournal () {
    if (((this._removeJournal).get_Count() | 0) !== 0) {
      $S02().Call($T01().prototype, "Sort", null, this._removeJournal, $thisType.Of($thisType.T.get(this)).RemoveJournalSortComparison);

      for (var i = 0; i < ((this._removeJournal).get_Count() | 0); i = ((i + 1) | 0)) {
        (this._items).RemoveAt((this._removeJournal).get_Item(i));
      }
      (this._removeJournal).Clear();
    }
  };

  function SortingFilteringCollection$b1_Remove (item) {
    if ((this._addJournal).Remove($asm00.Microsoft.Xna.Framework.Game_AddJournalEntry$b1.Of($thisType.T.get(this)).CreateKey(JSIL.CloneParameter($thisType.T.get(this), item)))) {
      var result = true;
    } else {
      var index = ((this._items).IndexOf(JSIL.CloneParameter($thisType.T.get(this), item)) | 0);
      if (index >= 0) {
        $thisType.Of($thisType.T.get(this)).prototype.UnsubscribeFromItemEvents.call(this, JSIL.CloneParameter($thisType.T.get(this), item));
        (this._removeJournal).Add(index);
        $thisType.Of($thisType.T.get(this)).prototype.InvalidateCache.call(this);
        result = true;
      } else {
        result = false;
      }
    }
    return result;
  };

  function SortingFilteringCollection$b1_SubscribeToItemEvents (item) {
    this._filterChangedSubscriber(JSIL.CloneParameter($thisType.T.get(this), item), $T04().New(this, $thisType.Of($thisType.T.get(this)).prototype.Item_FilterPropertyChanged, function () { return JSIL.GetMethodInfo($thisType.Of($thisType.T.get(this)), "Item_FilterPropertyChanged", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
    this._sortChangedSubscriber(JSIL.CloneParameter($thisType.T.get(this), item), $T04().New(this, $thisType.Of($thisType.T.get(this)).prototype.Item_SortPropertyChanged, function () { return JSIL.GetMethodInfo($thisType.Of($thisType.T.get(this)), "Item_SortPropertyChanged", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
  };

  function SortingFilteringCollection$b1_System_Collections_IEnumerable_GetEnumerator () {
    return $IM00().Call(this._items, null);
  };

  function SortingFilteringCollection$b1_UnsubscribeFromItemEvents (item) {
    this._filterChangedUnsubscriber(JSIL.CloneParameter($thisType.T.get(this), item), $T04().New(this, $thisType.Of($thisType.T.get(this)).prototype.Item_FilterPropertyChanged, function () { return JSIL.GetMethodInfo($thisType.Of($thisType.T.get(this)), "Item_FilterPropertyChanged", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
    this._sortChangedUnsubscriber(JSIL.CloneParameter($thisType.T.get(this), item), $T04().New(this, $thisType.Of($thisType.T.get(this)).prototype.Item_SortPropertyChanged, function () { return JSIL.GetMethodInfo($thisType.Of($thisType.T.get(this)), "Item_SortPropertyChanged", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Game+SortingFilteringCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Predicate`1", [$.GenericParameter("T")]), $asm01.TypeRef("System.Action`2", [$.GenericParameter("T"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]), 
          $asm01.TypeRef("System.Action`2", [$.GenericParameter("T"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]), $asm01.TypeRef("System.Comparison`1", [$.GenericParameter("T")]), 
          $asm01.TypeRef("System.Action`2", [$.GenericParameter("T"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])]), $asm01.TypeRef("System.Action`2", [$.GenericParameter("T"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])])
        ]), 
      SortingFilteringCollection$b1__ctor
    );

    $.Method({Static:true , Public:false}, "$l.cctor$gb__1c", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32]), 
      SortingFilteringCollection$b1_$l_cctor$gb__1c
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      SortingFilteringCollection$b1_Add
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      SortingFilteringCollection$b1_Clear
    );

    $.Method({Static:false, Public:false}, "CompareAddJournalEntry", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Game+AddJournalEntry`1", [$.GenericParameter("T")]), $asm00.TypeRef("Microsoft.Xna.Framework.Game+AddJournalEntry`1", [$.GenericParameter("T")])]), 
      SortingFilteringCollection$b1_CompareAddJournalEntry
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")]), 
      SortingFilteringCollection$b1_Contains
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32]), 
      SortingFilteringCollection$b1_CopyTo
    );

    $.Method({Static:false, Public:true }, "ForEachFilteredItem", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Action`2", [$.GenericParameter("T"), "!!0"]), "!!0"], ["TUserData"]), 
      SortingFilteringCollection$b1_ForEachFilteredItem$b1
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      SortingFilteringCollection$b1_get_Count
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      SortingFilteringCollection$b1_get_IsReadOnly
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null), 
      SortingFilteringCollection$b1_GetEnumerator
    );

    $.Method({Static:false, Public:false}, "InvalidateCache", 
      JSIL.MethodSignature.Void, 
      SortingFilteringCollection$b1_InvalidateCache
    );

    $.Method({Static:false, Public:false}, "Item_FilterPropertyChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      SortingFilteringCollection$b1_Item_FilterPropertyChanged
    );

    $.Method({Static:false, Public:false}, "Item_SortPropertyChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      SortingFilteringCollection$b1_Item_SortPropertyChanged
    );

    $.Method({Static:false, Public:false}, "ProcessAddJournal", 
      JSIL.MethodSignature.Void, 
      SortingFilteringCollection$b1_ProcessAddJournal
    );

    $.Method({Static:false, Public:false}, "ProcessRemoveJournal", 
      JSIL.MethodSignature.Void, 
      SortingFilteringCollection$b1_ProcessRemoveJournal
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")]), 
      SortingFilteringCollection$b1_Remove
    );

    $.Method({Static:false, Public:false}, "SubscribeToItemEvents", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      SortingFilteringCollection$b1_SubscribeToItemEvents
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      SortingFilteringCollection$b1_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false}, "UnsubscribeFromItemEvents", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      SortingFilteringCollection$b1_UnsubscribeFromItemEvents
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_items", $asm01.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_addJournal", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Game+AddJournalEntry`1", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_addJournalSortComparison", $asm01.TypeRef("System.Comparison`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Game+AddJournalEntry`1", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_removeJournal", $asm01.TypeRef("System.Collections.Generic.List`1", [$.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_cachedFilteredItems", $asm01.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "_shouldRebuildCache", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_filter", $asm01.TypeRef("System.Predicate`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_sort", $asm01.TypeRef("System.Comparison`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_filterChangedSubscriber", $asm01.TypeRef("System.Action`2", [$.GenericParameter("T"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_filterChangedUnsubscriber", $asm01.TypeRef("System.Action`2", [$.GenericParameter("T"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_sortChangedSubscriber", $asm01.TypeRef("System.Action`2", [$.GenericParameter("T"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_sortChangedUnsubscriber", $asm01.TypeRef("System.Action`2", [$.GenericParameter("T"), $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "RemoveJournalSortComparison", $asm01.TypeRef("System.Comparison`1", [$.Int32])); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate1d", $asm01.TypeRef("System.Comparison`1", [$.Int32]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function SortingFilteringCollection$b1__cctor () {
      $thisType.Of($thisType.T.get(this)).RemoveJournalSortComparison = $T00().New($thisType.Of($thisType.T.get(this)), $thisType.Of($thisType.T.get(this)).$l_cctor$gb__1c, function () { return JSIL.GetMethodInfo($thisType.Of($thisType.T.get(this)), "$l_cctor$gb__1c", new JSIL.MethodSignature($asm01.System.Int32, [$asm01.System.Int32, $asm01.System.Int32]), true); });
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SortingFilteringCollection$b1__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Game+AddJournalEntry`1 */ 

(function AddJournalEntry$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function AddJournalEntry$b1__ctor (order, item) {
    this.Order = (order | 0);
    this.Item = JSIL.CloneParameter($thisType.T.get(this), item);
  };

  function AddJournalEntry$b1_CreateKey (item) {
    return new ($thisType.Of($thisType.T.get(this))) (-1, JSIL.CloneParameter($thisType.T.get(this), item));
  };

  function AddJournalEntry$b1_Object_Equals (obj) {
    return ($thisType.Of($thisType.T.get(this)).$Is(obj) && (JSIL.ObjectEquals(this.Item, $thisType.Of($thisType.T.get(this)).$Cast(obj).Item)));
  };

  function AddJournalEntry$b1_GetHashCode () {
    return (this.Item).GetHashCode();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Game+AddJournalEntry`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")]), 
      AddJournalEntry$b1__ctor
    );

    $.Method({Static:true , Public:true }, "CreateKey", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Game+AddJournalEntry`1", [$.GenericParameter("T")]), [$.GenericParameter("T")]), 
      AddJournalEntry$b1_CreateKey
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      AddJournalEntry$b1_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      AddJournalEntry$b1_GetHashCode
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Order", $.Int32); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Item", $.GenericParameter("T")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GameComponentCollectionEventArgs */ 

(function GameComponentCollectionEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IGameComponent)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };

  function GameComponentCollectionEventArgs__ctor (gameComponent) {
    $T01().prototype._ctor.call(this);
    this.GameComponentCollectionEventArgs$GameComponent$value = gameComponent;
  };

  function GameComponentCollectionEventArgs_get_GameComponent () {
    return this.GameComponentCollectionEventArgs$GameComponent$value;
  };

  function GameComponentCollectionEventArgs_set_GameComponent (value) {
    this.GameComponentCollectionEventArgs$GameComponent$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.EventArgs"), 
      Name: "Microsoft.Xna.Framework.GameComponentCollectionEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent")), 
      GameComponentCollectionEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_GameComponent", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent")), 
      GameComponentCollectionEventArgs_get_GameComponent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_GameComponent", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent")), 
      GameComponentCollectionEventArgs_set_GameComponent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GameComponentCollectionEventArgs$GameComponent$value", $asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "GameComponent", $asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GamePlatform */ 

(function GamePlatform$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IGraphicsDeviceManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameServiceContainer)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.SDL2_GamePlatform)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.GC)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Mouse)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchPanel)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice)) ();
  };

  function GamePlatform__ctor (game, osVersion) {
    this._inactiveSleepTime = $T02().FromMilliseconds(20).MemberwiseClone();
    this._needsToResetElapsedTime = false;
    if (game === null) {
      throw $S00().Construct("game");
    }
    this.GamePlatform$Game$value = game;
    this.GamePlatform$OSVersion$value = osVersion;
  };

  function GamePlatform_add_Activated (value) {
    var eventHandler = this.Activated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T05().Combine(eventHandler2, value);
      eventHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "Activated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GamePlatform_add_Deactivated (value) {
    var eventHandler = this.Deactivated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T05().Combine(eventHandler2, value);
      eventHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "Deactivated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GamePlatform_BeforeInitialize () {
    this.set_IsActive(true);
    if ((this.GamePlatform$Game$value).get_GraphicsDevice() === null) {
      var graphicsDeviceManager = $T07().$As(((this.GamePlatform$Game$value).get_Services()).GetService($T07().__Type__));
      $IM00().Call(graphicsDeviceManager, null);
    }
  };

  function GamePlatform_BeforeRun () {
    return true;
  };

  function GamePlatform_Create (game) {
    return new ($T09())(game);
  };

  function GamePlatform_Dispose$00 () {
    this.Dispose(true);
    $T0A().SuppressFinalize(this);
  };

  function GamePlatform_Dispose$01 (disposing) {
    if (!this.disposed) {
      this.disposed = true;
    }
  };

  function GamePlatform_Finalize () {
    try {
      this.Dispose(false);
    } finally {
      $T0C().prototype.Finalize.call(this);
    }
  };

  function GamePlatform_get_Game () {
    return this.GamePlatform$Game$value;
  };

  function GamePlatform_get_IsActive () {
    return this._isActive;
  };

  function GamePlatform_get_IsDisposed () {
    return this.disposed;
  };

  function GamePlatform_get_IsMouseVisible () {
    return this._isMouseVisible;
  };

  function GamePlatform_get_OSVersion () {
    return this.GamePlatform$OSVersion$value;
  };

  function GamePlatform_get_Window () {
    return this._window;
  };

  function GamePlatform_Log (Message) {
  };

  function GamePlatform_OnIsMouseVisibleChanged () {
  };

  function GamePlatform_Present () {
  };

  function GamePlatform_Raise$b1 (TEventArgs, handler, e) {
    if (handler !== null) {
      handler(this, JSIL.CloneParameter(TEventArgs, e));
    }
  };

  function GamePlatform_remove_Activated (value) {
    var eventHandler = this.Activated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T05().Remove(eventHandler2, value);
      eventHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "Activated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GamePlatform_remove_Deactivated (value) {
    var eventHandler = this.Deactivated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T05().Remove(eventHandler2, value);
      eventHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "Deactivated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GamePlatform_ResetElapsedTime () {
  };

  function GamePlatform_set_Game (value) {
    this.GamePlatform$Game$value = value;
  };

  function GamePlatform_set_IsActive (value) {
    if (this._isActive !== value) {
      this._isActive = value;
      this.Raise$b1($T0E())((
          this._isActive
             ? this.Activated
             : this.Deactivated)
        , $T0E().Empty);
    }
  };

  function GamePlatform_set_IsMouseVisible (value) {
    if (this._isMouseVisible !== value) {
      this._isMouseVisible = value;
      this.OnIsMouseVisibleChanged();
    }
  };

  function GamePlatform_set_OSVersion (value) {
    this.GamePlatform$OSVersion$value = value;
  };

  function GamePlatform_set_Window (value) {
    if (this._window === null) {
      ($T10().Mouse$WindowHandle$value = value.get_Handle().MemberwiseClone());
      $T11().PrimaryWindow = value;
    }
    this._window = value;
  };

  function GamePlatform_TargetElapsedTimeChanged () {
  };

  function GamePlatform_TargetElapsedTimeChanging (value) {
    return value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GamePlatform", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Game"), $.String]), 
      GamePlatform__ctor
    );

    $.Method({Static:false, Public:true }, "add_Activated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GamePlatform_add_Activated
    );

    $.Method({Static:false, Public:true }, "add_Deactivated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GamePlatform_add_Deactivated
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BeforeInitialize", 
      JSIL.MethodSignature.Void, 
      GamePlatform_BeforeInitialize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BeforeRun", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePlatform_BeforeRun
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Game")]), 
      GamePlatform_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      GamePlatform_Dispose$00
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePlatform_Dispose$01
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      GamePlatform_Finalize
    );

    $.Method({Static:false, Public:true }, "get_Game", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Game")), 
      GamePlatform_get_Game
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsActive", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePlatform_get_IsActive
    );

    $.Method({Static:false, Public:false}, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePlatform_get_IsDisposed
    );

    $.Method({Static:false, Public:true }, "get_IsMouseVisible", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePlatform_get_IsMouseVisible
    );

    $.Method({Static:false, Public:false}, "get_OSVersion", 
      JSIL.MethodSignature.Return($.String), 
      GamePlatform_get_OSVersion
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Window", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.GameWindow")), 
      GamePlatform_get_Window
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Log", 
      JSIL.MethodSignature.Action($.String), 
      GamePlatform_Log
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:false, Public:false, Virtual:true }, "OnIsMouseVisibleChanged", 
      JSIL.MethodSignature.Void, 
      GamePlatform_OnIsMouseVisibleChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Present", 
      JSIL.MethodSignature.Void, 
      GamePlatform_Present
    );

    $.Method({Static:false, Public:false}, "Raise", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.EventHandler`1", ["!!0"]), "!!0"], ["TEventArgs"]), 
      GamePlatform_Raise$b1
    );

    $.Method({Static:false, Public:true }, "remove_Activated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GamePlatform_remove_Activated
    );

    $.Method({Static:false, Public:true }, "remove_Deactivated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GamePlatform_remove_Deactivated
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ResetElapsedTime", 
      JSIL.MethodSignature.Void, 
      GamePlatform_ResetElapsedTime
    );

    $.Method({Static:false, Public:false}, "set_Game", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Game")), 
      GamePlatform_set_Game
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsActive", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePlatform_set_IsActive
    );

    $.Method({Static:false, Public:true }, "set_IsMouseVisible", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePlatform_set_IsMouseVisible
    );

    $.Method({Static:false, Public:false}, "set_OSVersion", 
      JSIL.MethodSignature.Action($.String), 
      GamePlatform_set_OSVersion
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Window", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameWindow")), 
      GamePlatform_set_Window
    );

    $.Method({Static:false, Public:true , Virtual:true }, "TargetElapsedTimeChanged", 
      JSIL.MethodSignature.Void, 
      GamePlatform_TargetElapsedTimeChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "TargetElapsedTimeChanging", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$asm01.TypeRef("System.TimeSpan")]), 
      GamePlatform_TargetElapsedTimeChanging
    );

    $.Field({Static:false, Public:false}, "_inactiveSleepTime", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "_needsToResetElapsedTime", $.Boolean); 
    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isActive", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isMouseVisible", $.Boolean); 
    $.Field({Static:false, Public:false}, "_window", $asm00.TypeRef("Microsoft.Xna.Framework.GameWindow")); 
    $.Field({Static:false, Public:false}, "Activated", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Deactivated", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "GamePlatform$Game$value", $asm00.TypeRef("Microsoft.Xna.Framework.Game"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePlatform$OSVersion$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Game", $asm00.TypeRef("Microsoft.Xna.Framework.Game"));

    $.Property({Static:false, Public:true }, "IsActive", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMouseVisible", $.Boolean);

    $.Property({Static:false, Public:true }, "Window", $asm00.TypeRef("Microsoft.Xna.Framework.GameWindow"));

    $.Property({Static:false, Public:false}, "OSVersion", $.String);

    $.Property({Static:false, Public:false}, "IsDisposed", $.Boolean);

    $.Event({Static:false, Public:true }, "Activated", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "Deactivated", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GameServiceContainer */ 

(function GameServiceContainer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Type, $asm01.System.Object))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Object")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function GameServiceContainer__ctor () {
    this.services = $S00().Construct();
  };

  function GameServiceContainer_AddService (type, provider) {
    if ($T01().op_Equality(type, null)) {
      throw $S01().Construct("type");
    }
    if (provider === null) {
      throw $S01().Construct("provider");
    }
    if (!$S02().CallVirtual("IsAssignableFrom", null, type, JSIL.GetType(provider))) {
      throw $S03().Construct("The provider does not match the specified service type!");
    }
    (this.services).Add(type, provider);
  };

  function GameServiceContainer_GetService (type) {
    var service = new JSIL.BoxedVariable(null);
    if ($T01().op_Equality(type, null)) {
      throw $S01().Construct("type");
    }
    if ((this.services).TryGetValue(type, /* ref */ service)) {
      var result = service.get();
    } else {
      result = null;
    }
    return result;
  };

  function GameServiceContainer_RemoveService (type) {
    if ($T01().op_Equality(type, null)) {
      throw $S01().Construct("type");
    }
    (this.services).Remove(type);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GameServiceContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GameServiceContainer__ctor
    );

    $.Method({Static:false, Public:true }, "AddService", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Object]), 
      GameServiceContainer_AddService
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetService", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type")]), 
      GameServiceContainer_GetService
    );

    $.Method({Static:false, Public:true }, "RemoveService", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      GameServiceContainer_RemoveService
    );

    $.Field({Static:false, Public:false}, "services", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $.Object])); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IServiceProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GameTime */ 

(function GameTime$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function GameTime__ctor$00 () {
    (this.GameTime$TotalGameTime$value = $T00().Zero.MemberwiseClone());
    (this.GameTime$ElapsedGameTime$value = $T00().Zero.MemberwiseClone());
    this.GameTime$IsRunningSlowly$value = false;
  };

  function GameTime__ctor$01 (totalGameTime, elapsedGameTime) {
    (this.GameTime$TotalGameTime$value = totalGameTime.MemberwiseClone());
    (this.GameTime$ElapsedGameTime$value = elapsedGameTime.MemberwiseClone());
    this.GameTime$IsRunningSlowly$value = false;
  };

  function GameTime__ctor$02 (totalRealTime, elapsedRealTime, isRunningSlowly) {
    (this.GameTime$TotalGameTime$value = totalRealTime.MemberwiseClone());
    (this.GameTime$ElapsedGameTime$value = elapsedRealTime.MemberwiseClone());
    this.GameTime$IsRunningSlowly$value = isRunningSlowly;
  };

  function GameTime_get_ElapsedGameTime () {
    return this.GameTime$ElapsedGameTime$value;
  };

  function GameTime_get_IsRunningSlowly () {
    return this.GameTime$IsRunningSlowly$value;
  };

  function GameTime_get_TotalGameTime () {
    return this.GameTime$TotalGameTime$value;
  };

  function GameTime_set_ElapsedGameTime (value) {
    this.GameTime$ElapsedGameTime$value = value.MemberwiseClone();
  };

  function GameTime_set_IsRunningSlowly (value) {
    this.GameTime$IsRunningSlowly$value = value;
  };

  function GameTime_set_TotalGameTime (value) {
    this.GameTime$TotalGameTime$value = value.MemberwiseClone();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GameTime", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GameTime__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TimeSpan"), $asm01.TypeRef("System.TimeSpan")]), 
      GameTime__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.TimeSpan"), $asm01.TypeRef("System.TimeSpan"), 
          $.Boolean
        ]), 
      GameTime__ctor$02
    );

    $.Method({Static:false, Public:true }, "get_ElapsedGameTime", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      GameTime_get_ElapsedGameTime
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsRunningSlowly", 
      JSIL.MethodSignature.Return($.Boolean), 
      GameTime_get_IsRunningSlowly
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TotalGameTime", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      GameTime_get_TotalGameTime
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ElapsedGameTime", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.TimeSpan")), 
      GameTime_set_ElapsedGameTime
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsRunningSlowly", 
      JSIL.MethodSignature.Action($.Boolean), 
      GameTime_set_IsRunningSlowly
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TotalGameTime", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.TimeSpan")), 
      GameTime_set_TotalGameTime
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GameTime$TotalGameTime$value", $asm01.TypeRef("System.TimeSpan"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GameTime$ElapsedGameTime$value", $asm01.TypeRef("System.TimeSpan"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GameTime$IsRunningSlowly$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "TotalGameTime", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "ElapsedGameTime", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IsRunningSlowly", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Xna.Framework.IDrawable */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.IDrawable", true, [], function ($) {
    $.Method({}, "get_DrawOrder", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Visible", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "add_DrawOrderChanged", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "remove_DrawOrderChanged", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "add_VisibleChanged", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "remove_VisibleChanged", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "Draw", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")));
    $.Property({}, "DrawOrder");
    $.Property({}, "Visible");
  }, []);

/* interface Microsoft.Xna.Framework.IGameComponent */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.IGameComponent", true, [], function ($) {
    $.Method({}, "Initialize", JSIL.MethodSignature.Void);
  }, []);

/* interface Microsoft.Xna.Framework.IGraphicsDeviceManager */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.IGraphicsDeviceManager", true, [], function ($) {
    $.Method({}, "BeginDraw", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "CreateDevice", JSIL.MethodSignature.Void);
    $.Method({}, "EndDraw", JSIL.MethodSignature.Void);
  }, []);

/* interface Microsoft.Xna.Framework.IUpdateable */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.IUpdateable", true, [], function ($) {
    $.Method({}, "get_Enabled", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_UpdateOrder", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "add_EnabledChanged", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "remove_EnabledChanged", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "add_UpdateOrderChanged", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "remove_UpdateOrderChanged", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "Update", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")));
    $.Property({}, "Enabled");
    $.Property({}, "UpdateOrder");
  }, []);

/* class Microsoft.Xna.Framework.MathHelper */ 

(function MathHelper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function MathHelper_Barycentric (value1, value2, value3, amount1, amount2) {
    return ((+value1 + ((+value2 - +value1) * +amount1)) + ((+value3 - +value1) * +amount2));
  };

  function MathHelper_CatmullRom (value1, value2, value3, value4, amount) {
    var amountSquared = +amount * +amount;
    return Math.fround(0.5 * ((((2 * +value2) + ((+value3 - +value1) * +amount)) + (((((2 * +value1) - (5 * +value2)) + (4 * +value3)) - +value4) * amountSquared)) + (((((3 * +value2) - +value1) - (3 * +value3)) + +value4) * (amountSquared * +amount))));
  };

  function MathHelper_Clamp$00 (value, min, max) {
    value = +(
      (+value > +max)
         ? max
         : value)
    ;
    value = +(
      (+value < +min)
         ? min
         : value)
    ;
    return value;
  };

  function MathHelper_Clamp$01 (value, min, max) {
    value = ((
      ((value | 0) > (max | 0))
         ? max
         : value)
     | 0);
    value = ((
      ((value | 0) < (min | 0))
         ? min
         : value)
     | 0);
    return value;
  };

  function MathHelper_Distance (value1, value2) {
    return Math.abs((+value1 - +value2));
  };

  function MathHelper_GetMachineEpsilonFloat () {
    var machineEpsilon = 1;

    do {
      machineEpsilon *= 0.5;
      var comparison = 1 + machineEpsilon;
    } while (comparison > 1);
    return machineEpsilon;
  };

  function MathHelper_Hermite (value1, tangent1, value2, tangent2, amount) {
    var v = +value1;
    var v2 = +value2;
    var t = +tangent1;
    var t2 = +tangent2;
    var s = +amount;
    if ($thisType.WithinEpsilon(amount, 0)) {
      var result = +value1;
    } else if ($thisType.WithinEpsilon(amount, 1)) {
      result = +value2;
    } else {
      result = (((((((2 * v) - (2 * v2)) + t2) + t) * ((s * s) * s)) + (((((3 * v2) - (3 * v)) - (2 * t)) - t2) * (s * s))) + (t * s)) + v;
    }
    return Math.fround(result);
  };

  function MathHelper_Lerp (value1, value2, amount) {
    return (+value1 + ((+value2 - +value1) * +amount));
  };

  function MathHelper_Max (value1, value2) {
    return $T03().Max(value1, value2);
  };

  function MathHelper_Min (value1, value2) {
    return $T03().Min(value1, value2);
  };

  function MathHelper_SmoothStep (value1, value2, amount) {
    return $thisType.Hermite(
      value1, 
      0, 
      value2, 
      0, 
      $S00().CallStatic($thisType, "Clamp", null, amount, 0, 1)
    );
  };

  function MathHelper_ToDegrees (radians) {
    return Math.fround(+radians * 57.295779513082323);
  };

  function MathHelper_ToRadians (degrees) {
    return Math.fround(+degrees * 0.017453292519943295);
  };

  function MathHelper_WithinEpsilon (floatA, floatB) {
    return ((Math.abs((+floatA - +floatB))) < +$thisType.MachineEpsilonFloat);
  };

  function MathHelper_WrapAngle (angle) {
    angle = Math.fround($T03().IEEERemainder(angle, 6.2831854820251465));
    if (+angle <= -3.14159274) {
      angle += 6.28318548;
    } else if (+angle > 3.14159274) {
      angle -= 6.28318548;
    }
    return angle;
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.MathHelper", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ]), 
      MathHelper_Barycentric
    );

    $.Method({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ]), 
      MathHelper_CatmullRom
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single
        ]), 
      MathHelper_Clamp$00
    );

    $.Method({Static:true , Public:false}, "Clamp", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      MathHelper_Clamp$01
    );

    $.Method({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$.Single, $.Single]), 
      MathHelper_Distance
    );

    $.Method({Static:true , Public:false}, "GetMachineEpsilonFloat", 
      JSIL.MethodSignature.Return($.Single), 
      MathHelper_GetMachineEpsilonFloat
    );

    $.Method({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ]), 
      MathHelper_Hermite
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single
        ]), 
      MathHelper_Lerp
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$.Single, $.Single]), 
      MathHelper_Max
    );

    $.Method({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$.Single, $.Single]), 
      MathHelper_Min
    );

    $.Method({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single
        ]), 
      MathHelper_SmoothStep
    );

    $.Method({Static:true , Public:true }, "ToDegrees", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      MathHelper_ToDegrees
    );

    $.Method({Static:true , Public:true }, "ToRadians", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      MathHelper_ToRadians
    );

    $.Method({Static:true , Public:false}, "WithinEpsilon", 
      new JSIL.MethodSignature($.Boolean, [$.Single, $.Single]), 
      MathHelper_WithinEpsilon
    );

    $.Method({Static:true , Public:true }, "WrapAngle", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      MathHelper_WrapAngle
    );

    $.Constant({Static:true , Public:true }, "E", 2.71828175); 
    $.Constant({Static:true , Public:true }, "Log10E", 0.4342945); 
    $.Constant({Static:true , Public:true }, "Log2E", 1.442695); 
    $.Constant({Static:true , Public:true }, "Pi", 3.14159274); 
    $.Constant({Static:true , Public:true }, "PiOver2", 1.57079637); 
    $.Constant({Static:true , Public:true }, "PiOver4", 0.7853982); 
    $.Constant({Static:true , Public:true }, "TwoPi", 6.28318548); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MachineEpsilonFloat", $.Single); 
    function MathHelper__cctor () {
      $thisType.MachineEpsilonFloat = +$thisType.GetMachineEpsilonFloat();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MathHelper__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Matrix */ 

(function Matrix$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Quaternion)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Plane)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $asm01.TypeRef("System.Single"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Single")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])
      ]))) ();
  };

  function Matrix__ctor (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
    this.M11 = +m11;
    this.M12 = +m12;
    this.M13 = +m13;
    this.M14 = +m14;
    this.M21 = +m21;
    this.M22 = +m22;
    this.M23 = +m23;
    this.M24 = +m24;
    this.M31 = +m31;
    this.M32 = +m32;
    this.M33 = +m33;
    this.M34 = +m34;
    this.M41 = +m41;
    this.M42 = +m42;
    this.M43 = +m43;
    this.M44 = +m44;
  };

  function Matrix_Add$00 (matrix1, matrix2) {
    matrix1.M11 += +matrix2.M11;
    matrix1.M12 += +matrix2.M12;
    matrix1.M13 += +matrix2.M13;
    matrix1.M14 += +matrix2.M14;
    matrix1.M21 += +matrix2.M21;
    matrix1.M22 += +matrix2.M22;
    matrix1.M23 += +matrix2.M23;
    matrix1.M24 += +matrix2.M24;
    matrix1.M31 += +matrix2.M31;
    matrix1.M32 += +matrix2.M32;
    matrix1.M33 += +matrix2.M33;
    matrix1.M34 += +matrix2.M34;
    matrix1.M41 += +matrix2.M41;
    matrix1.M42 += +matrix2.M42;
    matrix1.M43 += +matrix2.M43;
    matrix1.M44 += +matrix2.M44;
    return matrix1;
  };

  function Matrix_Add$01 (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
    result.get().M11 = +matrix1.get().M11 + +matrix2.get().M11;
    result.get().M12 = +matrix1.get().M12 + +matrix2.get().M12;
    result.get().M13 = +matrix1.get().M13 + +matrix2.get().M13;
    result.get().M14 = +matrix1.get().M14 + +matrix2.get().M14;
    result.get().M21 = +matrix1.get().M21 + +matrix2.get().M21;
    result.get().M22 = +matrix1.get().M22 + +matrix2.get().M22;
    result.get().M23 = +matrix1.get().M23 + +matrix2.get().M23;
    result.get().M24 = +matrix1.get().M24 + +matrix2.get().M24;
    result.get().M31 = +matrix1.get().M31 + +matrix2.get().M31;
    result.get().M32 = +matrix1.get().M32 + +matrix2.get().M32;
    result.get().M33 = +matrix1.get().M33 + +matrix2.get().M33;
    result.get().M34 = +matrix1.get().M34 + +matrix2.get().M34;
    result.get().M41 = +matrix1.get().M41 + +matrix2.get().M41;
    result.get().M42 = +matrix1.get().M42 + +matrix2.get().M42;
    result.get().M43 = +matrix1.get().M43 + +matrix2.get().M43;
    result.get().M44 = +matrix1.get().M44 + +matrix2.get().M44;
  };

  function Matrix_CreateBillboard$02 ($objectPosition, $cameraPosition, $cameraUpVector, cameraForwardVector) {
    var cameraUpVector = new JSIL.BoxedVariable($cameraUpVector.MemberwiseClone());
    var cameraPosition = new JSIL.BoxedVariable($cameraPosition.MemberwiseClone());
    var objectPosition = new JSIL.BoxedVariable($objectPosition.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateBillboard(
      /* ref */ objectPosition, 
      /* ref */ cameraPosition, 
      /* ref */ cameraUpVector, 
      cameraForwardVector, 
      /* ref */ result
    );
    return result.get();
  };

  function Matrix_CreateBillboard$03 (/* ref */ objectPosition, /* ref */ cameraPosition, /* ref */ cameraUpVector, cameraForwardVector, /* ref */ result) {
    var vector = new JSIL.BoxedVariable(new ($T01())());
    var vector2 = new JSIL.BoxedVariable(new ($T01())());
    var vector3 = new JSIL.BoxedVariable(new ($T01())());
    vector.get().X = +objectPosition.get().X - +cameraPosition.get().X;
    vector.get().Y = +objectPosition.get().Y - +cameraPosition.get().Y;
    vector.get().Z = +objectPosition.get().Z - +cameraPosition.get().Z;
    var num = +(vector.get()).LengthSquared();
    if (num < 0.0001) {
      vector.set((
          (cameraForwardVector !== null)
             ? $T01().op_UnaryNegation(JSIL.Nullable_Value(cameraForwardVector).MemberwiseClone())
             : $T01().get_Forward())
        .MemberwiseClone());
    } else {
      $S00().CallStatic($T01(), "Multiply", null, /* ref */ vector, +((1 / Math.fround(Math.sqrt(num)))), /* ref */ vector);
    }
    $T01().Cross(/* ref */ cameraUpVector, /* ref */ vector, /* ref */ vector2);
    (vector2.get()).Normalize();
    $T01().Cross(/* ref */ vector, /* ref */ vector2, /* ref */ vector3);
    result.get().M11 = +vector2.get().X;
    result.get().M12 = +vector2.get().Y;
    result.get().M13 = +vector2.get().Z;
    result.get().M14 = 0;
    result.get().M21 = +vector3.get().X;
    result.get().M22 = +vector3.get().Y;
    result.get().M23 = +vector3.get().Z;
    result.get().M24 = 0;
    result.get().M31 = +vector.get().X;
    result.get().M32 = +vector.get().Y;
    result.get().M33 = +vector.get().Z;
    result.get().M34 = 0;
    result.get().M41 = +objectPosition.get().X;
    result.get().M42 = +objectPosition.get().Y;
    result.get().M43 = +objectPosition.get().Z;
    result.get().M44 = 1;
  };

  function Matrix_CreateConstrainedBillboard$04 ($objectPosition, $cameraPosition, $rotateAxis, cameraForwardVector, objectForwardVector) {
    var rotateAxis = new JSIL.BoxedVariable($rotateAxis.MemberwiseClone());
    var cameraPosition = new JSIL.BoxedVariable($cameraPosition.MemberwiseClone());
    var objectPosition = new JSIL.BoxedVariable($objectPosition.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateConstrainedBillboard(
      /* ref */ objectPosition, 
      /* ref */ cameraPosition, 
      /* ref */ rotateAxis, 
      cameraForwardVector, 
      objectForwardVector, 
      /* ref */ result
    );
    return result.get();
  };

  function Matrix_CreateConstrainedBillboard$05 (/* ref */ objectPosition, /* ref */ cameraPosition, /* ref */ rotateAxis, cameraForwardVector, objectForwardVector, /* ref */ result) {
    var vector2 = new JSIL.BoxedVariable(new ($T01())());
    var num3 = new JSIL.BoxedVariable(0);
    var vector5 = new JSIL.BoxedVariable(new ($T01())());
    vector2.get().X = +objectPosition.get().X - +cameraPosition.get().X;
    vector2.get().Y = +objectPosition.get().Y - +cameraPosition.get().Y;
    vector2.get().Z = +objectPosition.get().Z - +cameraPosition.get().Z;
    var num2 = +(vector2.get()).LengthSquared();
    if (num2 < 0.0001) {
      vector2.set((
          (cameraForwardVector !== null)
             ? $T01().op_UnaryNegation(JSIL.Nullable_Value(cameraForwardVector).MemberwiseClone())
             : $T01().get_Forward())
        .MemberwiseClone());
    } else {
      $S00().CallStatic($T01(), "Multiply", null, /* ref */ vector2, +((1 / Math.fround(Math.sqrt(num2)))), /* ref */ vector2);
    }
    var vector3 = new JSIL.BoxedVariable(rotateAxis.get().MemberwiseClone());
    $T01().Dot(/* ref */ rotateAxis, /* ref */ vector2, /* ref */ num3);
    var vector4 = new JSIL.BoxedVariable(null);
    if ((Math.abs(num3.get())) > 0.9982547) {
      if (objectForwardVector !== null) {
        vector4.set(JSIL.Nullable_Value(objectForwardVector).MemberwiseClone());
        $T01().Dot(/* ref */ rotateAxis, /* ref */ vector4, /* ref */ num3);
        if ((Math.abs(num3.get())) > 0.9982547) {
          num3.set(((+rotateAxis.get().X * +$T01().get_Forward().X) + (+rotateAxis.get().Y * +$T01().get_Forward().Y)) + (+rotateAxis.get().Z * +$T01().get_Forward().Z));
          vector4.set((
              ((Math.abs(num3.get())) > 0.9982547)
                 ? $T01().get_Right()
                 : $T01().get_Forward())
            .MemberwiseClone());
        }
      } else {
        num3.set(((+rotateAxis.get().X * +$T01().get_Forward().X) + (+rotateAxis.get().Y * +$T01().get_Forward().Y)) + (+rotateAxis.get().Z * +$T01().get_Forward().Z));
        vector4.set((
            ((Math.abs(num3.get())) > 0.9982547)
               ? $T01().get_Right()
               : $T01().get_Forward())
          .MemberwiseClone());
      }
      $T01().Cross(/* ref */ rotateAxis, /* ref */ vector4, /* ref */ vector5);
      (vector5.get()).Normalize();
      $T01().Cross(/* ref */ vector5, /* ref */ rotateAxis, /* ref */ vector4);
      (vector4.get()).Normalize();
    } else {
      $T01().Cross(/* ref */ rotateAxis, /* ref */ vector2, /* ref */ vector5);
      (vector5.get()).Normalize();
      $T01().Cross(/* ref */ vector5, /* ref */ vector3, /* ref */ vector4);
      (vector4.get()).Normalize();
    }
    result.get().M11 = +vector5.get().X;
    result.get().M12 = +vector5.get().Y;
    result.get().M13 = +vector5.get().Z;
    result.get().M14 = 0;
    result.get().M21 = +vector3.get().X;
    result.get().M22 = +vector3.get().Y;
    result.get().M23 = +vector3.get().Z;
    result.get().M24 = 0;
    result.get().M31 = +vector4.get().X;
    result.get().M32 = +vector4.get().Y;
    result.get().M33 = +vector4.get().Z;
    result.get().M34 = 0;
    result.get().M41 = +objectPosition.get().X;
    result.get().M42 = +objectPosition.get().Y;
    result.get().M43 = +objectPosition.get().Z;
    result.get().M44 = 1;
  };

  function Matrix_CreateFromAxisAngle$06 ($axis, angle) {
    var axis = new JSIL.BoxedVariable($axis.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateFromAxisAngle(/* ref */ axis, angle, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateFromAxisAngle$07 (/* ref */ axis, angle, /* ref */ result) {
    var x = +axis.get().X;
    var y = +axis.get().Y;
    var z = +axis.get().Z;
    var num2 = Math.fround(Math.sin(angle));
    var num3 = Math.fround(Math.cos(angle));
    var num4 = x * x;
    var num5 = y * y;
    var num6 = z * z;
    var num7 = x * y;
    var num8 = x * z;
    var num9 = y * z;
    result.get().M11 = num4 + (num3 * (1 - num4));
    result.get().M12 = (num7 - (num3 * num7)) + (num2 * z);
    result.get().M13 = (num8 - (num3 * num8)) - (num2 * y);
    result.get().M14 = 0;
    result.get().M21 = (num7 - (num3 * num7)) - (num2 * z);
    result.get().M22 = num5 + (num3 * (1 - num5));
    result.get().M23 = (num9 - (num3 * num9)) + (num2 * x);
    result.get().M24 = 0;
    result.get().M31 = (num8 - (num3 * num8)) + (num2 * y);
    result.get().M32 = (num9 - (num3 * num9)) - (num2 * x);
    result.get().M33 = num6 + (num3 * (1 - num6));
    result.get().M34 = 0;
    result.get().M41 = 0;
    result.get().M42 = 0;
    result.get().M43 = 0;
    result.get().M44 = 1;
  };

  function Matrix_CreateFromQuaternion$08 ($quaternion) {
    var quaternion = new JSIL.BoxedVariable($quaternion.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateFromQuaternion(/* ref */ quaternion, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateFromQuaternion$09 (/* ref */ quaternion, /* ref */ result) {
    var num9 = +quaternion.get().X * +quaternion.get().X;
    var num10 = +quaternion.get().Y * +quaternion.get().Y;
    var num11 = +quaternion.get().Z * +quaternion.get().Z;
    var num12 = +quaternion.get().X * +quaternion.get().Y;
    var num13 = +quaternion.get().Z * +quaternion.get().W;
    var num14 = +quaternion.get().Z * +quaternion.get().X;
    var num15 = +quaternion.get().Y * +quaternion.get().W;
    var num16 = +quaternion.get().Y * +quaternion.get().Z;
    var num17 = +quaternion.get().X * +quaternion.get().W;
    result.get().M11 = 1 - (2 * (num10 + num11));
    result.get().M12 = 2 * (num12 + num13);
    result.get().M13 = 2 * (num14 - num15);
    result.get().M14 = 0;
    result.get().M21 = 2 * (num12 - num13);
    result.get().M22 = 1 - (2 * (num11 + num9));
    result.get().M23 = 2 * (num16 + num17);
    result.get().M24 = 0;
    result.get().M31 = 2 * (num14 + num15);
    result.get().M32 = 2 * (num16 - num17);
    result.get().M33 = 1 - (2 * (num10 + num9));
    result.get().M34 = 0;
    result.get().M41 = 0;
    result.get().M42 = 0;
    result.get().M43 = 0;
    result.get().M44 = 1;
  };

  function Matrix_CreateFromYawPitchRoll$0A (yaw, pitch, roll) {
    var matrix = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateFromYawPitchRoll(yaw, pitch, roll, /* ref */ matrix);
    return matrix.get();
  };

  function Matrix_CreateFromYawPitchRoll$0B (yaw, pitch, roll, /* ref */ result) {
    var quaternion = new JSIL.BoxedVariable(new ($T04())());
    $T04().CreateFromYawPitchRoll(yaw, pitch, roll, /* ref */ quaternion);
    $thisType.CreateFromQuaternion(/* ref */ quaternion, /* ref */ result);
  };

  function Matrix_CreateLookAt$0C ($cameraPosition, $cameraTarget, $cameraUpVector) {
    var cameraUpVector = new JSIL.BoxedVariable($cameraUpVector.MemberwiseClone());
    var cameraTarget = new JSIL.BoxedVariable($cameraTarget.MemberwiseClone());
    var cameraPosition = new JSIL.BoxedVariable($cameraPosition.MemberwiseClone());
    var matrix = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateLookAt(/* ref */ cameraPosition, /* ref */ cameraTarget, /* ref */ cameraUpVector, /* ref */ matrix);
    return matrix.get();
  };

  function Matrix_CreateLookAt$0D (/* ref */ cameraPosition, /* ref */ cameraTarget, /* ref */ cameraUpVector, /* ref */ result) {
    var vectorA = $T01().Normalize($T01().op_Subtraction(cameraPosition.get().MemberwiseClone(), cameraTarget.get()).MemberwiseClone()).MemberwiseClone();
    var vectorB = $T01().Normalize($T01().Cross(cameraUpVector.get().MemberwiseClone(), vectorA.MemberwiseClone()).MemberwiseClone()).MemberwiseClone();
    var vectorC = $T01().Cross(vectorA.MemberwiseClone(), vectorB.MemberwiseClone()).MemberwiseClone();
    result.get().M11 = +vectorB.X;
    result.get().M12 = +vectorC.X;
    result.get().M13 = +vectorA.X;
    result.get().M14 = 0;
    result.get().M21 = +vectorB.Y;
    result.get().M22 = +vectorC.Y;
    result.get().M23 = +vectorA.Y;
    result.get().M24 = 0;
    result.get().M31 = +vectorB.Z;
    result.get().M32 = +vectorC.Z;
    result.get().M33 = +vectorA.Z;
    result.get().M34 = 0;
    result.get().M41 = -$T01().Dot(vectorB, cameraPosition.get());
    result.get().M42 = -$T01().Dot(vectorC, cameraPosition.get());
    result.get().M43 = -$T01().Dot(vectorA, cameraPosition.get());
    result.get().M44 = 1;
  };

  function Matrix_CreateOrthographic$0E (width, height, zNearPlane, zFarPlane) {
    var matrix = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateOrthographic(
      width, 
      height, 
      zNearPlane, 
      zFarPlane, 
      /* ref */ matrix
    );
    return matrix.get();
  };

  function Matrix_CreateOrthographic$0F (width, height, zNearPlane, zFarPlane, /* ref */ result) {
    result.get().M11 = +((2 / +width));
    result.get().M12 = result.get().M13 = result.get().M14 = 0;
    result.get().M22 = +((2 / +height));
    result.get().M21 = result.get().M23 = result.get().M24 = 0;
    result.get().M33 = +((1 / (+zNearPlane - +zFarPlane)));
    result.get().M31 = result.get().M32 = result.get().M34 = 0;
    result.get().M41 = result.get().M42 = 0;
    result.get().M43 = +((+zNearPlane / (+zNearPlane - +zFarPlane)));
    result.get().M44 = 1;
  };

  function Matrix_CreateOrthographicOffCenter$10 (left, right, bottom, top, zNearPlane, zFarPlane) {
    var matrix = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateOrthographicOffCenter(
      left, 
      right, 
      bottom, 
      top, 
      zNearPlane, 
      zFarPlane, 
      /* ref */ matrix
    );
    return matrix.get();
  };

  function Matrix_CreateOrthographicOffCenter$11 (left, right, bottom, top, zNearPlane, zFarPlane, /* ref */ result) {
    result.get().M11 = Math.fround(+(2 / (+right - +left)));
    result.get().M12 = 0;
    result.get().M13 = 0;
    result.get().M14 = 0;
    result.get().M21 = 0;
    result.get().M22 = Math.fround(+(2 / (+top - +bottom)));
    result.get().M23 = 0;
    result.get().M24 = 0;
    result.get().M31 = 0;
    result.get().M32 = 0;
    result.get().M33 = Math.fround(+(1 / (+zNearPlane - +zFarPlane)));
    result.get().M34 = 0;
    result.get().M41 = Math.fround(+((+left + +right) / (+left - +right)));
    result.get().M42 = Math.fround(+((+top + +bottom) / (+bottom - +top)));
    result.get().M43 = Math.fround(+(+zNearPlane / (+zNearPlane - +zFarPlane)));
    result.get().M44 = 1;
  };

  function Matrix_CreatePerspective$12 (width, height, nearPlaneDistance, farPlaneDistance) {
    var matrix = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreatePerspective(
      width, 
      height, 
      nearPlaneDistance, 
      farPlaneDistance, 
      /* ref */ matrix
    );
    return matrix.get();
  };

  function Matrix_CreatePerspective$13 (width, height, nearPlaneDistance, farPlaneDistance, /* ref */ result) {
    if (+nearPlaneDistance <= 0) {
      throw $S01().Construct("nearPlaneDistance <= 0");
    }
    if (+farPlaneDistance <= 0) {
      throw $S01().Construct("farPlaneDistance <= 0");
    }
    if (+nearPlaneDistance >= +farPlaneDistance) {
      throw $S01().Construct("nearPlaneDistance >= farPlaneDistance");
    }
    result.get().M11 = +(((2 * +nearPlaneDistance) / +width));
    result.get().M12 = result.get().M13 = result.get().M14 = 0;
    result.get().M22 = +(((2 * +nearPlaneDistance) / +height));
    result.get().M21 = result.get().M23 = result.get().M24 = 0;
    result.get().M33 = +((+farPlaneDistance / (+nearPlaneDistance - +farPlaneDistance)));
    result.get().M31 = result.get().M32 = 0;
    result.get().M34 = -1;
    result.get().M41 = result.get().M42 = result.get().M44 = 0;
    result.get().M43 = +(((+nearPlaneDistance * +farPlaneDistance) / (+nearPlaneDistance - +farPlaneDistance)));
  };

  function Matrix_CreatePerspectiveFieldOfView$14 (fieldOfView, aspectRatio, nearPlaneDistance, farPlaneDistance) {
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreatePerspectiveFieldOfView(
      fieldOfView, 
      aspectRatio, 
      nearPlaneDistance, 
      farPlaneDistance, 
      /* ref */ result
    );
    return result.get();
  };

  function Matrix_CreatePerspectiveFieldOfView$15 (fieldOfView, aspectRatio, nearPlaneDistance, farPlaneDistance, /* ref */ result) {
    if (!((+fieldOfView > 0) && (+fieldOfView < 3.141593))) {
      throw $S01().Construct("fieldOfView <= 0 or >= PI");
    }
    if (+nearPlaneDistance <= 0) {
      throw $S01().Construct("nearPlaneDistance <= 0");
    }
    if (+farPlaneDistance <= 0) {
      throw $S01().Construct("farPlaneDistance <= 0");
    }
    if (+nearPlaneDistance >= +farPlaneDistance) {
      throw $S01().Construct("nearPlaneDistance >= farPlaneDistance");
    }
    var num = +((1 / Math.fround(Math.tan((+fieldOfView * 0.5)))));
    var num2 = +((num / +aspectRatio));
    result.get().M11 = num2;
    result.get().M12 = result.get().M13 = result.get().M14 = 0;
    result.get().M22 = num;
    result.get().M21 = result.get().M23 = result.get().M24 = 0;
    result.get().M31 = result.get().M32 = 0;
    result.get().M33 = +((+farPlaneDistance / (+nearPlaneDistance - +farPlaneDistance)));
    result.get().M34 = -1;
    result.get().M41 = result.get().M42 = result.get().M44 = 0;
    result.get().M43 = +(((+nearPlaneDistance * +farPlaneDistance) / (+nearPlaneDistance - +farPlaneDistance)));
  };

  function Matrix_CreatePerspectiveOffCenter$16 (left, right, bottom, top, nearPlaneDistance, farPlaneDistance) {
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreatePerspectiveOffCenter(
      left, 
      right, 
      bottom, 
      top, 
      nearPlaneDistance, 
      farPlaneDistance, 
      /* ref */ result
    );
    return result.get();
  };

  function Matrix_CreatePerspectiveOffCenter$17 (left, right, bottom, top, nearPlaneDistance, farPlaneDistance, /* ref */ result) {
    if (+nearPlaneDistance <= 0) {
      throw $S01().Construct("nearPlaneDistance <= 0");
    }
    if (+farPlaneDistance <= 0) {
      throw $S01().Construct("farPlaneDistance <= 0");
    }
    if (+nearPlaneDistance >= +farPlaneDistance) {
      throw $S01().Construct("nearPlaneDistance >= farPlaneDistance");
    }
    result.get().M11 = +(((2 * +nearPlaneDistance) / (+right - +left)));
    result.get().M12 = result.get().M13 = result.get().M14 = 0;
    result.get().M22 = +(((2 * +nearPlaneDistance) / (+top - +bottom)));
    result.get().M21 = result.get().M23 = result.get().M24 = 0;
    result.get().M31 = +(((+left + +right) / (+right - +left)));
    result.get().M32 = +(((+top + +bottom) / (+top - +bottom)));
    result.get().M33 = +((+farPlaneDistance / (+nearPlaneDistance - +farPlaneDistance)));
    result.get().M34 = -1;
    result.get().M43 = +(((+nearPlaneDistance * +farPlaneDistance) / (+nearPlaneDistance - +farPlaneDistance)));
    result.get().M41 = result.get().M42 = result.get().M44 = 0;
  };

  function Matrix_CreateReflection$18 ($value) {
    var value = new JSIL.BoxedVariable($value.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateReflection(/* ref */ value, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateReflection$19 (/* ref */ value, /* ref */ result) {
    var plane = new JSIL.BoxedVariable(new ($T06())());
    $T06().Normalize(/* ref */ value, /* ref */ plane);
    (value.get()).Normalize();
    var x = +plane.get().Normal.X;
    var y = +plane.get().Normal.Y;
    var z = +plane.get().Normal.Z;
    var num3 = -2 * x;
    var num4 = -2 * y;
    var num5 = -2 * z;
    result.get().M11 = (num3 * x) + 1;
    result.get().M12 = num4 * x;
    result.get().M13 = num5 * x;
    result.get().M14 = 0;
    result.get().M21 = num3 * y;
    result.get().M22 = (num4 * y) + 1;
    result.get().M23 = num5 * y;
    result.get().M24 = 0;
    result.get().M31 = num3 * z;
    result.get().M32 = num4 * z;
    result.get().M33 = (num5 * z) + 1;
    result.get().M34 = 0;
    result.get().M41 = num3 * +plane.get().D;
    result.get().M42 = num4 * +plane.get().D;
    result.get().M43 = num5 * +plane.get().D;
    result.get().M44 = 1;
  };

  function Matrix_CreateRotationX$1A (radians) {
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateRotationX(radians, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateRotationX$1B (radians, /* ref */ result) {
    result.set($thisType.get_Identity().MemberwiseClone());
    var val = Math.fround(Math.cos(radians));
    var val2 = Math.fround(Math.sin(radians));
    result.get().M22 = val;
    result.get().M23 = val2;
    result.get().M32 = -val2;
    result.get().M33 = val;
  };

  function Matrix_CreateRotationY$1C (radians) {
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateRotationY(radians, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateRotationY$1D (radians, /* ref */ result) {
    result.set($thisType.get_Identity().MemberwiseClone());
    var val = Math.fround(Math.cos(radians));
    var val2 = Math.fround(Math.sin(radians));
    result.get().M11 = val;
    result.get().M13 = -val2;
    result.get().M31 = val2;
    result.get().M33 = val;
  };

  function Matrix_CreateRotationZ$1E (radians) {
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateRotationZ(radians, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateRotationZ$1F (radians, /* ref */ result) {
    result.set($thisType.get_Identity().MemberwiseClone());
    var val = Math.fround(Math.cos(radians));
    var val2 = Math.fround(Math.sin(radians));
    result.get().M11 = val;
    result.get().M12 = val2;
    result.get().M21 = -val2;
    result.get().M22 = val;
  };

  function Matrix_CreateScale$20 (scale) {
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateScale(scale, scale, scale, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateScale$21 (scale, /* ref */ result) {
    $thisType.CreateScale(scale, scale, scale, /* ref */ result);
  };

  function Matrix_CreateScale$22 (xScale, yScale, zScale) {
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateScale(xScale, yScale, zScale, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateScale$23 (xScale, yScale, zScale, /* ref */ result) {
    result.get().M11 = +xScale;
    result.get().M12 = 0;
    result.get().M13 = 0;
    result.get().M14 = 0;
    result.get().M21 = 0;
    result.get().M22 = +yScale;
    result.get().M23 = 0;
    result.get().M24 = 0;
    result.get().M31 = 0;
    result.get().M32 = 0;
    result.get().M33 = +zScale;
    result.get().M34 = 0;
    result.get().M41 = 0;
    result.get().M42 = 0;
    result.get().M43 = 0;
    result.get().M44 = 1;
  };

  function Matrix_CreateScale$24 ($scales) {
    var scales = new JSIL.BoxedVariable($scales);
    var result = new JSIL.BoxedVariable(new $thisType());
    $S02().CallStatic($thisType, "CreateScale", null, /* ref */ scales, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateScale$25 (/* ref */ scales, /* ref */ result) {
    result.get().M11 = +scales.get().X;
    result.get().M12 = 0;
    result.get().M13 = 0;
    result.get().M14 = 0;
    result.get().M21 = 0;
    result.get().M22 = +scales.get().Y;
    result.get().M23 = 0;
    result.get().M24 = 0;
    result.get().M31 = 0;
    result.get().M32 = 0;
    result.get().M33 = +scales.get().Z;
    result.get().M34 = 0;
    result.get().M41 = 0;
    result.get().M42 = 0;
    result.get().M43 = 0;
    result.get().M44 = 1;
  };

  function Matrix_CreateShadow$26 ($lightDirection, $plane) {
    var plane = new JSIL.BoxedVariable($plane.MemberwiseClone());
    var lightDirection = new JSIL.BoxedVariable($lightDirection.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateShadow(/* ref */ lightDirection, /* ref */ plane, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateShadow$27 (/* ref */ lightDirection, /* ref */ plane, /* ref */ result) {
    var dot = ((+plane.get().Normal.X * +lightDirection.get().X) + (+plane.get().Normal.Y * +lightDirection.get().Y)) + (+plane.get().Normal.Z * +lightDirection.get().Z);
    var x = -plane.get().Normal.X;
    var y = -plane.get().Normal.Y;
    var z = -plane.get().Normal.Z;
    var d = -plane.get().D;
    result.get().M11 = (x * +lightDirection.get().X) + dot;
    result.get().M12 = x * +lightDirection.get().Y;
    result.get().M13 = x * +lightDirection.get().Z;
    result.get().M14 = 0;
    result.get().M21 = y * +lightDirection.get().X;
    result.get().M22 = (y * +lightDirection.get().Y) + dot;
    result.get().M23 = y * +lightDirection.get().Z;
    result.get().M24 = 0;
    result.get().M31 = z * +lightDirection.get().X;
    result.get().M32 = z * +lightDirection.get().Y;
    result.get().M33 = (z * +lightDirection.get().Z) + dot;
    result.get().M34 = 0;
    result.get().M41 = d * +lightDirection.get().X;
    result.get().M42 = d * +lightDirection.get().Y;
    result.get().M43 = d * +lightDirection.get().Z;
    result.get().M44 = dot;
  };

  function Matrix_CreateTranslation$28 (xPosition, yPosition, zPosition) {
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateTranslation(xPosition, yPosition, zPosition, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateTranslation$29 (/* ref */ position, /* ref */ result) {
    result.get().M11 = 1;
    result.get().M12 = 0;
    result.get().M13 = 0;
    result.get().M14 = 0;
    result.get().M21 = 0;
    result.get().M22 = 1;
    result.get().M23 = 0;
    result.get().M24 = 0;
    result.get().M31 = 0;
    result.get().M32 = 0;
    result.get().M33 = 1;
    result.get().M34 = 0;
    result.get().M41 = +position.get().X;
    result.get().M42 = +position.get().Y;
    result.get().M43 = +position.get().Z;
    result.get().M44 = 1;
  };

  function Matrix_CreateTranslation$2A ($position) {
    var position = new JSIL.BoxedVariable($position.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateTranslation(/* ref */ position, /* ref */ result);
    return result.get();
  };

  function Matrix_CreateTranslation$2B (xPosition, yPosition, zPosition, /* ref */ result) {
    result.get().M11 = 1;
    result.get().M12 = 0;
    result.get().M13 = 0;
    result.get().M14 = 0;
    result.get().M21 = 0;
    result.get().M22 = 1;
    result.get().M23 = 0;
    result.get().M24 = 0;
    result.get().M31 = 0;
    result.get().M32 = 0;
    result.get().M33 = 1;
    result.get().M34 = 0;
    result.get().M41 = +xPosition;
    result.get().M42 = +yPosition;
    result.get().M43 = +zPosition;
    result.get().M44 = 1;
  };

  function Matrix_CreateWorld$2C ($position, $forward, $up) {
    var up = new JSIL.BoxedVariable($up);
    var forward = new JSIL.BoxedVariable($forward);
    var position = new JSIL.BoxedVariable($position);
    var ret = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateWorld(/* ref */ position, /* ref */ forward, /* ref */ up, /* ref */ ret);
    return ret.get();
  };

  function Matrix_CreateWorld$2D (/* ref */ position, /* ref */ forward, /* ref */ up, /* ref */ result) {
    var z = new JSIL.BoxedVariable(new ($T01())());
    var x = new JSIL.BoxedVariable(new ($T01())());
    var y = new JSIL.BoxedVariable(new ($T01())());
    $T01().Normalize(/* ref */ forward, /* ref */ z);
    $T01().Cross(/* ref */ forward, /* ref */ up, /* ref */ x);
    $T01().Cross(/* ref */ x, /* ref */ forward, /* ref */ y);
    (x.get()).Normalize();
    (y.get()).Normalize();
    result.set(new $thisType());
    (result.get().Right = x.get().MemberwiseClone());
    (result.get().Up = y.get().MemberwiseClone());
    (result.get().Forward = z.get().MemberwiseClone());
    (result.get().Translation = position.get().MemberwiseClone());
    result.get().M44 = 1;
  };

  function Matrix_Decompose (/* ref */ scale, /* ref */ rotation, /* ref */ translation) {
    var m = new $thisType();
    translation.get().X = +this.M41;
    translation.get().Y = +this.M42;
    translation.get().Z = +this.M43;
    var xs = +((
        (($S03().CallStatic($T02(), "Sign", null, ((+this.M11 * +this.M12) * +this.M13) * +this.M14) | 0) < 0)
           ? -1
           : 1)
    );
    var ys = +((
        (($S03().CallStatic($T02(), "Sign", null, ((+this.M21 * +this.M22) * +this.M23) * +this.M24) | 0) < 0)
           ? -1
           : 1)
    );
    var zs = +((
        (($S03().CallStatic($T02(), "Sign", null, ((+this.M31 * +this.M32) * +this.M33) * +this.M34) | 0) < 0)
           ? -1
           : 1)
    );
    scale.get().X = xs * Math.fround(Math.sqrt((((+this.M11 * +this.M11) + (+this.M12 * +this.M12)) + (+this.M13 * +this.M13))));
    scale.get().Y = ys * Math.fround(Math.sqrt((((+this.M21 * +this.M21) + (+this.M22 * +this.M22)) + (+this.M23 * +this.M23))));
    scale.get().Z = zs * Math.fround(Math.sqrt((((+this.M31 * +this.M31) + (+this.M32 * +this.M32)) + (+this.M33 * +this.M33))));
    if (!(!($T07().WithinEpsilon(scale.get().X, 0) || 
          $T07().WithinEpsilon(scale.get().Y, 0)) && !$T07().WithinEpsilon(scale.get().Z, 0))) {
      rotation.set($T04().get_Identity().MemberwiseClone());
      var result = false;
    } else {
      $thisType.prototype._ctor.call(m, 
        +((+this.M11 / +scale.get().X)), 
        +((+this.M12 / +scale.get().X)), 
        +((+this.M13 / +scale.get().X)), 
        0, 
        +((+this.M21 / +scale.get().Y)), 
        +((+this.M22 / +scale.get().Y)), 
        +((+this.M23 / +scale.get().Y)), 
        0, 
        +((+this.M31 / +scale.get().Z)), 
        +((+this.M32 / +scale.get().Z)), 
        +((+this.M33 / +scale.get().Z)), 
        0, 
        0, 
        0, 
        0, 
        1
      );
      rotation.set($T04().CreateFromRotationMatrix(m.MemberwiseClone()).MemberwiseClone());
      result = true;
    }
    return result;
  };

  function Matrix_Determinant () {
    var num18 = (+this.M33 * +this.M44) - (+this.M34 * +this.M43);
    var num19 = (+this.M32 * +this.M44) - (+this.M34 * +this.M42);
    var num20 = (+this.M32 * +this.M43) - (+this.M33 * +this.M42);
    var num21 = (+this.M31 * +this.M44) - (+this.M34 * +this.M41);
    var num22 = (+this.M31 * +this.M43) - (+this.M33 * +this.M41);
    var num23 = (+this.M31 * +this.M42) - (+this.M32 * +this.M41);
    return ((((+this.M11 * (((+this.M22 * num18) - (+this.M23 * num19)) + (+this.M24 * num20))) - (+this.M12 * (((+this.M21 * num18) - (+this.M23 * num21)) + (+this.M24 * num22)))) + (+this.M13 * (((+this.M21 * num19) - (+this.M22 * num21)) + (+this.M24 * num23)))) - (+this.M14 * (((+this.M21 * num20) - (+this.M22 * num22)) + (+this.M23 * num23))));
  };

  function Matrix_Divide$2E (matrix1, matrix2) {
    matrix1.M11 = +((+matrix1.M11 / +matrix2.M11));
    matrix1.M12 = +((+matrix1.M12 / +matrix2.M12));
    matrix1.M13 = +((+matrix1.M13 / +matrix2.M13));
    matrix1.M14 = +((+matrix1.M14 / +matrix2.M14));
    matrix1.M21 = +((+matrix1.M21 / +matrix2.M21));
    matrix1.M22 = +((+matrix1.M22 / +matrix2.M22));
    matrix1.M23 = +((+matrix1.M23 / +matrix2.M23));
    matrix1.M24 = +((+matrix1.M24 / +matrix2.M24));
    matrix1.M31 = +((+matrix1.M31 / +matrix2.M31));
    matrix1.M32 = +((+matrix1.M32 / +matrix2.M32));
    matrix1.M33 = +((+matrix1.M33 / +matrix2.M33));
    matrix1.M34 = +((+matrix1.M34 / +matrix2.M34));
    matrix1.M41 = +((+matrix1.M41 / +matrix2.M41));
    matrix1.M42 = +((+matrix1.M42 / +matrix2.M42));
    matrix1.M43 = +((+matrix1.M43 / +matrix2.M43));
    matrix1.M44 = +((+matrix1.M44 / +matrix2.M44));
    return matrix1;
  };

  function Matrix_Divide$2F (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
    result.get().M11 = +((+matrix1.get().M11 / +matrix2.get().M11));
    result.get().M12 = +((+matrix1.get().M12 / +matrix2.get().M12));
    result.get().M13 = +((+matrix1.get().M13 / +matrix2.get().M13));
    result.get().M14 = +((+matrix1.get().M14 / +matrix2.get().M14));
    result.get().M21 = +((+matrix1.get().M21 / +matrix2.get().M21));
    result.get().M22 = +((+matrix1.get().M22 / +matrix2.get().M22));
    result.get().M23 = +((+matrix1.get().M23 / +matrix2.get().M23));
    result.get().M24 = +((+matrix1.get().M24 / +matrix2.get().M24));
    result.get().M31 = +((+matrix1.get().M31 / +matrix2.get().M31));
    result.get().M32 = +((+matrix1.get().M32 / +matrix2.get().M32));
    result.get().M33 = +((+matrix1.get().M33 / +matrix2.get().M33));
    result.get().M34 = +((+matrix1.get().M34 / +matrix2.get().M34));
    result.get().M41 = +((+matrix1.get().M41 / +matrix2.get().M41));
    result.get().M42 = +((+matrix1.get().M42 / +matrix2.get().M42));
    result.get().M43 = +((+matrix1.get().M43 / +matrix2.get().M43));
    result.get().M44 = +((+matrix1.get().M44 / +matrix2.get().M44));
  };

  function Matrix_Divide$30 (matrix1, divider) {
    var num = +((1 / +divider));
    matrix1.M11 *= num;
    matrix1.M12 *= num;
    matrix1.M13 *= num;
    matrix1.M14 *= num;
    matrix1.M21 *= num;
    matrix1.M22 *= num;
    matrix1.M23 *= num;
    matrix1.M24 *= num;
    matrix1.M31 *= num;
    matrix1.M32 *= num;
    matrix1.M33 *= num;
    matrix1.M34 *= num;
    matrix1.M41 *= num;
    matrix1.M42 *= num;
    matrix1.M43 *= num;
    matrix1.M44 *= num;
    return matrix1;
  };

  function Matrix_Divide$31 (/* ref */ matrix1, divider, /* ref */ result) {
    var num = +((1 / +divider));
    result.get().M11 = +matrix1.get().M11 * num;
    result.get().M12 = +matrix1.get().M12 * num;
    result.get().M13 = +matrix1.get().M13 * num;
    result.get().M14 = +matrix1.get().M14 * num;
    result.get().M21 = +matrix1.get().M21 * num;
    result.get().M22 = +matrix1.get().M22 * num;
    result.get().M23 = +matrix1.get().M23 * num;
    result.get().M24 = +matrix1.get().M24 * num;
    result.get().M31 = +matrix1.get().M31 * num;
    result.get().M32 = +matrix1.get().M32 * num;
    result.get().M33 = +matrix1.get().M33 * num;
    result.get().M34 = +matrix1.get().M34 * num;
    result.get().M41 = +matrix1.get().M41 * num;
    result.get().M42 = +matrix1.get().M42 * num;
    result.get().M43 = +matrix1.get().M43 * num;
    result.get().M44 = +matrix1.get().M44 * num;
  };

  function Matrix_Equals$32 (other) {
    return (!(!$T07().WithinEpsilon(this.M11, other.M11) || 
        !$T07().WithinEpsilon(this.M12, other.M12) || 
        !$T07().WithinEpsilon(this.M13, other.M13) || 
        !$T07().WithinEpsilon(this.M14, other.M14) || 
        !$T07().WithinEpsilon(this.M21, other.M21) || 
        !$T07().WithinEpsilon(this.M22, other.M22) || 
        !$T07().WithinEpsilon(this.M23, other.M23) || 
        !$T07().WithinEpsilon(this.M24, other.M24) || 
        !$T07().WithinEpsilon(this.M31, other.M31) || 
        !$T07().WithinEpsilon(this.M32, other.M32) || 
        !$T07().WithinEpsilon(this.M33, other.M33) || 
        !$T07().WithinEpsilon(this.M34, other.M34) || 
        !$T07().WithinEpsilon(this.M41, other.M41) || 
        !$T07().WithinEpsilon(this.M42, other.M42) || 
        !$T07().WithinEpsilon(this.M43, other.M43)) && $T07().WithinEpsilon(this.M44, other.M44));
  };

  function Matrix_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function Matrix_get_Backward () {
    return $S04().Construct(this.M31, this.M32, this.M33);
  };

  function Matrix_get_DebugDisplayString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["( ", (this.M11).toString(), " ", (this.M12).toString(), " ", (this.M13).toString(), " ", (this.M14).toString(), " ) \r\n", "( ", (this.M21).toString(), " ", (this.M22).toString(), " ", (this.M23).toString(), " ", (this.M24).toString(), " ) \r\n", "( ", (this.M31).toString(), " ", (this.M32).toString(), " ", (this.M33).toString(), " ", (this.M34).toString(), " ) \r\n", "( ", (this.M41).toString(), " ", (this.M42).toString(), " ", (this.M43).toString(), " ", (this.M44).toString(), " )"]));
  };

  function Matrix_get_Down () {
    return $S04().Construct(-this.M21, -this.M22, -this.M23);
  };

  function Matrix_get_Forward () {
    return $S04().Construct(-this.M31, -this.M32, -this.M33);
  };

  function Matrix_get_Identity () {
    return $thisType.identity;
  };

  function Matrix_get_Left () {
    return $S04().Construct(-this.M11, -this.M12, -this.M13);
  };

  function Matrix_get_Right () {
    return $S04().Construct(this.M11, this.M12, this.M13);
  };

  function Matrix_get_Translation () {
    return $S04().Construct(this.M41, this.M42, this.M43);
  };

  function Matrix_get_Up () {
    return $S04().Construct(this.M21, this.M22, this.M23);
  };

  function Matrix_GetHashCode () {
    return ((((((((((((((((((((((((((((((((this.M11).GetHashCode() | 0) + ((this.M12).GetHashCode() | 0)) | 0) + ((this.M13).GetHashCode() | 0)) | 0) + ((this.M14).GetHashCode() | 0)) | 0) + ((this.M21).GetHashCode() | 0)) | 0) + ((this.M22).GetHashCode() | 0)) | 0) + ((this.M23).GetHashCode() | 0)) | 0) + ((this.M24).GetHashCode() | 0)) | 0) + ((this.M31).GetHashCode() | 0)) | 0) + ((this.M32).GetHashCode() | 0)) | 0) + ((this.M33).GetHashCode() | 0)) | 0) + ((this.M34).GetHashCode() | 0)) | 0) + ((this.M41).GetHashCode() | 0)) | 0) + ((this.M42).GetHashCode() | 0)) | 0) + ((this.M43).GetHashCode() | 0)) | 0) + ((this.M44).GetHashCode() | 0)) | 0);
  };

  function Matrix_Invert$33 ($matrix) {
    var matrix = new JSIL.BoxedVariable($matrix);
    $thisType.Invert(/* ref */ matrix, /* ref */ matrix);
    return matrix.get();
  };

  function Matrix_Invert$34 (/* ref */ matrix, /* ref */ result) {
    var num = +matrix.get().M11;
    var num2 = +matrix.get().M12;
    var num3 = +matrix.get().M13;
    var num4 = +matrix.get().M14;
    var num5 = +matrix.get().M21;
    var num6 = +matrix.get().M22;
    var num7 = +matrix.get().M23;
    var num8 = +matrix.get().M24;
    var num9 = +matrix.get().M31;
    var num10 = +matrix.get().M32;
    var num11 = +matrix.get().M33;
    var num12 = +matrix.get().M34;
    var num13 = +matrix.get().M41;
    var num14 = +matrix.get().M42;
    var num15 = +matrix.get().M43;
    var num16 = +matrix.get().M44;
    var num17 = Math.fround((num11 * num16) - (num12 * num15));
    var num18 = Math.fround((num10 * num16) - (num12 * num14));
    var num19 = Math.fround((num10 * num15) - (num11 * num14));
    var num20 = Math.fround((num9 * num16) - (num12 * num13));
    var num21 = Math.fround((num9 * num15) - (num11 * num13));
    var num22 = Math.fround((num9 * num14) - (num10 * num13));
    var num23 = Math.fround(((num6 * num17) - (num7 * num18)) + (num8 * num19));
    var num24 = Math.fround(-Math.fround(((num5 * num17) - (num7 * num20)) + (num8 * num21)));
    var num25 = Math.fround(((num5 * num18) - (num6 * num20)) + (num8 * num22));
    var num26 = Math.fround(-Math.fround(((num5 * num19) - (num6 * num21)) + (num7 * num22)));
    var num27 = Math.fround(+(1 / ((((num * num23) + (num2 * num24)) + (num3 * num25)) + (num4 * num26))));
    result.get().M11 = num23 * num27;
    result.get().M21 = num24 * num27;
    result.get().M31 = num25 * num27;
    result.get().M41 = num26 * num27;
    result.get().M12 = Math.fround(-Math.fround(((num2 * num17) - (num3 * num18)) + (num4 * num19)) * num27);
    result.get().M22 = Math.fround((((num * num17) - (num3 * num20)) + (num4 * num21)) * num27);
    result.get().M32 = Math.fround(-Math.fround(((num * num18) - (num2 * num20)) + (num4 * num22)) * num27);
    result.get().M42 = Math.fround((((num * num19) - (num2 * num21)) + (num3 * num22)) * num27);
    var num28 = Math.fround((num7 * num16) - (num8 * num15));
    var num29 = Math.fround((num6 * num16) - (num8 * num14));
    var num30 = Math.fround((num6 * num15) - (num7 * num14));
    var num31 = Math.fround((num5 * num16) - (num8 * num13));
    var num32 = Math.fround((num5 * num15) - (num7 * num13));
    var num33 = Math.fround((num5 * num14) - (num6 * num13));
    result.get().M13 = Math.fround((((num2 * num28) - (num3 * num29)) + (num4 * num30)) * num27);
    result.get().M23 = Math.fround(-Math.fround(((num * num28) - (num3 * num31)) + (num4 * num32)) * num27);
    result.get().M33 = Math.fround((((num * num29) - (num2 * num31)) + (num4 * num33)) * num27);
    result.get().M43 = Math.fround(-Math.fround(((num * num30) - (num2 * num32)) + (num3 * num33)) * num27);
    var num34 = Math.fround((num7 * num12) - (num8 * num11));
    var num35 = Math.fround((num6 * num12) - (num8 * num10));
    var num36 = Math.fround((num6 * num11) - (num7 * num10));
    var num37 = Math.fround((num5 * num12) - (num8 * num9));
    var num38 = Math.fround((num5 * num11) - (num7 * num9));
    var num39 = Math.fround((num5 * num10) - (num6 * num9));
    result.get().M14 = Math.fround(-Math.fround(((num2 * num34) - (num3 * num35)) + (num4 * num36)) * num27);
    result.get().M24 = Math.fround((((num * num34) - (num3 * num37)) + (num4 * num38)) * num27);
    result.get().M34 = Math.fround(-Math.fround(((num * num35) - (num2 * num37)) + (num4 * num39)) * num27);
    result.get().M44 = Math.fround((((num * num36) - (num2 * num38)) + (num3 * num39)) * num27);
  };

  function Matrix_Lerp$35 (matrix1, matrix2, amount) {
    matrix1.M11 += (+matrix2.M11 - +matrix1.M11) * +amount;
    matrix1.M12 += (+matrix2.M12 - +matrix1.M12) * +amount;
    matrix1.M13 += (+matrix2.M13 - +matrix1.M13) * +amount;
    matrix1.M14 += (+matrix2.M14 - +matrix1.M14) * +amount;
    matrix1.M21 += (+matrix2.M21 - +matrix1.M21) * +amount;
    matrix1.M22 += (+matrix2.M22 - +matrix1.M22) * +amount;
    matrix1.M23 += (+matrix2.M23 - +matrix1.M23) * +amount;
    matrix1.M24 += (+matrix2.M24 - +matrix1.M24) * +amount;
    matrix1.M31 += (+matrix2.M31 - +matrix1.M31) * +amount;
    matrix1.M32 += (+matrix2.M32 - +matrix1.M32) * +amount;
    matrix1.M33 += (+matrix2.M33 - +matrix1.M33) * +amount;
    matrix1.M34 += (+matrix2.M34 - +matrix1.M34) * +amount;
    matrix1.M41 += (+matrix2.M41 - +matrix1.M41) * +amount;
    matrix1.M42 += (+matrix2.M42 - +matrix1.M42) * +amount;
    matrix1.M43 += (+matrix2.M43 - +matrix1.M43) * +amount;
    matrix1.M44 += (+matrix2.M44 - +matrix1.M44) * +amount;
    return matrix1;
  };

  function Matrix_Lerp$36 (/* ref */ matrix1, /* ref */ matrix2, amount, /* ref */ result) {
    result.get().M11 = +matrix1.get().M11 + ((+matrix2.get().M11 - +matrix1.get().M11) * +amount);
    result.get().M12 = +matrix1.get().M12 + ((+matrix2.get().M12 - +matrix1.get().M12) * +amount);
    result.get().M13 = +matrix1.get().M13 + ((+matrix2.get().M13 - +matrix1.get().M13) * +amount);
    result.get().M14 = +matrix1.get().M14 + ((+matrix2.get().M14 - +matrix1.get().M14) * +amount);
    result.get().M21 = +matrix1.get().M21 + ((+matrix2.get().M21 - +matrix1.get().M21) * +amount);
    result.get().M22 = +matrix1.get().M22 + ((+matrix2.get().M22 - +matrix1.get().M22) * +amount);
    result.get().M23 = +matrix1.get().M23 + ((+matrix2.get().M23 - +matrix1.get().M23) * +amount);
    result.get().M24 = +matrix1.get().M24 + ((+matrix2.get().M24 - +matrix1.get().M24) * +amount);
    result.get().M31 = +matrix1.get().M31 + ((+matrix2.get().M31 - +matrix1.get().M31) * +amount);
    result.get().M32 = +matrix1.get().M32 + ((+matrix2.get().M32 - +matrix1.get().M32) * +amount);
    result.get().M33 = +matrix1.get().M33 + ((+matrix2.get().M33 - +matrix1.get().M33) * +amount);
    result.get().M34 = +matrix1.get().M34 + ((+matrix2.get().M34 - +matrix1.get().M34) * +amount);
    result.get().M41 = +matrix1.get().M41 + ((+matrix2.get().M41 - +matrix1.get().M41) * +amount);
    result.get().M42 = +matrix1.get().M42 + ((+matrix2.get().M42 - +matrix1.get().M42) * +amount);
    result.get().M43 = +matrix1.get().M43 + ((+matrix2.get().M43 - +matrix1.get().M43) * +amount);
    result.get().M44 = +matrix1.get().M44 + ((+matrix2.get().M44 - +matrix1.get().M44) * +amount);
  };

  function Matrix_Multiply$37 (matrix1, matrix2) {
    var m11 = (((+matrix1.M11 * +matrix2.M11) + (+matrix1.M12 * +matrix2.M21)) + (+matrix1.M13 * +matrix2.M31)) + (+matrix1.M14 * +matrix2.M41);
    var m12 = (((+matrix1.M11 * +matrix2.M12) + (+matrix1.M12 * +matrix2.M22)) + (+matrix1.M13 * +matrix2.M32)) + (+matrix1.M14 * +matrix2.M42);
    var m13 = (((+matrix1.M11 * +matrix2.M13) + (+matrix1.M12 * +matrix2.M23)) + (+matrix1.M13 * +matrix2.M33)) + (+matrix1.M14 * +matrix2.M43);
    var m14 = (((+matrix1.M11 * +matrix2.M14) + (+matrix1.M12 * +matrix2.M24)) + (+matrix1.M13 * +matrix2.M34)) + (+matrix1.M14 * +matrix2.M44);
    var m15 = (((+matrix1.M21 * +matrix2.M11) + (+matrix1.M22 * +matrix2.M21)) + (+matrix1.M23 * +matrix2.M31)) + (+matrix1.M24 * +matrix2.M41);
    var m16 = (((+matrix1.M21 * +matrix2.M12) + (+matrix1.M22 * +matrix2.M22)) + (+matrix1.M23 * +matrix2.M32)) + (+matrix1.M24 * +matrix2.M42);
    var m17 = (((+matrix1.M21 * +matrix2.M13) + (+matrix1.M22 * +matrix2.M23)) + (+matrix1.M23 * +matrix2.M33)) + (+matrix1.M24 * +matrix2.M43);
    var m18 = (((+matrix1.M21 * +matrix2.M14) + (+matrix1.M22 * +matrix2.M24)) + (+matrix1.M23 * +matrix2.M34)) + (+matrix1.M24 * +matrix2.M44);
    var m19 = (((+matrix1.M31 * +matrix2.M11) + (+matrix1.M32 * +matrix2.M21)) + (+matrix1.M33 * +matrix2.M31)) + (+matrix1.M34 * +matrix2.M41);
    var m20 = (((+matrix1.M31 * +matrix2.M12) + (+matrix1.M32 * +matrix2.M22)) + (+matrix1.M33 * +matrix2.M32)) + (+matrix1.M34 * +matrix2.M42);
    var m21 = (((+matrix1.M31 * +matrix2.M13) + (+matrix1.M32 * +matrix2.M23)) + (+matrix1.M33 * +matrix2.M33)) + (+matrix1.M34 * +matrix2.M43);
    var m22 = (((+matrix1.M31 * +matrix2.M14) + (+matrix1.M32 * +matrix2.M24)) + (+matrix1.M33 * +matrix2.M34)) + (+matrix1.M34 * +matrix2.M44);
    var m23 = (((+matrix1.M41 * +matrix2.M11) + (+matrix1.M42 * +matrix2.M21)) + (+matrix1.M43 * +matrix2.M31)) + (+matrix1.M44 * +matrix2.M41);
    var m24 = (((+matrix1.M41 * +matrix2.M12) + (+matrix1.M42 * +matrix2.M22)) + (+matrix1.M43 * +matrix2.M32)) + (+matrix1.M44 * +matrix2.M42);
    var m25 = (((+matrix1.M41 * +matrix2.M13) + (+matrix1.M42 * +matrix2.M23)) + (+matrix1.M43 * +matrix2.M33)) + (+matrix1.M44 * +matrix2.M43);
    var m26 = (((+matrix1.M41 * +matrix2.M14) + (+matrix1.M42 * +matrix2.M24)) + (+matrix1.M43 * +matrix2.M34)) + (+matrix1.M44 * +matrix2.M44);
    matrix1.M11 = m11;
    matrix1.M12 = m12;
    matrix1.M13 = m13;
    matrix1.M14 = m14;
    matrix1.M21 = m15;
    matrix1.M22 = m16;
    matrix1.M23 = m17;
    matrix1.M24 = m18;
    matrix1.M31 = m19;
    matrix1.M32 = m20;
    matrix1.M33 = m21;
    matrix1.M34 = m22;
    matrix1.M41 = m23;
    matrix1.M42 = m24;
    matrix1.M43 = m25;
    matrix1.M44 = m26;
    return matrix1;
  };

  function Matrix_Multiply$38 (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
    var m11 = (((+matrix1.get().M11 * +matrix2.get().M11) + (+matrix1.get().M12 * +matrix2.get().M21)) + (+matrix1.get().M13 * +matrix2.get().M31)) + (+matrix1.get().M14 * +matrix2.get().M41);
    var m12 = (((+matrix1.get().M11 * +matrix2.get().M12) + (+matrix1.get().M12 * +matrix2.get().M22)) + (+matrix1.get().M13 * +matrix2.get().M32)) + (+matrix1.get().M14 * +matrix2.get().M42);
    var m13 = (((+matrix1.get().M11 * +matrix2.get().M13) + (+matrix1.get().M12 * +matrix2.get().M23)) + (+matrix1.get().M13 * +matrix2.get().M33)) + (+matrix1.get().M14 * +matrix2.get().M43);
    var m14 = (((+matrix1.get().M11 * +matrix2.get().M14) + (+matrix1.get().M12 * +matrix2.get().M24)) + (+matrix1.get().M13 * +matrix2.get().M34)) + (+matrix1.get().M14 * +matrix2.get().M44);
    var m15 = (((+matrix1.get().M21 * +matrix2.get().M11) + (+matrix1.get().M22 * +matrix2.get().M21)) + (+matrix1.get().M23 * +matrix2.get().M31)) + (+matrix1.get().M24 * +matrix2.get().M41);
    var m16 = (((+matrix1.get().M21 * +matrix2.get().M12) + (+matrix1.get().M22 * +matrix2.get().M22)) + (+matrix1.get().M23 * +matrix2.get().M32)) + (+matrix1.get().M24 * +matrix2.get().M42);
    var m17 = (((+matrix1.get().M21 * +matrix2.get().M13) + (+matrix1.get().M22 * +matrix2.get().M23)) + (+matrix1.get().M23 * +matrix2.get().M33)) + (+matrix1.get().M24 * +matrix2.get().M43);
    var m18 = (((+matrix1.get().M21 * +matrix2.get().M14) + (+matrix1.get().M22 * +matrix2.get().M24)) + (+matrix1.get().M23 * +matrix2.get().M34)) + (+matrix1.get().M24 * +matrix2.get().M44);
    var m19 = (((+matrix1.get().M31 * +matrix2.get().M11) + (+matrix1.get().M32 * +matrix2.get().M21)) + (+matrix1.get().M33 * +matrix2.get().M31)) + (+matrix1.get().M34 * +matrix2.get().M41);
    var m20 = (((+matrix1.get().M31 * +matrix2.get().M12) + (+matrix1.get().M32 * +matrix2.get().M22)) + (+matrix1.get().M33 * +matrix2.get().M32)) + (+matrix1.get().M34 * +matrix2.get().M42);
    var m21 = (((+matrix1.get().M31 * +matrix2.get().M13) + (+matrix1.get().M32 * +matrix2.get().M23)) + (+matrix1.get().M33 * +matrix2.get().M33)) + (+matrix1.get().M34 * +matrix2.get().M43);
    var m22 = (((+matrix1.get().M31 * +matrix2.get().M14) + (+matrix1.get().M32 * +matrix2.get().M24)) + (+matrix1.get().M33 * +matrix2.get().M34)) + (+matrix1.get().M34 * +matrix2.get().M44);
    var m23 = (((+matrix1.get().M41 * +matrix2.get().M11) + (+matrix1.get().M42 * +matrix2.get().M21)) + (+matrix1.get().M43 * +matrix2.get().M31)) + (+matrix1.get().M44 * +matrix2.get().M41);
    var m24 = (((+matrix1.get().M41 * +matrix2.get().M12) + (+matrix1.get().M42 * +matrix2.get().M22)) + (+matrix1.get().M43 * +matrix2.get().M32)) + (+matrix1.get().M44 * +matrix2.get().M42);
    var m25 = (((+matrix1.get().M41 * +matrix2.get().M13) + (+matrix1.get().M42 * +matrix2.get().M23)) + (+matrix1.get().M43 * +matrix2.get().M33)) + (+matrix1.get().M44 * +matrix2.get().M43);
    var m26 = (((+matrix1.get().M41 * +matrix2.get().M14) + (+matrix1.get().M42 * +matrix2.get().M24)) + (+matrix1.get().M43 * +matrix2.get().M34)) + (+matrix1.get().M44 * +matrix2.get().M44);
    result.get().M11 = m11;
    result.get().M12 = m12;
    result.get().M13 = m13;
    result.get().M14 = m14;
    result.get().M21 = m15;
    result.get().M22 = m16;
    result.get().M23 = m17;
    result.get().M24 = m18;
    result.get().M31 = m19;
    result.get().M32 = m20;
    result.get().M33 = m21;
    result.get().M34 = m22;
    result.get().M41 = m23;
    result.get().M42 = m24;
    result.get().M43 = m25;
    result.get().M44 = m26;
  };

  function Matrix_Multiply$39 (matrix1, factor) {
    matrix1.M11 *= +factor;
    matrix1.M12 *= +factor;
    matrix1.M13 *= +factor;
    matrix1.M14 *= +factor;
    matrix1.M21 *= +factor;
    matrix1.M22 *= +factor;
    matrix1.M23 *= +factor;
    matrix1.M24 *= +factor;
    matrix1.M31 *= +factor;
    matrix1.M32 *= +factor;
    matrix1.M33 *= +factor;
    matrix1.M34 *= +factor;
    matrix1.M41 *= +factor;
    matrix1.M42 *= +factor;
    matrix1.M43 *= +factor;
    matrix1.M44 *= +factor;
    return matrix1;
  };

  function Matrix_Multiply$3A (/* ref */ matrix1, factor, /* ref */ result) {
    result.get().M11 = +matrix1.get().M11 * +factor;
    result.get().M12 = +matrix1.get().M12 * +factor;
    result.get().M13 = +matrix1.get().M13 * +factor;
    result.get().M14 = +matrix1.get().M14 * +factor;
    result.get().M21 = +matrix1.get().M21 * +factor;
    result.get().M22 = +matrix1.get().M22 * +factor;
    result.get().M23 = +matrix1.get().M23 * +factor;
    result.get().M24 = +matrix1.get().M24 * +factor;
    result.get().M31 = +matrix1.get().M31 * +factor;
    result.get().M32 = +matrix1.get().M32 * +factor;
    result.get().M33 = +matrix1.get().M33 * +factor;
    result.get().M34 = +matrix1.get().M34 * +factor;
    result.get().M41 = +matrix1.get().M41 * +factor;
    result.get().M42 = +matrix1.get().M42 * +factor;
    result.get().M43 = +matrix1.get().M43 * +factor;
    result.get().M44 = +matrix1.get().M44 * +factor;
  };

  function Matrix_Negate$3B (matrix) {
    matrix.M11 = -matrix.M11;
    matrix.M12 = -matrix.M12;
    matrix.M13 = -matrix.M13;
    matrix.M14 = -matrix.M14;
    matrix.M21 = -matrix.M21;
    matrix.M22 = -matrix.M22;
    matrix.M23 = -matrix.M23;
    matrix.M24 = -matrix.M24;
    matrix.M31 = -matrix.M31;
    matrix.M32 = -matrix.M32;
    matrix.M33 = -matrix.M33;
    matrix.M34 = -matrix.M34;
    matrix.M41 = -matrix.M41;
    matrix.M42 = -matrix.M42;
    matrix.M43 = -matrix.M43;
    matrix.M44 = -matrix.M44;
    return matrix;
  };

  function Matrix_Negate$3C (/* ref */ matrix, /* ref */ result) {
    result.get().M11 = -matrix.get().M11;
    result.get().M12 = -matrix.get().M12;
    result.get().M13 = -matrix.get().M13;
    result.get().M14 = -matrix.get().M14;
    result.get().M21 = -matrix.get().M21;
    result.get().M22 = -matrix.get().M22;
    result.get().M23 = -matrix.get().M23;
    result.get().M24 = -matrix.get().M24;
    result.get().M31 = -matrix.get().M31;
    result.get().M32 = -matrix.get().M32;
    result.get().M33 = -matrix.get().M33;
    result.get().M34 = -matrix.get().M34;
    result.get().M41 = -matrix.get().M41;
    result.get().M42 = -matrix.get().M42;
    result.get().M43 = -matrix.get().M43;
    result.get().M44 = -matrix.get().M44;
  };

  function Matrix_op_Addition (matrix1, matrix2) {
    return $thisType.Add(matrix1.MemberwiseClone(), matrix2);
  };

  function Matrix_op_Division$3D (matrix1, matrix2) {
    return $S05().CallStatic($thisType, "Divide", null, matrix1.MemberwiseClone(), matrix2);
  };

  function Matrix_op_Division$3E (matrix, divider) {
    return $S06().CallStatic($thisType, "Divide", null, matrix.MemberwiseClone(), divider);
  };

  function Matrix_op_Equality (matrix1, matrix2) {
    return matrix1.Equals(matrix2.MemberwiseClone());
  };

  function Matrix_op_Inequality (matrix1, matrix2) {
    return !matrix1.Equals(matrix2.MemberwiseClone());
  };

  function Matrix_op_Multiply$3F (matrix1, matrix2) {
    return $S07().CallStatic($thisType, "Multiply", null, matrix1.MemberwiseClone(), matrix2);
  };

  function Matrix_op_Multiply$40 (matrix, scaleFactor) {
    return $S08().CallStatic($thisType, "Multiply", null, matrix.MemberwiseClone(), scaleFactor);
  };

  function Matrix_op_Subtraction (matrix1, matrix2) {
    return $thisType.Subtract(matrix1.MemberwiseClone(), matrix2);
  };

  function Matrix_op_UnaryNegation (matrix) {
    return $thisType.Negate(matrix.MemberwiseClone());
  };

  function Matrix_set_Backward (value) {
    this.M31 = +value.X;
    this.M32 = +value.Y;
    this.M33 = +value.Z;
  };

  function Matrix_set_Down (value) {
    this.M21 = -value.X;
    this.M22 = -value.Y;
    this.M23 = -value.Z;
  };

  function Matrix_set_Forward (value) {
    this.M31 = -value.X;
    this.M32 = -value.Y;
    this.M33 = -value.Z;
  };

  function Matrix_set_Left (value) {
    this.M11 = -value.X;
    this.M12 = -value.Y;
    this.M13 = -value.Z;
  };

  function Matrix_set_Right (value) {
    this.M11 = +value.X;
    this.M12 = +value.Y;
    this.M13 = +value.Z;
  };

  function Matrix_set_Translation (value) {
    this.M41 = +value.X;
    this.M42 = +value.Y;
    this.M43 = +value.Z;
  };

  function Matrix_set_Up (value) {
    this.M21 = +value.X;
    this.M22 = +value.Y;
    this.M23 = +value.Z;
  };

  function Matrix_Subtract$41 (matrix1, matrix2) {
    matrix1.M11 -= +matrix2.M11;
    matrix1.M12 -= +matrix2.M12;
    matrix1.M13 -= +matrix2.M13;
    matrix1.M14 -= +matrix2.M14;
    matrix1.M21 -= +matrix2.M21;
    matrix1.M22 -= +matrix2.M22;
    matrix1.M23 -= +matrix2.M23;
    matrix1.M24 -= +matrix2.M24;
    matrix1.M31 -= +matrix2.M31;
    matrix1.M32 -= +matrix2.M32;
    matrix1.M33 -= +matrix2.M33;
    matrix1.M34 -= +matrix2.M34;
    matrix1.M41 -= +matrix2.M41;
    matrix1.M42 -= +matrix2.M42;
    matrix1.M43 -= +matrix2.M43;
    matrix1.M44 -= +matrix2.M44;
    return matrix1;
  };

  function Matrix_Subtract$42 (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
    result.get().M11 = +matrix1.get().M11 - +matrix2.get().M11;
    result.get().M12 = +matrix1.get().M12 - +matrix2.get().M12;
    result.get().M13 = +matrix1.get().M13 - +matrix2.get().M13;
    result.get().M14 = +matrix1.get().M14 - +matrix2.get().M14;
    result.get().M21 = +matrix1.get().M21 - +matrix2.get().M21;
    result.get().M22 = +matrix1.get().M22 - +matrix2.get().M22;
    result.get().M23 = +matrix1.get().M23 - +matrix2.get().M23;
    result.get().M24 = +matrix1.get().M24 - +matrix2.get().M24;
    result.get().M31 = +matrix1.get().M31 - +matrix2.get().M31;
    result.get().M32 = +matrix1.get().M32 - +matrix2.get().M32;
    result.get().M33 = +matrix1.get().M33 - +matrix2.get().M33;
    result.get().M34 = +matrix1.get().M34 - +matrix2.get().M34;
    result.get().M41 = +matrix1.get().M41 - +matrix2.get().M41;
    result.get().M42 = +matrix1.get().M42 - +matrix2.get().M42;
    result.get().M43 = +matrix1.get().M43 - +matrix2.get().M43;
    result.get().M44 = +matrix1.get().M44 - +matrix2.get().M44;
  };

  function Matrix_ToFloatArray (mat) {
    return JSIL.Array.New($T00(), [mat.M11, mat.M12, mat.M13, mat.M14, mat.M21, mat.M22, mat.M23, mat.M24, mat.M31, mat.M32, mat.M33, mat.M34, mat.M41, mat.M42, mat.M43, mat.M44]);
  };

  function Matrix_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T0A(), ["{M11:", (this.M11).toString(), " M12:", (this.M12).toString(), " M13:", (this.M13).toString(), " M14:}", (this.M14).toString(), " {M21:", (this.M21).toString(), " M22:", (this.M22).toString(), " M23:", (this.M23).toString(), " M24:}", (this.M24).toString(), " {M31:", (this.M31).toString(), " M32:", (this.M32).toString(), " M33:", (this.M33).toString(), " M34:}", (this.M34).toString(), " {M41:", (this.M41).toString(), " M42:", (this.M42).toString(), " M43:", (this.M43).toString(), " M44:}", (this.M44).toString()]));
  };

  function Matrix_Transform$43 ($value, $rotation) {
    var rotation = new JSIL.BoxedVariable($rotation.MemberwiseClone());
    var value = new JSIL.BoxedVariable($value.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.Transform(/* ref */ value, /* ref */ rotation, /* ref */ result);
    return result.get();
  };

  function Matrix_Transform$44 (/* ref */ value, /* ref */ rotation, /* ref */ result) {
    var rotMatrix = new JSIL.BoxedVariable($thisType.CreateFromQuaternion(rotation.get().MemberwiseClone()).MemberwiseClone());
    $S09().CallStatic($thisType, "Multiply", null, /* ref */ value, /* ref */ rotMatrix, /* ref */ result);
  };

  function Matrix_Transpose$45 ($matrix) {
    var matrix = new JSIL.BoxedVariable($matrix.MemberwiseClone());
    var ret = new JSIL.BoxedVariable(new $thisType());
    $thisType.Transpose(/* ref */ matrix, /* ref */ ret);
    return ret.get();
  };

  function Matrix_Transpose$46 (/* ref */ matrix, /* ref */ result) {
    var ret = new $thisType();
    ret.M11 = +matrix.get().M11;
    ret.M12 = +matrix.get().M21;
    ret.M13 = +matrix.get().M31;
    ret.M14 = +matrix.get().M41;
    ret.M21 = +matrix.get().M12;
    ret.M22 = +matrix.get().M22;
    ret.M23 = +matrix.get().M32;
    ret.M24 = +matrix.get().M42;
    ret.M31 = +matrix.get().M13;
    ret.M32 = +matrix.get().M23;
    ret.M33 = +matrix.get().M33;
    ret.M34 = +matrix.get().M43;
    ret.M41 = +matrix.get().M14;
    ret.M42 = +matrix.get().M24;
    ret.M43 = +matrix.get().M34;
    ret.M44 = +matrix.get().M44;
    result.set(ret);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Matrix", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 16, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Matrix__ctor
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Matrix_Add$00
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_Add$01
    );

    $.Method({Static:true , Public:true }, "CreateBillboard", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])
        ]), 
      Matrix_CreateBillboard$02
    );

    $.Method({Static:true , Public:true }, "CreateBillboard", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreateBillboard$03
    );

    $.Method({Static:true , Public:true }, "CreateConstrainedBillboard", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])
        ]), 
      Matrix_CreateConstrainedBillboard$04
    );

    $.Method({Static:true , Public:true }, "CreateConstrainedBillboard", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreateConstrainedBillboard$05
    );

    $.Method({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single]), 
      Matrix_CreateFromAxisAngle$06
    );

    $.Method({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreateFromAxisAngle$07
    );

    $.Method({Static:true , Public:true }, "CreateFromQuaternion", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
      Matrix_CreateFromQuaternion$08
    );

    $.Method({Static:true , Public:true }, "CreateFromQuaternion", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Matrix_CreateFromQuaternion$09
    );

    $.Method({Static:true , Public:true }, "CreateFromYawPitchRoll", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Matrix_CreateFromYawPitchRoll$0A
    );

    $.Method({Static:true , Public:true }, "CreateFromYawPitchRoll", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreateFromYawPitchRoll$0B
    );

    $.Method({Static:true , Public:true }, "CreateLookAt", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")
        ]), 
      Matrix_CreateLookAt$0C
    );

    $.Method({Static:true , Public:true }, "CreateLookAt", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreateLookAt$0D
    );

    $.Method({Static:true , Public:true }, "CreateOrthographic", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Matrix_CreateOrthographic$0E
    );

    $.Method({Static:true , Public:true }, "CreateOrthographic", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreateOrthographic$0F
    );

    $.Method({Static:true , Public:true }, "CreateOrthographicOffCenter", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Matrix_CreateOrthographicOffCenter$10
    );

    $.Method({Static:true , Public:true }, "CreateOrthographicOffCenter", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreateOrthographicOffCenter$11
    );

    $.Method({Static:true , Public:true }, "CreatePerspective", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Matrix_CreatePerspective$12
    );

    $.Method({Static:true , Public:true }, "CreatePerspective", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreatePerspective$13
    );

    $.Method({Static:true , Public:true }, "CreatePerspectiveFieldOfView", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Matrix_CreatePerspectiveFieldOfView$14
    );

    $.Method({Static:true , Public:true }, "CreatePerspectiveFieldOfView", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreatePerspectiveFieldOfView$15
    );

    $.Method({Static:true , Public:true }, "CreatePerspectiveOffCenter", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Matrix_CreatePerspectiveOffCenter$16
    );

    $.Method({Static:true , Public:true }, "CreatePerspectiveOffCenter", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreatePerspectiveOffCenter$17
    );

    $.Method({Static:true , Public:true }, "CreateReflection", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), 
      Matrix_CreateReflection$18
    );

    $.Method({Static:true , Public:true }, "CreateReflection", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Matrix_CreateReflection$19
    );

    $.Method({Static:true , Public:true }, "CreateRotationX", 
      new JSIL.MethodSignature($.Type, [$.Single]), 
      Matrix_CreateRotationX$1A
    );

    $.Method({Static:true , Public:true }, "CreateRotationX", 
      new JSIL.MethodSignature(null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Matrix_CreateRotationX$1B
    );

    $.Method({Static:true , Public:true }, "CreateRotationY", 
      new JSIL.MethodSignature($.Type, [$.Single]), 
      Matrix_CreateRotationY$1C
    );

    $.Method({Static:true , Public:true }, "CreateRotationY", 
      new JSIL.MethodSignature(null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Matrix_CreateRotationY$1D
    );

    $.Method({Static:true , Public:true }, "CreateRotationZ", 
      new JSIL.MethodSignature($.Type, [$.Single]), 
      Matrix_CreateRotationZ$1E
    );

    $.Method({Static:true , Public:true }, "CreateRotationZ", 
      new JSIL.MethodSignature(null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Matrix_CreateRotationZ$1F
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$.Single]), 
      Matrix_CreateScale$20
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature(null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Matrix_CreateScale$21
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Matrix_CreateScale$22
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreateScale$23
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      Matrix_CreateScale$24
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Matrix_CreateScale$25
    );

    $.Method({Static:true , Public:true }, "CreateShadow", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), 
      Matrix_CreateShadow$26
    );

    $.Method({Static:true , Public:true }, "CreateShadow", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreateShadow$27
    );

    $.Method({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Matrix_CreateTranslation$28
    );

    $.Method({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Matrix_CreateTranslation$29
    );

    $.Method({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      Matrix_CreateTranslation$2A
    );

    $.Method({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreateTranslation$2B
    );

    $.Method({Static:true , Public:true }, "CreateWorld", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")
        ]), 
      Matrix_CreateWorld$2C
    );

    $.Method({Static:true , Public:true }, "CreateWorld", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_CreateWorld$2D
    );

    $.Method({Static:false, Public:true }, "Decompose", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])
        ]), 
      Matrix_Decompose
    );

    $.Method({Static:false, Public:true }, "Determinant", 
      JSIL.MethodSignature.Return($.Single), 
      Matrix_Determinant
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Matrix_Divide$2E
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_Divide$2F
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Matrix_Divide$30
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_Divide$31
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Matrix_Equals$32
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Matrix_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Backward", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_get_Backward
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      Matrix_get_DebugDisplayString
    );

    $.Method({Static:false, Public:true }, "get_Down", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_get_Down
    );

    $.Method({Static:false, Public:true }, "get_Forward", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_get_Forward
    );

    $.Method({Static:true , Public:true }, "get_Identity", 
      JSIL.MethodSignature.Return($.Type), 
      Matrix_get_Identity
    );

    $.Method({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_get_Left
    );

    $.Method({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_get_Right
    );

    $.Method({Static:false, Public:true }, "get_Translation", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_get_Translation
    );

    $.Method({Static:false, Public:true }, "get_Up", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_get_Up
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Matrix_GetHashCode
    );

    $.Method({Static:true , Public:true }, "Invert", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Matrix_Invert$33
    );

    $.Method({Static:true , Public:true }, "Invert", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Matrix_Invert$34
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      Matrix_Lerp$35
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_Lerp$36
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Matrix_Multiply$37
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_Multiply$38
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Matrix_Multiply$39
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_Multiply$3A
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Matrix_Negate$3B
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Matrix_Negate$3C
    );

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Matrix_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Matrix_op_Division$3D
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Matrix_op_Division$3E
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Matrix_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Matrix_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Matrix_op_Multiply$3F
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Matrix_op_Multiply$40
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Matrix_op_Subtraction
    );

    $.Method({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Matrix_op_UnaryNegation
    );

    $.Method({Static:false, Public:true }, "set_Backward", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_set_Backward
    );

    $.Method({Static:false, Public:true }, "set_Down", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_set_Down
    );

    $.Method({Static:false, Public:true }, "set_Forward", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_set_Forward
    );

    $.Method({Static:false, Public:true }, "set_Left", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_set_Left
    );

    $.Method({Static:false, Public:true }, "set_Right", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_set_Right
    );

    $.Method({Static:false, Public:true }, "set_Translation", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_set_Translation
    );

    $.Method({Static:false, Public:true }, "set_Up", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Matrix_set_Up
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Matrix_Subtract$41
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_Subtract$42
    );

    $.Method({Static:true , Public:false}, "ToFloatArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Single]), [$.Type]), 
      Matrix_ToFloatArray
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Matrix_toString
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
      Matrix_Transform$43
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Matrix_Transform$44
    );

    $.Method({Static:true , Public:true }, "Transpose", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Matrix_Transpose$45
    );

    $.Method({Static:true , Public:true }, "Transpose", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Matrix_Transpose$46
    );

    $.Field({Static:false, Public:true }, "M11", $.Single); 
    $.Field({Static:false, Public:true }, "M12", $.Single); 
    $.Field({Static:false, Public:true }, "M13", $.Single); 
    $.Field({Static:false, Public:true }, "M14", $.Single); 
    $.Field({Static:false, Public:true }, "M21", $.Single); 
    $.Field({Static:false, Public:true }, "M22", $.Single); 
    $.Field({Static:false, Public:true }, "M23", $.Single); 
    $.Field({Static:false, Public:true }, "M24", $.Single); 
    $.Field({Static:false, Public:true }, "M31", $.Single); 
    $.Field({Static:false, Public:true }, "M32", $.Single); 
    $.Field({Static:false, Public:true }, "M33", $.Single); 
    $.Field({Static:false, Public:true }, "M34", $.Single); 
    $.Field({Static:false, Public:true }, "M41", $.Single); 
    $.Field({Static:false, Public:true }, "M42", $.Single); 
    $.Field({Static:false, Public:true }, "M43", $.Single); 
    $.Field({Static:false, Public:true }, "M44", $.Single); 
    $.Field({Static:true , Public:false}, "identity", $.Type); 
    function Matrix__cctor () {
      $thisType.identity = new $thisType();
      $thisType.identity = new $thisType(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Matrix__cctor
    );

    $.Property({Static:false, Public:true }, "Backward", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Down", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Forward", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:true , Public:true }, "Identity", $.Type);

    $.Property({Static:false, Public:true }, "Left", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Right", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Translation", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Up", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; });

})();

/* struct Microsoft.Xna.Framework.Plane */ 

(function Plane$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingBox)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.PlaneIntersectionType)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingSphere)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Quaternion)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")])
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")])
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Plane"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")])
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])
      ]))) ();
  };

  function Plane__ctor$00 (value) {
    $thisType.prototype._ctor.call(this, $S00().Construct(value.X, value.Y, value.Z), value.W);
  };

  function Plane__ctor$01 (normal, d) {
    this.Normal = normal.MemberwiseClone();
    this.D = +d;
  };

  function Plane__ctor$02 (a, b, c) {
    var ab = $T01().op_Subtraction(b.MemberwiseClone(), a);
    var ac = $T01().op_Subtraction(c.MemberwiseClone(), a);
    var cross = $T01().Cross(ab.MemberwiseClone(), ac.MemberwiseClone()).MemberwiseClone();
    this.Normal = $T01().Normalize(cross.MemberwiseClone()).MemberwiseClone();
    this.D = -$T01().Dot(this.Normal, a);
  };

  function Plane__ctor$03 (a, b, c, d) {
    $thisType.prototype._ctor.call(this, $S00().Construct(a, b, c), d);
  };

  function Plane_Dot$04 (value) {
    return ((((+this.Normal.X * +value.X) + (+this.Normal.Y * +value.Y)) + (+this.Normal.Z * +value.Z)) + (+this.D * +value.W));
  };

  function Plane_Dot$05 (/* ref */ value, /* ref */ result) {
    result.set((((+this.Normal.X * +value.get().X) + (+this.Normal.Y * +value.get().Y)) + (+this.Normal.Z * +value.get().Z)) + (+this.D * +value.get().W));
  };

  function Plane_DotCoordinate$06 (value) {
    return ((((+this.Normal.X * +value.X) + (+this.Normal.Y * +value.Y)) + (+this.Normal.Z * +value.Z)) + +this.D);
  };

  function Plane_DotCoordinate$07 (/* ref */ value, /* ref */ result) {
    result.set((((+this.Normal.X * +value.get().X) + (+this.Normal.Y * +value.get().Y)) + (+this.Normal.Z * +value.get().Z)) + +this.D);
  };

  function Plane_DotNormal$08 (value) {
    return (((+this.Normal.X * +value.X) + (+this.Normal.Y * +value.Y)) + (+this.Normal.Z * +value.Z));
  };

  function Plane_DotNormal$09 (/* ref */ value, /* ref */ result) {
    result.set(((+this.Normal.X * +value.get().X) + (+this.Normal.Y * +value.get().Y)) + (+this.Normal.Z * +value.get().Z));
  };

  function Plane_Object_Equals (other) {
    return ($thisType.$Is(other) && this.Equals($thisType.$Cast(other).MemberwiseClone()));
  };

  function Plane_Equals$0A (other) {
    return ($T01().op_Equality(this.Normal.MemberwiseClone(), other.Normal.MemberwiseClone()) && $T04().WithinEpsilon(this.D, other.D));
  };

  function Plane_get_DebugDisplayString () {
    return ((this.Normal).get_DebugDisplayString() + " " + (this.D).toString());
  };

  function Plane_GetHashCode () {
    return (((this.Normal).GetHashCode() | 0) ^ ((this.D).GetHashCode() | 0));
  };

  function Plane_Intersects$0B (box) {
    return $S01().CallVirtual("Intersects", null, box, this);
  };

  function Plane_Intersects$0C (/* ref */ box, /* ref */ result) {
    $S02().CallVirtual("Intersects", null, box.get(), new JSIL.BoxedVariable(this), /* ref */ result);
  };

  function Plane_Intersects$0D (sphere) {
    return $S03().CallVirtual("Intersects", null, sphere, this);
  };

  function Plane_Intersects$0E (/* ref */ sphere, /* ref */ result) {
    $S04().CallVirtual("Intersects", null, sphere.get(), new JSIL.BoxedVariable(this), /* ref */ result);
  };

  function Plane_Normalize$0F () {
    var normal = this.Normal.MemberwiseClone();
    this.Normal = $T01().Normalize(this.Normal.MemberwiseClone()).MemberwiseClone();
    var factor = +((Math.fround(Math.sqrt((((+this.Normal.X * +this.Normal.X) + (+this.Normal.Y * +this.Normal.Y)) + (+this.Normal.Z * +this.Normal.Z)))) / Math.fround(Math.sqrt((((+normal.X * +normal.X) + (+normal.Y * +normal.Y)) + (+normal.Z * +normal.Z))))));
    this.D *= factor;
  };

  function Plane_Normalize$10 ($value) {
    var value = new JSIL.BoxedVariable($value.MemberwiseClone());
    var ret = new JSIL.BoxedVariable(new $thisType());
    $thisType.Normalize(/* ref */ value, /* ref */ ret);
    return ret.get();
  };

  function Plane_Normalize$11 (/* ref */ value, /* ref */ result) {
    result.get().Normal = $T01().Normalize(value.get().Normal.MemberwiseClone()).MemberwiseClone();
    var factor = +((Math.fround(Math.sqrt((((+result.get().Normal.X * +result.get().Normal.X) + (+result.get().Normal.Y * +result.get().Normal.Y)) + (+result.get().Normal.Z * +result.get().Normal.Z)))) / Math.fround(Math.sqrt((((+value.get().Normal.X * +value.get().Normal.X) + (+value.get().Normal.Y * +value.get().Normal.Y)) + (+value.get().Normal.Z * +value.get().Normal.Z))))));
    result.get().D = +value.get().D * factor;
  };

  function Plane_op_Equality (plane1, plane2) {
    return plane1.Equals(plane2.MemberwiseClone());
  };

  function Plane_op_Inequality (plane1, plane2) {
    return !plane1.Equals(plane2.MemberwiseClone());
  };

  function Plane_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T05(), ["{Normal:", (this.Normal).toString(), " D:", (this.D).toString(), "}"]));
  };

  function Plane_Transform$12 ($plane, $matrix) {
    var matrix = new JSIL.BoxedVariable($matrix.MemberwiseClone());
    var plane = new JSIL.BoxedVariable($plane.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $S05().CallStatic($thisType, "Transform", null, /* ref */ plane, /* ref */ matrix, /* ref */ result);
    return result.get();
  };

  function Plane_Transform$13 (/* ref */ plane, /* ref */ matrix, /* ref */ result) {
    var transformedMatrix = new JSIL.BoxedVariable(new ($T0C())());
    var transformedVector = new JSIL.BoxedVariable(new ($T00())());
    $T0C().Invert(/* ref */ matrix, /* ref */ transformedMatrix);
    $T0C().Transpose(/* ref */ transformedMatrix, /* ref */ transformedMatrix);
    var vector = new JSIL.BoxedVariable($S06().Construct(plane.get().Normal, plane.get().D));
    $S07().CallStatic($T00(), "Transform", null, /* ref */ vector, /* ref */ transformedMatrix, /* ref */ transformedVector);
    result.set($S08().Construct(transformedVector.get().MemberwiseClone()));
  };

  function Plane_Transform$14 ($plane, $rotation) {
    var rotation = new JSIL.BoxedVariable($rotation.MemberwiseClone());
    var plane = new JSIL.BoxedVariable($plane.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $S09().CallStatic($thisType, "Transform", null, /* ref */ plane, /* ref */ rotation, /* ref */ result);
    return result.get();
  };

  function Plane_Transform$15 (/* ref */ plane, /* ref */ rotation, /* ref */ result) {
    $S0A().CallStatic($T01(), "Transform", null, /* ref */ new JSIL.MemberReference(plane, "Normal"), /* ref */ rotation, /* ref */ new JSIL.MemberReference(result, "Normal"));
    result.get().D = +plane.get().D;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Plane", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Plane__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single]), 
      Plane__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")
        ]), 
      Plane__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Plane__ctor$03
    );

    $.Method({Static:false, Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")]), 
      Plane_Dot$04
    );

    $.Method({Static:false, Public:true }, "Dot", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")]), $jsilcore.TypeRef("JSIL.Reference", [$.Single])]), 
      Plane_Dot$05
    );

    $.Method({Static:false, Public:true }, "DotCoordinate", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      Plane_DotCoordinate$06
    );

    $.Method({Static:false, Public:true }, "DotCoordinate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Single])]), 
      Plane_DotCoordinate$07
    );

    $.Method({Static:false, Public:true }, "DotNormal", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      Plane_DotNormal$08
    );

    $.Method({Static:false, Public:true }, "DotNormal", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Single])]), 
      Plane_DotNormal$09
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Plane_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Plane_Equals$0A
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      Plane_get_DebugDisplayString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Plane_GetHashCode
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), 
      Plane_Intersects$0B
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])]), 
      Plane_Intersects$0C
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), 
      Plane_Intersects$0D
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])]), 
      Plane_Intersects$0E
    );

    $.Method({Static:false, Public:true }, "Normalize", 
      JSIL.MethodSignature.Void, 
      Plane_Normalize$0F
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Plane_Normalize$10
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Plane_Normalize$11
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Plane_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Plane_op_Inequality
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Plane_toString
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Plane_Transform$12
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Plane_Transform$13
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
      Plane_Transform$14
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Plane_Transform$15
    );

    $.Field({Static:false, Public:true }, "D", $.Single); 
    $.Field({Static:false, Public:true }, "Normal", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; });

})();

/* enum Microsoft.Xna.Framework.PlaneIntersectionType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.PlaneIntersectionType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Front: 0, 
    Back: 1, 
    Intersecting: 2, 
  }
);

/* enum Microsoft.Xna.Framework.PlayerIndex */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.PlayerIndex", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    One: 0, 
    Two: 1, 
    Three: 2, 
    Four: 3, 
  }
);

/* struct Microsoft.Xna.Framework.Point */ 

(function Point$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };

  function Point__ctor (x, y) {
    this.X = (x | 0);
    this.Y = (y | 0);
  };

  function Point_Equals$00 (other) {
    return (((this.X | 0) === (other.X | 0)) && ((this.Y | 0) === (other.Y | 0)));
  };

  function Point_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  };

  function Point_get_DebugDisplayString () {
    return ((this.X).toString() + " " + (this.Y).toString());
  };

  function Point_get_Zero () {
    return $thisType.zeroPoint;
  };

  function Point_GetHashCode () {
    return ((this.X | 0) ^ (this.Y | 0));
  };

  function Point_op_Addition (value1, value2) {
    return new $thisType((((value1.X | 0) + (value2.X | 0)) | 0), (((value1.Y | 0) + (value2.Y | 0)) | 0));
  };

  function Point_op_Division (value1, value2) {
    return new $thisType((((value1.X | 0) / (value2.X | 0)) | 0), (((value1.Y | 0) / (value2.Y | 0)) | 0));
  };

  function Point_op_Equality (a, b) {
    return a.Equals(b);
  };

  function Point_op_Inequality (a, b) {
    return !a.Equals(b);
  };

  function Point_op_Multiply (value1, value2) {
    return new $thisType(Math.imul(value1.X, value2.X), Math.imul(value1.Y, value2.Y));
  };

  function Point_op_Subtraction (value1, value2) {
    return new $thisType((((value1.X | 0) - (value2.X | 0)) | 0), (((value1.Y | 0) - (value2.Y | 0)) | 0));
  };

  function Point_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["{X:", (this.X).toString(), " Y:", (this.Y).toString(), "}"]));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Point", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      Point__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Point_Equals$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Point_Object_Equals
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      Point_get_DebugDisplayString
    );

    $.Method({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type), 
      Point_get_Zero
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Point_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Point_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Point_op_Division
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Point_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Point_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Point_op_Multiply
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Point_op_Subtraction
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Point_toString
    );

    $.Field({Static:false, Public:true }, "X", $.Int32); 
    $.Field({Static:false, Public:true }, "Y", $.Int32); 
    $.Field({Static:true , Public:false}, "zeroPoint", $.Type); 
    function Point__cctor () {
      $thisType.zeroPoint = new $thisType();
      $thisType.zeroPoint = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Point__cctor
    );

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm00.Microsoft.Xna.Framework.Design.PointConverter.__Type__]; })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; });

})();

/* struct Microsoft.Xna.Framework.Quaternion */ 

(function Quaternion$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Quaternion"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")])
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $asm01.TypeRef("System.Single"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")])
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Single")]))) ();
  };

  function Quaternion__ctor$00 (x, y, z, w) {
    this.X = +x;
    this.Y = +y;
    this.Z = +z;
    this.W = +w;
  };

  function Quaternion__ctor$01 (vectorPart, scalarPart) {
    this.X = +vectorPart.X;
    this.Y = +vectorPart.Y;
    this.Z = +vectorPart.Z;
    this.W = +scalarPart;
  };

  function Quaternion_Add$02 ($quaternion1, $quaternion2) {
    var quaternion2 = new JSIL.BoxedVariable($quaternion2.MemberwiseClone());
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion3 = new JSIL.BoxedVariable(new $thisType());
    $thisType.Add(/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ quaternion3);
    return quaternion3.get();
  };

  function Quaternion_Add$03 (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
    result.get().X = +quaternion1.get().X + +quaternion2.get().X;
    result.get().Y = +quaternion1.get().Y + +quaternion2.get().Y;
    result.get().Z = +quaternion1.get().Z + +quaternion2.get().Z;
    result.get().W = +quaternion1.get().W + +quaternion2.get().W;
  };

  function Quaternion_Concatenate$04 ($value1, $value2) {
    var value2 = new JSIL.BoxedVariable($value2.MemberwiseClone());
    var value1 = new JSIL.BoxedVariable($value1.MemberwiseClone());
    var quaternion = new JSIL.BoxedVariable(new $thisType());
    $thisType.Concatenate(/* ref */ value1, /* ref */ value2, /* ref */ quaternion);
    return quaternion.get();
  };

  function Quaternion_Concatenate$05 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    var x = +value2.get().X;
    var y = +value2.get().Y;
    var z = +value2.get().Z;
    var w = +value2.get().W;
    var num4 = +value1.get().X;
    var num5 = +value1.get().Y;
    var num6 = +value1.get().Z;
    var num7 = +value1.get().W;
    result.get().X = ((x * num7) + (num4 * w)) + ((y * num6) - (z * num5));
    result.get().Y = ((y * num7) + (num5 * w)) + ((z * num4) - (x * num6));
    result.get().Z = ((z * num7) + (num6 * w)) + ((x * num5) - (y * num4));
    result.get().W = (w * num7) - (((x * num4) + (y * num5)) + (z * num6));
  };

  function Quaternion_Conjugate$06 () {
    this.X = -this.X;
    this.Y = -this.Y;
    this.Z = -this.Z;
  };

  function Quaternion_Conjugate$07 ($value) {
    var value = new JSIL.BoxedVariable($value.MemberwiseClone());
    var quaternion = new JSIL.BoxedVariable(new $thisType());
    $thisType.Conjugate(/* ref */ value, /* ref */ quaternion);
    return quaternion.get();
  };

  function Quaternion_Conjugate$08 (/* ref */ value, /* ref */ result) {
    result.get().X = -value.get().X;
    result.get().Y = -value.get().Y;
    result.get().Z = -value.get().Z;
    result.get().W = +value.get().W;
  };

  function Quaternion_CreateFromAxisAngle$09 ($axis, angle) {
    var axis = new JSIL.BoxedVariable($axis.MemberwiseClone());
    var quaternion = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateFromAxisAngle(/* ref */ axis, angle, /* ref */ quaternion);
    return quaternion.get();
  };

  function Quaternion_CreateFromAxisAngle$0A (/* ref */ axis, angle, /* ref */ result) {
    var num2 = +angle * 0.5;
    var num3 = Math.fround(Math.sin(num2));
    var num4 = Math.fround(Math.cos(num2));
    result.get().X = +axis.get().X * num3;
    result.get().Y = +axis.get().Y * num3;
    result.get().Z = +axis.get().Z * num3;
    result.get().W = num4;
  };

  function Quaternion_CreateFromRotationMatrix$0B ($matrix) {
    var matrix = new JSIL.BoxedVariable($matrix);
    var quaternion = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateFromRotationMatrix(/* ref */ matrix, /* ref */ quaternion);
    return quaternion.get();
  };

  function Quaternion_CreateFromRotationMatrix$0C (/* ref */ matrix, /* ref */ result) {
    var num8 = (+matrix.get().M11 + +matrix.get().M22) + +matrix.get().M33;
    if (num8 > 0) {
      var num9 = Math.fround(Math.sqrt((num8 + 1)));
      result.get().W = num9 * 0.5;
      num9 = +((0.5 / num9));
      result.get().X = (+matrix.get().M23 - +matrix.get().M32) * num9;
      result.get().Y = (+matrix.get().M31 - +matrix.get().M13) * num9;
      result.get().Z = (+matrix.get().M12 - +matrix.get().M21) * num9;
    } else if (!((+matrix.get().M11 < +matrix.get().M22) || (+matrix.get().M11 < +matrix.get().M33))) {
      var num10 = Math.fround(Math.sqrt((((1 + +matrix.get().M11) - +matrix.get().M22) - +matrix.get().M33)));
      var num11 = +((0.5 / num10));
      result.get().X = 0.5 * num10;
      result.get().Y = (+matrix.get().M12 + +matrix.get().M21) * num11;
      result.get().Z = (+matrix.get().M13 + +matrix.get().M31) * num11;
      result.get().W = (+matrix.get().M23 - +matrix.get().M32) * num11;
    } else if (+matrix.get().M22 > +matrix.get().M33) {
      var num12 = Math.fround(Math.sqrt((((1 + +matrix.get().M22) - +matrix.get().M11) - +matrix.get().M33)));
      var num13 = +((0.5 / num12));
      result.get().X = (+matrix.get().M21 + +matrix.get().M12) * num13;
      result.get().Y = 0.5 * num12;
      result.get().Z = (+matrix.get().M32 + +matrix.get().M23) * num13;
      result.get().W = (+matrix.get().M31 - +matrix.get().M13) * num13;
    } else {
      var num14 = Math.fround(Math.sqrt((((1 + +matrix.get().M33) - +matrix.get().M11) - +matrix.get().M22)));
      var num15 = +((0.5 / num14));
      result.get().X = (+matrix.get().M31 + +matrix.get().M13) * num15;
      result.get().Y = (+matrix.get().M32 + +matrix.get().M23) * num15;
      result.get().Z = 0.5 * num14;
      result.get().W = (+matrix.get().M12 - +matrix.get().M21) * num15;
    }
  };

  function Quaternion_CreateFromYawPitchRoll$0D (yaw, pitch, roll) {
    var quaternion = new JSIL.BoxedVariable(new $thisType());
    $thisType.CreateFromYawPitchRoll(yaw, pitch, roll, /* ref */ quaternion);
    return quaternion.get();
  };

  function Quaternion_CreateFromYawPitchRoll$0E (yaw, pitch, roll, /* ref */ result) {
    var num9 = +roll * 0.5;
    var num10 = Math.fround(Math.sin(num9));
    var num11 = Math.fround(Math.cos(num9));
    var num12 = +pitch * 0.5;
    var num13 = Math.fround(Math.sin(num12));
    var num14 = Math.fround(Math.cos(num12));
    var num15 = +yaw * 0.5;
    var num16 = Math.fround(Math.sin(num15));
    var num17 = Math.fround(Math.cos(num15));
    result.get().X = ((num17 * num13) * num11) + ((num16 * num14) * num10);
    result.get().Y = ((num16 * num14) * num11) - ((num17 * num13) * num10);
    result.get().Z = ((num17 * num14) * num10) - ((num16 * num13) * num11);
    result.get().W = ((num17 * num14) * num11) + ((num16 * num13) * num10);
  };

  function Quaternion_Divide$0F ($quaternion1, $quaternion2) {
    var quaternion2 = new JSIL.BoxedVariable($quaternion2.MemberwiseClone());
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion3 = new JSIL.BoxedVariable(new $thisType());
    $thisType.Divide(/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ quaternion3);
    return quaternion3.get();
  };

  function Quaternion_Divide$10 (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
    var x = +quaternion1.get().X;
    var y = +quaternion1.get().Y;
    var z = +quaternion1.get().Z;
    var w = +quaternion1.get().W;
    var num14 = (((+quaternion2.get().X * +quaternion2.get().X) + (+quaternion2.get().Y * +quaternion2.get().Y)) + (+quaternion2.get().Z * +quaternion2.get().Z)) + (+quaternion2.get().W * +quaternion2.get().W);
    var num15 = +((1 / num14));
    var num16 = -quaternion2.get().X * num15;
    var num17 = -quaternion2.get().Y * num15;
    var num18 = -quaternion2.get().Z * num15;
    var num19 = +quaternion2.get().W * num15;
    result.get().X = ((x * num19) + (num16 * w)) + ((y * num18) - (z * num17));
    result.get().Y = ((y * num19) + (num17 * w)) + ((z * num16) - (x * num18));
    result.get().Z = ((z * num19) + (num18 * w)) + ((x * num17) - (y * num16));
    result.get().W = (w * num19) - (((x * num16) + (y * num17)) + (z * num18));
  };

  function Quaternion_Dot$11 (quaternion1, quaternion2) {
    return ((((+quaternion1.X * +quaternion2.X) + (+quaternion1.Y * +quaternion2.Y)) + (+quaternion1.Z * +quaternion2.Z)) + (+quaternion1.W * +quaternion2.W));
  };

  function Quaternion_Dot$12 (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
    result.set((((+quaternion1.get().X * +quaternion2.get().X) + (+quaternion1.get().Y * +quaternion2.get().Y)) + (+quaternion1.get().Z * +quaternion2.get().Z)) + (+quaternion1.get().W * +quaternion2.get().W));
  };

  function Quaternion_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function Quaternion_Equals$13 (other) {
    return (!(!$T06().WithinEpsilon(this.X, other.X) || 
        !$T06().WithinEpsilon(this.Y, other.Y) || 
        !$T06().WithinEpsilon(this.Z, other.Z)) && $T06().WithinEpsilon(this.W, other.W));
  };

  function Quaternion_get_DebugDisplayString () {
    if ($thisType.op_Equality(this, $thisType.get_Identity().MemberwiseClone())) {
      var result = "Identity";
    } else {
      result = (JSIL.ConcatString.apply(null, JSIL.Array.New($T07(), [(this.X).toString(), " ", (this.Y).toString(), " ", (this.Z).toString(), " ", (this.W).toString()])));
    }
    return result;
  };

  function Quaternion_get_Identity () {
    return $thisType.identity;
  };

  function Quaternion_get_Xyz () {
    return $S01().Construct(this.X, this.Y, this.Z);
  };

  function Quaternion_GetHashCode () {
    return ((((((((this.X).GetHashCode() | 0) + ((this.Y).GetHashCode() | 0)) | 0) + ((this.Z).GetHashCode() | 0)) | 0) + ((this.W).GetHashCode() | 0)) | 0);
  };

  function Quaternion_Inverse$14 ($quaternion) {
    var quaternion = new JSIL.BoxedVariable($quaternion.MemberwiseClone());
    var inverse = new JSIL.BoxedVariable(new $thisType());
    $thisType.Inverse(/* ref */ quaternion, /* ref */ inverse);
    return inverse.get();
  };

  function Quaternion_Inverse$15 (/* ref */ quaternion, /* ref */ result) {
    var num2 = (((+quaternion.get().X * +quaternion.get().X) + (+quaternion.get().Y * +quaternion.get().Y)) + (+quaternion.get().Z * +quaternion.get().Z)) + (+quaternion.get().W * +quaternion.get().W);
    var num3 = +((1 / num2));
    result.get().X = -quaternion.get().X * num3;
    result.get().Y = -quaternion.get().Y * num3;
    result.get().Z = -quaternion.get().Z * num3;
    result.get().W = +quaternion.get().W * num3;
  };

  function Quaternion_Length () {
    var num = (((+this.X * +this.X) + (+this.Y * +this.Y)) + (+this.Z * +this.Z)) + (+this.W * +this.W);
    return Math.fround(Math.sqrt(num));
  };

  function Quaternion_LengthSquared () {
    return ((((+this.X * +this.X) + (+this.Y * +this.Y)) + (+this.Z * +this.Z)) + (+this.W * +this.W));
  };

  function Quaternion_Lerp$16 ($quaternion1, $quaternion2, amount) {
    var quaternion2 = new JSIL.BoxedVariable($quaternion2.MemberwiseClone());
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion3 = new JSIL.BoxedVariable(new $thisType());
    $thisType.Lerp(/* ref */ quaternion1, /* ref */ quaternion2, amount, /* ref */ quaternion3);
    return quaternion3.get();
  };

  function Quaternion_Lerp$17 (/* ref */ quaternion1, /* ref */ quaternion2, amount, /* ref */ result) {
    var num2 = 1 - +amount;
    var num3 = (((+quaternion1.get().X * +quaternion2.get().X) + (+quaternion1.get().Y * +quaternion2.get().Y)) + (+quaternion1.get().Z * +quaternion2.get().Z)) + (+quaternion1.get().W * +quaternion2.get().W);
    if (num3 >= 0) {
      result.get().X = (num2 * +quaternion1.get().X) + (+amount * +quaternion2.get().X);
      result.get().Y = (num2 * +quaternion1.get().Y) + (+amount * +quaternion2.get().Y);
      result.get().Z = (num2 * +quaternion1.get().Z) + (+amount * +quaternion2.get().Z);
      result.get().W = (num2 * +quaternion1.get().W) + (+amount * +quaternion2.get().W);
    } else {
      result.get().X = (num2 * +quaternion1.get().X) - (+amount * +quaternion2.get().X);
      result.get().Y = (num2 * +quaternion1.get().Y) - (+amount * +quaternion2.get().Y);
      result.get().Z = (num2 * +quaternion1.get().Z) - (+amount * +quaternion2.get().Z);
      result.get().W = (num2 * +quaternion1.get().W) - (+amount * +quaternion2.get().W);
    }
    var num4 = (((+result.get().X * +result.get().X) + (+result.get().Y * +result.get().Y)) + (+result.get().Z * +result.get().Z)) + (+result.get().W * +result.get().W);
    var num5 = +((1 / Math.fround(Math.sqrt(num4))));
    result.get().X *= num5;
    result.get().Y *= num5;
    result.get().Z *= num5;
    result.get().W *= num5;
  };

  function Quaternion_Multiply$18 ($quaternion1, $quaternion2) {
    var quaternion2 = new JSIL.BoxedVariable($quaternion2.MemberwiseClone());
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion3 = new JSIL.BoxedVariable(new $thisType());
    $S02().CallStatic($thisType, "Multiply", null, /* ref */ quaternion1, /* ref */ quaternion2, /* ref */ quaternion3);
    return quaternion3.get();
  };

  function Quaternion_Multiply$19 ($quaternion1, scaleFactor) {
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion2 = new JSIL.BoxedVariable(new $thisType());
    $S03().CallStatic($thisType, "Multiply", null, /* ref */ quaternion1, scaleFactor, /* ref */ quaternion2);
    return quaternion2.get();
  };

  function Quaternion_Multiply$1A (/* ref */ quaternion1, scaleFactor, /* ref */ result) {
    result.get().X = +quaternion1.get().X * +scaleFactor;
    result.get().Y = +quaternion1.get().Y * +scaleFactor;
    result.get().Z = +quaternion1.get().Z * +scaleFactor;
    result.get().W = +quaternion1.get().W * +scaleFactor;
  };

  function Quaternion_Multiply$1B (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
    var x = +quaternion1.get().X;
    var y = +quaternion1.get().Y;
    var z = +quaternion1.get().Z;
    var w = +quaternion1.get().W;
    var num4 = +quaternion2.get().X;
    var num5 = +quaternion2.get().Y;
    var num6 = +quaternion2.get().Z;
    var num7 = +quaternion2.get().W;
    result.get().X = ((x * num7) + (num4 * w)) + ((y * num6) - (z * num5));
    result.get().Y = ((y * num7) + (num5 * w)) + ((z * num4) - (x * num6));
    result.get().Z = ((z * num7) + (num6 * w)) + ((x * num5) - (y * num4));
    result.get().W = (w * num7) - (((x * num4) + (y * num5)) + (z * num6));
  };

  function Quaternion_Negate$1C ($quaternion) {
    var quaternion = new JSIL.BoxedVariable($quaternion.MemberwiseClone());
    var quaternion2 = new JSIL.BoxedVariable(new $thisType());
    $thisType.Negate(/* ref */ quaternion, /* ref */ quaternion2);
    return quaternion2.get();
  };

  function Quaternion_Negate$1D (/* ref */ quaternion, /* ref */ result) {
    result.get().X = -quaternion.get().X;
    result.get().Y = -quaternion.get().Y;
    result.get().Z = -quaternion.get().Z;
    result.get().W = -quaternion.get().W;
  };

  function Quaternion_Normalize$1E () {
    var num3 = +((1 / Math.fround(Math.sqrt(((((+this.X * +this.X) + (+this.Y * +this.Y)) + (+this.Z * +this.Z)) + (+this.W * +this.W))))));
    this.X *= num3;
    this.Y *= num3;
    this.Z *= num3;
    this.W *= num3;
  };

  function Quaternion_Normalize$1F ($quaternion) {
    var quaternion = new JSIL.BoxedVariable($quaternion.MemberwiseClone());
    var quaternion2 = new JSIL.BoxedVariable(new $thisType());
    $thisType.Normalize(/* ref */ quaternion, /* ref */ quaternion2);
    return quaternion2.get();
  };

  function Quaternion_Normalize$20 (/* ref */ quaternion, /* ref */ result) {
    var num2 = (((+quaternion.get().X * +quaternion.get().X) + (+quaternion.get().Y * +quaternion.get().Y)) + (+quaternion.get().Z * +quaternion.get().Z)) + (+quaternion.get().W * +quaternion.get().W);
    var num3 = +((1 / Math.fround(Math.sqrt(num2))));
    result.get().X = +quaternion.get().X * num3;
    result.get().Y = +quaternion.get().Y * num3;
    result.get().Z = +quaternion.get().Z * num3;
    result.get().W = +quaternion.get().W * num3;
  };

  function Quaternion_op_Addition ($quaternion1, $quaternion2) {
    var quaternion2 = new JSIL.BoxedVariable($quaternion2.MemberwiseClone());
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion3 = new JSIL.BoxedVariable(new $thisType());
    $thisType.Add(/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ quaternion3);
    return quaternion3.get();
  };

  function Quaternion_op_Division ($quaternion1, $quaternion2) {
    var quaternion2 = new JSIL.BoxedVariable($quaternion2.MemberwiseClone());
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion3 = new JSIL.BoxedVariable(new $thisType());
    $thisType.Divide(/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ quaternion3);
    return quaternion3.get();
  };

  function Quaternion_op_Equality (quaternion1, quaternion2) {
    return quaternion1.Equals(quaternion2.MemberwiseClone());
  };

  function Quaternion_op_Inequality (quaternion1, quaternion2) {
    return !quaternion1.Equals(quaternion2.MemberwiseClone());
  };

  function Quaternion_op_Multiply$21 ($quaternion1, $quaternion2) {
    var quaternion2 = new JSIL.BoxedVariable($quaternion2.MemberwiseClone());
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion3 = new JSIL.BoxedVariable(new $thisType());
    $S02().CallStatic($thisType, "Multiply", null, /* ref */ quaternion1, /* ref */ quaternion2, /* ref */ quaternion3);
    return quaternion3.get();
  };

  function Quaternion_op_Multiply$22 ($quaternion1, scaleFactor) {
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion2 = new JSIL.BoxedVariable(new $thisType());
    $S03().CallStatic($thisType, "Multiply", null, /* ref */ quaternion1, scaleFactor, /* ref */ quaternion2);
    return quaternion2.get();
  };

  function Quaternion_op_Subtraction ($quaternion1, $quaternion2) {
    var quaternion2 = new JSIL.BoxedVariable($quaternion2.MemberwiseClone());
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion3 = new JSIL.BoxedVariable(new $thisType());
    $thisType.Subtract(/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ quaternion3);
    return quaternion3.get();
  };

  function Quaternion_op_UnaryNegation ($quaternion) {
    var quaternion = new JSIL.BoxedVariable($quaternion.MemberwiseClone());
    var quaternion2 = new JSIL.BoxedVariable(new $thisType());
    $thisType.Negate(/* ref */ quaternion, /* ref */ quaternion2);
    return quaternion2.get();
  };

  function Quaternion_set_Xyz (value) {
    this.X = +value.X;
    this.Y = +value.Y;
    this.Z = +value.Z;
  };

  function Quaternion_Slerp$23 ($quaternion1, $quaternion2, amount) {
    var quaternion2 = new JSIL.BoxedVariable($quaternion2.MemberwiseClone());
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion3 = new JSIL.BoxedVariable(new $thisType());
    $thisType.Slerp(/* ref */ quaternion1, /* ref */ quaternion2, amount, /* ref */ quaternion3);
    return quaternion3.get();
  };

  function Quaternion_Slerp$24 (/* ref */ quaternion1, /* ref */ quaternion2, amount, /* ref */ result) {
    var num4 = (((+quaternion1.get().X * +quaternion2.get().X) + (+quaternion1.get().Y * +quaternion2.get().Y)) + (+quaternion1.get().Z * +quaternion2.get().Z)) + (+quaternion1.get().W * +quaternion2.get().W);
    var flag = 1;
    if (num4 < 0) {
      flag = -1;
      num4 = -num4;
    }
    if (num4 > 0.999999) {
      var num5 = 1 - +amount;
      var num6 = +amount * flag;
    } else {
      var num7 = Math.fround(Math.acos(num4));
      var num8 = Math.fround(+(1 / (Math.sin(num7))));
      num5 = Math.fround(Math.sin(((1 - +amount) * num7))) * num8;
      num6 = flag * (Math.fround(Math.sin((+amount * num7))) * num8);
    }
    result.get().X = (num5 * +quaternion1.get().X) + (num6 * +quaternion2.get().X);
    result.get().Y = (num5 * +quaternion1.get().Y) + (num6 * +quaternion2.get().Y);
    result.get().Z = (num5 * +quaternion1.get().Z) + (num6 * +quaternion2.get().Z);
    result.get().W = (num5 * +quaternion1.get().W) + (num6 * +quaternion2.get().W);
  };

  function Quaternion_Subtract$25 ($quaternion1, $quaternion2) {
    var quaternion2 = new JSIL.BoxedVariable($quaternion2.MemberwiseClone());
    var quaternion1 = new JSIL.BoxedVariable($quaternion1.MemberwiseClone());
    var quaternion3 = new JSIL.BoxedVariable(new $thisType());
    $thisType.Subtract(/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ quaternion3);
    return quaternion3.get();
  };

  function Quaternion_Subtract$26 (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
    result.get().X = +quaternion1.get().X - +quaternion2.get().X;
    result.get().Y = +quaternion1.get().Y - +quaternion2.get().Y;
    result.get().Z = +quaternion1.get().Z - +quaternion2.get().Z;
    result.get().W = +quaternion1.get().W - +quaternion2.get().W;
  };

  function Quaternion_ToMatrix$27 () {
    var matrix = new JSIL.BoxedVariable($T04().get_Identity().MemberwiseClone());
    this.ToMatrix(/* ref */ matrix);
    return matrix.get();
  };

  function Quaternion_ToMatrix$28 (/* ref */ matrix) {
    $thisType.ToMatrix(this, /* ref */ matrix);
  };

  function Quaternion_ToMatrix$29 (quaternion, /* ref */ matrix) {
    var x2 = +quaternion.X * +quaternion.X;
    var y2 = +quaternion.Y * +quaternion.Y;
    var z2 = +quaternion.Z * +quaternion.Z;
    var xy = +quaternion.X * +quaternion.Y;
    var xz = +quaternion.X * +quaternion.Z;
    var yz = +quaternion.Y * +quaternion.Z;
    var wx = +quaternion.W * +quaternion.X;
    var wy = +quaternion.W * +quaternion.Y;
    var wz = +quaternion.W * +quaternion.Z;
    matrix.get().M11 = 1 - (2 * (y2 + z2));
    matrix.get().M12 = 2 * (xy - wz);
    matrix.get().M13 = 2 * (xz + wy);
    matrix.get().M14 = 0;
    matrix.get().M21 = 2 * (xy + wz);
    matrix.get().M22 = 1 - (2 * (x2 + z2));
    matrix.get().M23 = 2 * (yz - wx);
    matrix.get().M24 = 0;
    matrix.get().M31 = 2 * (xz - wy);
    matrix.get().M32 = 2 * (yz + wx);
    matrix.get().M33 = 1 - (2 * (x2 + y2));
    matrix.get().M34 = 0;
    matrix.get().M41 = 2 * (xz - wy);
    matrix.get().M42 = 2 * (yz + wx);
    matrix.get().M43 = 1 - (2 * (x2 + y2));
    matrix.get().M44 = 0;
  };

  function Quaternion_toString () {
    var sb = $S04().Construct(32);
    $S05().CallVirtual("Append", null, sb, "{X:");
    $S06().CallVirtual("Append", null, sb, this.X);
    $S05().CallVirtual("Append", null, sb, " Y:");
    $S06().CallVirtual("Append", null, sb, this.Y);
    $S05().CallVirtual("Append", null, sb, " Z:");
    $S06().CallVirtual("Append", null, sb, this.Z);
    $S05().CallVirtual("Append", null, sb, " W:");
    $S06().CallVirtual("Append", null, sb, this.W);
    $S05().CallVirtual("Append", null, sb, "}");
    return sb.toString();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Quaternion", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Quaternion__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single]), 
      Quaternion__ctor$01
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Quaternion_Add$02
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Quaternion_Add$03
    );

    $.Method({Static:true , Public:true }, "Concatenate", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Quaternion_Concatenate$04
    );

    $.Method({Static:true , Public:true }, "Concatenate", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Quaternion_Concatenate$05
    );

    $.Method({Static:false, Public:true }, "Conjugate", 
      JSIL.MethodSignature.Void, 
      Quaternion_Conjugate$06
    );

    $.Method({Static:true , Public:true }, "Conjugate", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Quaternion_Conjugate$07
    );

    $.Method({Static:true , Public:true }, "Conjugate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Quaternion_Conjugate$08
    );

    $.Method({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single]), 
      Quaternion_CreateFromAxisAngle$09
    );

    $.Method({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Quaternion_CreateFromAxisAngle$0A
    );

    $.Method({Static:true , Public:true }, "CreateFromRotationMatrix", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Quaternion_CreateFromRotationMatrix$0B
    );

    $.Method({Static:true , Public:true }, "CreateFromRotationMatrix", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Quaternion_CreateFromRotationMatrix$0C
    );

    $.Method({Static:true , Public:true }, "CreateFromYawPitchRoll", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Quaternion_CreateFromYawPitchRoll$0D
    );

    $.Method({Static:true , Public:true }, "CreateFromYawPitchRoll", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Quaternion_CreateFromYawPitchRoll$0E
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Quaternion_Divide$0F
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Quaternion_Divide$10
    );

    $.Method({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type]), 
      Quaternion_Dot$11
    );

    $.Method({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      Quaternion_Dot$12
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Quaternion_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Quaternion_Equals$13
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      Quaternion_get_DebugDisplayString
    );

    $.Method({Static:true , Public:true }, "get_Identity", 
      JSIL.MethodSignature.Return($.Type), 
      Quaternion_get_Identity
    );

    $.Method({Static:false, Public:false}, "get_Xyz", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Quaternion_get_Xyz
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Quaternion_GetHashCode
    );

    $.Method({Static:true , Public:true }, "Inverse", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Quaternion_Inverse$14
    );

    $.Method({Static:true , Public:true }, "Inverse", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Quaternion_Inverse$15
    );

    $.Method({Static:false, Public:true }, "Length", 
      JSIL.MethodSignature.Return($.Single), 
      Quaternion_Length
    );

    $.Method({Static:false, Public:true }, "LengthSquared", 
      JSIL.MethodSignature.Return($.Single), 
      Quaternion_LengthSquared
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      Quaternion_Lerp$16
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Quaternion_Lerp$17
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Quaternion_Multiply$18
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Quaternion_Multiply$19
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Quaternion_Multiply$1A
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Quaternion_Multiply$1B
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Quaternion_Negate$1C
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Quaternion_Negate$1D
    );

    $.Method({Static:false, Public:true }, "Normalize", 
      JSIL.MethodSignature.Void, 
      Quaternion_Normalize$1E
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Quaternion_Normalize$1F
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Quaternion_Normalize$20
    );

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Quaternion_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Quaternion_op_Division
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Quaternion_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Quaternion_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Quaternion_op_Multiply$21
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Quaternion_op_Multiply$22
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Quaternion_op_Subtraction
    );

    $.Method({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Quaternion_op_UnaryNegation
    );

    $.Method({Static:false, Public:false}, "set_Xyz", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Quaternion_set_Xyz
    );

    $.Method({Static:true , Public:true }, "Slerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      Quaternion_Slerp$23
    );

    $.Method({Static:true , Public:true }, "Slerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Quaternion_Slerp$24
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Quaternion_Subtract$25
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Quaternion_Subtract$26
    );

    $.Method({Static:false, Public:false}, "ToMatrix", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      Quaternion_ToMatrix$27
    );

    $.Method({Static:false, Public:false}, "ToMatrix", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])), 
      Quaternion_ToMatrix$28
    );

    $.Method({Static:true , Public:false}, "ToMatrix", 
      new JSIL.MethodSignature(null, [$.Type, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])]), 
      Quaternion_ToMatrix$29
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Quaternion_toString
    );

    $.Field({Static:false, Public:true }, "X", $.Single); 
    $.Field({Static:false, Public:true }, "Y", $.Single); 
    $.Field({Static:false, Public:true }, "Z", $.Single); 
    $.Field({Static:false, Public:true }, "W", $.Single); 
    $.Field({Static:true , Public:false}, "identity", $.Type); 
    function Quaternion__cctor () {
      $thisType.identity = new $thisType();
      $thisType.identity = $S00().Construct(0, 0, 0, 1);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Quaternion__cctor
    );

    $.Property({Static:true , Public:true }, "Identity", $.Type);

    $.Property({Static:false, Public:false}, "Xyz", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; });

})();

/* struct Microsoft.Xna.Framework.Ray */ 

(function Ray$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingBox)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingSphere)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Plane)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Single")]), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Single")])])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Single")])])]))) ();
  };

  function Ray__ctor (position, direction) {
    this.Position = position.MemberwiseClone();
    this.Direction = direction.MemberwiseClone();
  };

  function Ray_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function Ray_Equals$00 (other) {
    return ((this.Position).Equals(other.Position.MemberwiseClone()) && (this.Direction).Equals(other.Direction.MemberwiseClone()));
  };

  function Ray_get_DebugDisplayString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["Pos( ", (this.Position).get_DebugDisplayString(), " ) \r\n", "Dir( ", (this.Direction).get_DebugDisplayString(), " )"]));
  };

  function Ray_GetHashCode () {
    return (((this.Position).GetHashCode() | 0) ^ ((this.Direction).GetHashCode() | 0));
  };

  function Ray_Intersects$01 (box) {

    var $label2 = 0;
  $labelgroup2: 
    while (true) {
      switch ($label2) {
        case 0: /* $entry2 */ 
          var tMin = null;
          var tMax = null;
          if ($T05().WithinEpsilon(this.Direction.X, 0)) {
            if (!((+this.Position.X >= +box.Min.X) && (+this.Position.X <= +box.Max.X))) {
              var result = null;
              return result;
            }
          } else {
            tMin = +(((+box.Min.X - +this.Position.X) / +this.Direction.X));
            tMax = +(((+box.Max.X - +this.Position.X) / +this.Direction.X));
            var num = tMin;
            var num2 = tMax;
            if ((+JSIL.Nullable_ValueOrDefault(num, 0) > +JSIL.Nullable_ValueOrDefault(num2, 0)) && ((num !== null) & (num2 !== null))) {
              var temp = tMin;
              tMin = tMax;
              tMax = temp;
            }
          }
          if ($T05().WithinEpsilon(this.Direction.Y, 0)) {
            if (!((+this.Position.Y >= +box.Min.Y) && (+this.Position.Y <= +box.Max.Y))) {
              result = null;
              return result;
            }
          } else {

            var $label0 = 0;
          $labelgroup0: 
            while (true) {
              switch ($label0) {
                case 0: /* $entry0 */ 
                  var tMinY = +(((+box.Min.Y - +this.Position.Y) / +this.Direction.Y));
                  var tMaxY = +(((+box.Max.Y - +this.Position.Y) / +this.Direction.Y));
                  if (tMinY > tMaxY) {
                    var temp2 = tMinY;
                    tMinY = tMaxY;
                    tMaxY = temp2;
                  }
                  if (tMin !== null) {
                    num = tMin;
                    var num3 = tMaxY;
                    if ((+JSIL.Nullable_ValueOrDefault(num, 0) > num3) && (num !== null)) {
                      var arg_253_0 = false;
                      $label0 = 1 /* goto IL_252 */ ;
                      continue $labelgroup0;
                    }
                  }
                  if (tMax !== null) {
                    num3 = tMinY;
                    num = tMax;
                    arg_253_0 = !((num3 > +JSIL.Nullable_ValueOrDefault(num, 0)) && 
                      (num !== null));
                  } else {
                    arg_253_0 = true;
                  }

                  $label0 = 1 /* goto IL_252 */ ;
                  continue $labelgroup0;
                case 1: /* IL_252 */ 
                  if (!arg_253_0) {
                    result = null;
                    return result;
                  }
                  if (tMin !== null) {
                    num3 = tMinY;
                    num = tMin;
                    var arg_298_0 = !((num3 > +JSIL.Nullable_ValueOrDefault(num, 0)) && 
                      (num !== null));
                  } else {
                    arg_298_0 = false;
                  }
                  if (!arg_298_0) {
                    tMin = tMinY;
                  }
                  if (tMax !== null) {
                    num3 = tMaxY;
                    num = tMax;
                    var arg_2D5_0 = !((num3 < +JSIL.Nullable_ValueOrDefault(num, 0)) && 
                      (num !== null));
                  } else {
                    arg_2D5_0 = false;
                  }
                  if (!arg_2D5_0) {
                    tMax = tMaxY;
                  }
                  break $labelgroup0;

              }
            }
          }
          if ($T05().WithinEpsilon(this.Direction.Z, 0)) {
            if (!((+this.Position.Z >= +box.Min.Z) && (+this.Position.Z <= +box.Max.Z))) {
              result = null;
              return result;
            }
          } else {

            var $label1 = 0;
          $labelgroup1: 
            while (true) {
              switch ($label1) {
                case 0: /* $entry1 */ 
                  var tMinZ = +(((+box.Min.Z - +this.Position.Z) / +this.Direction.Z));
                  var tMaxZ = +(((+box.Max.Z - +this.Position.Z) / +this.Direction.Z));
                  if (tMinZ > tMaxZ) {
                    temp2 = tMinZ;
                    tMinZ = tMaxZ;
                    tMaxZ = temp2;
                  }
                  if (tMin !== null) {
                    num = tMin;
                    num3 = tMaxZ;
                    if ((+JSIL.Nullable_ValueOrDefault(num, 0) > num3) && (num !== null)) {
                      var arg_421_0 = false;
                      $label1 = 1 /* goto IL_420 */ ;
                      continue $labelgroup1;
                    }
                  }
                  if (tMax !== null) {
                    num3 = tMinZ;
                    num = tMax;
                    arg_421_0 = !((num3 > +JSIL.Nullable_ValueOrDefault(num, 0)) && 
                      (num !== null));
                  } else {
                    arg_421_0 = true;
                  }

                  $label1 = 1 /* goto IL_420 */ ;
                  continue $labelgroup1;
                case 1: /* IL_420 */ 
                  if (!arg_421_0) {
                    result = null;
                    return result;
                  }
                  if (tMin !== null) {
                    num3 = tMinZ;
                    num = tMin;
                    var arg_467_0 = !((num3 > +JSIL.Nullable_ValueOrDefault(num, 0)) && 
                      (num !== null));
                  } else {
                    arg_467_0 = false;
                  }
                  if (!arg_467_0) {
                    tMin = tMinZ;
                  }
                  if (tMax !== null) {
                    num3 = tMaxZ;
                    num = tMax;
                    var arg_4A5_0 = !((num3 < +JSIL.Nullable_ValueOrDefault(num, 0)) && 
                      (num !== null));
                  } else {
                    arg_4A5_0 = false;
                  }
                  if (!arg_4A5_0) {
                    tMax = tMaxZ;
                  }
                  break $labelgroup1;

              }
            }
          }
          if (tMin !== null) {
            num = tMin;
            if ((+JSIL.Nullable_ValueOrDefault(num, 0) < 0) && (num !== null)) {
              num = tMax;
              var arg_502_0 = !((+JSIL.Nullable_ValueOrDefault(num, 0) > 0) && 
                (num !== null));
              $label2 = 1 /* goto IL_501 */ ;
              continue $labelgroup2;
            }
          }
          arg_502_0 = true;

          $label2 = 1 /* goto IL_501 */ ;
          continue $labelgroup2;
        case 1: /* IL_501 */ 
          if (!arg_502_0) {
            result = 0;
          } else {
            num = tMin;
            if ((+JSIL.Nullable_ValueOrDefault(num, 0) < 0) && (num !== null)) {
              result = null;
            } else {
              result = tMin;
            }
          }
          return result;

          break $labelgroup2;
      }
    }
  };

  function Ray_Intersects$02 (/* ref */ box, /* ref */ result) {
    result.set($S00().CallVirtual("Intersects", null, this, box.get()));
  };

  function Ray_Intersects$03 ($sphere) {
    var sphere = new JSIL.BoxedVariable($sphere);
    var result = new JSIL.BoxedVariable(null);
    $S01().CallVirtual("Intersects", null, this, /* ref */ sphere, /* ref */ result);
    return result.get();
  };

  function Ray_Intersects$04 ($plane) {
    var plane = new JSIL.BoxedVariable($plane.MemberwiseClone());
    var result = new JSIL.BoxedVariable(null);
    $S02().CallVirtual("Intersects", null, this, /* ref */ plane, /* ref */ result);
    return result.get();
  };

  function Ray_Intersects$05 (/* ref */ plane, /* ref */ result) {
    var den = +$T00().Dot(this.Direction, plane.get().Normal);
    if ((Math.abs(den)) < 1E-05) {
      result.set(null);
    } else {
      result.set(+(((-plane.get().D - +$T00().Dot(plane.get().Normal, this.Position)) / den)));
      var num = result.get();
      if ((+JSIL.Nullable_ValueOrDefault(num, 0) < 0) && (num !== null)) {
        num = result.get();
        if ((+JSIL.Nullable_ValueOrDefault(num, 0) < -1E-05) && (num !== null)) {
          result.set(null);
        } else {
          result.set(0);
        }
      }
    }
  };

  function Ray_Intersects$06 (/* ref */ sphere, /* ref */ result) {
    var distanceAlongRay = new JSIL.BoxedVariable(0);
    var difference = new JSIL.BoxedVariable($T00().op_Subtraction(sphere.get().Center.MemberwiseClone(), this.Position).MemberwiseClone());
    var differenceLengthSquared = +(difference.get()).LengthSquared();
    var sphereRadiusSquared = +sphere.get().Radius * +sphere.get().Radius;
    if (differenceLengthSquared < sphereRadiusSquared) {
      result.set(0);
    } else {
      $T00().Dot(/* ref */ new JSIL.MemberReference(this, "Direction"), /* ref */ difference, /* ref */ distanceAlongRay);
      if (+distanceAlongRay.get() < 0) {
        result.set(null);
      } else {
        var dist = (sphereRadiusSquared + (+distanceAlongRay.get() * +distanceAlongRay.get())) - differenceLengthSquared;
        if (dist >= 0) {
          var num = +distanceAlongRay.get();
          var num2 = Math.fround(Math.sqrt(dist));
          var arg_D0_1 = (
            (num2 !== null)
               ? (num - +JSIL.Nullable_ValueOrDefault(num2, 0))
               : null)
          ;
        } else {
          arg_D0_1 = null;
        }
        result.set(arg_D0_1);
      }
    }
  };

  function Ray_op_Equality (a, b) {
    return a.Equals(b.MemberwiseClone());
  };

  function Ray_op_Inequality (a, b) {
    return !a.Equals(b.MemberwiseClone());
  };

  function Ray_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["{{Position:", (this.Position).toString(), " Direction:", (this.Direction).toString(), "}}"]));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Ray", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      Ray__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Ray_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Ray_Equals$00
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      Ray_get_DebugDisplayString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Ray_GetHashCode
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), 
      Ray_Intersects$01
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Nullable`1", [$.Single])])]), 
      Ray_Intersects$02
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), 
      Ray_Intersects$03
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), 
      Ray_Intersects$04
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Nullable`1", [$.Single])])]), 
      Ray_Intersects$05
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Nullable`1", [$.Single])])]), 
      Ray_Intersects$06
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Ray_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Ray_op_Inequality
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Ray_toString
    );

    $.Field({Static:false, Public:true }, "Direction", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; });

})();

/* struct Microsoft.Xna.Framework.Rectangle */ 

(function Rectangle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Point)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Math)) ();
  };

  function Rectangle__ctor (x, y, width, height) {
    this.X = (x | 0);
    this.Y = (y | 0);
    this.Width = (width | 0);
    this.Height = (height | 0);
  };

  function Rectangle_Contains$00 (x, y) {
    return (!(((this.X | 0) > (x | 0)) || 
        ((x | 0) >= (((this.X | 0) + (this.Width | 0)) | 0)) || 
        ((this.Y | 0) > (y | 0))) && ((y | 0) < (((this.Y | 0) + (this.Height | 0)) | 0)));
  };

  function Rectangle_Contains$01 (value) {
    return (!(((this.X | 0) > (value.X | 0)) || 
        ((value.X | 0) >= (((this.X | 0) + (this.Width | 0)) | 0)) || 
        ((this.Y | 0) > (value.Y | 0))) && ((value.Y | 0) < (((this.Y | 0) + (this.Height | 0)) | 0)));
  };

  function Rectangle_Contains$02 (value) {
    return (!(((this.X | 0) > (value.X | 0)) || 
        ((((value.X | 0) + (value.Width | 0)) | 0) > (((this.X | 0) + (this.Width | 0)) | 0)) || 
        ((this.Y | 0) > (value.Y | 0))) && ((((value.Y | 0) + (value.Height | 0)) | 0) <= (((this.Y | 0) + (this.Height | 0)) | 0)));
  };

  function Rectangle_Contains$03 (/* ref */ value, /* ref */ result) {
    result.set(!(((this.X | 0) > (value.get().X | 0)) || 
        ((value.get().X | 0) >= (((this.X | 0) + (this.Width | 0)) | 0)) || 
        ((this.Y | 0) > (value.get().Y | 0))) && 
      ((value.get().Y | 0) < (((this.Y | 0) + (this.Height | 0)) | 0)));
  };

  function Rectangle_Contains$04 (/* ref */ value, /* ref */ result) {
    result.set(!(((this.X | 0) > (value.get().X | 0)) || 
        ((value.get().X | 0) >= (((this.X | 0) + (this.Width | 0)) | 0)) || 
        ((this.Y | 0) > (value.get().Y | 0))) && 
      ((value.get().Y | 0) < (((this.Y | 0) + (this.Height | 0)) | 0)));
  };

  function Rectangle_Equals$05 (other) {
    return $thisType.op_Equality(this, other);
  };

  function Rectangle_Object_Equals (obj) {
    return ($thisType.$Is(obj) && $thisType.op_Equality(this, $thisType.$Cast(obj)));
  };

  function Rectangle_get_Bottom () {
    return (((this.Y | 0) + (this.Height | 0)) | 0);
  };

  function Rectangle_get_Center () {
    return new ($T01())((((this.X | 0) + (((this.Width | 0) / 2) | 0)) | 0), (((this.Y | 0) + (((this.Height | 0) / 2) | 0)) | 0));
  };

  function Rectangle_get_DebugDisplayString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T04(), [(this.X).toString(), " ", (this.Y).toString(), " ", (this.Width).toString(), " ", (this.Height).toString()]));
  };

  function Rectangle_get_Empty () {
    return $thisType.emptyRectangle;
  };

  function Rectangle_get_IsEmpty () {
    return (!(((this.Width | 0) !== 0) || 
        ((this.Height | 0) !== 0) || 
        ((this.X | 0) !== 0)) && ((this.Y | 0) === 0));
  };

  function Rectangle_get_Left () {
    return this.X;
  };

  function Rectangle_get_Location () {
    return new ($T01())(this.X, this.Y);
  };

  function Rectangle_get_Right () {
    return (((this.X | 0) + (this.Width | 0)) | 0);
  };

  function Rectangle_get_Top () {
    return this.Y;
  };

  function Rectangle_GetHashCode () {
    return ((((this.X | 0) ^ (this.Y | 0)) ^ (this.Width | 0)) ^ (this.Height | 0));
  };

  function Rectangle_Inflate (horizontalValue, verticalValue) {
    this.X = (((this.X | 0) - (horizontalValue | 0)) | 0);
    this.Y = (((this.Y | 0) - (verticalValue | 0)) | 0);
    this.Width = (((this.Width | 0) + Math.imul(horizontalValue, 2)) | 0);
    this.Height = (((this.Height | 0) + Math.imul(verticalValue, 2)) | 0);
  };

  function Rectangle_Intersect$06 ($value1, $value2) {
    var value2 = new JSIL.BoxedVariable($value2.MemberwiseClone());
    var value1 = new JSIL.BoxedVariable($value1.MemberwiseClone());
    var rectangle = new JSIL.BoxedVariable(new $thisType());
    $thisType.Intersect(/* ref */ value1, /* ref */ value2, /* ref */ rectangle);
    return rectangle.get();
  };

  function Rectangle_Intersect$07 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    if ((value1.get()).Intersects(value2.get())) {
      var right_side = ($T06().Min((((value1.get().X | 0) + (value1.get().Width | 0)) | 0), (((value2.get().X | 0) + (value2.get().Width | 0)) | 0)) | 0);
      var left_side = ($T06().Max(value1.get().X, value2.get().X) | 0);
      var top_side = ($T06().Max(value1.get().Y, value2.get().Y) | 0);
      var bottom_side = ($T06().Min((((value1.get().Y | 0) + (value1.get().Height | 0)) | 0), (((value2.get().Y | 0) + (value2.get().Height | 0)) | 0)) | 0);
      result.set(new $thisType(left_side, top_side, ((right_side - left_side) | 0), ((bottom_side - top_side) | 0)));
    } else {
      result.set(new $thisType(0, 0, 0, 0));
    }
  };

  function Rectangle_Intersects$08 (value) {
    return (!(((value.get_Left() | 0) >= (this.get_Right() | 0)) || 
        ((this.get_Left() | 0) >= (value.get_Right() | 0)) || 
        ((value.get_Top() | 0) >= (this.get_Bottom() | 0))) && ((this.get_Top() | 0) < (value.get_Bottom() | 0)));
  };

  function Rectangle_Intersects$09 (/* ref */ value, /* ref */ result) {
    result.set(!((((value.get()).get_Left() | 0) >= (this.get_Right() | 0)) || 
        ((this.get_Left() | 0) >= ((value.get()).get_Right() | 0)) || 
        (((value.get()).get_Top() | 0) >= (this.get_Bottom() | 0))) && 
      ((this.get_Top() | 0) < ((value.get()).get_Bottom() | 0)));
  };

  function Rectangle_Offset$0A (offset) {
    this.X = (((this.X | 0) + (offset.X | 0)) | 0);
    this.Y = (((this.Y | 0) + (offset.Y | 0)) | 0);
  };

  function Rectangle_Offset$0B (offsetX, offsetY) {
    this.X = (((this.X | 0) + (offsetX | 0)) | 0);
    this.Y = (((this.Y | 0) + (offsetY | 0)) | 0);
  };

  function Rectangle_op_Equality (a, b) {
    return (!(((a.X | 0) !== (b.X | 0)) || 
        ((a.Y | 0) !== (b.Y | 0)) || 
        ((a.Width | 0) !== (b.Width | 0))) && ((a.Height | 0) === (b.Height | 0)));
  };

  function Rectangle_op_Inequality (a, b) {
    return !$thisType.op_Equality(a, b);
  };

  function Rectangle_set_Location (value) {
    this.X = (value.X | 0);
    this.Y = (value.Y | 0);
  };

  function Rectangle_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T04(), ["{X:", (this.X).toString(), " Y:", (this.Y).toString(), " Width:", (this.Width).toString(), " Height:", (this.Height).toString(), "}"]));
  };

  function Rectangle_Union$0C (value1, value2) {
    var x = ($T06().Min(value1.X, value2.X) | 0);
    var y = ($T06().Min(value1.Y, value2.Y) | 0);
    return new $thisType(x, y, ((($T06().Max(
          value1.get_Right(), 
          value2.get_Right()
        ) | 0) - x) | 0), ((($T06().Max(
          value1.get_Bottom(), 
          value2.get_Bottom()
        ) | 0) - y) | 0));
  };

  function Rectangle_Union$0D (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = ($T06().Min(value1.get().X, value2.get().X) | 0);
    result.get().Y = ($T06().Min(value1.get().Y, value2.get().Y) | 0);
    result.get().Width = ((($T06().Max(
        (value1.get()).get_Right(), 
        (value2.get()).get_Right()
      ) | 0) - (result.get().X | 0)) | 0);
    result.get().Height = ((($T06().Max(
        (value1.get()).get_Bottom(), 
        (value2.get()).get_Bottom()
      ) | 0) - (result.get().Y | 0)) | 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Rectangle", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      Rectangle__ctor
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32]), 
      Rectangle_Contains$00
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Point")]), 
      Rectangle_Contains$01
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Rectangle_Contains$02
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Point")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      Rectangle_Contains$03
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      Rectangle_Contains$04
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Rectangle_Equals$05
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Rectangle_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Bottom", 
      JSIL.MethodSignature.Return($.Int32), 
      Rectangle_get_Bottom
    );

    $.Method({Static:false, Public:true }, "get_Center", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Point")), 
      Rectangle_get_Center
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      Rectangle_get_DebugDisplayString
    );

    $.Method({Static:true , Public:true }, "get_Empty", 
      JSIL.MethodSignature.Return($.Type), 
      Rectangle_get_Empty
    );

    $.Method({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean), 
      Rectangle_get_IsEmpty
    );

    $.Method({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($.Int32), 
      Rectangle_get_Left
    );

    $.Method({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Point")), 
      Rectangle_get_Location
    );

    $.Method({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($.Int32), 
      Rectangle_get_Right
    );

    $.Method({Static:false, Public:true }, "get_Top", 
      JSIL.MethodSignature.Return($.Int32), 
      Rectangle_get_Top
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Rectangle_GetHashCode
    );

    $.Method({Static:false, Public:true }, "Inflate", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      Rectangle_Inflate
    );

    $.Method({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Rectangle_Intersect$06
    );

    $.Method({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Rectangle_Intersect$07
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Rectangle_Intersects$08
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      Rectangle_Intersects$09
    );

    $.Method({Static:false, Public:true }, "Offset", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Point")), 
      Rectangle_Offset$0A
    );

    $.Method({Static:false, Public:true }, "Offset", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      Rectangle_Offset$0B
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Rectangle_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Rectangle_op_Inequality
    );

    $.Method({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Point")), 
      Rectangle_set_Location
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Rectangle_toString
    );

    $.Method({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Rectangle_Union$0C
    );

    $.Method({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Rectangle_Union$0D
    );

    $.Field({Static:false, Public:true }, "X", $.Int32); 
    $.Field({Static:false, Public:true }, "Y", $.Int32); 
    $.Field({Static:false, Public:true }, "Width", $.Int32); 
    $.Field({Static:false, Public:true }, "Height", $.Int32); 
    $.Field({Static:true , Public:false}, "emptyRectangle", $.Type); 
    function Rectangle__cctor () {
      $thisType.emptyRectangle = new $thisType();
      $thisType.emptyRectangle = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Rectangle__cctor
    );

    $.Property({Static:false, Public:true }, "Left", $.Int32);

    $.Property({Static:false, Public:true }, "Right", $.Int32);

    $.Property({Static:false, Public:true }, "Top", $.Int32);

    $.Property({Static:false, Public:true }, "Bottom", $.Int32);

    $.Property({Static:false, Public:true }, "Location", $asm00.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Property({Static:false, Public:true }, "Center", $asm00.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:true , Public:true }, "Empty", $.Type);

    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; });

})();

/* class Microsoft.Xna.Framework.ReusableItemList`1 */ 

(function ReusableItemList$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.IndexOutOfRangeException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IndexOutOfRangeException"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };

  function ReusableItemList$b1__ctor () {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$thisType.T.get(this)]), null);
    this._list = $s00.Construct();
    this._listTop = 0;
  };

  function ReusableItemList$b1_Add (item) {
    if (((this._list).get_Count() | 0) > (this._listTop | 0)) {
      (this._list).set_Item(this._listTop, JSIL.CloneParameter($thisType.T.get(this), item));
    } else {
      (this._list).Add(JSIL.CloneParameter($thisType.T.get(this), item));
    }
    this._listTop = (((this._listTop | 0) + 1) | 0);
  };

  function ReusableItemList$b1_Clear () {
    this._listTop = 0;
  };

  function ReusableItemList$b1_Contains (item) {
    return (this._list).Contains(JSIL.CloneParameter($thisType.T.get(this), item));
  };

  function ReusableItemList$b1_CopyTo (array, arrayIndex) {
    (this._list).CopyTo(array, arrayIndex);
  };

  function ReusableItemList$b1_Dispose () {
  };

  function ReusableItemList$b1_get_Count () {
    return this._listTop;
  };

  function ReusableItemList$b1_get_Current () {
    return (this._list).get_Item(this._iteratorIndex);
  };

  function ReusableItemList$b1_get_IsReadOnly () {
    return false;
  };

  function ReusableItemList$b1_get_Item (index) {
    if ((index | 0) >= (this._listTop | 0)) {
      throw $S00().Construct();
    }
    return (this._list).get_Item(index);
  };

  function ReusableItemList$b1_GetEnumerator () {
    this._iteratorIndex = -1;
    return this;
  };

  function ReusableItemList$b1_GetNewItem () {
    var $temp00;
    if ((this._listTop | 0) < ((this._list).get_Count() | 0)) {
      var result = JSIL.CloneParameter($thisType.T.get(this), (this._list).get_Item(($temp00 = (this._listTop | 0), 
            this._listTop = (((this._listTop | 0) + 1) | 0), 
            $temp00)));
    } else {
      result = (
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
      ;
    }
    return result;
  };

  function ReusableItemList$b1_MoveNext () {
    this._iteratorIndex = (((this._iteratorIndex | 0) + 1) | 0);
    return ((this._iteratorIndex | 0) < (this._listTop | 0));
  };

  function ReusableItemList$b1_Remove (item) {
    throw $S01().Construct();
  };

  function ReusableItemList$b1_Reset () {
    this.Clear();
    (this._list).Clear();
  };

  function ReusableItemList$b1_set_Item (index, value) {
    if ((index | 0) >= (this._listTop | 0)) {
      throw $S00().Construct();
    }
    (this._list).set_Item(index, JSIL.CloneParameter($thisType.T.get(this), value));
  };

  function ReusableItemList$b1_Sort (comparison) {
    var $s00 = new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IComparer`1", [$thisType.T.get(this)])]);
    $s00.Call($asm01.System.Collections.Generic.List$b1.Of($thisType.T.get(this)).prototype, "Sort", null, this._list, comparison);
  };

  function ReusableItemList$b1_System_Collections_IEnumerable_GetEnumerator () {
    this._iteratorIndex = -1;
    return this;
  };

  function ReusableItemList$b1_System_Collections_IEnumerator_get_Current () {
    return (this._list).get_Item(this._iteratorIndex);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.ReusableItemList`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ReusableItemList$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      ReusableItemList$b1_Add
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      ReusableItemList$b1_Clear
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")]), 
      ReusableItemList$b1_Contains
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32]), 
      ReusableItemList$b1_CopyTo
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      ReusableItemList$b1_Dispose
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      ReusableItemList$b1_get_Count
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      ReusableItemList$b1_get_Current
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      ReusableItemList$b1_get_IsReadOnly
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32]), 
      ReusableItemList$b1_get_Item
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null), 
      ReusableItemList$b1_GetEnumerator
    );

    $.Method({Static:false, Public:true }, "GetNewItem", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      ReusableItemList$b1_GetNewItem
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      ReusableItemList$b1_MoveNext
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")]), 
      ReusableItemList$b1_Remove
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void, 
      ReusableItemList$b1_Reset
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")]), 
      ReusableItemList$b1_set_Item
    );

    $.Method({Static:false, Public:true }, "Sort", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])]), 
      ReusableItemList$b1_Sort
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      ReusableItemList$b1_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      ReusableItemList$b1_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_list", $asm01.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "_listTop", $.Int32); 
    $.Field({Static:false, Public:false}, "_iteratorIndex", $.Int32); 
    $.Property({Static:false, Public:true }, "Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 4 */ $asm01.TypeRef("System.IDisposable"), 
      /* 5 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Threading */ 

(function Threading$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Action))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Threading_$l$gc__DisplayClass3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Threading.ManualResetEventSlim)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Action")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Threading.ManualResetEventSlim"), [$asm01.TypeRef("System.Boolean")]))) ();
  };

  function Threading_ForceToMainThread (action) {
    var obj = null;
    var $closure0 = new ($T03())();
    $closure0.action = action;
    var flag = new JSIL.BoxedVariable(false);
    if (($thisType.mainThreadId | 0) === ($T01().get_CurrentThread().get_ManagedThreadId() | 0)) {
      $closure0.action();
    } else {
      $closure0.resetEvent = $S01().Construct(false);
      flag.set(false);
      try {
        $T06().Enter(obj = $thisType.actions, /* ref */ flag);
        $thisType.actions.Add($T02().New($closure0, $T03().prototype.$lForceToMainThread$gb__1, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Threading_$l$gc__DisplayClass3, "$lForceToMainThread$gb__1", JSIL.MethodSignature.Void, false); }));
      } finally {
        if (flag.get()) {
          $T06().Exit(obj);
        }
      }
      ($closure0.resetEvent).Wait();
    }
  };

  function Threading_IsOnMainThread () {
    return (($thisType.mainThreadId | 0) === ($T01().get_CurrentThread().get_ManagedThreadId() | 0));
  };

  function Threading_Run () {
    var $temp00;
    var obj = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T06().Enter(obj = $thisType.actions, /* ref */ flag);

      for (var a$0 = $thisType.actions._items, i$0 = 0, l$0 = ($thisType.actions._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var action = a$0[i$0];
        action();
      }
      $thisType.actions.Clear();
    } finally {
      if (flag.get()) {
        $T06().Exit(obj);
      }
    }
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Threading", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "ForceToMainThread", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Action")), 
      Threading_ForceToMainThread
    );

    $.Method({Static:true , Public:true }, "IsOnMainThread", 
      JSIL.MethodSignature.Return($.Boolean), 
      Threading_IsOnMainThread
    );

    $.Method({Static:true , Public:true }, "Run", 
      JSIL.MethodSignature.Void, 
      Threading_Run
    );

    $.Field({Static:true , Public:false}, "mainThreadId", $.Int32); 
    $.Field({Static:true , Public:false}, "actions", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Action")])); 
    function Threading__cctor () {
      $thisType.actions = $S00().Construct();
      $thisType.mainThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Threading__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Threading+<>c__DisplayClass3 */ 

(function $l$gc__DisplayClass3$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Threading.ManualResetEventSlim)) ();
  };

  function $l$gc__DisplayClass3__ctor () {
  };

  function $l$gc__DisplayClass3_$lForceToMainThread$gb__1 () {
    this.action();
    (this.resetEvent).Set();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Threading+<>c__DisplayClass3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass3__ctor
    );

    $.Method({Static:false, Public:true }, "$lForceToMainThread$gb__1", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass3_$lForceToMainThread$gb__1
    );

    $.Field({Static:false, Public:true }, "resetEvent", $asm01.TypeRef("System.Threading.ManualResetEventSlim")); 
    $.Field({Static:false, Public:true }, "action", $asm01.TypeRef("System.Action")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* struct Microsoft.Xna.Framework.Vector2 */ 

(function Vector2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Quaternion)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")])
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Quaternion"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")])
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };

  function Vector2__ctor$00 (x, y) {
    this.X = +x;
    this.Y = +y;
  };

  function Vector2__ctor$01 (value) {
    this.X = +value;
    this.Y = +value;
  };

  function Vector2_Add$02 (value1, value2) {
    value1.X += +value2.X;
    value1.Y += +value2.Y;
    return value1;
  };

  function Vector2_Add$03 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +value1.get().X + +value2.get().X;
    result.get().Y = +value1.get().Y + +value2.get().Y;
  };

  function Vector2_Barycentric$04 (value1, value2, value3, amount1, amount2) {
    return $S00().Construct($T01().Barycentric(
        value1.X, 
        value2.X, 
        value3.X, 
        amount1, 
        amount2
      ), $T01().Barycentric(
        value1.Y, 
        value2.Y, 
        value3.Y, 
        amount1, 
        amount2
      ));
  };

  function Vector2_Barycentric$05 (/* ref */ value1, /* ref */ value2, /* ref */ value3, amount1, amount2, /* ref */ result) {
    result.get().X = +$T01().Barycentric(
      value1.get().X, 
      value2.get().X, 
      value3.get().X, 
      amount1, 
      amount2
    );
    result.get().Y = +$T01().Barycentric(
      value1.get().Y, 
      value2.get().Y, 
      value3.get().Y, 
      amount1, 
      amount2
    );
  };

  function Vector2_CatmullRom$06 (value1, value2, value3, value4, amount) {
    return $S00().Construct($T01().CatmullRom(
        value1.X, 
        value2.X, 
        value3.X, 
        value4.X, 
        amount
      ), $T01().CatmullRom(
        value1.Y, 
        value2.Y, 
        value3.Y, 
        value4.Y, 
        amount
      ));
  };

  function Vector2_CatmullRom$07 (/* ref */ value1, /* ref */ value2, /* ref */ value3, /* ref */ value4, amount, /* ref */ result) {
    result.get().X = +$T01().CatmullRom(
      value1.get().X, 
      value2.get().X, 
      value3.get().X, 
      value4.get().X, 
      amount
    );
    result.get().Y = +$T01().CatmullRom(
      value1.get().Y, 
      value2.get().Y, 
      value3.get().Y, 
      value4.get().Y, 
      amount
    );
  };

  function Vector2_Clamp$08 (value1, min, max) {
    return $S00().Construct($S01().CallStatic($T01(), "Clamp", null, value1.X, min.X, max.X), $S01().CallStatic($T01(), "Clamp", null, value1.Y, min.Y, max.Y));
  };

  function Vector2_Clamp$09 (/* ref */ value1, /* ref */ min, /* ref */ max, /* ref */ result) {
    result.get().X = +$S01().CallStatic($T01(), "Clamp", null, value1.get().X, min.get().X, max.get().X);
    result.get().Y = +$S01().CallStatic($T01(), "Clamp", null, value1.get().Y, min.get().Y, max.get().Y);
  };

  function Vector2_Distance$0A (value1, value2) {
    var v = +value1.X - +value2.X;
    var v2 = +value1.Y - +value2.Y;
    return Math.fround(Math.sqrt(((v * v) + (v2 * v2))));
  };

  function Vector2_Distance$0B (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    var v = +value1.get().X - +value2.get().X;
    var v2 = +value1.get().Y - +value2.get().Y;
    result.set(Math.fround(Math.sqrt(((v * v) + (v2 * v2)))));
  };

  function Vector2_DistanceSquared$0C (value1, value2) {
    var v = +value1.X - +value2.X;
    var v2 = +value1.Y - +value2.Y;
    return ((v * v) + (v2 * v2));
  };

  function Vector2_DistanceSquared$0D (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    var v = +value1.get().X - +value2.get().X;
    var v2 = +value1.get().Y - +value2.get().Y;
    result.set((v * v) + (v2 * v2));
  };

  function Vector2_Divide$0E (value1, value2) {
    value1.X = +((+value1.X / +value2.X));
    value1.Y = +((+value1.Y / +value2.Y));
    return value1;
  };

  function Vector2_Divide$0F (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +((+value1.get().X / +value2.get().X));
    result.get().Y = +((+value1.get().Y / +value2.get().Y));
  };

  function Vector2_Divide$10 (value1, divider) {
    var factor = +((1 / +divider));
    value1.X *= factor;
    value1.Y *= factor;
    return value1;
  };

  function Vector2_Divide$11 (/* ref */ value1, divider, /* ref */ result) {
    var factor = +((1 / +divider));
    result.get().X = +value1.get().X * factor;
    result.get().Y = +value1.get().Y * factor;
  };

  function Vector2_Dot$12 (value1, value2) {
    return ((+value1.X * +value2.X) + (+value1.Y * +value2.Y));
  };

  function Vector2_Dot$13 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.set((+value1.get().X * +value2.get().X) + (+value1.get().Y * +value2.get().Y));
  };

  function Vector2_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function Vector2_Equals$14 (other) {
    return ($T01().WithinEpsilon(this.X, other.X) && $T01().WithinEpsilon(this.Y, other.Y));
  };

  function Vector2_get_DebugDisplayString () {
    return ((this.X).toString() + " " + (this.Y).toString());
  };

  function Vector2_get_One () {
    return $thisType.unitVector;
  };

  function Vector2_get_UnitX () {
    return $thisType.unitXVector;
  };

  function Vector2_get_UnitY () {
    return $thisType.unitYVector;
  };

  function Vector2_get_Zero () {
    return $thisType.zeroVector;
  };

  function Vector2_GetHashCode () {
    return ((((this.X).GetHashCode() | 0) + ((this.Y).GetHashCode() | 0)) | 0);
  };

  function Vector2_Hermite$15 ($value1, $tangent1, $value2, $tangent2, amount) {
    var tangent2 = new JSIL.BoxedVariable($tangent2.MemberwiseClone());
    var value2 = new JSIL.BoxedVariable($value2.MemberwiseClone());
    var tangent1 = new JSIL.BoxedVariable($tangent1.MemberwiseClone());
    var value1 = new JSIL.BoxedVariable($value1.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.Hermite(
      /* ref */ value1, 
      /* ref */ tangent1, 
      /* ref */ value2, 
      /* ref */ tangent2, 
      amount, 
      /* ref */ result
    );
    return result.get();
  };

  function Vector2_Hermite$16 (/* ref */ value1, /* ref */ tangent1, /* ref */ value2, /* ref */ tangent2, amount, /* ref */ result) {
    result.get().X = +$T01().Hermite(
      value1.get().X, 
      tangent1.get().X, 
      value2.get().X, 
      tangent2.get().X, 
      amount
    );
    result.get().Y = +$T01().Hermite(
      value1.get().Y, 
      tangent1.get().Y, 
      value2.get().Y, 
      tangent2.get().Y, 
      amount
    );
  };

  function Vector2_Length () {
    return Math.fround(Math.sqrt(((+this.X * +this.X) + (+this.Y * +this.Y))));
  };

  function Vector2_LengthSquared () {
    return ((+this.X * +this.X) + (+this.Y * +this.Y));
  };

  function Vector2_Lerp$17 (value1, value2, amount) {
    return $S00().Construct($T01().Lerp(value1.X, value2.X, amount), $T01().Lerp(value1.Y, value2.Y, amount));
  };

  function Vector2_Lerp$18 (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
    result.get().X = +$T01().Lerp(value1.get().X, value2.get().X, amount);
    result.get().Y = +$T01().Lerp(value1.get().Y, value2.get().Y, amount);
  };

  function Vector2_Max$19 (value1, value2) {
    return $S00().Construct((
        (+value1.X > +value2.X)
           ? value1.X
           : value2.X)
      , (
        (+value1.Y > +value2.Y)
           ? value1.Y
           : value2.Y)
    );
  };

  function Vector2_Max$1A (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +(
      (+value1.get().X > +value2.get().X)
         ? value1.get().X
         : value2.get().X)
    ;
    result.get().Y = +(
      (+value1.get().Y > +value2.get().Y)
         ? value1.get().Y
         : value2.get().Y)
    ;
  };

  function Vector2_Min$1B (value1, value2) {
    return $S00().Construct((
        (+value1.X < +value2.X)
           ? value1.X
           : value2.X)
      , (
        (+value1.Y < +value2.Y)
           ? value1.Y
           : value2.Y)
    );
  };

  function Vector2_Min$1C (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +(
      (+value1.get().X < +value2.get().X)
         ? value1.get().X
         : value2.get().X)
    ;
    result.get().Y = +(
      (+value1.get().Y < +value2.get().Y)
         ? value1.get().Y
         : value2.get().Y)
    ;
  };

  function Vector2_Multiply$1D (value1, value2) {
    value1.X *= +value2.X;
    value1.Y *= +value2.Y;
    return value1;
  };

  function Vector2_Multiply$1E (value1, scaleFactor) {
    value1.X *= +scaleFactor;
    value1.Y *= +scaleFactor;
    return value1;
  };

  function Vector2_Multiply$1F (/* ref */ value1, scaleFactor, /* ref */ result) {
    result.get().X = +value1.get().X * +scaleFactor;
    result.get().Y = +value1.get().Y * +scaleFactor;
  };

  function Vector2_Multiply$20 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +value1.get().X * +value2.get().X;
    result.get().Y = +value1.get().Y * +value2.get().Y;
  };

  function Vector2_Negate$21 (value) {
    value.X = -value.X;
    value.Y = -value.Y;
    return value;
  };

  function Vector2_Negate$22 (/* ref */ value, /* ref */ result) {
    result.get().X = -value.get().X;
    result.get().Y = -value.get().Y;
  };

  function Vector2_Normalize$23 () {
    var val = +((1 / Math.fround(Math.sqrt(((+this.X * +this.X) + (+this.Y * +this.Y))))));
    this.X *= val;
    this.Y *= val;
  };

  function Vector2_Normalize$24 (value) {
    var val = +((1 / Math.fround(Math.sqrt(((+value.X * +value.X) + (+value.Y * +value.Y))))));
    value.X *= val;
    value.Y *= val;
    return value;
  };

  function Vector2_Normalize$25 (/* ref */ value, /* ref */ result) {
    var val = +((1 / Math.fround(Math.sqrt(((+value.get().X * +value.get().X) + (+value.get().Y * +value.get().Y))))));
    result.get().X = +value.get().X * val;
    result.get().Y = +value.get().Y * val;
  };

  function Vector2_op_Addition (value1, value2) {
    value1.X += +value2.X;
    value1.Y += +value2.Y;
    return value1;
  };

  function Vector2_op_Division$26 (value1, value2) {
    value1.X = +((+value1.X / +value2.X));
    value1.Y = +((+value1.Y / +value2.Y));
    return value1;
  };

  function Vector2_op_Division$27 (value1, divider) {
    var factor = +((1 / +divider));
    value1.X *= factor;
    value1.Y *= factor;
    return value1;
  };

  function Vector2_op_Equality (value1, value2) {
    return ($T01().WithinEpsilon(value1.X, value2.X) && $T01().WithinEpsilon(value1.Y, value2.Y));
  };

  function Vector2_op_Inequality (value1, value2) {
    return !$thisType.op_Equality(value1.MemberwiseClone(), value2.MemberwiseClone());
  };

  function Vector2_op_Multiply$28 (value1, value2) {
    value1.X *= +value2.X;
    value1.Y *= +value2.Y;
    return value1;
  };

  function Vector2_op_Multiply$29 (value, scaleFactor) {
    value.X *= +scaleFactor;
    value.Y *= +scaleFactor;
    return value;
  };

  function Vector2_op_Multiply$2A (scaleFactor, value) {
    value.X *= +scaleFactor;
    value.Y *= +scaleFactor;
    return value;
  };

  function Vector2_op_Subtraction (value1, value2) {
    value1.X -= +value2.X;
    value1.Y -= +value2.Y;
    return value1;
  };

  function Vector2_op_UnaryNegation (value) {
    value.X = -value.X;
    value.Y = -value.Y;
    return value;
  };

  function Vector2_Reflect$2B (vector, normal) {
    var result = new $thisType();
    var val = 2 * ((+vector.X * +normal.X) + (+vector.Y * +normal.Y));
    result.X = +vector.X - (+normal.X * val);
    result.Y = +vector.Y - (+normal.Y * val);
    return result;
  };

  function Vector2_Reflect$2C (/* ref */ vector, /* ref */ normal, /* ref */ result) {
    var val = 2 * ((+vector.get().X * +normal.get().X) + (+vector.get().Y * +normal.get().Y));
    result.get().X = +vector.get().X - (+normal.get().X * val);
    result.get().Y = +vector.get().Y - (+normal.get().Y * val);
  };

  function Vector2_SmoothStep$2D (value1, value2, amount) {
    return $S00().Construct($T01().SmoothStep(value1.X, value2.X, amount), $T01().SmoothStep(value1.Y, value2.Y, amount));
  };

  function Vector2_SmoothStep$2E (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
    result.get().X = +$T01().SmoothStep(value1.get().X, value2.get().X, amount);
    result.get().Y = +$T01().SmoothStep(value1.get().Y, value2.get().Y, amount);
  };

  function Vector2_Subtract$2F (value1, value2) {
    value1.X -= +value2.X;
    value1.Y -= +value2.Y;
    return value1;
  };

  function Vector2_Subtract$30 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +value1.get().X - +value2.get().X;
    result.get().Y = +value1.get().Y - +value2.get().Y;
  };

  function Vector2_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T05(), ["{X:", (this.X).toString(), " Y:", (this.Y).toString(), "}"]));
  };

  function Vector2_Transform$31 (position, matrix) {
    return $S00().Construct((((+position.X * +matrix.M11) + (+position.Y * +matrix.M21)) + +matrix.M41), (((+position.X * +matrix.M12) + (+position.Y * +matrix.M22)) + +matrix.M42));
  };

  function Vector2_Transform$32 (/* ref */ position, /* ref */ matrix, /* ref */ result) {
    var x = ((+position.get().X * +matrix.get().M11) + (+position.get().Y * +matrix.get().M21)) + +matrix.get().M41;
    var y = ((+position.get().X * +matrix.get().M12) + (+position.get().Y * +matrix.get().M22)) + +matrix.get().M42;
    result.get().X = x;
    result.get().Y = y;
  };

  function Vector2_Transform$33 ($value, $rotation) {
    var rotation = new JSIL.BoxedVariable($rotation.MemberwiseClone());
    var value = new JSIL.BoxedVariable($value.MemberwiseClone());
    $S02().CallStatic($thisType, "Transform", null, /* ref */ value, /* ref */ rotation, /* ref */ value);
    return value.get();
  };

  function Vector2_Transform$34 (/* ref */ value, /* ref */ rotation, /* ref */ result) {
    var i = new JSIL.BoxedVariable(new ($T08())());
    var t = new JSIL.BoxedVariable(new ($T08())());
    var v = new JSIL.BoxedVariable($S03().Construct(value.get().X, value.get().Y, 0, 0));
    $T08().Inverse(/* ref */ rotation, /* ref */ i);
    $S04().CallStatic($T08(), "Multiply", null, /* ref */ rotation, /* ref */ v, /* ref */ t);
    $S04().CallStatic($T08(), "Multiply", null, /* ref */ t, /* ref */ i, /* ref */ v);
    result.get().X = +v.get().X;
    result.get().Y = +v.get().Y;
  };

  function Vector2_Transform$35 (sourceArray, /* ref */ matrix, destinationArray) {
    $S05().CallStatic($thisType, "Transform", null, 
      sourceArray, 
      0, 
      /* ref */ matrix, 
      destinationArray, 
      0, 
      sourceArray.length
    );
  };

  function Vector2_Transform$36 (sourceArray, sourceIndex, /* ref */ matrix, destinationArray, destinationIndex, length) {

    for (var x = 0; x < (length | 0); x = ((x + 1) | 0)) {
      var position = sourceArray[(((sourceIndex | 0) + x) | 0)].MemberwiseClone();
      var destination = destinationArray[(((destinationIndex | 0) + x) | 0)].MemberwiseClone();
      destination.X = ((+position.X * +matrix.get().M11) + (+position.Y * +matrix.get().M21)) + +matrix.get().M41;
      destination.Y = ((+position.X * +matrix.get().M12) + (+position.Y * +matrix.get().M22)) + +matrix.get().M42;
      destinationArray[(((destinationIndex | 0) + x) | 0)] = destination;
    }
  };

  function Vector2_Transform$37 (sourceArray, /* ref */ rotation, destinationArray) {
    $S06().CallStatic($thisType, "Transform", null, 
      sourceArray, 
      0, 
      /* ref */ rotation, 
      destinationArray, 
      0, 
      sourceArray.length
    );
  };

  function Vector2_Transform$38 (sourceArray, sourceIndex, /* ref */ rotation, destinationArray, destinationIndex, length) {
    var v = new JSIL.BoxedVariable(new $thisType());
    var i = 0;
    var position = new JSIL.BoxedVariable(null);

    while (i < (length | 0)) {
      position.set(sourceArray[(((sourceIndex | 0) + i) | 0)].MemberwiseClone());
      $S02().CallStatic($thisType, "Transform", null, /* ref */ position, /* ref */ rotation, /* ref */ v);
      destinationArray[(((destinationIndex | 0) + i) | 0)] = v.get().MemberwiseClone();
      i = ((i + 1) | 0);
    }
  };

  function Vector2_TransformNormal$39 (normal, matrix) {
    return $S00().Construct(((+normal.X * +matrix.M11) + (+normal.Y * +matrix.M21)), ((+normal.X * +matrix.M12) + (+normal.Y * +matrix.M22)));
  };

  function Vector2_TransformNormal$3A (/* ref */ normal, /* ref */ matrix, /* ref */ result) {
    var x = (+normal.get().X * +matrix.get().M11) + (+normal.get().Y * +matrix.get().M21);
    var y = (+normal.get().X * +matrix.get().M12) + (+normal.get().Y * +matrix.get().M22);
    result.get().X = x;
    result.get().Y = y;
  };

  function Vector2_TransformNormal$3B (sourceArray, /* ref */ matrix, destinationArray) {
    $thisType.TransformNormal(
      sourceArray, 
      0, 
      /* ref */ matrix, 
      destinationArray, 
      0, 
      sourceArray.length
    );
  };

  function Vector2_TransformNormal$3C (sourceArray, sourceIndex, /* ref */ matrix, destinationArray, destinationIndex, length) {
    var result = new $thisType();

    for (var i = 0; i < (length | 0); i = ((i + 1) | 0)) {
      var position = sourceArray[(((sourceIndex | 0) + i) | 0)].MemberwiseClone();
      result.X = (+position.X * +matrix.get().M11) + (+position.Y * +matrix.get().M21);
      result.Y = (+position.X * +matrix.get().M12) + (+position.Y * +matrix.get().M22);
      destinationArray[(((destinationIndex | 0) + i) | 0)] = result;
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Vector2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single]), 
      Vector2__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single), 
      Vector2__ctor$01
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector2_Add$02
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Add$03
    );

    $.Method({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Single, 
          $.Single
        ]), 
      Vector2_Barycentric$04
    );

    $.Method({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Barycentric$05
    );

    $.Method({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector2_CatmullRom$06
    );

    $.Method({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_CatmullRom$07
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ]), 
      Vector2_Clamp$08
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Clamp$09
    );

    $.Method({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type]), 
      Vector2_Distance$0A
    );

    $.Method({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      Vector2_Distance$0B
    );

    $.Method({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type]), 
      Vector2_DistanceSquared$0C
    );

    $.Method({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      Vector2_DistanceSquared$0D
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector2_Divide$0E
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Divide$0F
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector2_Divide$10
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Divide$11
    );

    $.Method({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type]), 
      Vector2_Dot$12
    );

    $.Method({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      Vector2_Dot$13
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Vector2_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Vector2_Equals$14
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      Vector2_get_DebugDisplayString
    );

    $.Method({Static:true , Public:true }, "get_One", 
      JSIL.MethodSignature.Return($.Type), 
      Vector2_get_One
    );

    $.Method({Static:true , Public:true }, "get_UnitX", 
      JSIL.MethodSignature.Return($.Type), 
      Vector2_get_UnitX
    );

    $.Method({Static:true , Public:true }, "get_UnitY", 
      JSIL.MethodSignature.Return($.Type), 
      Vector2_get_UnitY
    );

    $.Method({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type), 
      Vector2_get_Zero
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Vector2_GetHashCode
    );

    $.Method({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector2_Hermite$15
    );

    $.Method({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Hermite$16
    );

    $.Method({Static:false, Public:true }, "Length", 
      JSIL.MethodSignature.Return($.Single), 
      Vector2_Length
    );

    $.Method({Static:false, Public:true }, "LengthSquared", 
      JSIL.MethodSignature.Return($.Single), 
      Vector2_LengthSquared
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector2_Lerp$17
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Lerp$18
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector2_Max$19
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Max$1A
    );

    $.Method({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector2_Min$1B
    );

    $.Method({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Min$1C
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector2_Multiply$1D
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector2_Multiply$1E
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Multiply$1F
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Multiply$20
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Vector2_Negate$21
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Vector2_Negate$22
    );

    $.Method({Static:false, Public:true }, "Normalize", 
      JSIL.MethodSignature.Void, 
      Vector2_Normalize$23
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Vector2_Normalize$24
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Vector2_Normalize$25
    );

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector2_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector2_op_Division$26
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector2_op_Division$27
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vector2_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vector2_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector2_op_Multiply$28
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector2_op_Multiply$29
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type]), 
      Vector2_op_Multiply$2A
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector2_op_Subtraction
    );

    $.Method({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Vector2_op_UnaryNegation
    );

    $.Method({Static:true , Public:true }, "Reflect", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector2_Reflect$2B
    );

    $.Method({Static:true , Public:true }, "Reflect", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Reflect$2C
    );

    $.Method({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector2_SmoothStep$2D
    );

    $.Method({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_SmoothStep$2E
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector2_Subtract$2F
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Subtract$30
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Vector2_toString
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Vector2_Transform$31
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Transform$32
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
      Vector2_Transform$33
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_Transform$34
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ]), 
      Vector2_Transform$35
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ]), 
      Vector2_Transform$36
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ]), 
      Vector2_Transform$37
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ]), 
      Vector2_Transform$38
    );

    $.Method({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Vector2_TransformNormal$39
    );

    $.Method({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector2_TransformNormal$3A
    );

    $.Method({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ]), 
      Vector2_TransformNormal$3B
    );

    $.Method({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ]), 
      Vector2_TransformNormal$3C
    );

    $.Field({Static:false, Public:true }, "X", $.Single); 
    $.Field({Static:false, Public:true }, "Y", $.Single); 
    $.Field({Static:true , Public:false}, "zeroVector", $.Type); 
    $.Field({Static:true , Public:false}, "unitVector", $.Type); 
    $.Field({Static:true , Public:false}, "unitXVector", $.Type); 
    $.Field({Static:true , Public:false}, "unitYVector", $.Type); 
    function Vector2__cctor () {
      $thisType.zeroVector = new $thisType();
      $thisType.unitVector = new $thisType();
      $thisType.unitXVector = new $thisType();
      $thisType.unitYVector = new $thisType();
      $thisType.zeroVector = $S00().Construct(0, 0);
      $thisType.unitVector = $S00().Construct(1, 1);
      $thisType.unitXVector = $S00().Construct(1, 0);
      $thisType.unitYVector = $S00().Construct(0, 1);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Vector2__cctor
    );

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.Property({Static:true , Public:true }, "One", $.Type);

    $.Property({Static:true , Public:true }, "UnitX", $.Type);

    $.Property({Static:true , Public:true }, "UnitY", $.Type);

    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; })
    .Attribute($asm03.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm00.Microsoft.Xna.Framework.Design.Vector2Converter.__Type__]; });

})();

/* struct Microsoft.Xna.Framework.Vector3 */ 

(function Vector3$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm03.System.Diagnostics.Debug)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Quaternion)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Single")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function Vector3__ctor$00 (x, y, z) {
    this.X = +x;
    this.Y = +y;
    this.Z = +z;
  };

  function Vector3__ctor$01 (value) {
    this.X = +value;
    this.Y = +value;
    this.Z = +value;
  };

  function Vector3__ctor$02 (value, z) {
    this.X = +value.X;
    this.Y = +value.Y;
    this.Z = +z;
  };

  function Vector3_Add$03 (value1, value2) {
    value1.X += +value2.X;
    value1.Y += +value2.Y;
    value1.Z += +value2.Z;
    return value1;
  };

  function Vector3_Add$04 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +value1.get().X + +value2.get().X;
    result.get().Y = +value1.get().Y + +value2.get().Y;
    result.get().Z = +value1.get().Z + +value2.get().Z;
  };

  function Vector3_Barycentric$05 (value1, value2, value3, amount1, amount2) {
    return $S00().Construct($T02().Barycentric(
        value1.X, 
        value2.X, 
        value3.X, 
        amount1, 
        amount2
      ), $T02().Barycentric(
        value1.Y, 
        value2.Y, 
        value3.Y, 
        amount1, 
        amount2
      ), $T02().Barycentric(
        value1.Z, 
        value2.Z, 
        value3.Z, 
        amount1, 
        amount2
      ));
  };

  function Vector3_Barycentric$06 (/* ref */ value1, /* ref */ value2, /* ref */ value3, amount1, amount2, /* ref */ result) {
    result.get().X = +$T02().Barycentric(
      value1.get().X, 
      value2.get().X, 
      value3.get().X, 
      amount1, 
      amount2
    );
    result.get().Y = +$T02().Barycentric(
      value1.get().Y, 
      value2.get().Y, 
      value3.get().Y, 
      amount1, 
      amount2
    );
    result.get().Z = +$T02().Barycentric(
      value1.get().Z, 
      value2.get().Z, 
      value3.get().Z, 
      amount1, 
      amount2
    );
  };

  function Vector3_CatmullRom$07 (value1, value2, value3, value4, amount) {
    return $S00().Construct($T02().CatmullRom(
        value1.X, 
        value2.X, 
        value3.X, 
        value4.X, 
        amount
      ), $T02().CatmullRom(
        value1.Y, 
        value2.Y, 
        value3.Y, 
        value4.Y, 
        amount
      ), $T02().CatmullRom(
        value1.Z, 
        value2.Z, 
        value3.Z, 
        value4.Z, 
        amount
      ));
  };

  function Vector3_CatmullRom$08 (/* ref */ value1, /* ref */ value2, /* ref */ value3, /* ref */ value4, amount, /* ref */ result) {
    result.get().X = +$T02().CatmullRom(
      value1.get().X, 
      value2.get().X, 
      value3.get().X, 
      value4.get().X, 
      amount
    );
    result.get().Y = +$T02().CatmullRom(
      value1.get().Y, 
      value2.get().Y, 
      value3.get().Y, 
      value4.get().Y, 
      amount
    );
    result.get().Z = +$T02().CatmullRom(
      value1.get().Z, 
      value2.get().Z, 
      value3.get().Z, 
      value4.get().Z, 
      amount
    );
  };

  function Vector3_Clamp$09 (value1, min, max) {
    return $S00().Construct($S01().CallStatic($T02(), "Clamp", null, value1.X, min.X, max.X), $S01().CallStatic($T02(), "Clamp", null, value1.Y, min.Y, max.Y), $S01().CallStatic($T02(), "Clamp", null, value1.Z, min.Z, max.Z));
  };

  function Vector3_Clamp$0A (/* ref */ value1, /* ref */ min, /* ref */ max, /* ref */ result) {
    result.get().X = +$S01().CallStatic($T02(), "Clamp", null, value1.get().X, min.get().X, max.get().X);
    result.get().Y = +$S01().CallStatic($T02(), "Clamp", null, value1.get().Y, min.get().Y, max.get().Y);
    result.get().Z = +$S01().CallStatic($T02(), "Clamp", null, value1.get().Z, min.get().Z, max.get().Z);
  };

  function Vector3_Cross$0B ($vector1, $vector2) {
    var vector2 = new JSIL.BoxedVariable($vector2.MemberwiseClone());
    var vector1 = new JSIL.BoxedVariable($vector1.MemberwiseClone());
    $thisType.Cross(/* ref */ vector1, /* ref */ vector2, /* ref */ vector1);
    return vector1.get();
  };

  function Vector3_Cross$0C (/* ref */ vector1, /* ref */ vector2, /* ref */ result) {
    var x = (+vector1.get().Y * +vector2.get().Z) - (+vector2.get().Y * +vector1.get().Z);
    var y = -((+vector1.get().X * +vector2.get().Z) - (+vector2.get().X * +vector1.get().Z));
    var z = (+vector1.get().X * +vector2.get().Y) - (+vector2.get().X * +vector1.get().Y);
    result.get().X = x;
    result.get().Y = y;
    result.get().Z = z;
  };

  function Vector3_Distance$0D ($vector1, $vector2) {
    var vector2 = new JSIL.BoxedVariable($vector2);
    var vector1 = new JSIL.BoxedVariable($vector1);
    var result = new JSIL.BoxedVariable(0);
    $thisType.DistanceSquared(/* ref */ vector1, /* ref */ vector2, /* ref */ result);
    return Math.fround(Math.sqrt(result.get()));
  };

  function Vector3_Distance$0E (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    $thisType.DistanceSquared(/* ref */ value1, /* ref */ value2, /* ref */ result);
    result.set(Math.fround(Math.sqrt(result.get())));
  };

  function Vector3_DistanceSquared$0F ($value1, $value2) {
    var value2 = new JSIL.BoxedVariable($value2);
    var value1 = new JSIL.BoxedVariable($value1);
    var result = new JSIL.BoxedVariable(0);
    $thisType.DistanceSquared(/* ref */ value1, /* ref */ value2, /* ref */ result);
    return result.get();
  };

  function Vector3_DistanceSquared$10 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.set((((+value1.get().X - +value2.get().X) * (+value1.get().X - +value2.get().X)) + ((+value1.get().Y - +value2.get().Y) * (+value1.get().Y - +value2.get().Y))) + ((+value1.get().Z - +value2.get().Z) * (+value1.get().Z - +value2.get().Z)));
  };

  function Vector3_Divide$11 (value1, value2) {
    value1.X = +((+value1.X / +value2.X));
    value1.Y = +((+value1.Y / +value2.Y));
    value1.Z = +((+value1.Z / +value2.Z));
    return value1;
  };

  function Vector3_Divide$12 (value1, value2) {
    var factor = +((1 / +value2));
    value1.X *= factor;
    value1.Y *= factor;
    value1.Z *= factor;
    return value1;
  };

  function Vector3_Divide$13 (/* ref */ value1, divisor, /* ref */ result) {
    var factor = +((1 / +divisor));
    result.get().X = +value1.get().X * factor;
    result.get().Y = +value1.get().Y * factor;
    result.get().Z = +value1.get().Z * factor;
  };

  function Vector3_Divide$14 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +((+value1.get().X / +value2.get().X));
    result.get().Y = +((+value1.get().Y / +value2.get().Y));
    result.get().Z = +((+value1.get().Z / +value2.get().Z));
  };

  function Vector3_Dot$15 (vector1, vector2) {
    return (((+vector1.X * +vector2.X) + (+vector1.Y * +vector2.Y)) + (+vector1.Z * +vector2.Z));
  };

  function Vector3_Dot$16 (/* ref */ vector1, /* ref */ vector2, /* ref */ result) {
    result.set(((+vector1.get().X * +vector2.get().X) + (+vector1.get().Y * +vector2.get().Y)) + (+vector1.get().Z * +vector2.get().Z));
  };

  function Vector3_Object_Equals (obj) {
    if (!$thisType.$Is(obj)) {
      var result = false;
    } else {
      var other = $thisType.$Cast(obj).MemberwiseClone();
      result = !(!$T02().WithinEpsilon(this.X, other.X) || 
        !$T02().WithinEpsilon(this.Y, other.Y)) && 
      $T02().WithinEpsilon(this.Z, other.Z);
    }
    return result;
  };

  function Vector3_Equals$17 (other) {
    return (!(!$T02().WithinEpsilon(this.X, other.X) || 
        !$T02().WithinEpsilon(this.Y, other.Y)) && $T02().WithinEpsilon(this.Z, other.Z));
  };

  function Vector3_get_Backward () {
    return $thisType.backward;
  };

  function Vector3_get_DebugDisplayString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T07(), [(this.X).toString(), " ", (this.Y).toString(), " ", (this.Z).toString()]));
  };

  function Vector3_get_Down () {
    return $thisType.down;
  };

  function Vector3_get_Forward () {
    return $thisType.forward;
  };

  function Vector3_get_Left () {
    return $thisType.left;
  };

  function Vector3_get_One () {
    return $thisType.one;
  };

  function Vector3_get_Right () {
    return $thisType.right;
  };

  function Vector3_get_UnitX () {
    return $thisType.unitX;
  };

  function Vector3_get_UnitY () {
    return $thisType.unitY;
  };

  function Vector3_get_UnitZ () {
    return $thisType.unitZ;
  };

  function Vector3_get_Up () {
    return $thisType.up;
  };

  function Vector3_get_Zero () {
    return $thisType.zero;
  };

  function Vector3_GetHashCode () {
    return (((+this.X + +this.Y) + +this.Z) | 0);
  };

  function Vector3_Hermite$18 ($value1, $tangent1, $value2, $tangent2, amount) {
    var tangent2 = new JSIL.BoxedVariable($tangent2.MemberwiseClone());
    var value2 = new JSIL.BoxedVariable($value2.MemberwiseClone());
    var tangent1 = new JSIL.BoxedVariable($tangent1.MemberwiseClone());
    var value1 = new JSIL.BoxedVariable($value1.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.Hermite(
      /* ref */ value1, 
      /* ref */ tangent1, 
      /* ref */ value2, 
      /* ref */ tangent2, 
      amount, 
      /* ref */ result
    );
    return result.get();
  };

  function Vector3_Hermite$19 (/* ref */ value1, /* ref */ tangent1, /* ref */ value2, /* ref */ tangent2, amount, /* ref */ result) {
    result.get().X = +$T02().Hermite(
      value1.get().X, 
      tangent1.get().X, 
      value2.get().X, 
      tangent2.get().X, 
      amount
    );
    result.get().Y = +$T02().Hermite(
      value1.get().Y, 
      tangent1.get().Y, 
      value2.get().Y, 
      tangent2.get().Y, 
      amount
    );
    result.get().Z = +$T02().Hermite(
      value1.get().Z, 
      tangent1.get().Z, 
      value2.get().Z, 
      tangent2.get().Z, 
      amount
    );
  };

  function Vector3_Length () {
    var result = new JSIL.BoxedVariable(0);
    $thisType.DistanceSquared(new JSIL.BoxedVariable(this), /* ref */ new JSIL.MemberReference($thisType, "zero"), /* ref */ result);
    return Math.fround(Math.sqrt(result.get()));
  };

  function Vector3_LengthSquared () {
    var result = new JSIL.BoxedVariable(0);
    $thisType.DistanceSquared(new JSIL.BoxedVariable(this), /* ref */ new JSIL.MemberReference($thisType, "zero"), /* ref */ result);
    return result.get();
  };

  function Vector3_Lerp$1A (value1, value2, amount) {
    return $S00().Construct($T02().Lerp(value1.X, value2.X, amount), $T02().Lerp(value1.Y, value2.Y, amount), $T02().Lerp(value1.Z, value2.Z, amount));
  };

  function Vector3_Lerp$1B (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
    result.get().X = +$T02().Lerp(value1.get().X, value2.get().X, amount);
    result.get().Y = +$T02().Lerp(value1.get().Y, value2.get().Y, amount);
    result.get().Z = +$T02().Lerp(value1.get().Z, value2.get().Z, amount);
  };

  function Vector3_Max$1C (value1, value2) {
    return $S00().Construct($T02().Max(value1.X, value2.X), $T02().Max(value1.Y, value2.Y), $T02().Max(value1.Z, value2.Z));
  };

  function Vector3_Max$1D (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +$T02().Max(value1.get().X, value2.get().X);
    result.get().Y = +$T02().Max(value1.get().Y, value2.get().Y);
    result.get().Z = +$T02().Max(value1.get().Z, value2.get().Z);
  };

  function Vector3_Min$1E (value1, value2) {
    return $S00().Construct($T02().Min(value1.X, value2.X), $T02().Min(value1.Y, value2.Y), $T02().Min(value1.Z, value2.Z));
  };

  function Vector3_Min$1F (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +$T02().Min(value1.get().X, value2.get().X);
    result.get().Y = +$T02().Min(value1.get().Y, value2.get().Y);
    result.get().Z = +$T02().Min(value1.get().Z, value2.get().Z);
  };

  function Vector3_Multiply$20 (value1, value2) {
    value1.X *= +value2.X;
    value1.Y *= +value2.Y;
    value1.Z *= +value2.Z;
    return value1;
  };

  function Vector3_Multiply$21 (value1, scaleFactor) {
    value1.X *= +scaleFactor;
    value1.Y *= +scaleFactor;
    value1.Z *= +scaleFactor;
    return value1;
  };

  function Vector3_Multiply$22 (/* ref */ value1, scaleFactor, /* ref */ result) {
    result.get().X = +value1.get().X * +scaleFactor;
    result.get().Y = +value1.get().Y * +scaleFactor;
    result.get().Z = +value1.get().Z * +scaleFactor;
  };

  function Vector3_Multiply$23 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +value1.get().X * +value2.get().X;
    result.get().Y = +value1.get().Y * +value2.get().Y;
    result.get().Z = +value1.get().Z * +value2.get().Z;
  };

  function Vector3_Negate$24 (value) {
    $thisType.prototype._ctor.call(value, -value.X, -value.Y, -value.Z);
    return value;
  };

  function Vector3_Negate$25 (/* ref */ value, /* ref */ result) {
    result.get().X = -value.get().X;
    result.get().Y = -value.get().Y;
    result.get().Z = -value.get().Z;
  };

  function Vector3_Normalize$26 () {
    $thisType.Normalize(new JSIL.BoxedVariable(this), new JSIL.BoxedVariable(this));
  };

  function Vector3_Normalize$27 ($vector) {
    var vector = new JSIL.BoxedVariable($vector.MemberwiseClone());
    $thisType.Normalize(/* ref */ vector, /* ref */ vector);
    return vector.get();
  };

  function Vector3_Normalize$28 (/* ref */ value, /* ref */ result) {
    var factor = new JSIL.BoxedVariable(0);
    $thisType.Distance(/* ref */ value, /* ref */ new JSIL.MemberReference($thisType, "zero"), /* ref */ factor);
    factor.set(+((1 / +factor.get())));
    result.get().X = +value.get().X * +factor.get();
    result.get().Y = +value.get().Y * +factor.get();
    result.get().Z = +value.get().Z * +factor.get();
  };

  function Vector3_op_Addition (value1, value2) {
    value1.X += +value2.X;
    value1.Y += +value2.Y;
    value1.Z += +value2.Z;
    return value1;
  };

  function Vector3_op_Division$29 (value1, value2) {
    value1.X = +((+value1.X / +value2.X));
    value1.Y = +((+value1.Y / +value2.Y));
    value1.Z = +((+value1.Z / +value2.Z));
    return value1;
  };

  function Vector3_op_Division$2A (value, divider) {
    var factor = +((1 / +divider));
    value.X *= factor;
    value.Y *= factor;
    value.Z *= factor;
    return value;
  };

  function Vector3_op_Equality (value1, value2) {
    return (!(!$T02().WithinEpsilon(value1.X, value2.X) || 
        !$T02().WithinEpsilon(value1.Y, value2.Y)) && $T02().WithinEpsilon(value1.Z, value2.Z));
  };

  function Vector3_op_Inequality (value1, value2) {
    return !$thisType.op_Equality(value1.MemberwiseClone(), value2.MemberwiseClone());
  };

  function Vector3_op_Multiply$2B (value1, value2) {
    value1.X *= +value2.X;
    value1.Y *= +value2.Y;
    value1.Z *= +value2.Z;
    return value1;
  };

  function Vector3_op_Multiply$2C (value, scaleFactor) {
    value.X *= +scaleFactor;
    value.Y *= +scaleFactor;
    value.Z *= +scaleFactor;
    return value;
  };

  function Vector3_op_Multiply$2D (scaleFactor, value) {
    value.X *= +scaleFactor;
    value.Y *= +scaleFactor;
    value.Z *= +scaleFactor;
    return value;
  };

  function Vector3_op_Subtraction (value1, value2) {
    value1.X -= +value2.X;
    value1.Y -= +value2.Y;
    value1.Z -= +value2.Z;
    return value1;
  };

  function Vector3_op_UnaryNegation (value) {
    $thisType.prototype._ctor.call(value, -value.X, -value.Y, -value.Z);
    return value;
  };

  function Vector3_Reflect$2E (vector, normal) {
    var reflectedVector = new $thisType();
    var dotProduct = ((+vector.X * +normal.X) + (+vector.Y * +normal.Y)) + (+vector.Z * +normal.Z);
    reflectedVector.X = +vector.X - ((2 * +normal.X) * dotProduct);
    reflectedVector.Y = +vector.Y - ((2 * +normal.Y) * dotProduct);
    reflectedVector.Z = +vector.Z - ((2 * +normal.Z) * dotProduct);
    return reflectedVector;
  };

  function Vector3_Reflect$2F (/* ref */ vector, /* ref */ normal, /* ref */ result) {
    var dotProduct = ((+vector.get().X * +normal.get().X) + (+vector.get().Y * +normal.get().Y)) + (+vector.get().Z * +normal.get().Z);
    result.get().X = +vector.get().X - ((2 * +normal.get().X) * dotProduct);
    result.get().Y = +vector.get().Y - ((2 * +normal.get().Y) * dotProduct);
    result.get().Z = +vector.get().Z - ((2 * +normal.get().Z) * dotProduct);
  };

  function Vector3_SmoothStep$30 (value1, value2, amount) {
    return $S00().Construct($T02().SmoothStep(value1.X, value2.X, amount), $T02().SmoothStep(value1.Y, value2.Y, amount), $T02().SmoothStep(value1.Z, value2.Z, amount));
  };

  function Vector3_SmoothStep$31 (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
    result.get().X = +$T02().SmoothStep(value1.get().X, value2.get().X, amount);
    result.get().Y = +$T02().SmoothStep(value1.get().Y, value2.get().Y, amount);
    result.get().Z = +$T02().SmoothStep(value1.get().Z, value2.get().Z, amount);
  };

  function Vector3_Subtract$32 (value1, value2) {
    value1.X -= +value2.X;
    value1.Y -= +value2.Y;
    value1.Z -= +value2.Z;
    return value1;
  };

  function Vector3_Subtract$33 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +value1.get().X - +value2.get().X;
    result.get().Y = +value1.get().Y - +value2.get().Y;
    result.get().Z = +value1.get().Z - +value2.get().Z;
  };

  function Vector3_toString () {
    var sb = $S02().Construct(32);
    $S03().CallVirtual("Append", null, sb, "{X:");
    $S04().CallVirtual("Append", null, sb, this.X);
    $S03().CallVirtual("Append", null, sb, " Y:");
    $S04().CallVirtual("Append", null, sb, this.Y);
    $S03().CallVirtual("Append", null, sb, " Z:");
    $S04().CallVirtual("Append", null, sb, this.Z);
    $S03().CallVirtual("Append", null, sb, "}");
    return sb.toString();
  };

  function Vector3_Transform$34 ($position, $matrix) {
    var matrix = new JSIL.BoxedVariable($matrix);
    var position = new JSIL.BoxedVariable($position);
    $S05().CallStatic($thisType, "Transform", null, /* ref */ position, /* ref */ matrix, /* ref */ position);
    return position.get();
  };

  function Vector3_Transform$35 (/* ref */ position, /* ref */ matrix, /* ref */ result) {
    var x = (((+position.get().X * +matrix.get().M11) + (+position.get().Y * +matrix.get().M21)) + (+position.get().Z * +matrix.get().M31)) + +matrix.get().M41;
    var y = (((+position.get().X * +matrix.get().M12) + (+position.get().Y * +matrix.get().M22)) + (+position.get().Z * +matrix.get().M32)) + +matrix.get().M42;
    var z = (((+position.get().X * +matrix.get().M13) + (+position.get().Y * +matrix.get().M23)) + (+position.get().Z * +matrix.get().M33)) + +matrix.get().M43;
    result.get().X = x;
    result.get().Y = y;
    result.get().Z = z;
  };

  function Vector3_Transform$36 (sourceArray, /* ref */ matrix, destinationArray) {
    $T0C().Assert((destinationArray.length | 0) >= (sourceArray.length | 0), "The destination array is smaller than the source array.");

    for (var i = 0; i < (sourceArray.length | 0); i = ((i + 1) | 0)) {
      var position = sourceArray[i].MemberwiseClone();
      destinationArray[i] = $S00().Construct(((((+position.X * +matrix.get().M11) + (+position.Y * +matrix.get().M21)) + (+position.Z * +matrix.get().M31)) + +matrix.get().M41), ((((+position.X * +matrix.get().M12) + (+position.Y * +matrix.get().M22)) + (+position.Z * +matrix.get().M32)) + +matrix.get().M42), ((((+position.X * +matrix.get().M13) + (+position.Y * +matrix.get().M23)) + (+position.Z * +matrix.get().M33)) + +matrix.get().M43));
    }
  };

  function Vector3_Transform$37 (sourceArray, sourceIndex, /* ref */ matrix, destinationArray, destinationIndex, length) {
    $T0C().Assert((((sourceArray.length | 0) - (sourceIndex | 0)) | 0) >= (length | 0), "The source array is too small for the given sourceIndex and length.");
    $T0C().Assert((((destinationArray.length | 0) - (destinationIndex | 0)) | 0) >= (length | 0), "The destination array is too small for the given destinationIndex and length.");

    for (var i = 0; i < (length | 0); i = ((i + 1) | 0)) {
      var position = sourceArray[(((sourceIndex | 0) + i) | 0)].MemberwiseClone();
      destinationArray[(((destinationIndex | 0) + i) | 0)] = $S00().Construct(((((+position.X * +matrix.get().M11) + (+position.Y * +matrix.get().M21)) + (+position.Z * +matrix.get().M31)) + +matrix.get().M41), ((((+position.X * +matrix.get().M12) + (+position.Y * +matrix.get().M22)) + (+position.Z * +matrix.get().M32)) + +matrix.get().M42), ((((+position.X * +matrix.get().M13) + (+position.Y * +matrix.get().M23)) + (+position.Z * +matrix.get().M33)) + +matrix.get().M43));
    }
  };

  function Vector3_Transform$38 ($vec, $quat) {
    var quat = new JSIL.BoxedVariable($quat.MemberwiseClone());
    var vec = new JSIL.BoxedVariable($vec.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $S06().CallStatic($thisType, "Transform", null, /* ref */ vec, /* ref */ quat, /* ref */ result);
    return result.get();
  };

  function Vector3_Transform$39 (/* ref */ value, /* ref */ rotation, /* ref */ result) {
    var x = 2 * ((+rotation.get().Y * +value.get().Z) - (+rotation.get().Z * +value.get().Y));
    var y = 2 * ((+rotation.get().Z * +value.get().X) - (+rotation.get().X * +value.get().Z));
    var z = 2 * ((+rotation.get().X * +value.get().Y) - (+rotation.get().Y * +value.get().X));
    result.get().X = (+value.get().X + (x * +rotation.get().W)) + ((+rotation.get().Y * z) - (+rotation.get().Z * y));
    result.get().Y = (+value.get().Y + (y * +rotation.get().W)) + ((+rotation.get().Z * x) - (+rotation.get().X * z));
    result.get().Z = (+value.get().Z + (z * +rotation.get().W)) + ((+rotation.get().X * y) - (+rotation.get().Y * x));
  };

  function Vector3_Transform$3A (sourceArray, /* ref */ rotation, destinationArray) {
    $T0C().Assert((destinationArray.length | 0) >= (sourceArray.length | 0), "The destination array is smaller than the source array.");

    for (var i = 0; i < (sourceArray.length | 0); i = ((i + 1) | 0)) {
      var position = sourceArray[i].MemberwiseClone();
      var x = 2 * ((+rotation.get().Y * +position.Z) - (+rotation.get().Z * +position.Y));
      var y = 2 * ((+rotation.get().Z * +position.X) - (+rotation.get().X * +position.Z));
      var z = 2 * ((+rotation.get().X * +position.Y) - (+rotation.get().Y * +position.X));
      destinationArray[i] = $S00().Construct(((+position.X + (x * +rotation.get().W)) + ((+rotation.get().Y * z) - (+rotation.get().Z * y))), ((+position.Y + (y * +rotation.get().W)) + ((+rotation.get().Z * x) - (+rotation.get().X * z))), ((+position.Z + (z * +rotation.get().W)) + ((+rotation.get().X * y) - (+rotation.get().Y * x))));
    }
  };

  function Vector3_Transform$3B (sourceArray, sourceIndex, /* ref */ rotation, destinationArray, destinationIndex, length) {
    $T0C().Assert((((sourceArray.length | 0) - (sourceIndex | 0)) | 0) >= (length | 0), "The source array is too small for the given sourceIndex and length.");
    $T0C().Assert((((destinationArray.length | 0) - (destinationIndex | 0)) | 0) >= (length | 0), "The destination array is too small for the given destinationIndex and length.");

    for (var i = 0; i < (length | 0); i = ((i + 1) | 0)) {
      var position = sourceArray[(((sourceIndex | 0) + i) | 0)].MemberwiseClone();
      var x = 2 * ((+rotation.get().Y * +position.Z) - (+rotation.get().Z * +position.Y));
      var y = 2 * ((+rotation.get().Z * +position.X) - (+rotation.get().X * +position.Z));
      var z = 2 * ((+rotation.get().X * +position.Y) - (+rotation.get().Y * +position.X));
      destinationArray[(((destinationIndex | 0) + i) | 0)] = $S00().Construct(((+position.X + (x * +rotation.get().W)) + ((+rotation.get().Y * z) - (+rotation.get().Z * y))), ((+position.Y + (y * +rotation.get().W)) + ((+rotation.get().Z * x) - (+rotation.get().X * z))), ((+position.Z + (z * +rotation.get().W)) + ((+rotation.get().X * y) - (+rotation.get().Y * x))));
    }
  };

  function Vector3_TransformNormal$3C ($normal, $matrix) {
    var matrix = new JSIL.BoxedVariable($matrix.MemberwiseClone());
    var normal = new JSIL.BoxedVariable($normal.MemberwiseClone());
    $S07().CallStatic($thisType, "TransformNormal", null, /* ref */ normal, /* ref */ matrix, /* ref */ normal);
    return normal.get();
  };

  function Vector3_TransformNormal$3D (/* ref */ normal, /* ref */ matrix, /* ref */ result) {
    var x = ((+normal.get().X * +matrix.get().M11) + (+normal.get().Y * +matrix.get().M21)) + (+normal.get().Z * +matrix.get().M31);
    var y = ((+normal.get().X * +matrix.get().M12) + (+normal.get().Y * +matrix.get().M22)) + (+normal.get().Z * +matrix.get().M32);
    var z = ((+normal.get().X * +matrix.get().M13) + (+normal.get().Y * +matrix.get().M23)) + (+normal.get().Z * +matrix.get().M33);
    result.get().X = x;
    result.get().Y = y;
    result.get().Z = z;
  };

  function Vector3_TransformNormal$3E (sourceArray, /* ref */ matrix, destinationArray) {
    $T0C().Assert((destinationArray.length | 0) >= (sourceArray.length | 0), "The destination array is smaller than the source array.");

    for (var i = 0; i < (sourceArray.length | 0); i = ((i + 1) | 0)) {
      var normal = sourceArray[i].MemberwiseClone();
      destinationArray[i].X = ((+normal.X * +matrix.get().M11) + (+normal.Y * +matrix.get().M21)) + (+normal.Z * +matrix.get().M31);
      destinationArray[i].Y = ((+normal.X * +matrix.get().M12) + (+normal.Y * +matrix.get().M22)) + (+normal.Z * +matrix.get().M32);
      destinationArray[i].Z = ((+normal.X * +matrix.get().M13) + (+normal.Y * +matrix.get().M23)) + (+normal.Z * +matrix.get().M33);
    }
  };

  function Vector3_TransformNormal$3F (sourceArray, sourceIndex, /* ref */ matrix, destinationArray, destinationIndex, length) {
    if (sourceArray === null) {
      throw $S08().Construct("sourceArray");
    }
    if (destinationArray === null) {
      throw $S08().Construct("destinationArray");
    }
    if ((((sourceIndex | 0) + (length | 0)) | 0) > (sourceArray.length | 0)) {
      throw $S09().Construct("the combination of sourceIndex and length was greater than sourceArray.Length");
    }
    if ((((destinationIndex | 0) + (length | 0)) | 0) > (destinationArray.length | 0)) {
      throw $S09().Construct("destinationArray is too small to contain the result");
    }

    for (var i = 0; i < (length | 0); i = ((i + 1) | 0)) {
      var normal = sourceArray[((i + (sourceIndex | 0)) | 0)].MemberwiseClone();
      destinationArray[((i + (destinationIndex | 0)) | 0)].X = ((+normal.X * +matrix.get().M11) + (+normal.Y * +matrix.get().M21)) + (+normal.Z * +matrix.get().M31);
      destinationArray[((i + (destinationIndex | 0)) | 0)].Y = ((+normal.X * +matrix.get().M12) + (+normal.Y * +matrix.get().M22)) + (+normal.Z * +matrix.get().M32);
      destinationArray[((i + (destinationIndex | 0)) | 0)].Z = ((+normal.X * +matrix.get().M13) + (+normal.Y * +matrix.get().M23)) + (+normal.Z * +matrix.get().M33);
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Vector3", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Vector3__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single), 
      Vector3__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Single]), 
      Vector3__ctor$02
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_Add$03
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Add$04
    );

    $.Method({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Single, 
          $.Single
        ]), 
      Vector3_Barycentric$05
    );

    $.Method({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Barycentric$06
    );

    $.Method({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector3_CatmullRom$07
    );

    $.Method({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_CatmullRom$08
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ]), 
      Vector3_Clamp$09
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Clamp$0A
    );

    $.Method({Static:true , Public:true }, "Cross", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_Cross$0B
    );

    $.Method({Static:true , Public:true }, "Cross", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Cross$0C
    );

    $.Method({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type]), 
      Vector3_Distance$0D
    );

    $.Method({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      Vector3_Distance$0E
    );

    $.Method({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type]), 
      Vector3_DistanceSquared$0F
    );

    $.Method({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      Vector3_DistanceSquared$10
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_Divide$11
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector3_Divide$12
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Divide$13
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Divide$14
    );

    $.Method({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type]), 
      Vector3_Dot$15
    );

    $.Method({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      Vector3_Dot$16
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Vector3_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Vector3_Equals$17
    );

    $.Method({Static:true , Public:true }, "get_Backward", 
      JSIL.MethodSignature.Return($.Type), 
      Vector3_get_Backward
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      Vector3_get_DebugDisplayString
    );

    $.Method({Static:true , Public:true }, "get_Down", 
      JSIL.MethodSignature.Return($.Type), 
      Vector3_get_Down
    );

    $.Method({Static:true , Public:true }, "get_Forward", 
      JSIL.MethodSignature.Return($.Type), 
      Vector3_get_Forward
    );

    $.Method({Static:true , Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($.Type), 
      Vector3_get_Left
    );

    $.Method({Static:true , Public:true }, "get_One", 
      JSIL.MethodSignature.Return($.Type), 
      Vector3_get_One
    );

    $.Method({Static:true , Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($.Type), 
      Vector3_get_Right
    );

    $.Method({Static:true , Public:true }, "get_UnitX", 
      JSIL.MethodSignature.Return($.Type), 
      Vector3_get_UnitX
    );

    $.Method({Static:true , Public:true }, "get_UnitY", 
      JSIL.MethodSignature.Return($.Type), 
      Vector3_get_UnitY
    );

    $.Method({Static:true , Public:true }, "get_UnitZ", 
      JSIL.MethodSignature.Return($.Type), 
      Vector3_get_UnitZ
    );

    $.Method({Static:true , Public:true }, "get_Up", 
      JSIL.MethodSignature.Return($.Type), 
      Vector3_get_Up
    );

    $.Method({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type), 
      Vector3_get_Zero
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Vector3_GetHashCode
    );

    $.Method({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector3_Hermite$18
    );

    $.Method({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Hermite$19
    );

    $.Method({Static:false, Public:true }, "Length", 
      JSIL.MethodSignature.Return($.Single), 
      Vector3_Length
    );

    $.Method({Static:false, Public:true }, "LengthSquared", 
      JSIL.MethodSignature.Return($.Single), 
      Vector3_LengthSquared
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector3_Lerp$1A
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Lerp$1B
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_Max$1C
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Max$1D
    );

    $.Method({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_Min$1E
    );

    $.Method({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Min$1F
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_Multiply$20
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector3_Multiply$21
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Multiply$22
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Multiply$23
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Vector3_Negate$24
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Vector3_Negate$25
    );

    $.Method({Static:false, Public:true }, "Normalize", 
      JSIL.MethodSignature.Void, 
      Vector3_Normalize$26
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Vector3_Normalize$27
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Vector3_Normalize$28
    );

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_op_Division$29
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector3_op_Division$2A
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vector3_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vector3_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_op_Multiply$2B
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector3_op_Multiply$2C
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type]), 
      Vector3_op_Multiply$2D
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_op_Subtraction
    );

    $.Method({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Vector3_op_UnaryNegation
    );

    $.Method({Static:true , Public:true }, "Reflect", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_Reflect$2E
    );

    $.Method({Static:true , Public:true }, "Reflect", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Reflect$2F
    );

    $.Method({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector3_SmoothStep$30
    );

    $.Method({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_SmoothStep$31
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector3_Subtract$32
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Subtract$33
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Vector3_toString
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Vector3_Transform$34
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Transform$35
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ]), 
      Vector3_Transform$36
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ]), 
      Vector3_Transform$37
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
      Vector3_Transform$38
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_Transform$39
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ]), 
      Vector3_Transform$3A
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ]), 
      Vector3_Transform$3B
    );

    $.Method({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Vector3_TransformNormal$3C
    );

    $.Method({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector3_TransformNormal$3D
    );

    $.Method({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ]), 
      Vector3_TransformNormal$3E
    );

    $.Method({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ]), 
      Vector3_TransformNormal$3F
    );

    $.Field({Static:true , Public:false}, "zero", $.Type); 
    $.Field({Static:true , Public:false}, "one", $.Type); 
    $.Field({Static:true , Public:false}, "unitX", $.Type); 
    $.Field({Static:true , Public:false}, "unitY", $.Type); 
    $.Field({Static:true , Public:false}, "unitZ", $.Type); 
    $.Field({Static:true , Public:false}, "up", $.Type); 
    $.Field({Static:true , Public:false}, "down", $.Type); 
    $.Field({Static:true , Public:false}, "right", $.Type); 
    $.Field({Static:true , Public:false}, "left", $.Type); 
    $.Field({Static:true , Public:false}, "forward", $.Type); 
    $.Field({Static:true , Public:false}, "backward", $.Type); 
    $.Field({Static:false, Public:true }, "X", $.Single); 
    $.Field({Static:false, Public:true }, "Y", $.Single); 
    $.Field({Static:false, Public:true }, "Z", $.Single); 
    function Vector3__cctor () {
      $thisType.zero = new $thisType();
      $thisType.one = new $thisType();
      $thisType.unitX = new $thisType();
      $thisType.unitY = new $thisType();
      $thisType.unitZ = new $thisType();
      $thisType.up = new $thisType();
      $thisType.down = new $thisType();
      $thisType.right = new $thisType();
      $thisType.left = new $thisType();
      $thisType.forward = new $thisType();
      $thisType.backward = new $thisType();
      $thisType.zero = $S00().Construct(0, 0, 0);
      $thisType.one = $S00().Construct(1, 1, 1);
      $thisType.unitX = $S00().Construct(1, 0, 0);
      $thisType.unitY = $S00().Construct(0, 1, 0);
      $thisType.unitZ = $S00().Construct(0, 0, 1);
      $thisType.up = $S00().Construct(0, 1, 0);
      $thisType.down = $S00().Construct(0, -1, 0);
      $thisType.right = $S00().Construct(1, 0, 0);
      $thisType.left = $S00().Construct(-1, 0, 0);
      $thisType.forward = $S00().Construct(0, 0, -1);
      $thisType.backward = $S00().Construct(0, 0, 1);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Vector3__cctor
    );

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.Property({Static:true , Public:true }, "One", $.Type);

    $.Property({Static:true , Public:true }, "UnitX", $.Type);

    $.Property({Static:true , Public:true }, "UnitY", $.Type);

    $.Property({Static:true , Public:true }, "UnitZ", $.Type);

    $.Property({Static:true , Public:true }, "Up", $.Type);

    $.Property({Static:true , Public:true }, "Down", $.Type);

    $.Property({Static:true , Public:true }, "Right", $.Type);

    $.Property({Static:true , Public:true }, "Left", $.Type);

    $.Property({Static:true , Public:true }, "Forward", $.Type);

    $.Property({Static:true , Public:true }, "Backward", $.Type);

    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; })
    .Attribute($asm03.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm00.Microsoft.Xna.Framework.Design.Vector3Converter.__Type__]; });

})();

/* struct Microsoft.Xna.Framework.Vector4 */ 

(function Vector4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Single")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")])
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")])
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")])
      ]))) ();
  };

  function Vector4__ctor$00 (x, y, z, w) {
    this.X = +x;
    this.Y = +y;
    this.Z = +z;
    this.W = +w;
  };

  function Vector4__ctor$01 (value, z, w) {
    this.X = +value.X;
    this.Y = +value.Y;
    this.Z = +z;
    this.W = +w;
  };

  function Vector4__ctor$02 (value, w) {
    this.X = +value.X;
    this.Y = +value.Y;
    this.Z = +value.Z;
    this.W = +w;
  };

  function Vector4__ctor$03 (value) {
    this.X = +value;
    this.Y = +value;
    this.Z = +value;
    this.W = +value;
  };

  function Vector4_Add$04 (value1, value2) {
    value1.W += +value2.W;
    value1.X += +value2.X;
    value1.Y += +value2.Y;
    value1.Z += +value2.Z;
    return value1;
  };

  function Vector4_Add$05 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().W = +value1.get().W + +value2.get().W;
    result.get().X = +value1.get().X + +value2.get().X;
    result.get().Y = +value1.get().Y + +value2.get().Y;
    result.get().Z = +value1.get().Z + +value2.get().Z;
  };

  function Vector4_Barycentric$06 (value1, value2, value3, amount1, amount2) {
    return $S00().Construct($T03().Barycentric(
        value1.X, 
        value2.X, 
        value3.X, 
        amount1, 
        amount2
      ), $T03().Barycentric(
        value1.Y, 
        value2.Y, 
        value3.Y, 
        amount1, 
        amount2
      ), $T03().Barycentric(
        value1.Z, 
        value2.Z, 
        value3.Z, 
        amount1, 
        amount2
      ), $T03().Barycentric(
        value1.W, 
        value2.W, 
        value3.W, 
        amount1, 
        amount2
      ));
  };

  function Vector4_Barycentric$07 (/* ref */ value1, /* ref */ value2, /* ref */ value3, amount1, amount2, /* ref */ result) {
    result.get().X = +$T03().Barycentric(
      value1.get().X, 
      value2.get().X, 
      value3.get().X, 
      amount1, 
      amount2
    );
    result.get().Y = +$T03().Barycentric(
      value1.get().Y, 
      value2.get().Y, 
      value3.get().Y, 
      amount1, 
      amount2
    );
    result.get().Z = +$T03().Barycentric(
      value1.get().Z, 
      value2.get().Z, 
      value3.get().Z, 
      amount1, 
      amount2
    );
    result.get().W = +$T03().Barycentric(
      value1.get().W, 
      value2.get().W, 
      value3.get().W, 
      amount1, 
      amount2
    );
  };

  function Vector4_CatmullRom$08 (value1, value2, value3, value4, amount) {
    return $S00().Construct($T03().CatmullRom(
        value1.X, 
        value2.X, 
        value3.X, 
        value4.X, 
        amount
      ), $T03().CatmullRom(
        value1.Y, 
        value2.Y, 
        value3.Y, 
        value4.Y, 
        amount
      ), $T03().CatmullRom(
        value1.Z, 
        value2.Z, 
        value3.Z, 
        value4.Z, 
        amount
      ), $T03().CatmullRom(
        value1.W, 
        value2.W, 
        value3.W, 
        value4.W, 
        amount
      ));
  };

  function Vector4_CatmullRom$09 (/* ref */ value1, /* ref */ value2, /* ref */ value3, /* ref */ value4, amount, /* ref */ result) {
    result.get().X = +$T03().CatmullRom(
      value1.get().X, 
      value2.get().X, 
      value3.get().X, 
      value4.get().X, 
      amount
    );
    result.get().Y = +$T03().CatmullRom(
      value1.get().Y, 
      value2.get().Y, 
      value3.get().Y, 
      value4.get().Y, 
      amount
    );
    result.get().Z = +$T03().CatmullRom(
      value1.get().Z, 
      value2.get().Z, 
      value3.get().Z, 
      value4.get().Z, 
      amount
    );
    result.get().W = +$T03().CatmullRom(
      value1.get().W, 
      value2.get().W, 
      value3.get().W, 
      value4.get().W, 
      amount
    );
  };

  function Vector4_Clamp$0A (value1, min, max) {
    return $S00().Construct($S01().CallStatic($T03(), "Clamp", null, value1.X, min.X, max.X), $S01().CallStatic($T03(), "Clamp", null, value1.Y, min.Y, max.Y), $S01().CallStatic($T03(), "Clamp", null, value1.Z, min.Z, max.Z), $S01().CallStatic($T03(), "Clamp", null, value1.W, min.W, max.W));
  };

  function Vector4_Clamp$0B (/* ref */ value1, /* ref */ min, /* ref */ max, /* ref */ result) {
    result.get().X = +$S01().CallStatic($T03(), "Clamp", null, value1.get().X, min.get().X, max.get().X);
    result.get().Y = +$S01().CallStatic($T03(), "Clamp", null, value1.get().Y, min.get().Y, max.get().Y);
    result.get().Z = +$S01().CallStatic($T03(), "Clamp", null, value1.get().Z, min.get().Z, max.get().Z);
    result.get().W = +$S01().CallStatic($T03(), "Clamp", null, value1.get().W, min.get().W, max.get().W);
  };

  function Vector4_Distance$0C (value1, value2) {
    return Math.fround(Math.sqrt($thisType.DistanceSquared(value1.MemberwiseClone(), value2.MemberwiseClone())));
  };

  function Vector4_Distance$0D (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.set(Math.fround(Math.sqrt($thisType.DistanceSquared(value1.get().MemberwiseClone(), value2.get().MemberwiseClone()))));
  };

  function Vector4_DistanceSquared$0E ($value1, $value2) {
    var value2 = new JSIL.BoxedVariable($value2.MemberwiseClone());
    var value1 = new JSIL.BoxedVariable($value1.MemberwiseClone());
    var result = new JSIL.BoxedVariable(0);
    $thisType.DistanceSquared(/* ref */ value1, /* ref */ value2, /* ref */ result);
    return result.get();
  };

  function Vector4_DistanceSquared$0F (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.set(((((+value1.get().W - +value2.get().W) * (+value1.get().W - +value2.get().W)) + ((+value1.get().X - +value2.get().X) * (+value1.get().X - +value2.get().X))) + ((+value1.get().Y - +value2.get().Y) * (+value1.get().Y - +value2.get().Y))) + ((+value1.get().Z - +value2.get().Z) * (+value1.get().Z - +value2.get().Z)));
  };

  function Vector4_Divide$10 (value1, value2) {
    value1.W = +((+value1.W / +value2.W));
    value1.X = +((+value1.X / +value2.X));
    value1.Y = +((+value1.Y / +value2.Y));
    value1.Z = +((+value1.Z / +value2.Z));
    return value1;
  };

  function Vector4_Divide$11 (value1, divider) {
    var factor = +((1 / +divider));
    value1.W *= factor;
    value1.X *= factor;
    value1.Y *= factor;
    value1.Z *= factor;
    return value1;
  };

  function Vector4_Divide$12 (/* ref */ value1, divider, /* ref */ result) {
    var factor = +((1 / +divider));
    result.get().W = +value1.get().W * factor;
    result.get().X = +value1.get().X * factor;
    result.get().Y = +value1.get().Y * factor;
    result.get().Z = +value1.get().Z * factor;
  };

  function Vector4_Divide$13 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().W = +((+value1.get().W / +value2.get().W));
    result.get().X = +((+value1.get().X / +value2.get().X));
    result.get().Y = +((+value1.get().Y / +value2.get().Y));
    result.get().Z = +((+value1.get().Z / +value2.get().Z));
  };

  function Vector4_Dot$14 (vector1, vector2) {
    return ((((+vector1.X * +vector2.X) + (+vector1.Y * +vector2.Y)) + (+vector1.Z * +vector2.Z)) + (+vector1.W * +vector2.W));
  };

  function Vector4_Dot$15 (/* ref */ vector1, /* ref */ vector2, /* ref */ result) {
    result.set((((+vector1.get().X * +vector2.get().X) + (+vector1.get().Y * +vector2.get().Y)) + (+vector1.get().Z * +vector2.get().Z)) + (+vector1.get().W * +vector2.get().W));
  };

  function Vector4_Object_Equals (obj) {
    return ($thisType.$Is(obj) && $thisType.op_Equality(this, $thisType.$Cast(obj).MemberwiseClone()));
  };

  function Vector4_Equals$16 (other) {
    return (!(!$T03().WithinEpsilon(this.W, other.W) || 
        !$T03().WithinEpsilon(this.X, other.X) || 
        !$T03().WithinEpsilon(this.Y, other.Y)) && $T03().WithinEpsilon(this.Z, other.Z));
  };

  function Vector4_get_DebugDisplayString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T07(), [(this.X).toString(), " ", (this.Y).toString(), " ", (this.Z).toString(), " ", (this.W).toString()]));
  };

  function Vector4_get_One () {
    return $thisType.unitVector;
  };

  function Vector4_get_UnitW () {
    return $thisType.unitWVector;
  };

  function Vector4_get_UnitX () {
    return $thisType.unitXVector;
  };

  function Vector4_get_UnitY () {
    return $thisType.unitYVector;
  };

  function Vector4_get_UnitZ () {
    return $thisType.unitZVector;
  };

  function Vector4_get_Zero () {
    return $thisType.zeroVector;
  };

  function Vector4_GetHashCode () {
    return ((((+this.W + +this.X) + +this.Y) + +this.Y) | 0);
  };

  function Vector4_Hermite$17 ($value1, $tangent1, $value2, $tangent2, amount) {
    var tangent2 = new JSIL.BoxedVariable($tangent2.MemberwiseClone());
    var value2 = new JSIL.BoxedVariable($value2.MemberwiseClone());
    var tangent1 = new JSIL.BoxedVariable($tangent1.MemberwiseClone());
    var value1 = new JSIL.BoxedVariable($value1.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.Hermite(
      /* ref */ value1, 
      /* ref */ tangent1, 
      /* ref */ value2, 
      /* ref */ tangent2, 
      amount, 
      /* ref */ result
    );
    return result.get();
  };

  function Vector4_Hermite$18 (/* ref */ value1, /* ref */ tangent1, /* ref */ value2, /* ref */ tangent2, amount, /* ref */ result) {
    result.get().W = +$T03().Hermite(
      value1.get().W, 
      tangent1.get().W, 
      value2.get().W, 
      tangent2.get().W, 
      amount
    );
    result.get().X = +$T03().Hermite(
      value1.get().X, 
      tangent1.get().X, 
      value2.get().X, 
      tangent2.get().X, 
      amount
    );
    result.get().Y = +$T03().Hermite(
      value1.get().Y, 
      tangent1.get().Y, 
      value2.get().Y, 
      tangent2.get().Y, 
      amount
    );
    result.get().Z = +$T03().Hermite(
      value1.get().Z, 
      tangent1.get().Z, 
      value2.get().Z, 
      tangent2.get().Z, 
      amount
    );
  };

  function Vector4_Length () {
    var result = new JSIL.BoxedVariable(0);
    $thisType.DistanceSquared(new JSIL.BoxedVariable(this), /* ref */ new JSIL.MemberReference($thisType, "zeroVector"), /* ref */ result);
    return Math.fround(Math.sqrt(result.get()));
  };

  function Vector4_LengthSquared () {
    var result = new JSIL.BoxedVariable(0);
    $thisType.DistanceSquared(new JSIL.BoxedVariable(this), /* ref */ new JSIL.MemberReference($thisType, "zeroVector"), /* ref */ result);
    return result.get();
  };

  function Vector4_Lerp$19 (value1, value2, amount) {
    return $S00().Construct($T03().Lerp(value1.X, value2.X, amount), $T03().Lerp(value1.Y, value2.Y, amount), $T03().Lerp(value1.Z, value2.Z, amount), $T03().Lerp(value1.W, value2.W, amount));
  };

  function Vector4_Lerp$1A (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
    result.get().X = +$T03().Lerp(value1.get().X, value2.get().X, amount);
    result.get().Y = +$T03().Lerp(value1.get().Y, value2.get().Y, amount);
    result.get().Z = +$T03().Lerp(value1.get().Z, value2.get().Z, amount);
    result.get().W = +$T03().Lerp(value1.get().W, value2.get().W, amount);
  };

  function Vector4_Max$1B (value1, value2) {
    return $S00().Construct($T03().Max(value1.X, value2.X), $T03().Max(value1.Y, value2.Y), $T03().Max(value1.Z, value2.Z), $T03().Max(value1.W, value2.W));
  };

  function Vector4_Max$1C (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +$T03().Max(value1.get().X, value2.get().X);
    result.get().Y = +$T03().Max(value1.get().Y, value2.get().Y);
    result.get().Z = +$T03().Max(value1.get().Z, value2.get().Z);
    result.get().W = +$T03().Max(value1.get().W, value2.get().W);
  };

  function Vector4_Min$1D (value1, value2) {
    return $S00().Construct($T03().Min(value1.X, value2.X), $T03().Min(value1.Y, value2.Y), $T03().Min(value1.Z, value2.Z), $T03().Min(value1.W, value2.W));
  };

  function Vector4_Min$1E (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().X = +$T03().Min(value1.get().X, value2.get().X);
    result.get().Y = +$T03().Min(value1.get().Y, value2.get().Y);
    result.get().Z = +$T03().Min(value1.get().Z, value2.get().Z);
    result.get().W = +$T03().Min(value1.get().W, value2.get().W);
  };

  function Vector4_Multiply$1F (value1, value2) {
    value1.W *= +value2.W;
    value1.X *= +value2.X;
    value1.Y *= +value2.Y;
    value1.Z *= +value2.Z;
    return value1;
  };

  function Vector4_Multiply$20 (value1, scaleFactor) {
    value1.W *= +scaleFactor;
    value1.X *= +scaleFactor;
    value1.Y *= +scaleFactor;
    value1.Z *= +scaleFactor;
    return value1;
  };

  function Vector4_Multiply$21 (/* ref */ value1, scaleFactor, /* ref */ result) {
    result.get().W = +value1.get().W * +scaleFactor;
    result.get().X = +value1.get().X * +scaleFactor;
    result.get().Y = +value1.get().Y * +scaleFactor;
    result.get().Z = +value1.get().Z * +scaleFactor;
  };

  function Vector4_Multiply$22 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().W = +value1.get().W * +value2.get().W;
    result.get().X = +value1.get().X * +value2.get().X;
    result.get().Y = +value1.get().Y * +value2.get().Y;
    result.get().Z = +value1.get().Z * +value2.get().Z;
  };

  function Vector4_Negate$23 (value) {
    $thisType.prototype._ctor.call(value, -value.X, -value.Y, -value.Z, -value.W);
    return value;
  };

  function Vector4_Negate$24 (/* ref */ value, /* ref */ result) {
    result.get().X = -value.get().X;
    result.get().Y = -value.get().Y;
    result.get().Z = -value.get().Z;
    result.get().W = -value.get().W;
  };

  function Vector4_Normalize$25 () {
    $thisType.Normalize(new JSIL.BoxedVariable(this), new JSIL.BoxedVariable(this));
  };

  function Vector4_Normalize$26 ($vector) {
    var vector = new JSIL.BoxedVariable($vector.MemberwiseClone());
    $thisType.Normalize(/* ref */ vector, /* ref */ vector);
    return vector.get();
  };

  function Vector4_Normalize$27 (/* ref */ vector, /* ref */ result) {
    var factor = new JSIL.BoxedVariable(0);
    $thisType.DistanceSquared(/* ref */ vector, /* ref */ new JSIL.MemberReference($thisType, "zeroVector"), /* ref */ factor);
    factor.set(+((1 / Math.fround(Math.sqrt(factor.get())))));
    result.get().W = +vector.get().W * +factor.get();
    result.get().X = +vector.get().X * +factor.get();
    result.get().Y = +vector.get().Y * +factor.get();
    result.get().Z = +vector.get().Z * +factor.get();
  };

  function Vector4_op_Addition (value1, value2) {
    value1.W += +value2.W;
    value1.X += +value2.X;
    value1.Y += +value2.Y;
    value1.Z += +value2.Z;
    return value1;
  };

  function Vector4_op_Division$28 (value1, value2) {
    value1.W = +((+value1.W / +value2.W));
    value1.X = +((+value1.X / +value2.X));
    value1.Y = +((+value1.Y / +value2.Y));
    value1.Z = +((+value1.Z / +value2.Z));
    return value1;
  };

  function Vector4_op_Division$29 (value1, divider) {
    var factor = +((1 / +divider));
    value1.W *= factor;
    value1.X *= factor;
    value1.Y *= factor;
    value1.Z *= factor;
    return value1;
  };

  function Vector4_op_Equality (value1, value2) {
    return (!(!$T03().WithinEpsilon(value1.W, value2.W) || 
        !$T03().WithinEpsilon(value1.X, value2.X) || 
        !$T03().WithinEpsilon(value1.Y, value2.Y)) && $T03().WithinEpsilon(value1.Z, value2.Z));
  };

  function Vector4_op_Inequality (value1, value2) {
    return !$thisType.op_Equality(value1.MemberwiseClone(), value2.MemberwiseClone());
  };

  function Vector4_op_Multiply$2A (value1, value2) {
    value1.W *= +value2.W;
    value1.X *= +value2.X;
    value1.Y *= +value2.Y;
    value1.Z *= +value2.Z;
    return value1;
  };

  function Vector4_op_Multiply$2B (value1, scaleFactor) {
    value1.W *= +scaleFactor;
    value1.X *= +scaleFactor;
    value1.Y *= +scaleFactor;
    value1.Z *= +scaleFactor;
    return value1;
  };

  function Vector4_op_Multiply$2C (scaleFactor, value1) {
    value1.W *= +scaleFactor;
    value1.X *= +scaleFactor;
    value1.Y *= +scaleFactor;
    value1.Z *= +scaleFactor;
    return value1;
  };

  function Vector4_op_Subtraction (value1, value2) {
    value1.W -= +value2.W;
    value1.X -= +value2.X;
    value1.Y -= +value2.Y;
    value1.Z -= +value2.Z;
    return value1;
  };

  function Vector4_op_UnaryNegation (value) {
    return $S00().Construct(-value.X, -value.Y, -value.Z, -value.W);
  };

  function Vector4_SmoothStep$2D (value1, value2, amount) {
    return $S00().Construct($T03().SmoothStep(value1.X, value2.X, amount), $T03().SmoothStep(value1.Y, value2.Y, amount), $T03().SmoothStep(value1.Z, value2.Z, amount), $T03().SmoothStep(value1.W, value2.W, amount));
  };

  function Vector4_SmoothStep$2E (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
    result.get().X = +$T03().SmoothStep(value1.get().X, value2.get().X, amount);
    result.get().Y = +$T03().SmoothStep(value1.get().Y, value2.get().Y, amount);
    result.get().Z = +$T03().SmoothStep(value1.get().Z, value2.get().Z, amount);
    result.get().W = +$T03().SmoothStep(value1.get().W, value2.get().W, amount);
  };

  function Vector4_Subtract$2F (value1, value2) {
    value1.W -= +value2.W;
    value1.X -= +value2.X;
    value1.Y -= +value2.Y;
    value1.Z -= +value2.Z;
    return value1;
  };

  function Vector4_Subtract$30 (/* ref */ value1, /* ref */ value2, /* ref */ result) {
    result.get().W = +value1.get().W - +value2.get().W;
    result.get().X = +value1.get().X - +value2.get().X;
    result.get().Y = +value1.get().Y - +value2.get().Y;
    result.get().Z = +value1.get().Z - +value2.get().Z;
  };

  function Vector4_toString () {
    var sb = $S02().Construct(32);
    $S03().CallVirtual("Append", null, sb, "{X:");
    $S04().CallVirtual("Append", null, sb, this.X);
    $S03().CallVirtual("Append", null, sb, " Y:");
    $S04().CallVirtual("Append", null, sb, this.Y);
    $S03().CallVirtual("Append", null, sb, " Z:");
    $S04().CallVirtual("Append", null, sb, this.Z);
    $S03().CallVirtual("Append", null, sb, " W:");
    $S04().CallVirtual("Append", null, sb, this.W);
    $S03().CallVirtual("Append", null, sb, "}");
    return sb.toString();
  };

  function Vector4_Transform$31 ($position, $matrix) {
    var matrix = new JSIL.BoxedVariable($matrix.MemberwiseClone());
    var position = new JSIL.BoxedVariable($position.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $S05().CallStatic($thisType, "Transform", null, /* ref */ position, /* ref */ matrix, /* ref */ result);
    return result.get();
  };

  function Vector4_Transform$32 ($position, $matrix) {
    var matrix = new JSIL.BoxedVariable($matrix.MemberwiseClone());
    var position = new JSIL.BoxedVariable($position.MemberwiseClone());
    var result = new JSIL.BoxedVariable(new $thisType());
    $S06().CallStatic($thisType, "Transform", null, /* ref */ position, /* ref */ matrix, /* ref */ result);
    return result.get();
  };

  function Vector4_Transform$33 ($vector, $matrix) {
    var matrix = new JSIL.BoxedVariable($matrix.MemberwiseClone());
    var vector = new JSIL.BoxedVariable($vector.MemberwiseClone());
    $S07().CallStatic($thisType, "Transform", null, /* ref */ vector, /* ref */ matrix, /* ref */ vector);
    return vector.get();
  };

  function Vector4_Transform$34 (/* ref */ position, /* ref */ matrix, /* ref */ result) {
    result.set($S00().Construct((((+position.get().X * +matrix.get().M11) + (+position.get().Y * +matrix.get().M21)) + +matrix.get().M41), (((+position.get().X * +matrix.get().M12) + (+position.get().Y * +matrix.get().M22)) + +matrix.get().M42), (((+position.get().X * +matrix.get().M13) + (+position.get().Y * +matrix.get().M23)) + +matrix.get().M43), (((+position.get().X * +matrix.get().M14) + (+position.get().Y * +matrix.get().M24)) + +matrix.get().M44)));
  };

  function Vector4_Transform$35 (/* ref */ position, /* ref */ matrix, /* ref */ result) {
    var x = (((+position.get().X * +matrix.get().M11) + (+position.get().Y * +matrix.get().M21)) + (+position.get().Z * +matrix.get().M31)) + +matrix.get().M41;
    var y = (((+position.get().X * +matrix.get().M12) + (+position.get().Y * +matrix.get().M22)) + (+position.get().Z * +matrix.get().M32)) + +matrix.get().M42;
    var z = (((+position.get().X * +matrix.get().M13) + (+position.get().Y * +matrix.get().M23)) + (+position.get().Z * +matrix.get().M33)) + +matrix.get().M43;
    var w = (((+position.get().X * +matrix.get().M14) + (+position.get().Y * +matrix.get().M24)) + (+position.get().Z * +matrix.get().M34)) + +matrix.get().M44;
    result.get().X = x;
    result.get().Y = y;
    result.get().Z = z;
    result.get().W = w;
  };

  function Vector4_Transform$36 (/* ref */ vector, /* ref */ matrix, /* ref */ result) {
    var x = (((+vector.get().X * +matrix.get().M11) + (+vector.get().Y * +matrix.get().M21)) + (+vector.get().Z * +matrix.get().M31)) + (+vector.get().W * +matrix.get().M41);
    var y = (((+vector.get().X * +matrix.get().M12) + (+vector.get().Y * +matrix.get().M22)) + (+vector.get().Z * +matrix.get().M32)) + (+vector.get().W * +matrix.get().M42);
    var z = (((+vector.get().X * +matrix.get().M13) + (+vector.get().Y * +matrix.get().M23)) + (+vector.get().Z * +matrix.get().M33)) + (+vector.get().W * +matrix.get().M43);
    var w = (((+vector.get().X * +matrix.get().M14) + (+vector.get().Y * +matrix.get().M24)) + (+vector.get().Z * +matrix.get().M34)) + (+vector.get().W * +matrix.get().M44);
    result.get().X = x;
    result.get().Y = y;
    result.get().Z = z;
    result.get().W = w;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Vector4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Vector4__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Single, 
          $.Single
        ]), 
      Vector4__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single]), 
      Vector4__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single), 
      Vector4__ctor$03
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector4_Add$04
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Add$05
    );

    $.Method({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Single, 
          $.Single
        ]), 
      Vector4_Barycentric$06
    );

    $.Method({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Barycentric$07
    );

    $.Method({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector4_CatmullRom$08
    );

    $.Method({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_CatmullRom$09
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ]), 
      Vector4_Clamp$0A
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Clamp$0B
    );

    $.Method({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type]), 
      Vector4_Distance$0C
    );

    $.Method({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      Vector4_Distance$0D
    );

    $.Method({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type]), 
      Vector4_DistanceSquared$0E
    );

    $.Method({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      Vector4_DistanceSquared$0F
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector4_Divide$10
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector4_Divide$11
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Divide$12
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Divide$13
    );

    $.Method({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type]), 
      Vector4_Dot$14
    );

    $.Method({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      Vector4_Dot$15
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Vector4_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Vector4_Equals$16
    );

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      Vector4_get_DebugDisplayString
    );

    $.Method({Static:true , Public:true }, "get_One", 
      JSIL.MethodSignature.Return($.Type), 
      Vector4_get_One
    );

    $.Method({Static:true , Public:true }, "get_UnitW", 
      JSIL.MethodSignature.Return($.Type), 
      Vector4_get_UnitW
    );

    $.Method({Static:true , Public:true }, "get_UnitX", 
      JSIL.MethodSignature.Return($.Type), 
      Vector4_get_UnitX
    );

    $.Method({Static:true , Public:true }, "get_UnitY", 
      JSIL.MethodSignature.Return($.Type), 
      Vector4_get_UnitY
    );

    $.Method({Static:true , Public:true }, "get_UnitZ", 
      JSIL.MethodSignature.Return($.Type), 
      Vector4_get_UnitZ
    );

    $.Method({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type), 
      Vector4_get_Zero
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Vector4_GetHashCode
    );

    $.Method({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector4_Hermite$17
    );

    $.Method({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Hermite$18
    );

    $.Method({Static:false, Public:true }, "Length", 
      JSIL.MethodSignature.Return($.Single), 
      Vector4_Length
    );

    $.Method({Static:false, Public:true }, "LengthSquared", 
      JSIL.MethodSignature.Return($.Single), 
      Vector4_LengthSquared
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector4_Lerp$19
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Lerp$1A
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector4_Max$1B
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Max$1C
    );

    $.Method({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector4_Min$1D
    );

    $.Method({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Min$1E
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector4_Multiply$1F
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector4_Multiply$20
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Multiply$21
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Multiply$22
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Vector4_Negate$23
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Vector4_Negate$24
    );

    $.Method({Static:false, Public:true }, "Normalize", 
      JSIL.MethodSignature.Void, 
      Vector4_Normalize$25
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Vector4_Normalize$26
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      Vector4_Normalize$27
    );

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector4_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector4_op_Division$28
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector4_op_Division$29
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vector4_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Vector4_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector4_op_Multiply$2A
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Vector4_op_Multiply$2B
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type]), 
      Vector4_op_Multiply$2C
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector4_op_Subtraction
    );

    $.Method({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      Vector4_op_UnaryNegation
    );

    $.Method({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      Vector4_SmoothStep$2D
    );

    $.Method({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_SmoothStep$2E
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type]), 
      Vector4_Subtract$2F
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Subtract$30
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Vector4_toString
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Vector4_Transform$31
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Vector4_Transform$32
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Vector4_Transform$33
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Transform$34
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Transform$35
    );

    $.Method({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ]), 
      Vector4_Transform$36
    );

    $.Field({Static:false, Public:true }, "X", $.Single); 
    $.Field({Static:false, Public:true }, "Y", $.Single); 
    $.Field({Static:false, Public:true }, "Z", $.Single); 
    $.Field({Static:false, Public:true }, "W", $.Single); 
    $.Field({Static:true , Public:false}, "zeroVector", $.Type); 
    $.Field({Static:true , Public:false}, "unitVector", $.Type); 
    $.Field({Static:true , Public:false}, "unitXVector", $.Type); 
    $.Field({Static:true , Public:false}, "unitYVector", $.Type); 
    $.Field({Static:true , Public:false}, "unitZVector", $.Type); 
    $.Field({Static:true , Public:false}, "unitWVector", $.Type); 
    function Vector4__cctor () {
      $thisType.zeroVector = new $thisType();
      $thisType.unitVector = new $thisType();
      $thisType.unitXVector = new $thisType();
      $thisType.unitYVector = new $thisType();
      $thisType.unitZVector = new $thisType();
      $thisType.unitWVector = new $thisType();
      $thisType.zeroVector = new $thisType();
      $thisType.unitVector = $S00().Construct(1, 1, 1, 1);
      $thisType.unitXVector = $S00().Construct(1, 0, 0, 0);
      $thisType.unitYVector = $S00().Construct(0, 1, 0, 0);
      $thisType.unitZVector = $S00().Construct(0, 0, 1, 0);
      $thisType.unitWVector = $S00().Construct(0, 0, 0, 1);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Vector4__cctor
    );

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.Property({Static:true , Public:true }, "One", $.Type);

    $.Property({Static:true , Public:true }, "UnitX", $.Type);

    $.Property({Static:true , Public:true }, "UnitY", $.Type);

    $.Property({Static:true , Public:true }, "UnitZ", $.Type);

    $.Property({Static:true , Public:true }, "UnitW", $.Type);

    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm00.Microsoft.Xna.Framework.Design.Vector4Converter.__Type__]; })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; });

})();

/* class Microsoft.Xna.Framework.Audio.AudioEmitter */ 

(function AudioEmitter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function AudioEmitter__ctor () {
    this.set_DopplerScale(1);
    (this.AudioEmitter$Forward$value = $T00().get_Forward().MemberwiseClone());
    (this.AudioEmitter$Position$value = $T00().get_Zero().MemberwiseClone());
    (this.AudioEmitter$Up$value = $T00().get_Up().MemberwiseClone());
    (this.AudioEmitter$Velocity$value = $T00().get_Zero().MemberwiseClone());
  };

  function AudioEmitter_get_DopplerScale () {
    return this.INTERNAL_dopplerScale;
  };

  function AudioEmitter_get_Forward () {
    return this.AudioEmitter$Forward$value;
  };

  function AudioEmitter_get_Position () {
    return this.AudioEmitter$Position$value;
  };

  function AudioEmitter_get_Up () {
    return this.AudioEmitter$Up$value;
  };

  function AudioEmitter_get_Velocity () {
    return this.AudioEmitter$Velocity$value;
  };

  function AudioEmitter_set_DopplerScale (value) {
    if (+value < 0) {
      throw $S00().Construct("AudioEmitter.DopplerScale must be greater than or equal to 0.0f");
    }
    this.INTERNAL_dopplerScale = +value;
  };

  function AudioEmitter_set_Forward (value) {
    this.AudioEmitter$Forward$value = value.MemberwiseClone();
  };

  function AudioEmitter_set_Position (value) {
    this.AudioEmitter$Position$value = value.MemberwiseClone();
  };

  function AudioEmitter_set_Up (value) {
    this.AudioEmitter$Up$value = value.MemberwiseClone();
  };

  function AudioEmitter_set_Velocity (value) {
    this.AudioEmitter$Velocity$value = value.MemberwiseClone();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioEmitter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AudioEmitter__ctor
    );

    $.Method({Static:false, Public:true }, "get_DopplerScale", 
      JSIL.MethodSignature.Return($.Single), 
      AudioEmitter_get_DopplerScale
    );

    $.Method({Static:false, Public:true }, "get_Forward", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioEmitter_get_Forward
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioEmitter_get_Position
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Up", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioEmitter_get_Up
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Velocity", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioEmitter_get_Velocity
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DopplerScale", 
      JSIL.MethodSignature.Action($.Single), 
      AudioEmitter_set_DopplerScale
    );

    $.Method({Static:false, Public:true }, "set_Forward", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioEmitter_set_Forward
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Position", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioEmitter_set_Position
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Up", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioEmitter_set_Up
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Velocity", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioEmitter_set_Velocity
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "INTERNAL_dopplerScale", $.Single); 
    $.Field({Static:false, Public:false}, "AudioEmitter$Forward$value", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "AudioEmitter$Position$value", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "AudioEmitter$Up$value", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "AudioEmitter$Velocity$value", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "DopplerScale", $.Single);

    $.Property({Static:false, Public:true }, "Forward", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Up", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Velocity", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.AudioListener */ 

(function AudioListener$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };

  function AudioListener__ctor () {
    (this.AudioListener$Forward$value = $T00().get_Forward().MemberwiseClone());
    (this.AudioListener$Position$value = $T00().get_Zero().MemberwiseClone());
    (this.AudioListener$Up$value = $T00().get_Up().MemberwiseClone());
    (this.AudioListener$Velocity$value = $T00().get_Zero().MemberwiseClone());
  };

  function AudioListener_get_Forward () {
    return this.AudioListener$Forward$value;
  };

  function AudioListener_get_Position () {
    return this.AudioListener$Position$value;
  };

  function AudioListener_get_Up () {
    return this.AudioListener$Up$value;
  };

  function AudioListener_get_Velocity () {
    return this.AudioListener$Velocity$value;
  };

  function AudioListener_set_Forward (value) {
    this.AudioListener$Forward$value = value.MemberwiseClone();
  };

  function AudioListener_set_Position (value) {
    this.AudioListener$Position$value = value.MemberwiseClone();
  };

  function AudioListener_set_Up (value) {
    this.AudioListener$Up$value = value.MemberwiseClone();
  };

  function AudioListener_set_Velocity (value) {
    this.AudioListener$Velocity$value = value.MemberwiseClone();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AudioListener__ctor
    );

    $.Method({Static:false, Public:true }, "get_Forward", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioListener_get_Forward
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioListener_get_Position
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Up", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioListener_get_Up
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Velocity", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioListener_get_Velocity
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Forward", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioListener_set_Forward
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Position", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioListener_set_Position
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Up", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioListener_set_Up
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Velocity", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AudioListener_set_Velocity
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AudioListener$Forward$value", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "AudioListener$Position$value", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "AudioListener$Up$value", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "AudioListener$Velocity$value", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Forward", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Up", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Velocity", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.SoundState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Audio.SoundState", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Playing: 0, 
    Paused: 1, 
    Stopped: 2, 
  }
);

/* class Microsoft.Xna.Framework.Content.ContentLoadException */ 

(function ContentLoadException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")]))) ();
  };

  function ContentLoadException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function ContentLoadException__ctor$01 (message) {
    $T00().prototype._ctor.call(this, message);
  };

  function ContentLoadException__ctor$02 (message, innerException) {
    $S00().Call($T00().prototype, "_ctor", null, this, message, innerException);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.Xna.Framework.Content.ContentLoadException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ContentLoadException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      ContentLoadException__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")]), 
      ContentLoadException__ctor$02
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Input");
/* enum Microsoft.Xna.Framework.Input.ButtonState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.ButtonState", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Released: 0, 
    Pressed: 1, 
  }
);

/* struct Microsoft.Xna.Framework.Input.GamePadState */ 

(function GamePadState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadThumbSticks)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadTriggers)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadButtons)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadDPad)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Input.Buttons))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.ValueType)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Buttons)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")])]))) ();
  };

  function GamePadState__ctor$00 (thumbSticks, triggers, buttons, dPad) {
    JSIL.CopyMembers(new $thisType(), this);
    (this.GamePadState$ThumbSticks$value = thumbSticks.MemberwiseClone());
    (this.GamePadState$Triggers$value = triggers.MemberwiseClone());
    (this.GamePadState$Buttons$value = buttons.MemberwiseClone());
    (this.GamePadState$DPad$value = dPad.MemberwiseClone());
    this.GamePadState$IsConnected$value = true;
    this.GamePadState$PacketNumber$value = 0;
  };

  function GamePadState__ctor$01 (leftThumbStick, rightThumbStick, leftTrigger, rightTrigger, buttons) {
    $thisType.prototype._ctor.call(this, $S00().Construct(leftThumbStick.MemberwiseClone(), rightThumbStick.MemberwiseClone()), new ($T01())(leftTrigger, rightTrigger), $S01().Construct(buttons), $S02().Construct(buttons));
  };

  function GamePadState_Object_Equals (obj) {
    return JSIL.StructEquals(this, obj);
  };

  function GamePadState_get_Buttons () {
    return this.GamePadState$Buttons$value;
  };

  function GamePadState_get_DPad () {
    return this.GamePadState$DPad$value;
  };

  function GamePadState_get_IsConnected () {
    return this.GamePadState$IsConnected$value;
  };

  function GamePadState_get_PacketNumber () {
    return this.GamePadState$PacketNumber$value;
  };

  function GamePadState_get_ThumbSticks () {
    return this.GamePadState$ThumbSticks$value;
  };

  function GamePadState_get_Triggers () {
    return this.GamePadState$Triggers$value;
  };

  function GamePadState_GetHashCode () {
    return (this.MemberwiseClone()).GetHashCode();
  };

  function GamePadState_GetVirtualButtons () {
    var result = this.GamePadState$Buttons$value.buttons;
    var sticks = this.GamePadState$ThumbSticks$value;
    if (+sticks.get_Left().X < 0) {
      result = $T09().$Cast(result | $T09().LeftThumbstickLeft);
    } else if (+sticks.get_Left().X > 0) {
      result = $T09().$Cast(result | $T09().LeftThumbstickRight);
    }
    if (+sticks.get_Left().Y < 0) {
      result = $T09().$Cast(result | $T09().LeftThumbstickDown);
    } else if (+sticks.get_Left().Y > 0) {
      result = $T09().$Cast(result | $T09().LeftThumbstickUp);
    }
    if (+sticks.get_Right().X < 0) {
      result = $T09().$Cast(result | $T09().RightThumbstickLeft);
    } else if (+sticks.get_Right().X > 0) {
      result = $T09().$Cast(result | $T09().RightThumbstickRight);
    }
    if (+sticks.get_Right().Y < 0) {
      result = $T09().$Cast(result | $T09().RightThumbstickDown);
    } else if (+sticks.get_Right().Y > 0) {
      result = $T09().$Cast(result | $T09().RightThumbstickUp);
    }
    return result;
  };

  function GamePadState_IsButtonDown (button) {
    return ($T09().$Cast(this.GetVirtualButtons() & button) === button);
  };

  function GamePadState_IsButtonUp (button) {
    return ($T09().$Cast(this.GetVirtualButtons() & button) !== button);
  };

  function GamePadState_op_Equality (left, right) {
    return left.Object_Equals(right);
  };

  function GamePadState_op_Inequality (left, right) {
    return !left.Object_Equals(right);
  };

  function GamePadState_set_Buttons (value) {
    this.GamePadState$Buttons$value = value.MemberwiseClone();
  };

  function GamePadState_set_DPad (value) {
    this.GamePadState$DPad$value = value.MemberwiseClone();
  };

  function GamePadState_set_IsConnected (value) {
    this.GamePadState$IsConnected$value = value;
  };

  function GamePadState_set_PacketNumber (value) {
    this.GamePadState$PacketNumber$value = (value | 0);
  };

  function GamePadState_set_ThumbSticks (value) {
    this.GamePadState$ThumbSticks$value = value.MemberwiseClone();
  };

  function GamePadState_set_Triggers (value) {
    this.GamePadState$Triggers$value = value.MemberwiseClone();
  };

  function GamePadState_toString () {
    return (this.MemberwiseClone()).toString();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadState", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad")
        ]), 
      GamePadState__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Single, $.Single, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")])
        ]), 
      GamePadState__ctor$01
    )
      .Parameter(4, "buttons", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      GamePadState_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Buttons", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons")), 
      GamePadState_get_Buttons
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DPad", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad")), 
      GamePadState_get_DPad
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsConnected", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadState_get_IsConnected
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PacketNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      GamePadState_get_PacketNumber
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ThumbSticks", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks")), 
      GamePadState_get_ThumbSticks
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Triggers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers")), 
      GamePadState_get_Triggers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      GamePadState_GetHashCode
    );

    $.Method({Static:false, Public:false}, "GetVirtualButtons", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")), 
      GamePadState_GetVirtualButtons
    );

    $.Method({Static:false, Public:true }, "IsButtonDown", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")]), 
      GamePadState_IsButtonDown
    );

    $.Method({Static:false, Public:true }, "IsButtonUp", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")]), 
      GamePadState_IsButtonUp
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      GamePadState_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      GamePadState_op_Inequality
    );

    $.Method({Static:false, Public:false}, "set_Buttons", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons")), 
      GamePadState_set_Buttons
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_DPad", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad")), 
      GamePadState_set_DPad
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsConnected", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadState_set_IsConnected
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_PacketNumber", 
      JSIL.MethodSignature.Action($.Int32), 
      GamePadState_set_PacketNumber
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ThumbSticks", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks")), 
      GamePadState_set_ThumbSticks
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Triggers", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers")), 
      GamePadState_set_Triggers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      GamePadState_toString
    );

    $.Field({Static:false, Public:false}, "GamePadState$IsConnected$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadState$PacketNumber$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadState$Buttons$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadState$DPad$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadState$ThumbSticks$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadState$Triggers$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "PacketNumber", $.Int32);

    $.Property({Static:false, Public:true }, "Buttons", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"));

    $.Property({Static:false, Public:true }, "DPad", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad"));

    $.Property({Static:false, Public:true }, "ThumbSticks", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks"));

    $.Property({Static:false, Public:true }, "Triggers", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.KeyboardState */ 

(function KeyboardState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.KeyState)) ();
  };

  function KeyboardState__ctor$00 (keys) {
    this.keys0 = 0;
    this.keys1 = 0;
    this.keys2 = 0;
    this.keys3 = 0;
    this.keys4 = 0;
    this.keys5 = 0;
    this.keys6 = 0;
    this.keys7 = 0;
    if (keys !== null) {

      for (var j = 0; j < (keys.length | 0); j = ((j + 1) | 0)) {
        var i = keys[j];
        this.InternalSetKey(i);
      }
    }
  };

  function KeyboardState__ctor$01 (keys) {
    var $temp00;
    this.keys0 = 0;
    this.keys1 = 0;
    this.keys2 = 0;
    this.keys3 = 0;
    this.keys4 = 0;
    this.keys5 = 0;
    this.keys6 = 0;
    this.keys7 = 0;
    if (keys !== null) {

      for (var a$0 = keys._items, i$0 = 0, l$0 = (keys._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var i = a$0[i$0];
        this.InternalSetKey(i);
      }
    }
  };

  function KeyboardState_AddKeysToArray (keys, offset, pressedKeys, index) {
    var $temp00;

    for (var i = 0; i < 32; i = ((i + 1) | 0)) {
      if (!$T05().op_Equality(
          $T05().op_BitwiseAnd(
            $T05().FromNumber(keys), 
            (1 << (i & 31)).ToUInt64()
          ), 
          $T05().Create(0, 0, 0)
        )) {
        pressedKeys[($temp00 = (index | 0), 
          index = (((index | 0) + 1) | 0), 
          $temp00)] = $T00().$Cast((((offset | 0) + i) | 0));
      }
    }
    return index;
  };

  function KeyboardState_CountBits (v) {
    v = (((v >>> 0) - (((v >>> 0) >>> 1) & 1431655765)) >>> 0);
    v = ((((v >>> 0) & 858993459) + (((v >>> 0) >>> 2) & 858993459)) >>> 0);
    return ((Math.imul(((((v >>> 0) + ((v >>> 0) >>> 4)) >>> 0) & 252645135), 16843009) >>> 0) >>> 24);
  };

  function KeyboardState_Object_Equals (obj) {
    return ($thisType.$Is(obj) && $thisType.op_Equality(this, $thisType.$Cast(obj)));
  };

  function KeyboardState_get_Item (key) {
    return (
      this.InternalGetKey(key)
         ? $T08().Down
         : $T08().Up)
    ;
  };

  function KeyboardState_GetHashCode () {
    return ((((((((this.keys0 >>> 0) ^ (this.keys1 >>> 0)) ^ (this.keys2 >>> 0)) ^ (this.keys3 >>> 0)) ^ (this.keys4 >>> 0)) ^ (this.keys5 >>> 0)) ^ (this.keys6 >>> 0)) ^ (this.keys7 >>> 0) | 0);
  };

  function KeyboardState_GetPressedKeys () {
    if (((((((((((((((($thisType.CountBits(this.keys0) >>> 0) + ($thisType.CountBits(this.keys1) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys2) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys3) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys4) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys5) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys6) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys7) >>> 0)) >>> 0) === 0) {
      var result = $thisType.empty;
    } else {
      var keys = JSIL.Array.New($T00(), ((((((((((((((($thisType.CountBits(this.keys0) >>> 0) + ($thisType.CountBits(this.keys1) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys2) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys3) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys4) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys5) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys6) >>> 0)) >>> 0) + ($thisType.CountBits(this.keys7) >>> 0)) >>> 0));
      var index = 0;
      if ((this.keys0 >>> 0) !== 0) {
        index = ($thisType.AddKeysToArray(this.keys0, 0, keys, index) | 0);
      }
      if ((this.keys1 >>> 0) !== 0) {
        index = ($thisType.AddKeysToArray(this.keys1, 32, keys, index) | 0);
      }
      if ((this.keys2 >>> 0) !== 0) {
        index = ($thisType.AddKeysToArray(this.keys2, 64, keys, index) | 0);
      }
      if ((this.keys3 >>> 0) !== 0) {
        index = ($thisType.AddKeysToArray(this.keys3, 96, keys, index) | 0);
      }
      if ((this.keys4 >>> 0) !== 0) {
        index = ($thisType.AddKeysToArray(this.keys4, 128, keys, index) | 0);
      }
      if ((this.keys5 >>> 0) !== 0) {
        index = ($thisType.AddKeysToArray(this.keys5, 160, keys, index) | 0);
      }
      if ((this.keys6 >>> 0) !== 0) {
        index = ($thisType.AddKeysToArray(this.keys6, 192, keys, index) | 0);
      }
      if ((this.keys7 >>> 0) !== 0) {
        index = ($thisType.AddKeysToArray(this.keys7, 224, keys, index) | 0);
      }
      result = keys;
    }
    return result;
  };

  function KeyboardState_InternalClearAllKeys () {
    this.keys0 = 0;
    this.keys1 = 0;
    this.keys2 = 0;
    this.keys3 = 0;
    this.keys4 = 0;
    this.keys5 = 0;
    this.keys6 = 0;
    this.keys7 = 0;
  };

  function KeyboardState_InternalClearKey (key) {
    var mask = 1 << (key.valueOf() | 0);
    switch ((key >> 5).valueOf()) {
      case 0: 
        this.keys0 = (this.keys0 >>> 0) & (~mask >>> 0);
        break;

      case 1: 
        this.keys1 = (this.keys1 >>> 0) & (~mask >>> 0);
        break;

      case 2: 
        this.keys2 = (this.keys2 >>> 0) & (~mask >>> 0);
        break;

      case 3: 
        this.keys3 = (this.keys3 >>> 0) & (~mask >>> 0);
        break;

      case 4: 
        this.keys4 = (this.keys4 >>> 0) & (~mask >>> 0);
        break;

      case 5: 
        this.keys5 = (this.keys5 >>> 0) & (~mask >>> 0);
        break;

      case 6: 
        this.keys6 = (this.keys6 >>> 0) & (~mask >>> 0);
        break;

      case 7: 
        this.keys7 = (this.keys7 >>> 0) & (~mask >>> 0);
        break;

    }
  };

  function KeyboardState_InternalGetKey (key) {
    switch ((key >> 5).valueOf()) {
      case 0: 
        var element = (this.keys0 >>> 0);
        break;

      case 1: 
        element = (this.keys1 >>> 0);
        break;

      case 2: 
        element = (this.keys2 >>> 0);
        break;

      case 3: 
        element = (this.keys3 >>> 0);
        break;

      case 4: 
        element = (this.keys4 >>> 0);
        break;

      case 5: 
        element = (this.keys5 >>> 0);
        break;

      case 6: 
        element = (this.keys6 >>> 0);
        break;

      case 7: 
        element = (this.keys7 >>> 0);
        break;

      default: 
        element = 0;
        break;

    }
    return ((element & (1 << (key.valueOf() | 0))) !== 0);
  };

  function KeyboardState_InternalSetKey (key) {
    var mask = 1 << (key.valueOf() | 0);
    switch ((key >> 5).valueOf()) {
      case 0: 
        this.keys0 = (this.keys0 >>> 0) | mask;
        break;

      case 1: 
        this.keys1 = (this.keys1 >>> 0) | mask;
        break;

      case 2: 
        this.keys2 = (this.keys2 >>> 0) | mask;
        break;

      case 3: 
        this.keys3 = (this.keys3 >>> 0) | mask;
        break;

      case 4: 
        this.keys4 = (this.keys4 >>> 0) | mask;
        break;

      case 5: 
        this.keys5 = (this.keys5 >>> 0) | mask;
        break;

      case 6: 
        this.keys6 = (this.keys6 >>> 0) | mask;
        break;

      case 7: 
        this.keys7 = (this.keys7 >>> 0) | mask;
        break;

    }
  };

  function KeyboardState_IsKeyDown (key) {
    return this.InternalGetKey(key);
  };

  function KeyboardState_IsKeyUp (key) {
    return !this.InternalGetKey(key);
  };

  function KeyboardState_op_Equality (a, b) {
    return (!(((a.keys0 >>> 0) !== (b.keys0 >>> 0)) || 
        ((a.keys1 >>> 0) !== (b.keys1 >>> 0)) || 
        ((a.keys2 >>> 0) !== (b.keys2 >>> 0)) || 
        ((a.keys3 >>> 0) !== (b.keys3 >>> 0)) || 
        ((a.keys4 >>> 0) !== (b.keys4 >>> 0)) || 
        ((a.keys5 >>> 0) !== (b.keys5 >>> 0)) || 
        ((a.keys6 >>> 0) !== (b.keys6 >>> 0))) && ((a.keys7 >>> 0) === (b.keys7 >>> 0)));
  };

  function KeyboardState_op_Inequality (a, b) {
    return !$thisType.op_Equality(a, b);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.KeyboardState", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")])), 
      KeyboardState__ctor$00
    )
      .Parameter(0, "keys", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")])), 
      KeyboardState__ctor$01
    );

    $.Method({Static:true , Public:false}, "AddKeysToArray", 
      new JSIL.MethodSignature($.Int32, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), $.Int32
        ]), 
      KeyboardState_AddKeysToArray
    );

    $.Method({Static:true , Public:false}, "CountBits", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32]), 
      KeyboardState_CountBits
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      KeyboardState_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyState"), [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), 
      KeyboardState_get_Item
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      KeyboardState_GetHashCode
    );

    $.Method({Static:false, Public:true }, "GetPressedKeys", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")])), 
      KeyboardState_GetPressedKeys
    );

    $.Method({Static:false, Public:false}, "InternalClearAllKeys", 
      JSIL.MethodSignature.Void, 
      KeyboardState_InternalClearAllKeys
    );

    $.Method({Static:false, Public:false}, "InternalClearKey", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")), 
      KeyboardState_InternalClearKey
    );

    $.Method({Static:false, Public:false}, "InternalGetKey", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), 
      KeyboardState_InternalGetKey
    );

    $.Method({Static:false, Public:false}, "InternalSetKey", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")), 
      KeyboardState_InternalSetKey
    );

    $.Method({Static:false, Public:true }, "IsKeyDown", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), 
      KeyboardState_IsKeyDown
    );

    $.Method({Static:false, Public:true }, "IsKeyUp", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), 
      KeyboardState_IsKeyUp
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      KeyboardState_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      KeyboardState_op_Inequality
    );

    $.Field({Static:false, Public:false}, "keys0", $.UInt32); 
    $.Field({Static:false, Public:false}, "keys1", $.UInt32); 
    $.Field({Static:false, Public:false}, "keys2", $.UInt32); 
    $.Field({Static:false, Public:false}, "keys3", $.UInt32); 
    $.Field({Static:false, Public:false}, "keys4", $.UInt32); 
    $.Field({Static:false, Public:false}, "keys5", $.UInt32); 
    $.Field({Static:false, Public:false}, "keys6", $.UInt32); 
    $.Field({Static:false, Public:false}, "keys7", $.UInt32); 
    $.Field({Static:true , Public:false}, "empty", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), function ($pi) {
        return JSIL.Array.New($asm00.Microsoft.Xna.Framework.Input.Keys, 0);
      }); 
    function KeyboardState__cctor () {
      $thisType.empty = JSIL.Array.New($T00(), 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      KeyboardState__cctor
    );

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyState"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum Microsoft.Xna.Framework.Input.KeyState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.KeyState", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Up: 0, 
    Down: 1, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.PresentInterval */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.PresentInterval", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    One: 1, 
    Two: 2, 
    Immediate: 3, 
  }
);

/* struct Microsoft.Xna.Framework.Input.GamePadThumbSticks */ 

(function GamePadThumbSticks$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadDeadZone)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function GamePadThumbSticks__ctor$00 (leftPosition, rightPosition) {
    JSIL.CopyMembers(new $thisType(), this);
    (this.Left = leftPosition.MemberwiseClone());
    (this.Right = rightPosition.MemberwiseClone());
  };

  function GamePadThumbSticks__ctor$01 (leftPosition, rightPosition, deadZoneMode) {
    JSIL.CopyMembers(new $thisType(), this);
    this.left = leftPosition.MemberwiseClone();
    this.right = rightPosition.MemberwiseClone();
    this.ApplyDeadZone(deadZoneMode);
    (this.Left = this.left.MemberwiseClone());
    (this.Right = this.right.MemberwiseClone());
  };

  function GamePadThumbSticks_ApplyDeadZone (dz) {
    switch (dz.valueOf()) {
      case 1: 
        if ((Math.abs(this.left.X)) < 0.24) {
          this.left.X = 0;
        }
        if ((Math.abs(this.left.Y)) < 0.24) {
          this.left.Y = 0;
        }
        if ((Math.abs(this.right.X)) < 0.265) {
          this.right.X = 0;
        }
        if ((Math.abs(this.right.Y)) < 0.265) {
          this.right.Y = 0;
        }
        break;

      case 2: 
        if (+(this.left).LengthSquared() < 0.0576) {
          this.left = $T00().get_Zero().MemberwiseClone();
        }
        if (+(this.right).LengthSquared() < 0.07022499) {
          this.right = $T00().get_Zero().MemberwiseClone();
        }
        break;

    }
    if (dz !== $T01().None) {
      if (+this.left.X < -0.24) {
        this.left.X += 0.24;
      } else if (+this.left.X > 0.24) {
        this.left.X -= 0.24;
      }
      if (+this.left.Y < -0.24) {
        this.left.Y += 0.24;
      } else if (+this.left.Y > 0.24) {
        this.left.Y -= 0.24;
      }
      if (+this.right.X < -0.265) {
        this.right.X += 0.265;
      } else if (+this.right.X > 0.265) {
        this.right.X -= 0.265;
      }
      if (+this.right.Y < -0.265) {
        this.right.Y += 0.265;
      } else if (+this.right.Y > 0.265) {
        this.right.Y -= 0.265;
      }
      this.left.X = +((+this.left.X / 0.76));
      this.left.Y = +((+this.left.Y / 0.76));
      this.right.X = +((+this.right.X / 0.735));
      this.right.Y = +((+this.right.Y / 0.735));
    }
  };

  function GamePadThumbSticks_Object_Equals (obj) {
    return ($thisType.$Is(obj) && $thisType.op_Equality(this, $thisType.$Cast(obj).MemberwiseClone()));
  };

  function GamePadThumbSticks_get_Left () {
    return this.left;
  };

  function GamePadThumbSticks_get_Right () {
    return this.right;
  };

  function GamePadThumbSticks_GetHashCode () {
    return ((((this.get_Left().MemberwiseClone()).GetHashCode() | 0) + Math.imul(37, (this.get_Right().MemberwiseClone()).GetHashCode())) | 0);
  };

  function GamePadThumbSticks_op_Equality (left, right) {
    return ($T00().op_Equality(left.left.MemberwiseClone(), right.left.MemberwiseClone()) && $T00().op_Equality(left.right.MemberwiseClone(), right.right.MemberwiseClone()));
  };

  function GamePadThumbSticks_op_Inequality (left, right) {
    return !$thisType.op_Equality(left.MemberwiseClone(), right.MemberwiseClone());
  };

  function GamePadThumbSticks_set_Left (value) {
    if (+value.LengthSquared() > 1) {
      this.left = $T00().Normalize(value.MemberwiseClone());
    } else {
      this.left = value.MemberwiseClone();
    }
  };

  function GamePadThumbSticks_set_Right (value) {
    if (+value.LengthSquared() > 1) {
      this.right = $T00().Normalize(value.MemberwiseClone());
    } else {
      this.right = value.MemberwiseClone();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadThumbSticks", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      GamePadThumbSticks__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")
        ]), 
      GamePadThumbSticks__ctor$01
    );

    $.Method({Static:false, Public:false}, "ApplyDeadZone", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")), 
      GamePadThumbSticks_ApplyDeadZone
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      GamePadThumbSticks_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      GamePadThumbSticks_get_Left
    );

    $.Method({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      GamePadThumbSticks_get_Right
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      GamePadThumbSticks_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      GamePadThumbSticks_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      GamePadThumbSticks_op_Inequality
    );

    $.Method({Static:false, Public:false}, "set_Left", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      GamePadThumbSticks_set_Left
    );

    $.Method({Static:false, Public:false}, "set_Right", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      GamePadThumbSticks_set_Right
    );

    $.Field({Static:false, Public:false}, "left", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "right", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Property({Static:false, Public:true }, "Left", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Right", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Input.Buttons */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.Buttons", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    DPadUp: 1, 
    DPadDown: 2, 
    DPadLeft: 4, 
    DPadRight: 8, 
    Start: 16, 
    Back: 32, 
    LeftStick: 64, 
    RightStick: 128, 
    LeftShoulder: 256, 
    RightShoulder: 512, 
    BigButton: 2048, 
    A: 4096, 
    B: 8192, 
    X: 16384, 
    Y: 32768, 
    LeftThumbstickLeft: 2097152, 
    RightTrigger: 4194304, 
    LeftTrigger: 8388608, 
    RightThumbstickUp: 16777216, 
    RightThumbstickDown: 33554432, 
    RightThumbstickRight: 67108864, 
    RightThumbstickLeft: 134217728, 
    LeftThumbstickUp: 268435456, 
    LeftThumbstickDown: 536870912, 
    LeftThumbstickRight: 1073741824, 
  }
);

/* struct Microsoft.Xna.Framework.Input.GamePadCapabilities */ 

(function GamePadCapabilities$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadType)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function GamePadCapabilities_get_GamePadType () {
    return this.GamePadCapabilities$GamePadType$value;
  };

  function GamePadCapabilities_get_HasAButton () {
    return this.GamePadCapabilities$HasAButton$value;
  };

  function GamePadCapabilities_get_HasBackButton () {
    return this.GamePadCapabilities$HasBackButton$value;
  };

  function GamePadCapabilities_get_HasBButton () {
    return this.GamePadCapabilities$HasBButton$value;
  };

  function GamePadCapabilities_get_HasBigButton () {
    return this.GamePadCapabilities$HasBigButton$value;
  };

  function GamePadCapabilities_get_HasDPadDownButton () {
    return this.GamePadCapabilities$HasDPadDownButton$value;
  };

  function GamePadCapabilities_get_HasDPadLeftButton () {
    return this.GamePadCapabilities$HasDPadLeftButton$value;
  };

  function GamePadCapabilities_get_HasDPadRightButton () {
    return this.GamePadCapabilities$HasDPadRightButton$value;
  };

  function GamePadCapabilities_get_HasDPadUpButton () {
    return this.GamePadCapabilities$HasDPadUpButton$value;
  };

  function GamePadCapabilities_get_HasLeftShoulderButton () {
    return this.GamePadCapabilities$HasLeftShoulderButton$value;
  };

  function GamePadCapabilities_get_HasLeftStickButton () {
    return this.GamePadCapabilities$HasLeftStickButton$value;
  };

  function GamePadCapabilities_get_HasLeftTrigger () {
    return this.GamePadCapabilities$HasLeftTrigger$value;
  };

  function GamePadCapabilities_get_HasLeftVibrationMotor () {
    return this.GamePadCapabilities$HasLeftVibrationMotor$value;
  };

  function GamePadCapabilities_get_HasLeftXThumbStick () {
    return this.GamePadCapabilities$HasLeftXThumbStick$value;
  };

  function GamePadCapabilities_get_HasLeftYThumbStick () {
    return this.GamePadCapabilities$HasLeftYThumbStick$value;
  };

  function GamePadCapabilities_get_HasRightShoulderButton () {
    return this.GamePadCapabilities$HasRightShoulderButton$value;
  };

  function GamePadCapabilities_get_HasRightStickButton () {
    return this.GamePadCapabilities$HasRightStickButton$value;
  };

  function GamePadCapabilities_get_HasRightTrigger () {
    return this.GamePadCapabilities$HasRightTrigger$value;
  };

  function GamePadCapabilities_get_HasRightVibrationMotor () {
    return this.GamePadCapabilities$HasRightVibrationMotor$value;
  };

  function GamePadCapabilities_get_HasRightXThumbStick () {
    return this.GamePadCapabilities$HasRightXThumbStick$value;
  };

  function GamePadCapabilities_get_HasRightYThumbStick () {
    return this.GamePadCapabilities$HasRightYThumbStick$value;
  };

  function GamePadCapabilities_get_HasStartButton () {
    return this.GamePadCapabilities$HasStartButton$value;
  };

  function GamePadCapabilities_get_HasVoiceSupport () {
    return this.GamePadCapabilities$HasVoiceSupport$value;
  };

  function GamePadCapabilities_get_HasXButton () {
    return this.GamePadCapabilities$HasXButton$value;
  };

  function GamePadCapabilities_get_HasYButton () {
    return this.GamePadCapabilities$HasYButton$value;
  };

  function GamePadCapabilities_get_IsConnected () {
    return this.GamePadCapabilities$IsConnected$value;
  };

  function GamePadCapabilities_set_GamePadType (value) {
    this.GamePadCapabilities$GamePadType$value = value;
  };

  function GamePadCapabilities_set_HasAButton (value) {
    this.GamePadCapabilities$HasAButton$value = value;
  };

  function GamePadCapabilities_set_HasBackButton (value) {
    this.GamePadCapabilities$HasBackButton$value = value;
  };

  function GamePadCapabilities_set_HasBButton (value) {
    this.GamePadCapabilities$HasBButton$value = value;
  };

  function GamePadCapabilities_set_HasBigButton (value) {
    this.GamePadCapabilities$HasBigButton$value = value;
  };

  function GamePadCapabilities_set_HasDPadDownButton (value) {
    this.GamePadCapabilities$HasDPadDownButton$value = value;
  };

  function GamePadCapabilities_set_HasDPadLeftButton (value) {
    this.GamePadCapabilities$HasDPadLeftButton$value = value;
  };

  function GamePadCapabilities_set_HasDPadRightButton (value) {
    this.GamePadCapabilities$HasDPadRightButton$value = value;
  };

  function GamePadCapabilities_set_HasDPadUpButton (value) {
    this.GamePadCapabilities$HasDPadUpButton$value = value;
  };

  function GamePadCapabilities_set_HasLeftShoulderButton (value) {
    this.GamePadCapabilities$HasLeftShoulderButton$value = value;
  };

  function GamePadCapabilities_set_HasLeftStickButton (value) {
    this.GamePadCapabilities$HasLeftStickButton$value = value;
  };

  function GamePadCapabilities_set_HasLeftTrigger (value) {
    this.GamePadCapabilities$HasLeftTrigger$value = value;
  };

  function GamePadCapabilities_set_HasLeftVibrationMotor (value) {
    this.GamePadCapabilities$HasLeftVibrationMotor$value = value;
  };

  function GamePadCapabilities_set_HasLeftXThumbStick (value) {
    this.GamePadCapabilities$HasLeftXThumbStick$value = value;
  };

  function GamePadCapabilities_set_HasLeftYThumbStick (value) {
    this.GamePadCapabilities$HasLeftYThumbStick$value = value;
  };

  function GamePadCapabilities_set_HasRightShoulderButton (value) {
    this.GamePadCapabilities$HasRightShoulderButton$value = value;
  };

  function GamePadCapabilities_set_HasRightStickButton (value) {
    this.GamePadCapabilities$HasRightStickButton$value = value;
  };

  function GamePadCapabilities_set_HasRightTrigger (value) {
    this.GamePadCapabilities$HasRightTrigger$value = value;
  };

  function GamePadCapabilities_set_HasRightVibrationMotor (value) {
    this.GamePadCapabilities$HasRightVibrationMotor$value = value;
  };

  function GamePadCapabilities_set_HasRightXThumbStick (value) {
    this.GamePadCapabilities$HasRightXThumbStick$value = value;
  };

  function GamePadCapabilities_set_HasRightYThumbStick (value) {
    this.GamePadCapabilities$HasRightYThumbStick$value = value;
  };

  function GamePadCapabilities_set_HasStartButton (value) {
    this.GamePadCapabilities$HasStartButton$value = value;
  };

  function GamePadCapabilities_set_HasVoiceSupport (value) {
    this.GamePadCapabilities$HasVoiceSupport$value = value;
  };

  function GamePadCapabilities_set_HasXButton (value) {
    this.GamePadCapabilities$HasXButton$value = value;
  };

  function GamePadCapabilities_set_HasYButton (value) {
    this.GamePadCapabilities$HasYButton$value = value;
  };

  function GamePadCapabilities_set_IsConnected (value) {
    this.GamePadCapabilities$IsConnected$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadCapabilities", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, "get_GamePadType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadType")), 
      GamePadCapabilities_get_GamePadType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasAButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasAButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasBackButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasBackButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasBButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasBButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasBigButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasBigButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasDPadDownButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasDPadDownButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasDPadLeftButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasDPadLeftButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasDPadRightButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasDPadRightButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasDPadUpButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasDPadUpButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasLeftShoulderButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasLeftShoulderButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasLeftStickButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasLeftStickButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasLeftTrigger", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasLeftTrigger
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasLeftVibrationMotor", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasLeftVibrationMotor
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasLeftXThumbStick", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasLeftXThumbStick
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasLeftYThumbStick", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasLeftYThumbStick
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasRightShoulderButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasRightShoulderButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasRightStickButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasRightStickButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasRightTrigger", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasRightTrigger
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasRightVibrationMotor", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasRightVibrationMotor
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasRightXThumbStick", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasRightXThumbStick
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasRightYThumbStick", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasRightYThumbStick
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasStartButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasStartButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasVoiceSupport", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasVoiceSupport
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasXButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasXButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasYButton", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_HasYButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsConnected", 
      JSIL.MethodSignature.Return($.Boolean), 
      GamePadCapabilities_get_IsConnected
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_GamePadType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadType")), 
      GamePadCapabilities_set_GamePadType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasAButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasAButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasBackButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasBackButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasBButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasBButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasBigButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasBigButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasDPadDownButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasDPadDownButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasDPadLeftButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasDPadLeftButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasDPadRightButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasDPadRightButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasDPadUpButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasDPadUpButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasLeftShoulderButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasLeftShoulderButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasLeftStickButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasLeftStickButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasLeftTrigger", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasLeftTrigger
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasLeftVibrationMotor", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasLeftVibrationMotor
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasLeftXThumbStick", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasLeftXThumbStick
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasLeftYThumbStick", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasLeftYThumbStick
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasRightShoulderButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasRightShoulderButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasRightStickButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasRightStickButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasRightTrigger", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasRightTrigger
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasRightVibrationMotor", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasRightVibrationMotor
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasRightXThumbStick", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasRightXThumbStick
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasRightYThumbStick", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasRightYThumbStick
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasStartButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasStartButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasVoiceSupport", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasVoiceSupport
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasXButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasXButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasYButton", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_HasYButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsConnected", 
      JSIL.MethodSignature.Action($.Boolean), 
      GamePadCapabilities_set_IsConnected
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GamePadCapabilities$IsConnected$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasAButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasBackButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasBButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasDPadDownButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasDPadLeftButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasDPadRightButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasDPadUpButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasLeftShoulderButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasLeftStickButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasRightShoulderButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasRightStickButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasStartButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasXButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasYButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasBigButton$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasLeftXThumbStick$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasLeftYThumbStick$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasRightXThumbStick$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasRightYThumbStick$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasLeftTrigger$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasRightTrigger$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasLeftVibrationMotor$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasRightVibrationMotor$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$HasVoiceSupport$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadCapabilities$GamePadType$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadType"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "HasAButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasBackButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasBButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasDPadDownButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasDPadLeftButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasDPadRightButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasDPadUpButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftShoulderButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftStickButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightShoulderButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightStickButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasStartButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasXButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasYButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasBigButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftXThumbStick", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftYThumbStick", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightXThumbStick", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightYThumbStick", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftTrigger", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightTrigger", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftVibrationMotor", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightVibrationMotor", $.Boolean);

    $.Property({Static:false, Public:true }, "HasVoiceSupport", $.Boolean);

    $.Property({Static:false, Public:true }, "GamePadType", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Input.GamePadType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.GamePadType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    ArcadeStick: 1, 
    DancePad: 2, 
    FlightStick: 3, 
    Guitar: 4, 
    Wheel: 5, 
    AlternateGuitar: 6, 
    BigButtonPad: 7, 
    DrumKit: 8, 
    GamePad: 9, 
  }
);

/* struct Microsoft.Xna.Framework.Input.GamePadDPad */ 

(function GamePadDPad$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Input.Buttons))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Buttons)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function GamePadDPad__ctor$00 (upValue, downValue, leftValue, rightValue) {
    JSIL.CopyMembers(new $thisType(), this);
    this.GamePadDPad$Up$value = upValue;
    this.GamePadDPad$Down$value = downValue;
    this.GamePadDPad$Left$value = leftValue;
    this.GamePadDPad$Right$value = rightValue;
  };

  function GamePadDPad__ctor$01 (buttons) {
    JSIL.CopyMembers(new $thisType(), this);

    for (var i = 0; i < (buttons.length | 0); i = ((i + 1) | 0)) {
      var b = buttons[i];
      if ($T03().$Cast(b & $T03().DPadDown) === $T03().DPadDown) {
        this.GamePadDPad$Down$value = $T00().Pressed;
      }
      if ($T03().$Cast(b & $T03().DPadLeft) === $T03().DPadLeft) {
        this.GamePadDPad$Left$value = $T00().Pressed;
      }
      if ($T03().$Cast(b & $T03().DPadRight) === $T03().DPadRight) {
        this.GamePadDPad$Right$value = $T00().Pressed;
      }
      if ($T03().$Cast(b & $T03().DPadUp) === $T03().DPadUp) {
        this.GamePadDPad$Up$value = $T00().Pressed;
      }
    }
  };

  function GamePadDPad_Object_Equals (obj) {
    return ($thisType.$Is(obj) && $thisType.op_Equality(this, $thisType.$Cast(obj)));
  };

  function GamePadDPad_get_Down () {
    return this.GamePadDPad$Down$value;
  };

  function GamePadDPad_get_Left () {
    return this.GamePadDPad$Left$value;
  };

  function GamePadDPad_get_Right () {
    return this.GamePadDPad$Right$value;
  };

  function GamePadDPad_get_Up () {
    return this.GamePadDPad$Up$value;
  };

  function GamePadDPad_GetHashCode () {
    return ((((((((
            (this.GamePadDPad$Down$value === $T00().Pressed)
               ? 1
               : 0)
           | 0) + ((
            (this.GamePadDPad$Left$value === $T00().Pressed)
               ? 2
               : 0)
           | 0)) | 0) + ((
          (this.GamePadDPad$Right$value === $T00().Pressed)
             ? 4
             : 0)
         | 0)) | 0) + ((
        (this.GamePadDPad$Up$value === $T00().Pressed)
           ? 8
           : 0)
       | 0)) | 0);
  };

  function GamePadDPad_op_Equality (left, right) {
    return (!((left.GamePadDPad$Down$value !== right.GamePadDPad$Down$value) || 
        (left.GamePadDPad$Left$value !== right.GamePadDPad$Left$value) || 
        (left.GamePadDPad$Right$value !== right.GamePadDPad$Right$value)) && (left.GamePadDPad$Up$value === right.GamePadDPad$Up$value));
  };

  function GamePadDPad_op_Inequality (left, right) {
    return !$thisType.op_Equality(left, right);
  };

  function GamePadDPad_set_Down (value) {
    this.GamePadDPad$Down$value = value;
  };

  function GamePadDPad_set_Left (value) {
    this.GamePadDPad$Left$value = value;
  };

  function GamePadDPad_set_Right (value) {
    this.GamePadDPad$Right$value = value;
  };

  function GamePadDPad_set_Up (value) {
    this.GamePadDPad$Up$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadDPad", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")
        ]), 
      GamePadDPad__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")])), 
      GamePadDPad__ctor$01
    )
      .Parameter(0, "buttons", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      GamePadDPad_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Down", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadDPad_get_Down
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadDPad_get_Left
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadDPad_get_Right
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Up", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadDPad_get_Up
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      GamePadDPad_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      GamePadDPad_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      GamePadDPad_op_Inequality
    );

    $.Method({Static:false, Public:false}, "set_Down", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadDPad_set_Down
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Left", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadDPad_set_Left
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Right", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadDPad_set_Right
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Up", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadDPad_set_Up
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GamePadDPad$Down$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadDPad$Left$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadDPad$Right$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GamePadDPad$Up$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Down", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Left", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Right", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Up", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.GamePadTriggers */ 

(function GamePadTriggers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function GamePadTriggers__ctor (leftTrigger, rightTrigger) {
    JSIL.CopyMembers(new $thisType(), this);
    this.set_Left(leftTrigger);
    this.set_Right(rightTrigger);
  };

  function GamePadTriggers_Object_Equals (obj) {
    return ($thisType.$Is(obj) && $thisType.op_Equality(this, $thisType.$Cast(obj).MemberwiseClone()));
  };

  function GamePadTriggers_get_Left () {
    return this.left;
  };

  function GamePadTriggers_get_Right () {
    return this.right;
  };

  function GamePadTriggers_GetHashCode () {
    return ((((this.get_Left()).GetHashCode() | 0) + ((this.get_Right()).GetHashCode() | 0)) | 0);
  };

  function GamePadTriggers_op_Equality (left, right) {
    return ($T02().WithinEpsilon(left.left, right.left) && $T02().WithinEpsilon(left.right, right.right));
  };

  function GamePadTriggers_op_Inequality (left, right) {
    return !$thisType.op_Equality(left.MemberwiseClone(), right.MemberwiseClone());
  };

  function GamePadTriggers_set_Left (value) {
    this.left = +$S00().CallStatic($T02(), "Clamp", null, value, 0, 1);
  };

  function GamePadTriggers_set_Right (value) {
    this.right = +$S00().CallStatic($T02(), "Clamp", null, value, 0, 1);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadTriggers", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single]), 
      GamePadTriggers__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      GamePadTriggers_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($.Single), 
      GamePadTriggers_get_Left
    );

    $.Method({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($.Single), 
      GamePadTriggers_get_Right
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      GamePadTriggers_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      GamePadTriggers_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      GamePadTriggers_op_Inequality
    );

    $.Method({Static:false, Public:false}, "set_Left", 
      JSIL.MethodSignature.Action($.Single), 
      GamePadTriggers_set_Left
    );

    $.Method({Static:false, Public:false}, "set_Right", 
      JSIL.MethodSignature.Action($.Single), 
      GamePadTriggers_set_Right
    );

    $.Field({Static:false, Public:false}, "left", $.Single); 
    $.Field({Static:false, Public:false}, "right", $.Single); 
    $.Property({Static:false, Public:true }, "Left", $.Single);

    $.Property({Static:false, Public:true }, "Right", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.GamePadButtons */ 

(function GamePadButtons$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Buttons)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Input.Buttons))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };

  function GamePadButtons__ctor$00 (buttons) {
    this.buttons = buttons;
  };

  function GamePadButtons__ctor$01 (buttons) {
    JSIL.CopyMembers(new $thisType(), this);

    for (var i = 0; i < (buttons.length | 0); i = ((i + 1) | 0)) {
      var b = buttons[i];
      this.buttons = $T00().$Cast(this.buttons | b);
    }
  };

  function GamePadButtons_Object_Equals (obj) {
    return ($thisType.$Is(obj) && $thisType.op_Equality(this, $thisType.$Cast(obj)));
  };

  function GamePadButtons_get_A () {
    return (
      ($T00().$Cast(this.buttons & $T00().A) === $T00().A)
         ? $T04().Pressed
         : $T04().Released)
    ;
  };

  function GamePadButtons_get_B () {
    return (
      ($T00().$Cast(this.buttons & $T00().B) === $T00().B)
         ? $T04().Pressed
         : $T04().Released)
    ;
  };

  function GamePadButtons_get_Back () {
    return (
      ($T00().$Cast(this.buttons & $T00().Back) === $T00().Back)
         ? $T04().Pressed
         : $T04().Released)
    ;
  };

  function GamePadButtons_get_BigButton () {
    return (
      ($T00().$Cast(this.buttons & $T00().BigButton) === $T00().BigButton)
         ? $T04().Pressed
         : $T04().Released)
    ;
  };

  function GamePadButtons_get_LeftShoulder () {
    return (
      ($T00().$Cast(this.buttons & $T00().LeftShoulder) === $T00().LeftShoulder)
         ? $T04().Pressed
         : $T04().Released)
    ;
  };

  function GamePadButtons_get_LeftStick () {
    return (
      ($T00().$Cast(this.buttons & $T00().LeftStick) === $T00().LeftStick)
         ? $T04().Pressed
         : $T04().Released)
    ;
  };

  function GamePadButtons_get_RightShoulder () {
    return (
      ($T00().$Cast(this.buttons & $T00().RightShoulder) === $T00().RightShoulder)
         ? $T04().Pressed
         : $T04().Released)
    ;
  };

  function GamePadButtons_get_RightStick () {
    return (
      ($T00().$Cast(this.buttons & $T00().RightStick) === $T00().RightStick)
         ? $T04().Pressed
         : $T04().Released)
    ;
  };

  function GamePadButtons_get_Start () {
    return (
      ($T00().$Cast(this.buttons & $T00().Start) === $T00().Start)
         ? $T04().Pressed
         : $T04().Released)
    ;
  };

  function GamePadButtons_get_X () {
    return (
      ($T00().$Cast(this.buttons & $T00().X) === $T00().X)
         ? $T04().Pressed
         : $T04().Released)
    ;
  };

  function GamePadButtons_get_Y () {
    return (
      ($T00().$Cast(this.buttons & $T00().Y) === $T00().Y)
         ? $T04().Pressed
         : $T04().Released)
    ;
  };

  function GamePadButtons_GetHashCode () {
    return (this.buttons).valueOf();
  };

  function GamePadButtons_op_Equality (left, right) {
    return (left.buttons === right.buttons);
  };

  function GamePadButtons_op_Inequality (left, right) {
    return !$thisType.op_Equality(left, right);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadButtons", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")), 
      GamePadButtons__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")])), 
      GamePadButtons__ctor$01
    )
      .Parameter(0, "buttons", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      GamePadButtons_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_A", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadButtons_get_A
    );

    $.Method({Static:false, Public:true }, "get_B", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadButtons_get_B
    );

    $.Method({Static:false, Public:true }, "get_Back", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadButtons_get_Back
    );

    $.Method({Static:false, Public:true }, "get_BigButton", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadButtons_get_BigButton
    );

    $.Method({Static:false, Public:true }, "get_LeftShoulder", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadButtons_get_LeftShoulder
    );

    $.Method({Static:false, Public:true }, "get_LeftStick", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadButtons_get_LeftStick
    );

    $.Method({Static:false, Public:true }, "get_RightShoulder", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadButtons_get_RightShoulder
    );

    $.Method({Static:false, Public:true }, "get_RightStick", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadButtons_get_RightStick
    );

    $.Method({Static:false, Public:true }, "get_Start", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadButtons_get_Start
    );

    $.Method({Static:false, Public:true }, "get_X", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadButtons_get_X
    );

    $.Method({Static:false, Public:true }, "get_Y", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      GamePadButtons_get_Y
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      GamePadButtons_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      GamePadButtons_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      GamePadButtons_op_Inequality
    );

    $.Field({Static:false, Public:false}, "buttons", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")); 
    $.Property({Static:false, Public:true }, "A", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "B", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Back", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "X", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Y", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Start", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "LeftShoulder", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "LeftStick", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "RightShoulder", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "RightStick", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "BigButton", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Input.Keys */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.Keys", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Back: 8, 
    Tab: 9, 
    Enter: 13, 
    Pause: 19, 
    CapsLock: 20, 
    Kana: 21, 
    Kanji: 25, 
    Escape: 27, 
    ImeConvert: 28, 
    ImeNoConvert: 29, 
    Space: 32, 
    PageUp: 33, 
    PageDown: 34, 
    End: 35, 
    Home: 36, 
    Left: 37, 
    Up: 38, 
    Right: 39, 
    Down: 40, 
    Select: 41, 
    Print: 42, 
    Execute: 43, 
    PrintScreen: 44, 
    Insert: 45, 
    Delete: 46, 
    Help: 47, 
    D0: 48, 
    D1: 49, 
    D2: 50, 
    D3: 51, 
    D4: 52, 
    D5: 53, 
    D6: 54, 
    D7: 55, 
    D8: 56, 
    D9: 57, 
    A: 65, 
    B: 66, 
    C: 67, 
    D: 68, 
    E: 69, 
    F: 70, 
    G: 71, 
    H: 72, 
    I: 73, 
    J: 74, 
    K: 75, 
    L: 76, 
    M: 77, 
    N: 78, 
    O: 79, 
    P: 80, 
    Q: 81, 
    R: 82, 
    S: 83, 
    T: 84, 
    U: 85, 
    V: 86, 
    W: 87, 
    X: 88, 
    Y: 89, 
    Z: 90, 
    LeftWindows: 91, 
    RightWindows: 92, 
    Apps: 93, 
    Sleep: 95, 
    NumPad0: 96, 
    NumPad1: 97, 
    NumPad2: 98, 
    NumPad3: 99, 
    NumPad4: 100, 
    NumPad5: 101, 
    NumPad6: 102, 
    NumPad7: 103, 
    NumPad8: 104, 
    NumPad9: 105, 
    Multiply: 106, 
    Add: 107, 
    Separator: 108, 
    Subtract: 109, 
    Decimal: 110, 
    Divide: 111, 
    F1: 112, 
    F2: 113, 
    F3: 114, 
    F4: 115, 
    F5: 116, 
    F6: 117, 
    F7: 118, 
    F8: 119, 
    F9: 120, 
    F10: 121, 
    F11: 122, 
    F12: 123, 
    F13: 124, 
    F14: 125, 
    F15: 126, 
    F16: 127, 
    F17: 128, 
    F18: 129, 
    F19: 130, 
    F20: 131, 
    F21: 132, 
    F22: 133, 
    F23: 134, 
    F24: 135, 
    NumLock: 144, 
    Scroll: 145, 
    LeftShift: 160, 
    RightShift: 161, 
    LeftControl: 162, 
    RightControl: 163, 
    LeftAlt: 164, 
    RightAlt: 165, 
    BrowserBack: 166, 
    BrowserForward: 167, 
    BrowserRefresh: 168, 
    BrowserStop: 169, 
    BrowserSearch: 170, 
    BrowserFavorites: 171, 
    BrowserHome: 172, 
    VolumeMute: 173, 
    VolumeDown: 174, 
    VolumeUp: 175, 
    MediaNextTrack: 176, 
    MediaPreviousTrack: 177, 
    MediaStop: 178, 
    MediaPlayPause: 179, 
    LaunchMail: 180, 
    SelectMedia: 181, 
    LaunchApplication1: 182, 
    LaunchApplication2: 183, 
    OemSemicolon: 186, 
    OemPlus: 187, 
    OemComma: 188, 
    OemMinus: 189, 
    OemPeriod: 190, 
    OemQuestion: 191, 
    OemTilde: 192, 
    ChatPadGreen: 202, 
    ChatPadOrange: 203, 
    OemOpenBrackets: 219, 
    OemPipe: 220, 
    OemCloseBrackets: 221, 
    OemQuotes: 222, 
    Oem8: 223, 
    OemBackslash: 226, 
    ProcessKey: 229, 
    OemCopy: 242, 
    OemAuto: 243, 
    OemEnlW: 244, 
    Attn: 246, 
    Crsel: 247, 
    Exsel: 248, 
    EraseEof: 249, 
    Play: 250, 
    Zoom: 251, 
    Pa1: 253, 
    OemClear: 254, 
  }
);

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Storage");
/* class Microsoft.Xna.Framework.Storage.StorageContainer */ 

(function StorageContainer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Storage.StorageDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GamePlatform)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.AppDomain)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IO.Directory)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.IO.File)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.IO.FileMode)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.IO.FileAccess)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.IO.FileShare)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };

  function StorageContainer__ctor (device, name, playerIndex) {
    if ($T01().IsNullOrEmpty(name)) {
      throw $S00().Construct("A title name has to be provided in parameter name.");
    }
    this.StorageContainer$StorageDevice$value = device;
    this.StorageContainer$DisplayName$value = name;
    if ($T04().get_Instance().Platform.GamePlatform$OSVersion$value == "Windows") {
      var saved = $T05().Combine($T00().storageRoot, "SavedGames");
    } else {
      if (!($T04().get_Instance().Platform.GamePlatform$OSVersion$value == "Mac OS X") && !($T04().get_Instance().Platform.GamePlatform$OSVersion$value == "Linux")) {
        throw $S01().Construct("StorageContainer: Platform.OSVersion not handled!");
      }
      saved = $T00().storageRoot;
    }
    this.storagePath = $T05().Combine(saved, $T05().GetFileNameWithoutExtension($T07().get_CurrentDomain().get_FriendlyName()));
    if (!$T08().Exists(this.storagePath)) {
      $T08().CreateDirectory(this.storagePath);
    }
    this.storagePath = $T05().Combine(this.storagePath, name);
    if (!$T08().Exists(this.storagePath)) {
      $T08().CreateDirectory(this.storagePath);
    }
    if (playerIndex !== null) {
      this.storagePath = $T05().Combine(this.storagePath, JSIL.ConcatString("Player", (($asm00.Microsoft.Xna.Framework.PlayerIndex.$Cast(JSIL.Nullable_Value(playerIndex) + 1)).valueOf()).toString()));
    } else {
      this.storagePath = $T05().Combine(this.storagePath, "AllPlayers");
    }
    if (!$T08().Exists(this.storagePath)) {
      $T08().CreateDirectory(this.storagePath);
    }
  };

  function StorageContainer_add_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0B().Combine(eventHandler2, value);
      eventHandler = $T0C().CompareExchange$b1($T0A())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function StorageContainer_CreateDirectory (directory) {
    if ($T01().IsNullOrEmpty(directory)) {
      throw $S00().Construct("Parameter directory must contain a value.");
    }
    var dirPath = $T05().Combine(this.storagePath, directory);
    if (!$T08().Exists(dirPath)) {
      $T08().CreateDirectory(dirPath);
    }
  };

  function StorageContainer_CreateFile (file) {
    if ($T01().IsNullOrEmpty(file)) {
      throw $S00().Construct("Parameter file must contain a value.");
    }
    var filePath = $T05().Combine(this.storagePath, file);
    return $T0D().Create(filePath);
  };

  function StorageContainer_DeleteDirectory (directory) {
    if ($T01().IsNullOrEmpty(directory)) {
      throw $S00().Construct("Parameter directory must contain a value.");
    }
    var dirPath = $T05().Combine(this.storagePath, directory);
    $T08().Delete(dirPath);
  };

  function StorageContainer_DeleteFile (file) {
    if ($T01().IsNullOrEmpty(file)) {
      throw $S00().Construct("Parameter file must contain a value.");
    }
    var filePath = $T05().Combine(this.storagePath, file);
    $T0D().Delete(filePath);
  };

  function StorageContainer_DirectoryExists (directory) {
    if ($T01().IsNullOrEmpty(directory)) {
      throw $S00().Construct("Parameter directory must contain a value.");
    }
    var dirPath = $T05().Combine(this.storagePath, directory);
    return $T08().Exists(dirPath);
  };

  function StorageContainer_Dispose () {
    if (this.Disposing !== null) {
      this.Disposing(this, null);
    }
    this.StorageContainer$IsDisposed$value = true;
  };

  function StorageContainer_FileExists (file) {
    if ($T01().IsNullOrEmpty(file)) {
      throw $S00().Construct("Parameter file must contain a value.");
    }
    var filePath = $T05().Combine(this.storagePath, file);
    return $T0D().Exists(filePath);
  };

  function StorageContainer_get_DisplayName () {
    return this.StorageContainer$DisplayName$value;
  };

  function StorageContainer_get_IsDisposed () {
    return this.StorageContainer$IsDisposed$value;
  };

  function StorageContainer_get_StorageDevice () {
    return this.StorageContainer$StorageDevice$value;
  };

  function StorageContainer_GetDirectoryNames$00 () {
    return $T08().GetDirectories(this.storagePath);
  };

  function StorageContainer_GetDirectoryNames$01 (searchPattern) {
    if ($T01().IsNullOrEmpty(searchPattern)) {
      throw $S00().Construct("Parameter searchPattern must contain a value.");
    }
    return $T08().GetDirectories(this.storagePath, searchPattern);
  };

  function StorageContainer_GetFileNames$02 () {
    return $T08().GetFiles(this.storagePath);
  };

  function StorageContainer_GetFileNames$03 (searchPattern) {
    if ($T01().IsNullOrEmpty(searchPattern)) {
      throw $S00().Construct("Parameter searchPattern must contain a value.");
    }
    return $T08().GetFiles(this.storagePath, searchPattern);
  };

  function StorageContainer_OpenFile$04 (file, fileMode) {
    return this.OpenFile(file, fileMode, $T0F().ReadWrite, $T10().ReadWrite);
  };

  function StorageContainer_OpenFile$05 (file, fileMode, fileAccess) {
    return this.OpenFile(file, fileMode, fileAccess, $T10().ReadWrite);
  };

  function StorageContainer_OpenFile$06 (file, fileMode, fileAccess, fileShare) {
    if ($T01().IsNullOrEmpty(file)) {
      throw $S00().Construct("Parameter file must contain a value.");
    }
    var filePath = $T05().Combine(this.storagePath, file);
    return $T0D().Open(filePath, fileMode, fileAccess, fileShare);
  };

  function StorageContainer_remove_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0B().Remove(eventHandler2, value);
      eventHandler = $T0C().CompareExchange$b1($T0A())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function StorageContainer_set_DisplayName (value) {
    this.StorageContainer$DisplayName$value = value;
  };

  function StorageContainer_set_IsDisposed (value) {
    this.StorageContainer$IsDisposed$value = value;
  };

  function StorageContainer_set_StorageDevice (value) {
    this.StorageContainer$StorageDevice$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Storage.StorageContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Storage.StorageDevice"), $.String, 
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])
        ]), 
      StorageContainer__ctor
    );

    $.Method({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      StorageContainer_add_Disposing
    );

    $.Method({Static:false, Public:true }, "CreateDirectory", 
      JSIL.MethodSignature.Action($.String), 
      StorageContainer_CreateDirectory
    );

    $.Method({Static:false, Public:true }, "CreateFile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String]), 
      StorageContainer_CreateFile
    );

    $.Method({Static:false, Public:true }, "DeleteDirectory", 
      JSIL.MethodSignature.Action($.String), 
      StorageContainer_DeleteDirectory
    );

    $.Method({Static:false, Public:true }, "DeleteFile", 
      JSIL.MethodSignature.Action($.String), 
      StorageContainer_DeleteFile
    );

    $.Method({Static:false, Public:true }, "DirectoryExists", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      StorageContainer_DirectoryExists
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      StorageContainer_Dispose
    );

    $.Method({Static:false, Public:true }, "FileExists", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      StorageContainer_FileExists
    );

    $.Method({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String), 
      StorageContainer_get_DisplayName
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      StorageContainer_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_StorageDevice", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Storage.StorageDevice")), 
      StorageContainer_get_StorageDevice
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetDirectoryNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])), 
      StorageContainer_GetDirectoryNames$00
    );

    $.Method({Static:false, Public:true }, "GetDirectoryNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String]), 
      StorageContainer_GetDirectoryNames$01
    );

    $.Method({Static:false, Public:true }, "GetFileNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])), 
      StorageContainer_GetFileNames$02
    );

    $.Method({Static:false, Public:true }, "GetFileNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String]), 
      StorageContainer_GetFileNames$03
    );

    $.Method({Static:false, Public:true }, "OpenFile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String, $asm01.TypeRef("System.IO.FileMode")]), 
      StorageContainer_OpenFile$04
    );

    $.Method({Static:false, Public:true }, "OpenFile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $asm01.TypeRef("System.IO.FileMode"), 
          $asm01.TypeRef("System.IO.FileAccess")
        ]), 
      StorageContainer_OpenFile$05
    );

    $.Method({Static:false, Public:true }, "OpenFile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $asm01.TypeRef("System.IO.FileMode"), 
          $asm01.TypeRef("System.IO.FileAccess"), $asm01.TypeRef("System.IO.FileShare")
        ]), 
      StorageContainer_OpenFile$06
    );

    $.Method({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      StorageContainer_remove_Disposing
    );

    $.Method({Static:false, Public:false}, "set_DisplayName", 
      JSIL.MethodSignature.Action($.String), 
      StorageContainer_set_DisplayName
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      StorageContainer_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_StorageDevice", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Storage.StorageDevice")), 
      StorageContainer_set_StorageDevice
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "storagePath", $.String); 
    $.Field({Static:false, Public:false}, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "StorageContainer$DisplayName$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "StorageContainer$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "StorageContainer$StorageDevice$value", $asm00.TypeRef("Microsoft.Xna.Framework.Storage.StorageDevice"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "StorageDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Storage.StorageDevice"));

    $.Event({Static:false, Public:true }, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Storage.StorageDevice */ 

(function StorageDevice$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.AsyncCallback)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Storage.StorageDevice_OpenContainerAsynchronous)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IAsyncResult)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Storage.StorageDevice_ShowSelectorAsynchronous)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Storage.StorageContainer)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Runtime.Remoting.Messaging.AsyncResult)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Threading.WaitHandle)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.IO.DriveInfo)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GamePlatform)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Environment)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Environment_SpecialFolder)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.DriveInfo"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IAsyncResult.get_AsyncWaitHandle)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.IAsyncResult.get_IsCompleted)) ();
  };

  function StorageDevice__ctor (player, sizeInBytes, directoryCount) {
    this.devicePlayer = player;
  };

  function StorageDevice_add_DeviceChanged (value) {
    var eventHandler = $thisType.DeviceChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference($thisType, "DeviceChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function StorageDevice_BeginOpenContainer (displayName, callback, state) {
    var AsynchronousOpen = $T07().New(this, $thisType.prototype.Open, function () { return JSIL.GetMethodInfo($thisType, "Open", new JSIL.MethodSignature($asm00.Microsoft.Xna.Framework.Storage.StorageContainer, [$asm01.System.String]), false); });
    var result = AsynchronousOpen.BeginInvoke(displayName, callback, state);
    return result;
  };

  function StorageDevice_BeginShowSelector$00 (callback, state) {
    return $thisType.BeginShowSelector(0, 0, callback, state);
  };

  function StorageDevice_BeginShowSelector$01 (player, callback, state) {
    return $thisType.BeginShowSelector(
      player, 
      0, 
      0, 
      callback, 
      state
    );
  };

  function StorageDevice_BeginShowSelector$02 (sizeInBytes, directoryCount, callback, state) {
    var del = $T0A().New($thisType, $thisType.Show, function () { return JSIL.GetMethodInfo($thisType, "Show", new JSIL.MethodSignature($thisType, [
            $asm01.System.Nullable$b1.Of($asm00.Microsoft.Xna.Framework.PlayerIndex), $asm01.System.Int32, 
            $asm01.System.Int32
          ]), true); });
    return del.BeginInvoke(
      null, 
      sizeInBytes, 
      directoryCount, 
      callback, 
      state
    );
  };

  function StorageDevice_BeginShowSelector$03 (player, sizeInBytes, directoryCount, callback, state) {
    var del = $T0A().New($thisType, $thisType.Show, function () { return JSIL.GetMethodInfo($thisType, "Show", new JSIL.MethodSignature($thisType, [
            $asm01.System.Nullable$b1.Of($asm00.Microsoft.Xna.Framework.PlayerIndex), $asm01.System.Int32, 
            $asm01.System.Int32
          ]), true); });
    return del.BeginInvoke(
      player, 
      sizeInBytes, 
      directoryCount, 
      callback, 
      state
    );
  };

  function StorageDevice_DeleteContainer (titleName) {
    throw $S00().Construct();
  };

  function StorageDevice_EndOpenContainer (result) {
    var returnValue = null;
    try {
      var asyncResult = $T0D().$As(result);
      if (asyncResult !== null) {
        var asyncDelegate = $T07().$As(asyncResult.get_AsyncDelegate());
        ($IM00().Call(result, null)).WaitOne();
        if (asyncDelegate !== null) {
          returnValue = asyncDelegate.EndInvoke(result);
        }
      }
    } finally {
      ($IM00().Call(result, null)).Dispose();
    }
    return returnValue;
  };

  function StorageDevice_EndShowSelector (result) {
    if (!$IM01().Call(result, null)) {
      ($IM00().Call(result, null)).WaitOne();
    }
    var asyncResult = $T0D().$Cast(result);
    var del = $T0A().$As(asyncResult.get_AsyncDelegate());
    if (del !== null) {
      return del.EndInvoke(result);
    }
    throw $S01().Construct("result");
  };

  function StorageDevice_get_FreeSpace ($exception) {
    try {
      var result = $S02().Construct($thisType.storageRoot).get_AvailableFreeSpace();
    } catch ($exception) {
      result = $T11().Create(0, 0, 0);
    }
    return result;
  };

  function StorageDevice_get_IsConnected ($exception) {
    if (!($T14().get_Instance().Platform.GamePlatform$OSVersion$value == "Linux") && !($T14().get_Instance().Platform.GamePlatform$OSVersion$value == "Mac OS X")) {
      if ($T14().get_Instance().Platform.GamePlatform$OSVersion$value == "Windows") {
        try {
          var result = $S02().Construct($thisType.storageRoot).get_IsReady();
          return result;
        } catch ($exception) {
          result = false;
          return result;
        }
      }
      throw $S03().Construct("StorageDevice: Platform.OSVersion not handled!");
    }
    result = true;
    return result;
  };

  function StorageDevice_get_TotalSpace ($exception) {
    try {
      var result = $S02().Construct($thisType.storageRoot).get_TotalSize();
    } catch ($exception) {
      result = $T11().Create(0, 0, 0);
    }
    return result;
  };

  function StorageDevice_GetStorageRoot () {
    if ($T14().get_Instance().Platform.GamePlatform$OSVersion$value == "Windows") {
      var result = $T16().GetFolderPath($T17().MyDocuments);
    } else if ($T14().get_Instance().Platform.GamePlatform$OSVersion$value == "Mac OS X") {
      var osConfigDir = $T16().GetEnvironmentVariable("HOME");
      if ($T04().IsNullOrEmpty(osConfigDir)) {
        result = ".";
      } else {
        osConfigDir = (JSIL.ConcatString(osConfigDir, "/Library/Application Support"));
        result = osConfigDir;
      }
    } else {
      if (!($T14().get_Instance().Platform.GamePlatform$OSVersion$value == "Linux")) {
        throw $S03().Construct("StorageDevice: Platform.OSVersion not handled!");
      }
      osConfigDir = $T16().GetEnvironmentVariable("XDG_DATA_HOME");
      if ($T04().IsNullOrEmpty(osConfigDir)) {
        osConfigDir = $T16().GetEnvironmentVariable("HOME");
        if ($T04().IsNullOrEmpty(osConfigDir)) {
          result = ".";
          return result;
        }
        osConfigDir = (JSIL.ConcatString(osConfigDir, "/.local/share"));
      }
      result = osConfigDir;
    }
    return result;
  };

  function StorageDevice_OnDeviceChanged () {
    if ($thisType.DeviceChanged !== null) {
      $thisType.DeviceChanged(this, null);
    }
  };

  function StorageDevice_Open (displayName) {
    this.deviceContainer = new ($T0C())(this, displayName, this.devicePlayer);
    return this.deviceContainer;
  };

  function StorageDevice_remove_DeviceChanged (value) {
    var eventHandler = $thisType.DeviceChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference($thisType, "DeviceChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function StorageDevice_Show (player, sizeInBytes, directoryCount) {
    return new $thisType(player, sizeInBytes, directoryCount);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Storage.StorageDevice", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $.Int32, 
          $.Int32
        ]), 
      StorageDevice__ctor
    );

    $.Method({Static:true , Public:true }, "add_DeviceChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      StorageDevice_add_DeviceChanged
    );

    $.Method({Static:false, Public:true }, "BeginOpenContainer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IAsyncResult"), [
          $.String, $asm01.TypeRef("System.AsyncCallback"), 
          $.Object
        ]), 
      StorageDevice_BeginOpenContainer
    );

    $.Method({Static:true , Public:true }, "BeginShowSelector", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IAsyncResult"), [$asm01.TypeRef("System.AsyncCallback"), $.Object]), 
      StorageDevice_BeginShowSelector$00
    );

    $.Method({Static:true , Public:true }, "BeginShowSelector", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IAsyncResult"), [
          $asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $asm01.TypeRef("System.AsyncCallback"), 
          $.Object
        ]), 
      StorageDevice_BeginShowSelector$01
    );

    $.Method({Static:true , Public:true }, "BeginShowSelector", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IAsyncResult"), [
          $.Int32, $.Int32, 
          $asm01.TypeRef("System.AsyncCallback"), $.Object
        ]), 
      StorageDevice_BeginShowSelector$02
    );

    $.Method({Static:true , Public:true }, "BeginShowSelector", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IAsyncResult"), [
          $asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $.Int32, 
          $.Int32, $asm01.TypeRef("System.AsyncCallback"), 
          $.Object
        ]), 
      StorageDevice_BeginShowSelector$03
    );

    $.Method({Static:false, Public:true }, "DeleteContainer", 
      JSIL.MethodSignature.Action($.String), 
      StorageDevice_DeleteContainer
    );

    $.Method({Static:false, Public:true }, "EndOpenContainer", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Storage.StorageContainer"), [$asm01.TypeRef("System.IAsyncResult")]), 
      StorageDevice_EndOpenContainer
    );

    $.Method({Static:true , Public:true }, "EndShowSelector", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IAsyncResult")]), 
      StorageDevice_EndShowSelector
    );

    $.Method({Static:false, Public:true }, "get_FreeSpace", 
      JSIL.MethodSignature.Return($.Int64), 
      StorageDevice_get_FreeSpace
    );

    $.Method({Static:false, Public:true }, "get_IsConnected", 
      JSIL.MethodSignature.Return($.Boolean), 
      StorageDevice_get_IsConnected
    );

    $.Method({Static:false, Public:true }, "get_TotalSpace", 
      JSIL.MethodSignature.Return($.Int64), 
      StorageDevice_get_TotalSpace
    );

    $.Method({Static:true , Public:false}, "GetStorageRoot", 
      JSIL.MethodSignature.Return($.String), 
      StorageDevice_GetStorageRoot
    );

    $.Method({Static:false, Public:false}, "OnDeviceChanged", 
      JSIL.MethodSignature.Void, 
      StorageDevice_OnDeviceChanged
    );

    $.Method({Static:false, Public:false}, "Open", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Storage.StorageContainer"), [$.String]), 
      StorageDevice_Open
    );

    $.Method({Static:true , Public:true }, "remove_DeviceChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      StorageDevice_remove_DeviceChanged
    );

    $.Method({Static:true , Public:false}, "Show", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $.Int32, 
          $.Int32
        ]), 
      StorageDevice_Show
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "storageRoot", $.String); 
    $.Field({Static:false, Public:false}, "devicePlayer", $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])); 
    $.Field({Static:false, Public:false}, "deviceContainer", $asm00.TypeRef("Microsoft.Xna.Framework.Storage.StorageContainer")); 
    $.Field({Static:true , Public:false}, "DeviceChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    function StorageDevice__cctor () {
      $thisType.storageRoot = $thisType.GetStorageRoot();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      StorageDevice__cctor
    );

    $.Property({Static:false, Public:true }, "FreeSpace", $.Int64);

    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "TotalSpace", $.Int64);

    $.Event({Static:true , Public:true }, "DeviceChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Xna.Framework.Storage.StorageDevice+ShowSelectorAsynchronous */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Storage.StorageDevice+ShowSelectorAsynchronous", false, [], 
  new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Storage.StorageDevice"), [
      $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32")
    ]));

/* delegate Microsoft.Xna.Framework.Storage.StorageDevice+OpenContainerAsynchronous */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Storage.StorageDevice+OpenContainerAsynchronous", false, [], 
  new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Storage.StorageContainer"), [$asm01.TypeRef("System.String")]));

/* class Microsoft.Xna.Framework.Input.TextInputEXT */ 

(function TextInputEXT$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Action$b1.Of($asm01.System.Char))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Char)) ();
  };

  function TextInputEXT_add_TextInput (value) {
    var action = $thisType.TextInput;

    do {
      var action2 = action;
      var value2 = $T01().Combine(action2, value);
      action = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference($thisType, "TextInput"), value2, action2);
    } while (action !== action2);
  };

  function TextInputEXT_OnTextInput (c) {
    if ($thisType.TextInput !== null) {
      $thisType.TextInput(c);
    }
  };

  function TextInputEXT_remove_TextInput (value) {
    var action = $thisType.TextInput;

    do {
      var action2 = action;
      var value2 = $T01().Remove(action2, value);
      action = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference($thisType, "TextInput"), value2, action2);
    } while (action !== action2);
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.TextInputEXT", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "add_TextInput", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Action`1", [$.Char])), 
      TextInputEXT_add_TextInput
    );

    $.Method({Static:true , Public:false}, "OnTextInput", 
      JSIL.MethodSignature.Action($.Char), 
      TextInputEXT_OnTextInput
    );

    $.Method({Static:true , Public:true }, "remove_TextInput", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Action`1", [$.Char])), 
      TextInputEXT_remove_TextInput
    );

    $.Field({Static:true , Public:false}, "TextInput", $asm01.TypeRef("System.Action`1", [$.Char])); 
    $.Event({Static:true , Public:true }, "TextInput", $asm01.TypeRef("System.Action`1", [$.Char]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.AudioChannels */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Audio.AudioChannels", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Mono: 1, 
    Stereo: 2, 
  }
);

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Media");
/* class Microsoft.Xna.Framework.Media.MediaPlayer */ 

(function MediaPlayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.MediaState)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.MediaQueue)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Song)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.SongCollection)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Media.Song))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Media.Song))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Media.Song).get_Current)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Media.Song).GetEnumerator)) ();
  };

  function MediaPlayer_add_ActiveSongChanged (value) {
    var eventHandler = $thisType.ActiveSongChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Combine(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference($thisType, "ActiveSongChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function MediaPlayer_add_MediaStateChanged (value) {
    var eventHandler = $thisType.MediaStateChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Combine(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference($thisType, "MediaStateChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function MediaPlayer_get_GameHasControl () {
    return true;
  };

  function MediaPlayer_get_IsMuted () {
    return $thisType.INTERNAL_isMuted;
  };

  function MediaPlayer_get_IsRepeating () {
    return $thisType.MediaPlayer$IsRepeating$value;
  };

  function MediaPlayer_get_IsShuffled () {
    return $thisType.MediaPlayer$IsShuffled$value;
  };

  function MediaPlayer_get_IsVisualizationEnabled () {
    return false;
  };

  function MediaPlayer_get_PlayPosition () {
    if ($T05().op_Equality($thisType.MediaPlayer$Queue$value.get_ActiveSong(), null)) {
      var result = $T06().Zero.MemberwiseClone();
    } else {
      result = $thisType.MediaPlayer$Queue$value.get_ActiveSong().Song$Position$value.MemberwiseClone();
    }
    return result;
  };

  function MediaPlayer_get_Queue () {
    return $thisType.MediaPlayer$Queue$value;
  };

  function MediaPlayer_get_State () {
    return $thisType.INTERNAL_state;
  };

  function MediaPlayer_get_Volume () {
    return $thisType.INTERNAL_volume;
  };

  function MediaPlayer_MoveNext () {
    $thisType.NextSong(1);
  };

  function MediaPlayer_MovePrevious () {
    $thisType.NextSong(-1);
  };

  function MediaPlayer_NextSong (direction) {
    $thisType.Stop();
    if (!(!$thisType.MediaPlayer$IsRepeating$value || (($thisType.MediaPlayer$Queue$value.MediaQueue$ActiveSongIndex$value | 0) < ((($thisType.MediaPlayer$Queue$value.get_Count() | 0) - 1) | 0)))) {
      $thisType.MediaPlayer$Queue$value.MediaQueue$ActiveSongIndex$value = 0;
      direction = 0;
    }
    var nextSong = $thisType.MediaPlayer$Queue$value.GetNextSong(direction, $thisType.MediaPlayer$IsShuffled$value);
    if ($T05().op_Inequality(nextSong, null)) {
      $thisType.PlaySong(nextSong);
    }
    if ($thisType.ActiveSongChanged !== null) {
      $thisType.ActiveSongChanged(null, null);
    }
  };

  function MediaPlayer_OnSongFinishedPlaying (sender, args) {
    $thisType.numSongsInQueuePlayed = ((($thisType.numSongsInQueuePlayed | 0) + 1) | 0);
    if (($thisType.numSongsInQueuePlayed | 0) >= ($thisType.MediaPlayer$Queue$value.get_Count() | 0)) {
      $thisType.numSongsInQueuePlayed = 0;
      if (!$thisType.MediaPlayer$IsRepeating$value) {
        $thisType.Stop();
        if ($thisType.ActiveSongChanged !== null) {
          $thisType.ActiveSongChanged(null, null);
        }
        return;
      }
    }
    $thisType.MoveNext();
  };

  function MediaPlayer_Pause () {
    if (($thisType.get_State() === $T00().Playing) && !$T05().op_Equality($thisType.MediaPlayer$Queue$value.get_ActiveSong(), null)) {
      $thisType.MediaPlayer$Queue$value.get_ActiveSong().Pause();
      $thisType.set_State($T00().Paused);
    }
  };

  function MediaPlayer_Play$00 (song) {
    var previousSong = (
      (($thisType.MediaPlayer$Queue$value.get_Count() | 0) > 0)
         ? $thisType.MediaPlayer$Queue$value.get_Item(0)
         : null)
    ;
    $thisType.MediaPlayer$Queue$value.Clear();
    $thisType.numSongsInQueuePlayed = 0;
    $thisType.MediaPlayer$Queue$value.Add(song);
    $thisType.MediaPlayer$Queue$value.MediaQueue$ActiveSongIndex$value = 0;
    $thisType.PlaySong(song);
    if (!(!$T05().op_Inequality(previousSong, song) || ($thisType.ActiveSongChanged === null))) {
      $thisType.ActiveSongChanged(null, $T09().Empty);
    }
  };

  function MediaPlayer_Play$01 (collection, index) {
    $thisType.MediaPlayer$Queue$value.Clear();
    $thisType.numSongsInQueuePlayed = 0;
    var enumerator = collection.GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var song = $IM01().Call(enumerator, null);
        $thisType.MediaPlayer$Queue$value.Add(song);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    $thisType.MediaPlayer$Queue$value.MediaQueue$ActiveSongIndex$value = (index | 0);
    $thisType.PlaySong($thisType.MediaPlayer$Queue$value.get_ActiveSong());
  };

  function MediaPlayer_PlaySong (song) {
    song.set_Volume((
        $thisType.get_IsMuted()
           ? 0
           : $thisType.get_Volume())
    );
    song.Play();
    $thisType.set_State($T00().Playing);
  };

  function MediaPlayer_remove_ActiveSongChanged (value) {
    var eventHandler = $thisType.ActiveSongChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Remove(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference($thisType, "ActiveSongChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function MediaPlayer_remove_MediaStateChanged (value) {
    var eventHandler = $thisType.MediaStateChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Remove(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference($thisType, "MediaStateChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function MediaPlayer_Resume () {
    if ($thisType.get_State() === $T00().Paused) {
      $thisType.MediaPlayer$Queue$value.get_ActiveSong().Resume();
      $thisType.set_State($T00().Playing);
    }
  };

  function MediaPlayer_set_IsMuted (value) {
    $thisType.INTERNAL_isMuted = value;
    if (($thisType.MediaPlayer$Queue$value.get_Count() | 0) !== 0) {
      $thisType.MediaPlayer$Queue$value.SetVolume((
          value
             ? 0
             : $thisType.get_Volume())
      );
    }
  };

  function MediaPlayer_set_IsRepeating (value) {
    $thisType.MediaPlayer$IsRepeating$value = value;
  };

  function MediaPlayer_set_IsShuffled (value) {
    $thisType.MediaPlayer$IsShuffled$value = value;
  };

  function MediaPlayer_set_Queue (value) {
    $thisType.MediaPlayer$Queue$value = value;
  };

  function MediaPlayer_set_State (value) {
    if ($thisType.INTERNAL_state !== value) {
      $thisType.INTERNAL_state = value;
      if ($thisType.MediaStateChanged !== null) {
        $thisType.MediaStateChanged(null, $T09().Empty);
      }
    }
  };

  function MediaPlayer_set_Volume (value) {
    $thisType.INTERNAL_volume = +$S00().CallStatic($T10(), "Clamp", null, value, 0, 1);
    if (!$T05().op_Equality($thisType.MediaPlayer$Queue$value.get_ActiveSong(), null)) {
      $thisType.MediaPlayer$Queue$value.SetVolume((
          $thisType.get_IsMuted()
             ? 0
             : value)
      );
    }
  };

  function MediaPlayer_Stop () {
    if ($thisType.get_State() !== $T00().Stopped) {
      var enumerator = $IM03().Call($thisType.MediaPlayer$Queue$value.get_Songs(), null);
      try {

        while ($IM00().Call(enumerator, null)) {
          var song = $IM01().Call(enumerator, null);
          $thisType.MediaPlayer$Queue$value.get_ActiveSong().Stop();
        }
      } finally {
        if (enumerator !== null) {
          $IM02().Call(enumerator, null);
        }
      }
      $thisType.set_State($T00().Stopped);
    }
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Media.MediaPlayer", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "add_ActiveSongChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      MediaPlayer_add_ActiveSongChanged
    );

    $.Method({Static:true , Public:true }, "add_MediaStateChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      MediaPlayer_add_MediaStateChanged
    );

    $.Method({Static:true , Public:true }, "get_GameHasControl", 
      JSIL.MethodSignature.Return($.Boolean), 
      MediaPlayer_get_GameHasControl
    );

    $.Method({Static:true , Public:true }, "get_IsMuted", 
      JSIL.MethodSignature.Return($.Boolean), 
      MediaPlayer_get_IsMuted
    );

    $.Method({Static:true , Public:true }, "get_IsRepeating", 
      JSIL.MethodSignature.Return($.Boolean), 
      MediaPlayer_get_IsRepeating
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_IsShuffled", 
      JSIL.MethodSignature.Return($.Boolean), 
      MediaPlayer_get_IsShuffled
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_IsVisualizationEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      MediaPlayer_get_IsVisualizationEnabled
    );

    $.Method({Static:true , Public:true }, "get_PlayPosition", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      MediaPlayer_get_PlayPosition
    );

    $.Method({Static:true , Public:true }, "get_Queue", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaQueue")), 
      MediaPlayer_get_Queue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaState")), 
      MediaPlayer_get_State
    );

    $.Method({Static:true , Public:true }, "get_Volume", 
      JSIL.MethodSignature.Return($.Single), 
      MediaPlayer_get_Volume
    );

    $.Method({Static:true , Public:true }, "MoveNext", 
      JSIL.MethodSignature.Void, 
      MediaPlayer_MoveNext
    );

    $.Method({Static:true , Public:true }, "MovePrevious", 
      JSIL.MethodSignature.Void, 
      MediaPlayer_MovePrevious
    );

    $.Method({Static:true , Public:false}, "NextSong", 
      JSIL.MethodSignature.Action($.Int32), 
      MediaPlayer_NextSong
    );

    $.Method({Static:true , Public:false}, "OnSongFinishedPlaying", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      MediaPlayer_OnSongFinishedPlaying
    );

    $.Method({Static:true , Public:true }, "Pause", 
      JSIL.MethodSignature.Void, 
      MediaPlayer_Pause
    );

    $.Method({Static:true , Public:true }, "Play", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")), 
      MediaPlayer_Play$00
    );

    $.Method({Static:true , Public:true }, "Play", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), $.Int32]), 
      MediaPlayer_Play$01
    );

    $.Method({Static:true , Public:false}, "PlaySong", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")), 
      MediaPlayer_PlaySong
    );

    $.Method({Static:true , Public:true }, "remove_ActiveSongChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      MediaPlayer_remove_ActiveSongChanged
    );

    $.Method({Static:true , Public:true }, "remove_MediaStateChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      MediaPlayer_remove_MediaStateChanged
    );

    $.Method({Static:true , Public:true }, "Resume", 
      JSIL.MethodSignature.Void, 
      MediaPlayer_Resume
    );

    $.Method({Static:true , Public:true }, "set_IsMuted", 
      JSIL.MethodSignature.Action($.Boolean), 
      MediaPlayer_set_IsMuted
    );

    $.Method({Static:true , Public:true }, "set_IsRepeating", 
      JSIL.MethodSignature.Action($.Boolean), 
      MediaPlayer_set_IsRepeating
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_IsShuffled", 
      JSIL.MethodSignature.Action($.Boolean), 
      MediaPlayer_set_IsShuffled
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Queue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaQueue")), 
      MediaPlayer_set_Queue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaState")), 
      MediaPlayer_set_State
    );

    $.Method({Static:true , Public:true }, "set_Volume", 
      JSIL.MethodSignature.Action($.Single), 
      MediaPlayer_set_Volume
    );

    $.Method({Static:true , Public:true }, "Stop", 
      JSIL.MethodSignature.Void, 
      MediaPlayer_Stop
    );

    $.Field({Static:true , Public:false}, "ActiveSongChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:true , Public:false}, "MediaStateChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:true , Public:false}, "INTERNAL_isMuted", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "INTERNAL_state", $asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaState"), function ($pi) {
        return $asm00.Microsoft.Xna.Framework.Media.MediaState.Stopped;
      }); 
    $.Field({Static:true , Public:false}, "INTERNAL_volume", $.Single, 1); 
    $.Field({Static:true , Public:false}, "numSongsInQueuePlayed", $.Int32, 0); 
    $.Field({Static:true , Public:false}, "MediaPlayer$IsRepeating$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "MediaPlayer$IsShuffled$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "MediaPlayer$Queue$value", $asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaQueue"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function MediaPlayer__cctor () {
      $thisType.INTERNAL_isMuted = false;
      $thisType.INTERNAL_state = $T00().Stopped;
      $thisType.INTERNAL_volume = 1;
      $thisType.numSongsInQueuePlayed = 0;
      $thisType.MediaPlayer$Queue$value = new ($T01())();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MediaPlayer__cctor
    );

    $.Property({Static:true , Public:true }, "GameHasControl", $.Boolean);

    $.Property({Static:true , Public:true }, "IsMuted", $.Boolean);

    $.Property({Static:true , Public:true }, "IsRepeating", $.Boolean);

    $.Property({Static:true , Public:true }, "IsShuffled", $.Boolean);

    $.Property({Static:true , Public:true }, "IsVisualizationEnabled", $.Boolean);

    $.Property({Static:true , Public:true }, "PlayPosition", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:true , Public:true }, "Queue", $asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaQueue"));

    $.Property({Static:true , Public:true }, "State", $asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaState"));

    $.Property({Static:true , Public:true }, "Volume", $.Single);

    $.Event({Static:true , Public:true }, "ActiveSongChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:true , Public:true }, "MediaStateChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Media.MediaState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Media.MediaState", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Stopped: 0, 
    Playing: 1, 
    Paused: 2, 
  }
);

/* enum Microsoft.Xna.Framework.Media.MediaSourceType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Media.MediaSourceType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    LocalDevice: 0, 
    WindowsMediaConnect: 4, 
  }
);

/* class Microsoft.Xna.Framework.Content.ContentReader */ 

(function ContentReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Action$b1.Of($asm01.System.IDisposable))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReaderManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Action$b1.Of($asm01.System.Object))))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentLoadException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingSphere)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Utilities.FileHelpers)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Quaternion)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Action$b1.Of($asm01.System.Object)))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Action$b1.Of($asm01.System.Object))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Action`1", [$asm01.TypeRef("System.Object")])])]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("System.Object")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature("!!0", ["!!0"], ["T"]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature("!!0", ["!!0"], ["T"]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "!!0"], ["T"]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };

  function ContentReader__ctor (manager, stream, graphicsDevice, assetName, version, recordDisposableObject) {
    $T06().prototype._ctor.call(this, stream);
    this.graphicsDevice = graphicsDevice;
    this.recordDisposableObject = recordDisposableObject;
    this.contentManager = manager;
    this.assetName = assetName;
    this.version = (version | 0);
  };

  function ContentReader_get_AssetName () {
    return this.assetName;
  };

  function ContentReader_get_ContentManager () {
    return this.contentManager;
  };

  function ContentReader_get_GraphicsDevice () {
    return this.graphicsDevice;
  };

  function ContentReader_get_TypeReaders () {
    return this.typeReaders;
  };

  function ContentReader_InitializeTypeReaders () {
    this.typeReaderManager = new ($T07())();
    this.typeReaders = (this.typeReaderManager).LoadAssetReaders(this);
    this.sharedResourceCount = (this.Read7BitEncodedInt() | 0);
    this.sharedResourceFixups = $S00().Construct();
  };

  function ContentReader_InnerReadObject$b1 (T, existingInstance) {
    var typeReaderIndex = (this.Read7BitEncodedInt() | 0);
    if (typeReaderIndex === 0) {
      var result2 = JSIL.CloneParameter(T, existingInstance);
    } else {
      if (typeReaderIndex > (this.typeReaders.length | 0)) {
        throw $S01().Construct("Incorrect type reader index found!");
      }
      var result = JSIL.CloneParameter(T, T.$Cast($S02().CallVirtual("Read", null, this.typeReaders[((typeReaderIndex - 1) | 0)], this, (
              T.IsValueType
                 ? JSIL.CreateInstanceOfType(T)
                 : null)
          )));
      this.RecordDisposable$b1(T)(result);
      result2 = result;
    }
    return result2;
  };

  function ContentReader_Read7BitEncodedInt () {
    return $T06().prototype.Read7BitEncodedInt.call(this);
  };

  function ContentReader_ReadAsset$b1 (T) {
    this.InitializeTypeReaders();
    var result = JSIL.CloneParameter(T, $S03().CallVirtual("ReadObject$b1", [T], this));
    this.ReadSharedResources();
    return result;
  };

  function ContentReader_ReadBoundingSphere () {
    var position = this.ReadVector3().MemberwiseClone();
    var radius = +this.ReadSingle();
    return new ($T10())(position.MemberwiseClone(), radius);
  };

  function ContentReader_ReadColor () {
    var result = new ($T11())();
    result.set_R(this.ReadByte());
    result.set_G(this.ReadByte());
    result.set_B(this.ReadByte());
    result.set_A(this.ReadByte());
    return result;
  };

  function ContentReader_ReadExternalReference$b1 (T) {
    var externalReference = this.ReadString();
    if (!$T03().IsNullOrEmpty(externalReference)) {
      var result = JSIL.CloneParameter(T, (this.contentManager).Load$b1(T)($T12().ResolveRelativePath(this.assetName, externalReference)));
    } else {
      result = (
        T.IsValueType
           ? JSIL.CreateInstanceOfType(T)
           : null)
      ;
    }
    return result;
  };

  function ContentReader_ReadMatrix () {
    var result = new ($T13())();
    result.M11 = +this.ReadSingle();
    result.M12 = +this.ReadSingle();
    result.M13 = +this.ReadSingle();
    result.M14 = +this.ReadSingle();
    result.M21 = +this.ReadSingle();
    result.M22 = +this.ReadSingle();
    result.M23 = +this.ReadSingle();
    result.M24 = +this.ReadSingle();
    result.M31 = +this.ReadSingle();
    result.M32 = +this.ReadSingle();
    result.M33 = +this.ReadSingle();
    result.M34 = +this.ReadSingle();
    result.M41 = +this.ReadSingle();
    result.M42 = +this.ReadSingle();
    result.M43 = +this.ReadSingle();
    result.M44 = +this.ReadSingle();
    return result;
  };

  function ContentReader_ReadObject$b1$00 (T) {
    return $S04().CallVirtual("ReadObject$b1", [T], this, (
        T.IsValueType
           ? JSIL.CreateInstanceOfType(T)
           : null)
    );
  };

  function ContentReader_ReadObject$b1$01 (T, typeReader) {
    var result = JSIL.CloneParameter(T, T.$Cast($S02().CallVirtual("Read", null, typeReader, this, (
            T.IsValueType
               ? JSIL.CreateInstanceOfType(T)
               : null)
        )));
    this.RecordDisposable$b1(T)(result);
    return result;
  };

  function ContentReader_ReadObject$b1$02 (T, existingInstance) {
    return this.InnerReadObject$b1(T)(existingInstance);
  };

  function ContentReader_ReadObject$b1$03 (T, typeReader, existingInstance) {
    if (!(typeReader.get_TargetType()).get_IsValueType()) {
      var result2 = JSIL.CloneParameter(T, $S04().CallVirtual("ReadObject$b1", [T], this, existingInstance));
    } else {
      var result = JSIL.CloneParameter(T, T.$Cast($S02().CallVirtual("Read", null, typeReader, this, JSIL.CloneParameter(T, existingInstance))));
      this.RecordDisposable$b1(T)(result);
      result2 = result;
    }
    return result2;
  };

  function ContentReader_ReadQuaternion () {
    var result = new ($T14())();
    result.X = +this.ReadSingle();
    result.Y = +this.ReadSingle();
    result.Z = +this.ReadSingle();
    result.W = +this.ReadSingle();
    return result;
  };

  function ContentReader_ReadRawObject$b1$04 (T) {
    return $S05().CallVirtual("ReadRawObject$b1", [T], this, (
        T.IsValueType
           ? JSIL.CreateInstanceOfType(T)
           : null)
    );
  };

  function ContentReader_ReadRawObject$b1$05 (T, typeReader) {
    return $S06().CallVirtual("ReadRawObject$b1", [T], this, typeReader, (
        T.IsValueType
           ? JSIL.CreateInstanceOfType(T)
           : null)
    );
  };

  function ContentReader_ReadRawObject$b1$06 (T, existingInstance) {
    var array = this.typeReaders;

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var typeReader = array[i];
      if ($T09().op_Equality(typeReader.get_TargetType(), T)) {
        return $S06().CallVirtual("ReadRawObject$b1", [T], this, typeReader, JSIL.CloneParameter(T, existingInstance));
      }
    }
    throw $S07().Construct();
  };

  function ContentReader_ReadRawObject$b1$07 (T, typeReader, existingInstance) {
    return T.$Cast($S02().CallVirtual("Read", null, typeReader, this, JSIL.CloneParameter(T, existingInstance)));
  };

  function ContentReader_ReadSharedResource$b1 (T, fixup) {
    var $closure0 = new ($asm00.Microsoft.Xna.Framework.Content.ContentReader_$l$gc__DisplayClass2$b1.Of(T)) ();
    $closure0.fixup = fixup;
    var index = (this.Read7BitEncodedInt() | 0);
    if (index > 0) {
      (this.sharedResourceFixups).Add(new ($T16())(((index - 1) | 0), $T17().New($closure0, $asm00.Microsoft.Xna.Framework.Content.ContentReader_$l$gc__DisplayClass2$b1.Of(T).prototype.$lReadSharedResource$gb__0, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.ContentReader_$l$gc__DisplayClass2$b1.Of(T), "$lReadSharedResource$gb__0", JSIL.MethodSignature.Action($.Object), false); })));
    }
  };

  function ContentReader_ReadSharedResources () {
    var $temp00;
    if ((this.sharedResourceCount | 0) > 0) {
      var sharedResources = JSIL.Array.New($T0D(), this.sharedResourceCount);

      for (var i = 0; i < (this.sharedResourceCount | 0); i = ((i + 1) | 0)) {
        sharedResources[i] = this.InnerReadObject$b1($T0D())(null);
      }

      for (var a$0 = this.sharedResourceFixups._items, i$0 = 0, l$0 = (this.sharedResourceFixups._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var fixup = a$0[i$0].MemberwiseClone();
        fixup.get_Value()(sharedResources[fixup.get_Key()]);
      }
    }
  };

  function ContentReader_ReadVector2 () {
    var result = new ($T19())();
    result.X = +this.ReadSingle();
    result.Y = +this.ReadSingle();
    return result;
  };

  function ContentReader_ReadVector3 () {
    var result = new ($T0E())();
    result.X = +this.ReadSingle();
    result.Y = +this.ReadSingle();
    result.Z = +this.ReadSingle();
    return result;
  };

  function ContentReader_ReadVector4 () {
    var result = new ($T1A())();
    result.X = +this.ReadSingle();
    result.Y = +this.ReadSingle();
    result.Z = +this.ReadSingle();
    result.W = +this.ReadSingle();
    return result;
  };

  function ContentReader_RecordDisposable$b1 (T, result) {
    var disposable = JSIL.CloneParameter(T, $T1B().$As(result));
    if (disposable !== null) {
      if (this.recordDisposableObject !== null) {
        this.recordDisposableObject(disposable);
      } else {
        (this.contentManager).RecordDisposable(disposable);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.IO.BinaryReader"), 
      Name: "Microsoft.Xna.Framework.Content.ContentReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), $asm01.TypeRef("System.IO.Stream"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.String, 
          $.Int32, $asm01.TypeRef("System.Action`1", [$asm01.TypeRef("System.IDisposable")])
        ]), 
      ContentReader__ctor
    );

    $.Method({Static:false, Public:true }, "get_AssetName", 
      JSIL.MethodSignature.Return($.String), 
      ContentReader_get_AssetName
    );

    $.Method({Static:false, Public:true }, "get_ContentManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")), 
      ContentReader_get_ContentManager
    );

    $.Method({Static:false, Public:false}, "get_GraphicsDevice", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      ContentReader_get_GraphicsDevice
    );

    $.Method({Static:false, Public:false}, "get_TypeReaders", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])), 
      ContentReader_get_TypeReaders
    );

    $.Method({Static:false, Public:false}, "InitializeTypeReaders", 
      JSIL.MethodSignature.Void, 
      ContentReader_InitializeTypeReaders
    );

    $.Method({Static:false, Public:false}, "InnerReadObject", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"]), 
      ContentReader_InnerReadObject$b1
    );

    $.Method({Static:false, Public:false}, "Read7BitEncodedInt", 
      JSIL.MethodSignature.Return($.Int32), 
      ContentReader_Read7BitEncodedInt
    );

    $.Method({Static:false, Public:false}, "ReadAsset", 
      new JSIL.MethodSignature($.Object, null, ["T"]), 
      ContentReader_ReadAsset$b1
    );

    $.Method({Static:false, Public:false}, "ReadBoundingSphere", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")), 
      ContentReader_ReadBoundingSphere
    );

    $.Method({Static:false, Public:true }, "ReadColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Color")), 
      ContentReader_ReadColor
    );

    $.Method({Static:false, Public:true }, "ReadExternalReference", 
      new JSIL.MethodSignature("!!0", null, ["T"]), 
      ContentReader_ReadExternalReference$b1
    );

    $.Method({Static:false, Public:true }, "ReadMatrix", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      ContentReader_ReadMatrix
    );

    $.Method({Static:false, Public:true }, "ReadObject", 
      new JSIL.MethodSignature("!!0", null, ["T"]), 
      ContentReader_ReadObject$b1$00
    );

    $.Method({Static:false, Public:true }, "ReadObject", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"]), 
      ContentReader_ReadObject$b1$01
    );

    $.Method({Static:false, Public:true }, "ReadObject", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"]), 
      ContentReader_ReadObject$b1$02
    );

    $.Method({Static:false, Public:true }, "ReadObject", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "!!0"], ["T"]), 
      ContentReader_ReadObject$b1$03
    );

    $.Method({Static:false, Public:true }, "ReadQuaternion", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")), 
      ContentReader_ReadQuaternion
    );

    $.Method({Static:false, Public:true }, "ReadRawObject", 
      new JSIL.MethodSignature("!!0", null, ["T"]), 
      ContentReader_ReadRawObject$b1$04
    );

    $.Method({Static:false, Public:true }, "ReadRawObject", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"]), 
      ContentReader_ReadRawObject$b1$05
    );

    $.Method({Static:false, Public:true }, "ReadRawObject", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"]), 
      ContentReader_ReadRawObject$b1$06
    );

    $.Method({Static:false, Public:true }, "ReadRawObject", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "!!0"], ["T"]), 
      ContentReader_ReadRawObject$b1$07
    );

    $.Method({Static:false, Public:true }, "ReadSharedResource", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Action`1", ["!!0"])], ["T"]), 
      ContentReader_ReadSharedResource$b1
    );

    $.Method({Static:false, Public:false}, "ReadSharedResources", 
      JSIL.MethodSignature.Void, 
      ContentReader_ReadSharedResources
    );

    $.Method({Static:false, Public:true }, "ReadVector2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      ContentReader_ReadVector2
    );

    $.Method({Static:false, Public:true }, "ReadVector3", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      ContentReader_ReadVector3
    );

    $.Method({Static:false, Public:true }, "ReadVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      ContentReader_ReadVector4
    );

    $.Method({Static:false, Public:false}, "RecordDisposable", 
      new JSIL.MethodSignature(null, ["!!0"], ["T"]), 
      ContentReader_RecordDisposable$b1
    );

    $.Field({Static:false, Public:false}, "version", $.Int32); 
    $.Field({Static:false, Public:false}, "sharedResourceCount", $.Int32); 
    $.Field({Static:false, Public:false}, "contentManager", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")); 
    $.Field({Static:false, Public:false}, "recordDisposableObject", $asm01.TypeRef("System.Action`1", [$asm01.TypeRef("System.IDisposable")])); 
    $.Field({Static:false, Public:false}, "typeReaderManager", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")); 
    $.Field({Static:false, Public:false}, "graphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Field({Static:false, Public:false}, "assetName", $.String); 
    $.Field({Static:false, Public:false}, "sharedResourceFixups", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $asm01.TypeRef("System.Action`1", [$.Object])])])); 
    $.Field({Static:false, Public:false}, "typeReaders", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])); 
    $.Property({Static:false, Public:true }, "ContentManager", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"));

    $.Property({Static:false, Public:true }, "AssetName", $.String);

    $.Property({Static:false, Public:false}, "TypeReaders", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")]));

    $.Property({Static:false, Public:false}, "GraphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ContentReader+<>c__DisplayClass2`1 */ 

(function $l$gc__DisplayClass2$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentLoadException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function $l$gc__DisplayClass2$b1__ctor () {
  };

  function $l$gc__DisplayClass2$b1_$lReadSharedResource$gb__0 (v) {
    if (!$thisType.T.get(this).$Is(v)) {
      throw $S00().Construct($T02().Format(
          "Error loading shared resource. Expected type {0}, received type {1}", 
          $thisType.T.get(this).get_Name(), 
          (JSIL.GetType(v)).get_Name()
        ));
    }
    this.fixup(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(v)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ContentReader+<>c__DisplayClass2`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2$b1__ctor
    );

    $.Method({Static:false, Public:true }, "$lReadSharedResource$gb__0", 
      JSIL.MethodSignature.Action($.Object), 
      $l$gc__DisplayClass2$b1_$lReadSharedResource$gb__0
    );

    $.Field({Static:false, Public:true }, "fixup", $asm01.TypeRef("System.Action`1", [$.GenericParameter("T")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* interface Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService", true, [], function ($) {
    $.Method({}, "get_GraphicsDevice", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")));
    $.Method({}, "add_DeviceCreated", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "remove_DeviceCreated", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "add_DeviceDisposing", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "remove_DeviceDisposing", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "add_DeviceReset", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "remove_DeviceReset", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "add_DeviceResetting", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Method({}, "remove_DeviceResetting", JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])));
    $.Property({}, "GraphicsDevice");
  }, []);

/* class Microsoft.Xna.Framework.Content.ContentTypeReaderManager */ 

(function ContentTypeReaderManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Func$b1.Of($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Type, $asm00.Microsoft.Xna.Framework.Content.ContentTypeReader))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Reflection.Assembly)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Func$b1.Of($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ByteReader)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.SByteReader)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.DateTimeReader)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.DecimalReader)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.BoundingSphereReader)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.BoundingFrustumReader)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.RayReader)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ListReader$b1.Of($asm01.System.Char))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ListReader$b1.Of($asm00.Microsoft.Xna.Framework.Rectangle))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ArrayReader$b1.Of($asm00.Microsoft.Xna.Framework.Rectangle))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ListReader$b1.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ListReader$b1.Of($asm00.Microsoft.Xna.Framework.Content.StringReader))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ListReader$b1.Of($asm01.System.Int32))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.SpriteFontReader)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.Texture2DReader)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.CharReader)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.RectangleReader)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.StringReader)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.Vector2Reader)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.Vector3Reader)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.Vector4Reader)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.CurveReader)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.IndexBufferReader)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.BoundingBoxReader)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.MatrixReader)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.BasicEffectReader)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.VertexBufferReader)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.AlphaTestEffectReader)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.EnumReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.SpriteEffects))) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ArrayReader$b1.Of($asm01.System.Single))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ArrayReader$b1.Of($asm00.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ListReader$b1.Of($asm00.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ArrayReader$b1.Of($asm00.Microsoft.Xna.Framework.Matrix))) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.EnumReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Blend))) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.NullableReader$b1.Of($asm00.Microsoft.Xna.Framework.Rectangle))) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.EffectMaterialReader)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ExternalReferenceReader)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.SoundEffectReader)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.SongReader)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader))) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm01.System.Collections.BitArray)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentLoadException)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentExtensions)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm01.System.Reflection.TargetInvocationException)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm01.System.StringSplitOptions)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm03.System.Text.RegularExpressions.Regex)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Func`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")]), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.BitArray"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.String")
      ]))) ();
  };

  function ContentTypeReaderManager__ctor () {
  };

  function ContentTypeReaderManager_AddTypeCreator (typeString, createFunction) {
    if (!$thisType.typeCreators.ContainsKey(typeString)) {
      $thisType.typeCreators.Add(typeString, createFunction);
    }
  };

  function ContentTypeReaderManager_ClearTypeCreators () {
    $thisType.typeCreators.Clear();
  };

  function ContentTypeReaderManager_GetTypeReader (targetType) {
    var reader = new JSIL.BoxedVariable(null);
    if ((this.contentReaders).TryGetValue(targetType, /* ref */ reader)) {
      var result = reader.get();
    } else {
      result = null;
    }
    return result;
  };

  function ContentTypeReaderManager_LoadAssetReaders (reader, $exception) {
    var readerFunc = new JSIL.BoxedVariable(null);
    var typeReader = new JSIL.BoxedVariable(null);
    var obj = null;
    if ($thisType.falseflag) {
      var hByteReader = new ($T0A())();
      var hSByteReader = new ($T0B())();
      var hDateTimeReader = new ($T0C())();
      var hDecimalReader = new ($T0D())();
      var hBoundingSphereReader = new ($T0E())();
      var hBoundingFrustumReader = new ($T0F())();
      var hRayReader = new ($T10())();
      var hCharListReader = new ($T11())();
      var hRectangleListReader = new ($T12())();
      var hRectangleArrayReader = new ($T13())();
      var hVector3ListReader = new ($T14())();
      var hStringListReader = new ($T15())();
      var hIntListReader = new ($T16())();
      var hSpriteFontReader = new ($T17())();
      var hTexture2DReader = new ($T18())();
      var hCharReader = new ($T19())();
      var hRectangleReader = new ($T1A())();
      var hStringReader = new ($T1B())();
      var hVector2Reader = new ($T1C())();
      var hVector3Reader = new ($T1D())();
      var hVector4Reader = new ($T1E())();
      var hCurveReader = new ($T1F())();
      var hIndexBufferReader = new ($T20())();
      var hBoundingBoxReader = new ($T21())();
      var hMatrixReader = new ($T22())();
      var hBasicEffectReader = new ($T23())();
      var hVertexBufferReader = new ($T24())();
      var hAlphaTestEffectReader = new ($T25())();
      var hEnumSpriteEffectsReader = new ($T26())();
      var hArrayFloatReader = new ($T27())();
      var hArrayVector2Reader = new ($T28())();
      var hListVector2Reader = new ($T29())();
      var hArrayMatrixReader = new ($T2A())();
      var hEnumBlendReader = new ($T2B())();
      var hNullableRectReader = new ($T2C())();
      var hEffectMaterialReader = new ($T2D())();
      var hExternalReferenceReader = new ($T2E())();
      var hSoundEffectReader = new ($T2F())();
      var hSongReader = new ($T30())();
    }
    var numberOfReaders = (reader.Read7BitEncodedInt() | 0);
    var newReaders = JSIL.Array.New($T07(), numberOfReaders);
    var needsInitialize = $S02().Construct(numberOfReaders);
    this.contentReaders = $S01().Construct(numberOfReaders);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T35().Enter(obj = $thisType.locker, /* ref */ flag);

      for (var i = 0; i < numberOfReaders; i = ((i + 1) | 0)) {
        var originalReaderTypeString = reader.ReadString();
        if ($thisType.typeCreators.TryGetValue(originalReaderTypeString, /* ref */ readerFunc)) {
          newReaders[i] = readerFunc.get()();
          needsInitialize.set_Item(i, true);
        } else {
          var readerTypeString = originalReaderTypeString;
          readerTypeString = $thisType.PrepareType(readerTypeString);
          var l_readerType = (JSIL.ReflectionGetTypeInternal($asm00.__Assembly__, readerTypeString, false, false));
          if (!$T06().op_Inequality(l_readerType, null)) {
            throw $S03().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T04(), ["Could not find ContentTypeReader Type. Please ensure the name of the Assembly that contains the Type matches the assembly in the full type name: ", originalReaderTypeString, " (", readerTypeString, ")"])));
          }
          if (!$thisType.contentReadersCache.TryGetValue(l_readerType, /* ref */ typeReader)) {
            try {
              typeReader.set($T07().$As(($T3A().GetDefaultConstructor(l_readerType)).Invoke(null)));
            } catch ($exception) {
              if ($T3B().$Is($exception)) {
                throw $S04().Construct(JSIL.ConcatString("Failed to get default constructor for ContentTypeReader. To work around, add a creation function to ContentTypeReaderManager.AddTypeCreator() with the following failed type string: ", originalReaderTypeString), $exception);
              } else {
                throw $exception;
              }
            }
            needsInitialize.set_Item(i, true);
            $thisType.contentReadersCache.Add(l_readerType, typeReader.get());
          }
          newReaders[i] = typeReader.get();
        }
        (this.contentReaders).Add((newReaders[i]).get_TargetType(), newReaders[i]);
        reader.ReadInt32();
      }

      for (i = 0; i < (newReaders.length | 0); i = ((i + 1) | 0)) {
        if (needsInitialize.Get(i)) {
          (newReaders[i]).Initialize(this);
        }
      }
    } finally {
      if (flag.get()) {
        $T35().Exit(obj);
      }
    }
    return newReaders;
  };

  function ContentTypeReaderManager_PrepareType (type) {
    var count = (((JSIL.SplitString(type, JSIL.Array.New($T04(), ["[["]), $T3D().None).length | 0) - 1) | 0);
    var preparedType = type;

    for (var i = 0; i < count; i = ((i + 1) | 0)) {
      preparedType = $S05().CallStatic($T3E(), "Replace", null, preparedType, "\\[(.+?), Version=.+?\\]", "[$1]");
    }
    if ((preparedType.indexOf("PublicKeyToken") != -1)) {
      preparedType = $S05().CallStatic($T3E(), "Replace", null, preparedType, "(.+?), Version=.+?$", "$1");
    }
    preparedType = (System.String.Replace(preparedType, ", Microsoft.Xna.Framework.Graphics", $T04().Format(", {0}", $thisType.assemblyName)));
    preparedType = (System.String.Replace(preparedType, ", Microsoft.Xna.Framework.Video", $T04().Format(", {0}", $thisType.assemblyName)));
    preparedType = (System.String.Replace(preparedType, ", Microsoft.Xna.Framework", $T04().Format(", {0}", $thisType.assemblyName)));
    return System.String.Replace(preparedType, ", MonoGame.Framework", $T04().Format(", {0}", $thisType.assemblyName));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ContentTypeReaderManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ContentTypeReaderManager__ctor
    );

    $.Method({Static:true , Public:false}, "AddTypeCreator", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Func`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])]), 
      ContentTypeReaderManager_AddTypeCreator
    );

    $.Method({Static:true , Public:false}, "ClearTypeCreators", 
      JSIL.MethodSignature.Void, 
      ContentTypeReaderManager_ClearTypeCreators
    );

    $.Method({Static:false, Public:true }, "GetTypeReader", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), [$asm01.TypeRef("System.Type")]), 
      ContentTypeReaderManager_GetTypeReader
    );

    $.Method({Static:false, Public:false}, "LoadAssetReaders", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")]), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")]), 
      ContentTypeReaderManager_LoadAssetReaders
    );

    $.Method({Static:true , Public:false}, "PrepareType", 
      new JSIL.MethodSignature($.String, [$.String]), 
      ContentTypeReaderManager_PrepareType
    );

    $.Field({Static:false, Public:false}, "contentReaders", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "locker", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "assemblyName", $.String); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "contentReadersCache", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])); 
    $.Field({Static:true , Public:false}, "falseflag", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "typeCreators", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("System.Func`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])])); 
    function ContentTypeReaderManager__cctor () {
      $thisType.falseflag = false;
      $thisType.typeCreators = $S00().Construct();
      $thisType.locker = new ($T01())();
      $thisType.contentReadersCache = $S01().Construct(255);
      $thisType.assemblyName = $asm00.__Assembly__.get_FullName();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ContentTypeReaderManager__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.Viewport */ 

(function Viewport$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]))) ();
  };

  function Viewport__ctor$00 (x, y, width, height) {
    this.x = (x | 0);
    this.y = (y | 0);
    this.width = (width | 0);
    this.height = (height | 0);
    this.minDepth = 0;
    this.maxDepth = 1;
  };

  function Viewport__ctor$01 (bounds) {
    this.x = (bounds.X | 0);
    this.y = (bounds.Y | 0);
    this.width = (bounds.Width | 0);
    this.height = (bounds.Height | 0);
    this.minDepth = 0;
    this.maxDepth = 1;
  };

  function Viewport_get_AspectRatio () {
    if (!(((this.height | 0) === 0) || ((this.width | 0) === 0))) {
      var result = +((+(this.width) / +(this.height)));
    } else {
      result = 0;
    }
    return result;
  };

  function Viewport_get_Bounds () {
    return new ($T01())(this.x, this.y, this.width, this.height);
  };

  function Viewport_get_Height () {
    return this.height;
  };

  function Viewport_get_MaxDepth () {
    return this.maxDepth;
  };

  function Viewport_get_MinDepth () {
    return this.minDepth;
  };

  function Viewport_get_TitleSafeArea () {
    return this.get_Bounds();
  };

  function Viewport_get_Width () {
    return this.width;
  };

  function Viewport_get_X () {
    return this.x;
  };

  function Viewport_get_Y () {
    return this.y;
  };

  function Viewport_Project (source, projection, view, world) {
    var matrix = $S00().CallStatic($T04(), "Multiply", null, $S00().CallStatic($T04(), "Multiply", null, world.MemberwiseClone(), view).MemberwiseClone(), projection);
    var vector = $S01().CallStatic($T03(), "Transform", null, source.MemberwiseClone(), matrix.MemberwiseClone());
    var a = (((+source.X * +matrix.M14) + (+source.Y * +matrix.M24)) + (+source.Z * +matrix.M34)) + +matrix.M44;
    if (!$T05().WithinEpsilon(a, 1)) {
      vector.X = +((+vector.X / a));
      vector.Y = +((+vector.Y / a));
      vector.Z = +((+vector.Z / a));
    }
    vector.X = (((+vector.X + 1) * 0.5) * +(this.get_Width())) + +(this.get_X());
    vector.Y = (((-vector.Y + 1) * 0.5) * +(this.get_Height())) + +(this.get_Y());
    vector.Z = (+vector.Z * (+this.get_MaxDepth() - +this.get_MinDepth())) + +this.get_MinDepth();
    return vector;
  };

  function Viewport_set_Bounds (value) {
    this.x = (value.X | 0);
    this.y = (value.Y | 0);
    this.width = (value.Width | 0);
    this.height = (value.Height | 0);
  };

  function Viewport_set_Height (value) {
    this.height = (value | 0);
  };

  function Viewport_set_MaxDepth (value) {
    this.maxDepth = +value;
  };

  function Viewport_set_MinDepth (value) {
    this.minDepth = +value;
  };

  function Viewport_set_Width (value) {
    this.width = (value | 0);
  };

  function Viewport_set_X (value) {
    this.x = (value | 0);
  };

  function Viewport_set_Y (value) {
    this.y = (value | 0);
  };

  function Viewport_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["{X:", (this.x).toString(), " Y:", (this.y).toString(), " Width:", (this.width).toString(), " Height:", (this.height).toString(), " MinDepth:", (this.minDepth).toString(), " MaxDepth:", (this.maxDepth).toString(), "}"]));
  };

  function Viewport_Unproject (source, projection, view, world) {
    var matrix = $T04().Invert($S00().CallStatic($T04(), "Multiply", null, $S00().CallStatic($T04(), "Multiply", null, world.MemberwiseClone(), view).MemberwiseClone(), projection).MemberwiseClone());
    source.X = (+(((+source.X - +(this.get_X())) / +(this.get_Width()))) * 2) - 1;
    source.Y = -((+(((+source.Y - +(this.get_Y())) / +(this.get_Height()))) * 2) - 1);
    source.Z = +(((+source.Z - +this.get_MinDepth()) / (+this.get_MaxDepth() - +this.get_MinDepth())));
    var vector = $S01().CallStatic($T03(), "Transform", null, source.MemberwiseClone(), matrix.MemberwiseClone());
    var a = (((+source.X * +matrix.M14) + (+source.Y * +matrix.M24)) + (+source.Z * +matrix.M34)) + +matrix.M44;
    if (!$T05().WithinEpsilon(a, 1)) {
      vector.X = +((+vector.X / a));
      vector.Y = +((+vector.Y / a));
      vector.Z = +((+vector.Z / a));
    }
    return vector;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.Viewport", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      Viewport__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Viewport__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_AspectRatio", 
      JSIL.MethodSignature.Return($.Single), 
      Viewport_get_AspectRatio
    );

    $.Method({Static:false, Public:true }, "get_Bounds", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Viewport_get_Bounds
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      Viewport_get_Height
    );

    $.Method({Static:false, Public:true }, "get_MaxDepth", 
      JSIL.MethodSignature.Return($.Single), 
      Viewport_get_MaxDepth
    );

    $.Method({Static:false, Public:true }, "get_MinDepth", 
      JSIL.MethodSignature.Return($.Single), 
      Viewport_get_MinDepth
    );

    $.Method({Static:false, Public:true }, "get_TitleSafeArea", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Viewport_get_TitleSafeArea
    );

    $.Method({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      Viewport_get_Width
    );

    $.Method({Static:false, Public:true }, "get_X", 
      JSIL.MethodSignature.Return($.Int32), 
      Viewport_get_X
    );

    $.Method({Static:false, Public:true }, "get_Y", 
      JSIL.MethodSignature.Return($.Int32), 
      Viewport_get_Y
    );

    $.Method({Static:false, Public:true }, "Project", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")
        ]), 
      Viewport_Project
    );

    $.Method({Static:false, Public:true }, "set_Bounds", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Viewport_set_Bounds
    );

    $.Method({Static:false, Public:true }, "set_Height", 
      JSIL.MethodSignature.Action($.Int32), 
      Viewport_set_Height
    );

    $.Method({Static:false, Public:true }, "set_MaxDepth", 
      JSIL.MethodSignature.Action($.Single), 
      Viewport_set_MaxDepth
    );

    $.Method({Static:false, Public:true }, "set_MinDepth", 
      JSIL.MethodSignature.Action($.Single), 
      Viewport_set_MinDepth
    );

    $.Method({Static:false, Public:true }, "set_Width", 
      JSIL.MethodSignature.Action($.Int32), 
      Viewport_set_Width
    );

    $.Method({Static:false, Public:true }, "set_X", 
      JSIL.MethodSignature.Action($.Int32), 
      Viewport_set_X
    );

    $.Method({Static:false, Public:true }, "set_Y", 
      JSIL.MethodSignature.Action($.Int32), 
      Viewport_set_Y
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Viewport_toString
    );

    $.Method({Static:false, Public:true }, "Unproject", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")
        ]), 
      Viewport_Unproject
    );

    $.Field({Static:false, Public:false}, "x", $.Int32); 
    $.Field({Static:false, Public:false}, "y", $.Int32); 
    $.Field({Static:false, Public:false}, "width", $.Int32); 
    $.Field({Static:false, Public:false}, "height", $.Int32); 
    $.Field({Static:false, Public:false}, "minDepth", $.Single); 
    $.Field({Static:false, Public:false}, "maxDepth", $.Single); 
    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "MaxDepth", $.Single);

    $.Property({Static:false, Public:true }, "MinDepth", $.Single);

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Y", $.Int32);

    $.Property({Static:false, Public:true }, "X", $.Int32);

    $.Property({Static:false, Public:true }, "AspectRatio", $.Single);

    $.Property({Static:false, Public:true }, "Bounds", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true }, "TitleSafeArea", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.DisplayMode */ 

(function DisplayMode$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };

  function DisplayMode__ctor (width, height, format) {
    this.DisplayMode$Width$value = (width | 0);
    this.DisplayMode$Height$value = (height | 0);
    this.DisplayMode$Format$value = format;
  };

  function DisplayMode_Object_Equals (obj) {
    return $thisType.op_Equality($thisType.$As(obj), this);
  };

  function DisplayMode_get_AspectRatio () {
    return +((+(this.DisplayMode$Width$value) / +(this.DisplayMode$Height$value)));
  };

  function DisplayMode_get_Format () {
    return this.DisplayMode$Format$value;
  };

  function DisplayMode_get_Height () {
    return this.DisplayMode$Height$value;
  };

  function DisplayMode_get_TitleSafeArea () {
    return new ($T03())(0, 0, this.DisplayMode$Width$value, this.DisplayMode$Height$value);
  };

  function DisplayMode_get_Width () {
    return this.DisplayMode$Width$value;
  };

  function DisplayMode_GetHashCode () {
    return ((((this.DisplayMode$Width$value).GetHashCode() | 0) ^ ((this.DisplayMode$Height$value).GetHashCode() | 0)) ^ ((this.DisplayMode$Format$value).GetHashCode() | 0));
  };

  function DisplayMode_op_Equality (left, right) {
    return ((left === right) || ((left !== null) && 
        (right !== null) && 
        !((left.DisplayMode$Format$value !== right.DisplayMode$Format$value) || 
          ((left.DisplayMode$Height$value | 0) !== (right.DisplayMode$Height$value | 0))) && 
        ((left.DisplayMode$Width$value | 0) === (right.DisplayMode$Width$value | 0))));
  };

  function DisplayMode_op_Inequality (left, right) {
    return !$thisType.op_Equality(left, right);
  };

  function DisplayMode_set_Format (value) {
    this.DisplayMode$Format$value = value;
  };

  function DisplayMode_set_Height (value) {
    this.DisplayMode$Height$value = (value | 0);
  };

  function DisplayMode_set_Width (value) {
    this.DisplayMode$Width$value = (value | 0);
  };

  function DisplayMode_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T04(), ["{{Width:", (this.DisplayMode$Width$value).toString(), " Height:", (this.DisplayMode$Height$value).toString(), " Format:", (this.DisplayMode$Format$value).toString(), "}}"]));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.DisplayMode", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
        ]), 
      DisplayMode__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      DisplayMode_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_AspectRatio", 
      JSIL.MethodSignature.Return($.Single), 
      DisplayMode_get_AspectRatio
    );

    $.Method({Static:false, Public:true }, "get_Format", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")), 
      DisplayMode_get_Format
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      DisplayMode_get_Height
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TitleSafeArea", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      DisplayMode_get_TitleSafeArea
    );

    $.Method({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      DisplayMode_get_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      DisplayMode_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      DisplayMode_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      DisplayMode_op_Inequality
    );

    $.Method({Static:false, Public:false}, "set_Format", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")), 
      DisplayMode_set_Format
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Height", 
      JSIL.MethodSignature.Action($.Int32), 
      DisplayMode_set_Height
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Width", 
      JSIL.MethodSignature.Action($.Int32), 
      DisplayMode_set_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      DisplayMode_toString
    );

    $.Field({Static:false, Public:false}, "DisplayMode$Format$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DisplayMode$Height$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DisplayMode$Width$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "AspectRatio", $.Single);

    $.Property({Static:false, Public:true }, "Format", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"));

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "TitleSafeArea", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.DisplayModeCollection */ 

(function DisplayModeCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.DisplayMode))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DisplayMode)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode")]), null))) ();
  };

  function DisplayModeCollection__ctor (setmodes) {
    this.modes = setmodes;
  };

  function DisplayModeCollection_get_Item (format) {
    var $temp00;
    var list = $S00().Construct();

    for (var a$0 = this.modes._items, i$0 = 0, l$0 = (this.modes._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var mode = a$0[i$0];
      if (mode.DisplayMode$Format$value === format) {
        list.Add(mode);
      }
    }
    return list;
  };

  function DisplayModeCollection_GetEnumerator () {
    return $T00().prototype.GetEnumerator.call(this.modes);
  };

  function DisplayModeCollection_System_Collections_IEnumerable_GetEnumerator () {
    return $T00().prototype.GetEnumerator.call(this.modes);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.DisplayModeCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode")])), 
      DisplayModeCollection__ctor
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode")]), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")]), 
      DisplayModeCollection_get_Item
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode")])), 
      DisplayModeCollection_GetEnumerator
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      DisplayModeCollection_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "modes", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode")])); 
    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum Microsoft.Xna.Framework.Graphics.ClearOptions */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.ClearOptions", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Target: 1, 
    DepthBuffer: 2, 
    Stencil: 4, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Normal: 0, 
    Lost: 1, 
    NotReset: 2, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.GraphicsProfile */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.GraphicsProfile", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    HiDef: 0, 
    Reach: 1, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.SpriteSortMode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.SpriteSortMode", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Deferred: 0, 
    Immediate: 1, 
    Texture: 2, 
    BackToFront: 3, 
    FrontToBack: 4, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.SurfaceFormat */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.SurfaceFormat", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Color: 0, 
    Bgr565: 1, 
    Bgra5551: 2, 
    Bgra4444: 3, 
    Dxt1: 4, 
    Dxt3: 5, 
    Dxt5: 6, 
    NormalizedByte2: 7, 
    NormalizedByte4: 8, 
    Rgba1010102: 9, 
    Rg32: 10, 
    Rgba64: 11, 
    Alpha8: 12, 
    Single: 13, 
    Vector2: 14, 
    Vector4: 15, 
    HalfSingle: 16, 
    HalfVector2: 17, 
    HalfVector4: 18, 
    HdrBlendable: 19, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.RenderTargetUsage */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.RenderTargetUsage", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    DiscardContents: 0, 
    PreserveContents: 1, 
    PlatformContents: 2, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.SetDataOptions */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.SetDataOptions", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Discard: 1, 
    NoOverwrite: 2, 
  }
);

/* class Microsoft.Xna.Framework.Content.SpriteFontReader */ 

(function SpriteFontReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.SpriteFont))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Rectangle))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Char))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", ["!!0"], ["T"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };

  function SpriteFontReader__ctor () {
    $T01().prototype._ctor.call(this);
  };

  function SpriteFontReader_Normalize (fileName) {
    return $T02().Normalize(fileName, $thisType.supportedExtensions);
  };

  function SpriteFontReader_Read$00 (input, existingInstance) {
    if (existingInstance !== null) {
      $S00().CallVirtual("ReadObject$b1", [$asm00.Microsoft.Xna.Framework.Graphics.Texture2D], input, existingInstance.textureValue);
      $S01().CallVirtual("ReadObject$b1", [$asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Rectangle)], input);
      $S01().CallVirtual("ReadObject$b1", [$asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Rectangle)], input);
      $S02().CallVirtual("ReadObject$b1", [$asm01.System.Collections.Generic.List$b1.Of($asm01.System.Char)], input);
      input.ReadInt32();
      input.ReadSingle();
      $S03().CallVirtual("ReadObject$b1", [$asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Vector3)], input);
      if (input.ReadBoolean()) {
        input.ReadChar();
      }
      var result = existingInstance;
    } else {
      var texture = $S04().CallVirtual("ReadObject$b1", [$asm00.Microsoft.Xna.Framework.Graphics.Texture2D], input);
      var glyphs = $S01().CallVirtual("ReadObject$b1", [$asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Rectangle)], input);
      var cropping = $S01().CallVirtual("ReadObject$b1", [$asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Rectangle)], input);
      var charMap = $S02().CallVirtual("ReadObject$b1", [$asm01.System.Collections.Generic.List$b1.Of($asm01.System.Char)], input);
      var lineSpacing = (input.ReadInt32() | 0);
      var spacing = +input.ReadSingle();
      var kerning = $S03().CallVirtual("ReadObject$b1", [$asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Vector3)], input);
      var defaultCharacter = null;
      if (input.ReadBoolean()) {
        defaultCharacter = ((input.ReadChar()).charCodeAt(0) | 0);
      }
      result = new ($T04())(texture, glyphs, cropping, charMap, lineSpacing, spacing, kerning, defaultCharacter);
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")]), 
      Name: "Microsoft.Xna.Framework.Content.SpriteFontReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      SpriteFontReader__ctor
    );

    $.Method({Static:true , Public:false}, "Normalize", 
      new JSIL.MethodSignature($.String, [$.String]), 
      SpriteFontReader_Normalize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")]), 
      SpriteFontReader_Read$00
    );

    $.Field({Static:true , Public:false}, "supportedExtensions", $jsilcore.TypeRef("System.Array", [$.String])); 
    function SpriteFontReader__cctor () {
      $thisType.supportedExtensions = JSIL.Array.New($T00(), [".spritefont"]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SpriteFontReader__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.SongReader */ 

(function SongReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Media.Song))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Song)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Utilities.FileHelpers)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentLoadException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32")]))) ();
  };

  function SongReader__ctor () {
    $T01().prototype._ctor.call(this);
  };

  function SongReader_Normalize (fileName) {
    return $T02().Normalize(fileName, $thisType.supportedExtensions);
  };

  function SongReader_Read$00 (input, existingInstance) {
    var path = $T05().ResolveRelativePath(
      $T06().Combine(
        (input.get_ContentManager()).get_RootDirectoryFullPath(), 
        input.get_AssetName()
      ), 
      input.ReadString()
    );
    path = $thisType.Normalize(path.substr(0, (((path.length | 0) - 4) | 0)));
    if ($T00().IsNullOrEmpty(path)) {
      throw $S00().Construct();
    }
    var durationMs = (input.ReadInt32() | 0);
    return $S01().Construct(path, durationMs);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")]), 
      Name: "Microsoft.Xna.Framework.Content.SongReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SongReader__ctor
    );

    $.Method({Static:true , Public:false}, "Normalize", 
      new JSIL.MethodSignature($.String, [$.String]), 
      SongReader_Normalize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")]), 
      SongReader_Read$00
    );

    $.Field({Static:true , Public:false}, "supportedExtensions", $jsilcore.TypeRef("System.Array", [$.String])); 
    function SongReader__cctor () {
      $thisType.supportedExtensions = JSIL.Array.New($T00(), [".flac", ".ogg"]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SongReader__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.SoundEffectReader */ 

(function SoundEffectReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Audio.SoundEffect))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.IO.SeekOrigin)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), [
        $asm01.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), 
        $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.UInt32"), 
        $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.UInt32"), 
        $asm01.TypeRef("System.Boolean"), $asm01.TypeRef("System.UInt32")
      ]))) ();
  };

  function SoundEffectReader__ctor () {
    $T01().prototype._ctor.call(this);
  };

  function SoundEffectReader_Normalize (fileName) {
    return $T02().Normalize(fileName, $thisType.supportedExtensions);
  };

  function SoundEffectReader_Read$00 (input, existingInstance) {
    var formatLength = (input.ReadUInt32() >>> 0);
    var format = (input.ReadUInt16() | 0);
    var channels = (input.ReadUInt16() | 0);
    var sampleRate = (input.ReadUInt32() >>> 0);
    input.ReadUInt32();
    var blockAlign = (input.ReadUInt16() | 0);
    var bitDepth = (input.ReadUInt16() | 0);
    input.ReadUInt16();
    (input.get_BaseStream()).Seek(($T0A().FromNumber(((formatLength - 18) >>> 0))).ToInt64(), $T0B().Current);
    var data = input.ReadBytes(input.ReadInt32());
    var loopStart = (input.ReadUInt32() >>> 0);
    var loopLength = (input.ReadUInt32() >>> 0);
    input.ReadUInt32();
    return $S00().Construct(input.get_AssetName(), data, sampleRate, channels, loopStart, loopLength, (format === 2), (
        (format === 2)
           ? (Math.imul(((((blockAlign / channels) & 0xFFFF) - 6) >>> 0), 2) >>> 0)
           : ((bitDepth / 16) >>> 0))
    );
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")]), 
      Name: "Microsoft.Xna.Framework.Content.SoundEffectReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SoundEffectReader__ctor
    );

    $.Method({Static:true , Public:false}, "Normalize", 
      new JSIL.MethodSignature($.String, [$.String]), 
      SoundEffectReader_Normalize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")]), 
      SoundEffectReader_Read$00
    );

    $.Field({Static:true , Public:false}, "supportedExtensions", $jsilcore.TypeRef("System.Array", [$.String])); 
    function SoundEffectReader__cctor () {
      $thisType.supportedExtensions = JSIL.Array.New($T00(), [".wav"]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SoundEffectReader__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ListReader`1 */ 

(function ListReader$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReaderManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"]))) ();
  };

  function ListReader$b1__ctor () {
    $asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Collections.Generic.List$b1.Of($thisType.T.get(this))).prototype._ctor.call(this);
  };

  function ListReader$b1_Initialize (manager) {
    this.elementReader = manager.GetTypeReader($thisType.T.get(this));
  };

  function ListReader$b1_Read$00 (input, existingInstance) {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$thisType.T.get(this)]), [$asm01.System.Int32]);
    var count = (input.ReadInt32() | 0);
    var list = existingInstance;
    if (list === null) {
      list = $s00.Construct(count);
    }

    for (var i = 0; i < count; i = ((i + 1) | 0)) {
      if ($thisType.T.get(this).get_IsValueType()) {
        list.Add(JSIL.CloneParameter($thisType.T.get(this), $S00().CallVirtual("ReadObject$b1", [$thisType.T.get(this)], input, this.elementReader)));
      } else {
        var readerType = (input.Read7BitEncodedInt() | 0);
        list.Add(JSIL.CloneParameter($thisType.T.get(this), (
              (readerType > 0)
                 ? $S00().CallVirtual("ReadObject$b1", [$thisType.T.get(this)], input, input.get_TypeReaders()[((readerType - 1) | 0)])
                 : (
                  $thisType.T.get(this).IsValueType
                     ? JSIL.CreateInstanceOfType($thisType.T.get(this))
                     : null)
            )
          ));
      }
    }
    return list;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ListReader`1")])]), 
      Name: "Microsoft.Xna.Framework.Content.ListReader`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ListReader$b1__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")), 
      ListReader$b1_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("T")]), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("T")])]), 
      ListReader$b1_Read$00
    );

    $.Field({Static:false, Public:false}, "elementReader", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.CharReader */ 

(function CharReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Char))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function CharReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function CharReader_Read$00 (input, existingInstance) {
    return input.ReadChar();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Char")]), 
      Name: "Microsoft.Xna.Framework.Content.CharReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      CharReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Char, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Char]), 
      CharReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.StringReader */ 

(function StringReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function StringReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function StringReader_Read$00 (input, existingInstance) {
    return input.ReadString();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.String")]), 
      Name: "Microsoft.Xna.Framework.Content.StringReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      StringReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.String]), 
      StringReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.RectangleReader */ 

(function RectangleReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Rectangle))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function RectangleReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function RectangleReader_Read$00 (input, existingInstance) {
    var left = (input.ReadInt32() | 0);
    var top = (input.ReadInt32() | 0);
    var width = (input.ReadInt32() | 0);
    var height = (input.ReadInt32() | 0);
    return new ($T02())(left, top, width, height);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Name: "Microsoft.Xna.Framework.Content.RectangleReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      RectangleReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      RectangleReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Vector3Reader */ 

(function Vector3Reader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };

  function Vector3Reader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Vector3Reader_Read$00 (input, existingInstance) {
    return input.ReadVector3();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      Name: "Microsoft.Xna.Framework.Content.Vector3Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Vector3Reader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      Vector3Reader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.PlaneReader */ 

(function PlaneReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Plane))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Plane)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function PlaneReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function PlaneReader_Read$00 (input, existingInstance) {
    existingInstance.Normal = input.ReadVector3().MemberwiseClone();
    existingInstance.D = +input.ReadSingle();
    return existingInstance;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), 
      Name: "Microsoft.Xna.Framework.Content.PlaneReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      PlaneReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Plane"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Plane")]), 
      PlaneReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.QuaternionReader */ 

(function QuaternionReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Quaternion))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Quaternion)) ();
  };

  function QuaternionReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function QuaternionReader_Read$00 (input, existingInstance) {
    return input.ReadQuaternion();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
      Name: "Microsoft.Xna.Framework.Content.QuaternionReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      QuaternionReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Quaternion"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
      QuaternionReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Vector4Reader */ 

(function Vector4Reader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Vector4))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };

  function Vector4Reader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Vector4Reader_Read$00 (input, existingInstance) {
    return input.ReadVector4();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")]), 
      Name: "Microsoft.Xna.Framework.Content.Vector4Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Vector4Reader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector4")]), 
      Vector4Reader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Input.Touch");
/* enum Microsoft.Xna.Framework.Input.Touch.GestureType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.Touch.GestureType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Tap: 1, 
    DragComplete: 2, 
    Flick: 4, 
    FreeDrag: 8, 
    Hold: 16, 
    HorizontalDrag: 32, 
    Pinch: 64, 
    PinchComplete: 128, 
    DoubleTap: 256, 
    VerticalDrag: 512, 
  }
);

/* struct Microsoft.Xna.Framework.Input.Touch.TouchCollection */ 

(function TouchCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocation)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocation))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchPanel)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchCollection_Enumerator)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };

  function TouchCollection__ctor (touches) {
    if (touches === null) {
      throw $S00().Construct("touches");
    }
    this.collection = touches;
  };

  function TouchCollection_Add (item) {
    throw $S01().Construct();
  };

  function TouchCollection_Clear () {
    throw $S01().Construct();
  };

  function TouchCollection_Contains (item) {
    var array = this.get_Collection();

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var location = array[i].MemberwiseClone();
      if ($T00().op_Equality(item.MemberwiseClone(), location.MemberwiseClone())) {
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function TouchCollection_CopyTo (array, arrayIndex) {
    JSIL.Array.CopyTo(this.get_Collection(), array, arrayIndex);
  };

  function TouchCollection_FindById (id, /* ref */ touchLocation) {
    var array = this.get_Collection();

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var location = array[i].MemberwiseClone();
      if ((location.get_Id() | 0) === (id | 0)) {
        touchLocation.set(location);
        var result = true;
        return result;
      }
    }
    touchLocation.set(new ($T00())());
    result = false;
    return result;
  };

  function TouchCollection_get_Collection () {
    return JSIL.Coalesce(this.collection, $thisType.EmptyLocationArray);
  };

  function TouchCollection_get_Count () {
    return this.get_Collection().length;
  };

  function TouchCollection_get_IsConnected () {
    return $T07().GetCapabilities().get_IsConnected();
  };

  function TouchCollection_get_IsReadOnly () {
    return true;
  };

  function TouchCollection_get_Item (index) {
    return this.get_Collection()[index];
  };

  function TouchCollection_GetEnumerator () {
    return new ($T08())(this);
  };

  function TouchCollection_IndexOf (item) {

    for (var i = 0; i < (this.get_Collection().length | 0); i = ((i + 1) | 0)) {
      if ($T00().op_Equality(item.MemberwiseClone(), this.get_Collection()[i].MemberwiseClone())) {
        var result = i;
        return result;
      }
    }
    result = -1;
    return result;
  };

  function TouchCollection_Insert (index, item) {
    throw $S01().Construct();
  };

  function TouchCollection_Remove (item) {
    throw $S01().Construct();
  };

  function TouchCollection_RemoveAt (index) {
    throw $S01().Construct();
  };

  function TouchCollection_set_Item (index, value) {
    throw $S01().Construct();
  };

  function TouchCollection_System_Collections_Generic_IEnumerable$lMicrosoft_Xna_Framework_Input_Touch_TouchLocation$g_GetEnumerator () {
    return new ($T08())(this);
  };

  function TouchCollection_System_Collections_IEnumerable_GetEnumerator () {
    return new ($T08())(this);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.TouchCollection", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])), 
      TouchCollection__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")), 
      TouchCollection_Add
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      TouchCollection_Clear
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      TouchCollection_Contains
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), $.Int32]), 
      TouchCollection_CopyTo
    );

    $.Method({Static:false, Public:true }, "FindById", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])]), 
      TouchCollection_FindById
    );

    $.Method({Static:false, Public:false}, "get_Collection", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])), 
      TouchCollection_get_Collection
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchCollection_get_Count
    );

    $.Method({Static:false, Public:true }, "get_IsConnected", 
      JSIL.MethodSignature.Return($.Boolean), 
      TouchCollection_get_IsConnected
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      TouchCollection_get_IsReadOnly
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation"), [$.Int32]), 
      TouchCollection_get_Item
    );

    $.Method({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection+Enumerator")), 
      TouchCollection_GetEnumerator
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      TouchCollection_IndexOf
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      TouchCollection_Insert
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      TouchCollection_Remove
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32), 
      TouchCollection_RemoveAt
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      TouchCollection_set_Item
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.Xna.Framework.Input.Touch.TouchLocation$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])), 
      TouchCollection_System_Collections_Generic_IEnumerable$lMicrosoft_Xna_Framework_Input_Touch_TouchLocation$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      TouchCollection_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "collection", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyLocationArray", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), function ($pi) {
        return JSIL.Array.New($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocation, 0);
      }); 
    function TouchCollection__cctor () {
      $thisType.Empty = new $thisType();
      $thisType.Empty = new $thisType(JSIL.Array.New($T00(), 0));
      $thisType.EmptyLocationArray = JSIL.Array.New($T00(), 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TouchCollection__cctor
    );

    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation"));

    $.Property({Static:false, Public:false}, "Collection", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct Microsoft.Xna.Framework.Input.Touch.TouchCollection+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchCollection)) ();
  };

  function Enumerator__ctor (collection) {
    this.collection = collection.MemberwiseClone();
    this.position = -1;
  };

  function Enumerator_Dispose () {
  };

  function Enumerator_get_Current () {
    return $T00().prototype.get_Item.call(this.collection, this.position);
  };

  function Enumerator_MoveNext () {
    this.position = (((this.position | 0) + 1) | 0);
    return ((this.position | 0) < ($T00().prototype.get_Count.call(this.collection) | 0));
  };

  function Enumerator_Reset () {
    this.position = -1;
  };

  function Enumerator_System_Collections_IEnumerator_get_Current () {
    return $T00().prototype.get_Item.call(this.collection, this.position);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.TouchCollection+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection")), 
      Enumerator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Enumerator_Dispose
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")), 
      Enumerator_get_Current
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      Enumerator_MoveNext
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void, 
      Enumerator_Reset
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      Enumerator_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false, ReadOnly:true }, "collection", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection")); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      /* 1 */ $asm01.TypeRef("System.IDisposable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.Touch.TouchLocation */ 

(function TouchLocation$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocationState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.System.Diagnostics.Debug)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("System.Single")]))) ();
  };

  function TouchLocation__ctor$00 (id, state, position) {
    $thisType.prototype._ctor.call(this, 
      id, 
      state, 
      position.MemberwiseClone(), 
      $T01().Invalid, 
      $T02().get_Zero().MemberwiseClone(), 
      $T03().Zero.MemberwiseClone()
    );
  };

  function TouchLocation__ctor$01 (id, state, position, previousState, previousPosition) {
    $thisType.prototype._ctor.call(this, 
      id, 
      state, 
      position.MemberwiseClone(), 
      previousState, 
      previousPosition.MemberwiseClone(), 
      $T03().Zero.MemberwiseClone()
    );
  };

  function TouchLocation__ctor$02 (id, state, position, timestamp) {
    $thisType.prototype._ctor.call(this, 
      id, 
      state, 
      position.MemberwiseClone(), 
      $T01().Invalid, 
      $T02().get_Zero().MemberwiseClone(), 
      timestamp.MemberwiseClone()
    );
  };

  function TouchLocation__ctor$03 (id, state, position, previousState, previousPosition, timestamp) {
    this.id = (id | 0);
    this.state = state;
    this.position = position.MemberwiseClone();
    this.previousState = previousState;
    this.previousPosition = previousPosition.MemberwiseClone();
    this.timestamp = timestamp.MemberwiseClone();
    this.velocity = $T02().get_Zero().MemberwiseClone();
    if (state === $T01().Pressed) {
      this.pressPosition = this.position.MemberwiseClone();
      this.pressTimestamp = this.timestamp.MemberwiseClone();
    } else {
      this.pressPosition = $T02().get_Zero().MemberwiseClone();
      this.pressTimestamp = $T03().Zero.MemberwiseClone();
    }
    this.SameFrameReleased = false;
  };

  function TouchLocation_AgeState () {
    $T04().Assert(this.state === $T01().Pressed, "Can only age the state of touches that are in the Pressed State");
    this.previousState = this.state;
    this.previousPosition = this.position.MemberwiseClone();
    if (this.SameFrameReleased) {
      this.state = $T01().Released;
    } else {
      this.state = $T01().Moved;
    }
  };

  function TouchLocation_AsMovedState () {
    var touch = this;
    touch.previousState = touch.state;
    touch.previousPosition = touch.position.MemberwiseClone();
    touch.state = $T01().Moved;
    return touch;
  };

  function TouchLocation_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function TouchLocation_Equals$04 (other) {
    return (!(!((this.id === other.id)) || 
        !(this.position).Equals(other.position.MemberwiseClone())) && (this.previousPosition).Equals(other.previousPosition.MemberwiseClone()));
  };

  function TouchLocation_get_Id () {
    return this.id;
  };

  function TouchLocation_get_Position () {
    return this.position;
  };

  function TouchLocation_get_PressPosition () {
    return this.pressPosition;
  };

  function TouchLocation_get_PressTimestamp () {
    return this.pressTimestamp;
  };

  function TouchLocation_get_State () {
    return this.state;
  };

  function TouchLocation_get_Timestamp () {
    return this.timestamp;
  };

  function TouchLocation_get_Velocity () {
    return this.velocity;
  };

  function TouchLocation_GetHashCode () {
    return this.id;
  };

  function TouchLocation_op_Equality (value1, value2) {
    return (!(((value1.id | 0) !== (value2.id | 0)) || 
        (value1.state !== value2.state) || 
        !$T02().op_Equality(value1.position.MemberwiseClone(), value2.position.MemberwiseClone()) || 
        (value1.previousState !== value2.previousState)) && $T02().op_Equality(value1.previousPosition.MemberwiseClone(), value2.previousPosition.MemberwiseClone()));
  };

  function TouchLocation_op_Inequality (value1, value2) {
    return (((value1.id | 0) !== (value2.id | 0)) || 
      (value1.state !== value2.state) || 
      $T02().op_Inequality(value1.position.MemberwiseClone(), value2.position.MemberwiseClone()) || 
      (value1.previousState !== value2.previousState) || $T02().op_Inequality(value1.previousPosition.MemberwiseClone(), value2.previousPosition.MemberwiseClone()));
  };

  function TouchLocation_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["Touch id:", (this.id).toString(), " state:", (this.state).toString(), " position:", (this.position).toString(), " prevState:", (this.previousState).toString(), " prevPosition:", (this.previousPosition).toString()]));
  };

  function TouchLocation_TryGetPreviousLocation (/* ref */ aPreviousLocation) {
    if (this.previousState === $T01().Invalid) {
      aPreviousLocation.get().id = -1;
      aPreviousLocation.get().state = $T01().Invalid;
      aPreviousLocation.get().position = $T02().get_Zero().MemberwiseClone();
      aPreviousLocation.get().previousState = $T01().Invalid;
      aPreviousLocation.get().previousPosition = $T02().get_Zero().MemberwiseClone();
      aPreviousLocation.get().timestamp = $T03().Zero.MemberwiseClone();
      aPreviousLocation.get().pressPosition = $T02().get_Zero().MemberwiseClone();
      aPreviousLocation.get().pressTimestamp = $T03().Zero.MemberwiseClone();
      aPreviousLocation.get().velocity = $T02().get_Zero().MemberwiseClone();
      aPreviousLocation.get().SameFrameReleased = false;
      var result = false;
    } else {
      aPreviousLocation.get().id = (this.id | 0);
      aPreviousLocation.get().state = this.previousState;
      aPreviousLocation.get().position = this.previousPosition.MemberwiseClone();
      aPreviousLocation.get().previousState = $T01().Invalid;
      aPreviousLocation.get().previousPosition = $T02().get_Zero().MemberwiseClone();
      aPreviousLocation.get().timestamp = this.timestamp.MemberwiseClone();
      aPreviousLocation.get().pressPosition = this.pressPosition.MemberwiseClone();
      aPreviousLocation.get().pressTimestamp = this.pressTimestamp.MemberwiseClone();
      aPreviousLocation.get().velocity = this.velocity.MemberwiseClone();
      aPreviousLocation.get().SameFrameReleased = this.SameFrameReleased;
      result = true;
    }
    return result;
  };

  function TouchLocation_UpdateState (touchEvent) {
    $T04().Assert((this.get_Id() | 0) === (touchEvent.get_Id() | 0), "The touch event must have the same Id!");
    $T04().Assert(this.get_State() !== $T01().Released, "We shouldn't be changing state on a released location!");
    $T04().Assert((touchEvent.get_State() === $T01().Moved) || (touchEvent.get_State() === $T01().Released), "The new touch event should be a move or a release!");
    $T04().Assert($T03().op_GreaterThanOrEqual(touchEvent.get_Timestamp().MemberwiseClone(), this.timestamp.MemberwiseClone()), "The touch event is older than our timestamp!");
    this.previousPosition = this.position.MemberwiseClone();
    this.previousState = this.state;
    this.position = touchEvent.position.MemberwiseClone();
    if (touchEvent.get_State() === $T01().Released) {
      this.state = touchEvent.state;
    }
    var delta = $T02().op_Subtraction(this.position.MemberwiseClone(), this.previousPosition);
    var elapsed = $T03().op_Subtraction(touchEvent.get_Timestamp(), this.timestamp).MemberwiseClone();
    if ($T03().op_GreaterThan(elapsed.MemberwiseClone(), $T03().Zero.MemberwiseClone())) {
      var vel = $S00().CallStatic($T02(), "op_Division", null, delta.MemberwiseClone(), Math.fround(elapsed.get_TotalSeconds()));
      this.velocity = $T02().op_Addition(this.velocity.MemberwiseClone(), $S01().CallStatic($T02(), "op_Multiply", null, $T02().op_Subtraction(vel.MemberwiseClone(), this.velocity).MemberwiseClone(), 0.45));
    }
    if (!((this.previousState !== $T01().Pressed) || 
        (this.state !== $T01().Released) || !$T03().op_Equality(elapsed.MemberwiseClone(), $T03().Zero.MemberwiseClone()))) {
      this.SameFrameReleased = true;
      this.state = $T01().Pressed;
    }
    this.timestamp = touchEvent.get_Timestamp().MemberwiseClone();
    return ((this.state !== this.previousState) || (+delta.LengthSquared() > 0.001));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.TouchLocation", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      TouchLocation__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      TouchLocation__ctor$01
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("System.TimeSpan")
        ]), 
      TouchLocation__ctor$02
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("System.TimeSpan")
        ]), 
      TouchLocation__ctor$03
    );

    $.Method({Static:false, Public:false}, "AgeState", 
      JSIL.MethodSignature.Void, 
      TouchLocation_AgeState
    );

    $.Method({Static:false, Public:false}, "AsMovedState", 
      JSIL.MethodSignature.Return($.Type), 
      TouchLocation_AsMovedState
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      TouchLocation_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      TouchLocation_Equals$04
    );

    $.Method({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchLocation_get_Id
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      TouchLocation_get_Position
    );

    $.Method({Static:false, Public:false}, "get_PressPosition", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      TouchLocation_get_PressPosition
    );

    $.Method({Static:false, Public:false}, "get_PressTimestamp", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      TouchLocation_get_PressTimestamp
    );

    $.Method({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState")), 
      TouchLocation_get_State
    );

    $.Method({Static:false, Public:false}, "get_Timestamp", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      TouchLocation_get_Timestamp
    );

    $.Method({Static:false, Public:false}, "get_Velocity", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      TouchLocation_get_Velocity
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchLocation_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      TouchLocation_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      TouchLocation_op_Inequality
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      TouchLocation_toString
    );

    $.Method({Static:false, Public:true }, "TryGetPreviousLocation", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      TouchLocation_TryGetPreviousLocation
    );

    $.Method({Static:false, Public:false}, "UpdateState", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      TouchLocation_UpdateState
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Invalid", $.Type); 
    $.Field({Static:false, Public:false}, "SameFrameReleased", $.Boolean); 
    $.Field({Static:false, Public:false}, "id", $.Int32); 
    $.Field({Static:false, Public:false}, "position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "previousPosition", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "state", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState")); 
    $.Field({Static:false, Public:false}, "previousState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState")); 
    $.Field({Static:false, Public:false}, "velocity", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "pressPosition", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "pressTimestamp", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "timestamp", $asm01.TypeRef("System.TimeSpan")); 
    function TouchLocation__cctor () {
      $thisType.Invalid = new $thisType();
      $thisType.Invalid = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TouchLocation__cctor
    );

    $.Property({Static:false, Public:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "State", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"));

    $.Property({Static:false, Public:false}, "PressPosition", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:false}, "PressTimestamp", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "Timestamp", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "Velocity", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Input.Touch.TouchLocationState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.Touch.TouchLocationState", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Invalid: 0, 
    Moved: 1, 
    Pressed: 2, 
    Released: 3, 
  }
);

/* struct Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities */ 

(function TouchPanelCapabilities$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GamePlatform)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };

  function TouchPanelCapabilities_get_IsConnected () {
    return this.isConnected;
  };

  function TouchPanelCapabilities_get_MaximumTouchCount () {
    return this.maximumTouchCount;
  };

  function TouchPanelCapabilities_Initialize () {
    if (!this.initialized) {
      this.initialized = true;
      this.isConnected = $T01().get_Instance().Platform.HasTouch();
      this.maximumTouchCount = 8;
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, "get_IsConnected", 
      JSIL.MethodSignature.Return($.Boolean), 
      TouchPanelCapabilities_get_IsConnected
    );

    $.Method({Static:false, Public:true }, "get_MaximumTouchCount", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchPanelCapabilities_get_MaximumTouchCount
    );

    $.Method({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void, 
      TouchPanelCapabilities_Initialize
    );

    $.Field({Static:false, Public:false}, "isConnected", $.Boolean); 
    $.Field({Static:false, Public:false}, "maximumTouchCount", $.Int32); 
    $.Field({Static:false, Public:false}, "initialized", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "MaximumTouchCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.Touch.TouchPanel */ 

(function TouchPanel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocationState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchPanelState)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm03.System.Collections.Generic.Queue$b1.Of($asm00.Microsoft.Xna.Framework.Input.Touch.GestureSample))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.DisplayOrientation)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.GestureType)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };

  function TouchPanel_AddEvent$00 (id, state, position) {
    $thisType.AddEvent(id, state, position.MemberwiseClone(), false);
  };

  function TouchPanel_AddEvent$01 (id, state, position, isMouse) {
    $thisType.PrimaryWindow.TouchPanelState.AddEvent(id, state, position.MemberwiseClone(), isMouse);
  };

  function TouchPanel_get_DisplayHeight () {
    return $thisType.PrimaryWindow.TouchPanelState.get_DisplayHeight();
  };

  function TouchPanel_get_DisplayOrientation () {
    return $thisType.PrimaryWindow.TouchPanelState.TouchPanelState$DisplayOrientation$value;
  };

  function TouchPanel_get_DisplayWidth () {
    return $thisType.PrimaryWindow.TouchPanelState.get_DisplayWidth();
  };

  function TouchPanel_get_EnabledGestures () {
    return $thisType.PrimaryWindow.TouchPanelState.TouchPanelState$EnabledGestures$value;
  };

  function TouchPanel_get_EnableMouseGestures () {
    return $thisType.PrimaryWindow.TouchPanelState.TouchPanelState$EnableMouseGestures$value;
  };

  function TouchPanel_get_EnableMouseTouchPoint () {
    return $thisType.PrimaryWindow.TouchPanelState.TouchPanelState$EnableMouseTouchPoint$value;
  };

  function TouchPanel_get_IsGestureAvailable () {
    return $thisType.PrimaryWindow.TouchPanelState.get_IsGestureAvailable();
  };

  function TouchPanel_get_WindowHandle () {
    return $thisType.PrimaryWindow.TouchPanelState.TouchPanelState$WindowHandle$value;
  };

  function TouchPanel_GetCapabilities () {
    return $thisType.PrimaryWindow.TouchPanelState.GetCapabilities();
  };

  function TouchPanel_GetState$02 () {
    return $thisType.PrimaryWindow.TouchPanelState.GetState();
  };

  function TouchPanel_GetState$03 (window) {
    return window.TouchPanelState;
  };

  function TouchPanel_ReadGesture () {
    return $T06().prototype.Dequeue.call($thisType.PrimaryWindow.TouchPanelState.GestureList);
  };

  function TouchPanel_set_DisplayHeight (value) {
    $thisType.PrimaryWindow.TouchPanelState.set_DisplayHeight(value);
  };

  function TouchPanel_set_DisplayOrientation (value) {
    $thisType.PrimaryWindow.TouchPanelState.TouchPanelState$DisplayOrientation$value = value;
  };

  function TouchPanel_set_DisplayWidth (value) {
    $thisType.PrimaryWindow.TouchPanelState.set_DisplayWidth(value);
  };

  function TouchPanel_set_EnabledGestures (value) {
    $thisType.PrimaryWindow.TouchPanelState.TouchPanelState$EnabledGestures$value = value;
  };

  function TouchPanel_set_EnableMouseGestures (value) {
    $thisType.PrimaryWindow.TouchPanelState.TouchPanelState$EnableMouseGestures$value = value;
  };

  function TouchPanel_set_EnableMouseTouchPoint (value) {
    $thisType.PrimaryWindow.TouchPanelState.TouchPanelState$EnableMouseTouchPoint$value = value;
  };

  function TouchPanel_set_WindowHandle (value) {
    ($thisType.PrimaryWindow.TouchPanelState.TouchPanelState$WindowHandle$value = value.MemberwiseClone());
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.Touch.TouchPanel", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      TouchPanel_AddEvent$00
    );

    $.Method({Static:true , Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Boolean
        ]), 
      TouchPanel_AddEvent$01
    );

    $.Method({Static:true , Public:true }, "get_DisplayHeight", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchPanel_get_DisplayHeight
    );

    $.Method({Static:true , Public:true }, "get_DisplayOrientation", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")), 
      TouchPanel_get_DisplayOrientation
    );

    $.Method({Static:true , Public:true }, "get_DisplayWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchPanel_get_DisplayWidth
    );

    $.Method({Static:true , Public:true }, "get_EnabledGestures", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType")), 
      TouchPanel_get_EnabledGestures
    );

    $.Method({Static:true , Public:true }, "get_EnableMouseGestures", 
      JSIL.MethodSignature.Return($.Boolean), 
      TouchPanel_get_EnableMouseGestures
    );

    $.Method({Static:true , Public:true }, "get_EnableMouseTouchPoint", 
      JSIL.MethodSignature.Return($.Boolean), 
      TouchPanel_get_EnableMouseTouchPoint
    );

    $.Method({Static:true , Public:true }, "get_IsGestureAvailable", 
      JSIL.MethodSignature.Return($.Boolean), 
      TouchPanel_get_IsGestureAvailable
    );

    $.Method({Static:true , Public:true }, "get_WindowHandle", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      TouchPanel_get_WindowHandle
    );

    $.Method({Static:true , Public:true }, "GetCapabilities", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities")), 
      TouchPanel_GetCapabilities
    );

    $.Method({Static:true , Public:true }, "GetState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection")), 
      TouchPanel_GetState$02
    );

    $.Method({Static:true , Public:true }, "GetState", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchPanelState"), [$asm00.TypeRef("Microsoft.Xna.Framework.GameWindow")]), 
      TouchPanel_GetState$03
    );

    $.Method({Static:true , Public:true }, "ReadGesture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureSample")), 
      TouchPanel_ReadGesture
    );

    $.Method({Static:true , Public:true }, "set_DisplayHeight", 
      JSIL.MethodSignature.Action($.Int32), 
      TouchPanel_set_DisplayHeight
    );

    $.Method({Static:true , Public:true }, "set_DisplayOrientation", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")), 
      TouchPanel_set_DisplayOrientation
    );

    $.Method({Static:true , Public:true }, "set_DisplayWidth", 
      JSIL.MethodSignature.Action($.Int32), 
      TouchPanel_set_DisplayWidth
    );

    $.Method({Static:true , Public:true }, "set_EnabledGestures", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType")), 
      TouchPanel_set_EnabledGestures
    );

    $.Method({Static:true , Public:true }, "set_EnableMouseGestures", 
      JSIL.MethodSignature.Action($.Boolean), 
      TouchPanel_set_EnableMouseGestures
    );

    $.Method({Static:true , Public:true }, "set_EnableMouseTouchPoint", 
      JSIL.MethodSignature.Action($.Boolean), 
      TouchPanel_set_EnableMouseTouchPoint
    );

    $.Method({Static:true , Public:true }, "set_WindowHandle", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      TouchPanel_set_WindowHandle
    );

    $.Field({Static:true , Public:false}, "PrimaryWindow", $asm00.TypeRef("Microsoft.Xna.Framework.GameWindow")); 
    $.Property({Static:true , Public:true }, "WindowHandle", $asm01.TypeRef("System.IntPtr"));

    $.Property({Static:true , Public:true }, "DisplayHeight", $.Int32);

    $.Property({Static:true , Public:true }, "DisplayOrientation", $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"));

    $.Property({Static:true , Public:true }, "DisplayWidth", $.Int32);

    $.Property({Static:true , Public:true }, "EnabledGestures", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType"));

    $.Property({Static:true , Public:true }, "EnableMouseTouchPoint", $.Boolean);

    $.Property({Static:true , Public:true }, "EnableMouseGestures", $.Boolean);

    $.Property({Static:true , Public:true }, "IsGestureAvailable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.Touch.GestureSample */ 

(function GestureSample$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.GestureType)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };

  function GestureSample__ctor (gestureType, timestamp, position, position2, delta, delta2) {
    this.gestureType = gestureType;
    this.timestamp = timestamp.MemberwiseClone();
    this.position = position.MemberwiseClone();
    this.position2 = position2.MemberwiseClone();
    this.delta = delta.MemberwiseClone();
    this.delta2 = delta2.MemberwiseClone();
  };

  function GestureSample_get_Delta () {
    return this.delta;
  };

  function GestureSample_get_Delta2 () {
    return this.delta2;
  };

  function GestureSample_get_GestureType () {
    return this.gestureType;
  };

  function GestureSample_get_Position () {
    return this.position;
  };

  function GestureSample_get_Position2 () {
    return this.position2;
  };

  function GestureSample_get_Timestamp () {
    return this.timestamp;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.GestureSample", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType"), $asm01.TypeRef("System.TimeSpan"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      GestureSample__ctor
    );

    $.Method({Static:false, Public:true }, "get_Delta", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      GestureSample_get_Delta
    );

    $.Method({Static:false, Public:true }, "get_Delta2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      GestureSample_get_Delta2
    );

    $.Method({Static:false, Public:true }, "get_GestureType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType")), 
      GestureSample_get_GestureType
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      GestureSample_get_Position
    );

    $.Method({Static:false, Public:true }, "get_Position2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      GestureSample_get_Position2
    );

    $.Method({Static:false, Public:true }, "get_Timestamp", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      GestureSample_get_Timestamp
    );

    $.Field({Static:false, Public:false}, "gestureType", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType")); 
    $.Field({Static:false, Public:false}, "timestamp", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "position2", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "delta", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "delta2", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Property({Static:false, Public:true }, "GestureType", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType"));

    $.Property({Static:false, Public:true }, "Timestamp", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Position2", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Delta", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Delta2", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GameComponentCollection */ 

(function GameComponentCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.ObjectModel.Collection$b1.Of($asm00.Microsoft.Xna.Framework.IGameComponent))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm00.Microsoft.Xna.Framework.GameComponentCollectionEventArgs))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameComponentCollectionEventArgs)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IGameComponent)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };

  function GameComponentCollection__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GameComponentCollection_add_ComponentAdded (value) {
    var eventHandler = this.ComponentAdded;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "ComponentAdded"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameComponentCollection_add_ComponentRemoved (value) {
    var eventHandler = this.ComponentRemoved;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "ComponentRemoved"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameComponentCollection_ClearItems () {

    for (var i = 0; i < ($T00().prototype.get_Count.call(this) | 0); i = ((i + 1) | 0)) {
      this.OnComponentRemoved(new ($T05())($S00().Call($T00().prototype, "get_Item", null, this, i)));
    }
    $T00().prototype.ClearItems.call(this);
  };

  function GameComponentCollection_InsertItem$00 (index, item) {
    if (($T00().prototype.IndexOf.call(this, item) | 0) !== -1) {
      throw $S01().Construct("Cannot Add Same Component Multiple Times");
    }
    $S02().Call($T00().prototype, "InsertItem", null, this, index, item);
    if (item !== null) {
      this.OnComponentAdded(new ($T05())(item));
    }
  };

  function GameComponentCollection_OnComponentAdded (eventArgs) {
    if (this.ComponentAdded !== null) {
      this.ComponentAdded(this, eventArgs);
    }
  };

  function GameComponentCollection_OnComponentRemoved (eventArgs) {
    if (this.ComponentRemoved !== null) {
      this.ComponentRemoved(this, eventArgs);
    }
  };

  function GameComponentCollection_remove_ComponentAdded (value) {
    var eventHandler = this.ComponentAdded;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "ComponentAdded"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameComponentCollection_remove_ComponentRemoved (value) {
    var eventHandler = this.ComponentRemoved;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "ComponentRemoved"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameComponentCollection_RemoveItem (index) {
    var gameComponent = $S00().Call($T00().prototype, "get_Item", null, this, index);
    $T00().prototype.RemoveItem.call(this, index);
    if (gameComponent !== null) {
      this.OnComponentRemoved(new ($T05())(gameComponent));
    }
  };

  function GameComponentCollection_SetItem$01 (index, item) {
    throw $S03().Construct();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent")]), 
      Name: "Microsoft.Xna.Framework.GameComponentCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GameComponentCollection__ctor
    );

    $.Method({Static:false, Public:true }, "add_ComponentAdded", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])), 
      GameComponentCollection_add_ComponentAdded
    );

    $.Method({Static:false, Public:true }, "add_ComponentRemoved", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])), 
      GameComponentCollection_add_ComponentRemoved
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ClearItems", 
      JSIL.MethodSignature.Void, 
      GameComponentCollection_ClearItems
    );

    $.Method({Static:false, Public:false, Virtual:true }, "InsertItem", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent")]), 
      GameComponentCollection_InsertItem$00
    );

    $.Method({Static:false, Public:false}, "OnComponentAdded", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")), 
      GameComponentCollection_OnComponentAdded
    );

    $.Method({Static:false, Public:false}, "OnComponentRemoved", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")), 
      GameComponentCollection_OnComponentRemoved
    );

    $.Method({Static:false, Public:true }, "remove_ComponentAdded", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])), 
      GameComponentCollection_remove_ComponentAdded
    );

    $.Method({Static:false, Public:true }, "remove_ComponentRemoved", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])), 
      GameComponentCollection_remove_ComponentRemoved
    );

    $.Method({Static:false, Public:false, Virtual:true }, "RemoveItem", 
      JSIL.MethodSignature.Action($.Int32), 
      GameComponentCollection_RemoveItem
    );

    $.Method({Static:false, Public:false, Virtual:true }, "SetItem", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent")]), 
      GameComponentCollection_SetItem$01
    );

    $.Field({Static:false, Public:false}, "ComponentAdded", $asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])); 
    $.Field({Static:false, Public:false}, "ComponentRemoved", $asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")])); 
    $.Event({Static:false, Public:true }, "ComponentAdded", $asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")]));

    $.Event({Static:false, Public:true }, "ComponentRemoved", $asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.GameComponentCollectionEventArgs")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.SpriteEffects */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.SpriteEffects", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    FlipHorizontally: 1, 
    FlipVertically: 2, 
  }
);

/* class Microsoft.Xna.Framework.GameComponent */ 

(function GameComponent$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.GC)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameTime)) ();
  };

  function GameComponent__ctor (game) {
    this._enabled = true;
    this.GameComponent$Game$value = game;
  };

  function GameComponent_add_Disposed (value) {
    var eventHandler = this.Disposed;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "Disposed"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameComponent_add_EnabledChanged (value) {
    var eventHandler = this.EnabledChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "EnabledChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameComponent_add_UpdateOrderChanged (value) {
    var eventHandler = this.UpdateOrderChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "UpdateOrderChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameComponent_Dispose$00 () {
    this.Dispose(true);
    $T04().SuppressFinalize(this);
  };

  function GameComponent_Dispose$01 (disposing) {
    if (!(!disposing || (this.Disposed === null))) {
      this.Disposed(this, $T06().Empty);
    }
  };

  function GameComponent_Finalize () {
    try {
      this.Dispose(false);
    } finally {
      $T07().prototype.Finalize.call(this);
    }
  };

  function GameComponent_get_Enabled () {
    return this._enabled;
  };

  function GameComponent_get_Game () {
    return this.GameComponent$Game$value;
  };

  function GameComponent_get_UpdateOrder () {
    return this._updateOrder;
  };

  function GameComponent_Initialize () {
  };

  function GameComponent_OnEnabledChanged (sender, args) {
  };

  function GameComponent_OnUpdateOrderChanged (sender, args) {
  };

  function GameComponent_remove_Disposed (value) {
    var eventHandler = this.Disposed;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "Disposed"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameComponent_remove_EnabledChanged (value) {
    var eventHandler = this.EnabledChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "EnabledChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameComponent_remove_UpdateOrderChanged (value) {
    var eventHandler = this.UpdateOrderChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "UpdateOrderChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameComponent_set_Enabled (value) {
    if (this._enabled !== value) {
      this._enabled = value;
      if (this.EnabledChanged !== null) {
        this.EnabledChanged(this, $T06().Empty);
      }
      this.OnEnabledChanged(this, null);
    }
  };

  function GameComponent_set_Game (value) {
    this.GameComponent$Game$value = value;
  };

  function GameComponent_set_UpdateOrder (value) {
    if ((this._updateOrder | 0) !== (value | 0)) {
      this._updateOrder = (value | 0);
      if (this.UpdateOrderChanged !== null) {
        this.UpdateOrderChanged(this, $T06().Empty);
      }
      this.OnUpdateOrderChanged(this, null);
    }
  };

  function GameComponent_System_IComparable$lMicrosoft_Xna_Framework_GameComponent$g_CompareTo (other) {
    return (((other.get_UpdateOrder() | 0) - (this.get_UpdateOrder() | 0)) | 0);
  };

  function GameComponent_Update (gameTime) {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GameComponent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Game")), 
      GameComponent__ctor
    );

    $.Method({Static:false, Public:true }, "add_Disposed", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameComponent_add_Disposed
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_EnabledChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameComponent_add_EnabledChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_UpdateOrderChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameComponent_add_UpdateOrderChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      GameComponent_Dispose$00
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      GameComponent_Dispose$01
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      GameComponent_Finalize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      GameComponent_get_Enabled
    );

    $.Method({Static:false, Public:true }, "get_Game", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Game")), 
      GameComponent_get_Game
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_UpdateOrder", 
      JSIL.MethodSignature.Return($.Int32), 
      GameComponent_get_UpdateOrder
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      GameComponent_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnEnabledChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      GameComponent_OnEnabledChanged
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnUpdateOrderChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      GameComponent_OnUpdateOrderChanged
    );

    $.Method({Static:false, Public:true }, "remove_Disposed", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameComponent_remove_Disposed
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_EnabledChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameComponent_remove_EnabledChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_UpdateOrderChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameComponent_remove_UpdateOrderChanged
    );

    $.Method({Static:false, Public:true }, "set_Enabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      GameComponent_set_Enabled
    );

    $.Method({Static:false, Public:false}, "set_Game", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Game")), 
      GameComponent_set_Game
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_UpdateOrder", 
      JSIL.MethodSignature.Action($.Int32), 
      GameComponent_set_UpdateOrder
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.IComparable$lMicrosoft.Xna.Framework.GameComponent$g.CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type]), 
      GameComponent_System_IComparable$lMicrosoft_Xna_Framework_GameComponent$g_CompareTo
    )
      .Overrides($asm01.TypeRef("System.IComparable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.GameComponent")]), "CompareTo");

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      GameComponent_Update
    );

    $.Field({Static:false, Public:false}, "_enabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "_updateOrder", $.Int32); 
    $.Field({Static:false, Public:false}, "Disposed", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "EnabledChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "UpdateOrderChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "GameComponent$Game$value", $asm00.TypeRef("Microsoft.Xna.Framework.Game"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Game", $asm00.TypeRef("Microsoft.Xna.Framework.Game"));

    $.Property({Static:false, Public:true , Virtual:true }, "Enabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "UpdateOrder", $.Int32);

    $.Event({Static:false, Public:true }, "Disposed", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "EnabledChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "UpdateOrderChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.IGameComponent"), 
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.IUpdateable"), 
      /* 2 */ $asm01.TypeRef("System.IComparable`1", [$.Type]), 
      /* 3 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.DrawableGameComponent */ 

(function DrawableGameComponent$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameComponent)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function DrawableGameComponent__ctor (game) {
    this._visible = true;
    $T01().prototype._ctor.call(this, game);
  };

  function DrawableGameComponent_add_DrawOrderChanged (value) {
    var eventHandler = this.DrawOrderChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Combine(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "DrawOrderChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function DrawableGameComponent_add_VisibleChanged (value) {
    var eventHandler = this.VisibleChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Combine(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "VisibleChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function DrawableGameComponent_Draw (gameTime) {
  };

  function DrawableGameComponent_get_DrawOrder () {
    return this._drawOrder;
  };

  function DrawableGameComponent_get_GraphicsDevice () {
    return (this.GameComponent$Game$value).get_GraphicsDevice();
  };

  function DrawableGameComponent_get_Visible () {
    return this._visible;
  };

  function DrawableGameComponent_Initialize () {
    if (!this._initialized) {
      this._initialized = true;
      this.LoadContent();
    }
  };

  function DrawableGameComponent_LoadContent () {
  };

  function DrawableGameComponent_OnDrawOrderChanged (sender, args) {
  };

  function DrawableGameComponent_OnVisibleChanged (sender, args) {
  };

  function DrawableGameComponent_remove_DrawOrderChanged (value) {
    var eventHandler = this.DrawOrderChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Remove(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "DrawOrderChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function DrawableGameComponent_remove_VisibleChanged (value) {
    var eventHandler = this.VisibleChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Remove(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "VisibleChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function DrawableGameComponent_set_DrawOrder (value) {
    if ((this._drawOrder | 0) !== (value | 0)) {
      this._drawOrder = (value | 0);
      if (this.DrawOrderChanged !== null) {
        this.DrawOrderChanged(this, null);
      }
      this.OnDrawOrderChanged(this, null);
    }
  };

  function DrawableGameComponent_set_Visible (value) {
    if (this._visible !== value) {
      this._visible = value;
      if (this.VisibleChanged !== null) {
        this.VisibleChanged(this, $T07().Empty);
      }
      this.OnVisibleChanged(this, $T07().Empty);
    }
  };

  function DrawableGameComponent_UnloadContent () {
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.GameComponent"), 
      Name: "Microsoft.Xna.Framework.DrawableGameComponent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Game")), 
      DrawableGameComponent__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_DrawOrderChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      DrawableGameComponent_add_DrawOrderChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_VisibleChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      DrawableGameComponent_add_VisibleChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      DrawableGameComponent_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DrawOrder", 
      JSIL.MethodSignature.Return($.Int32), 
      DrawableGameComponent_get_DrawOrder
    );

    $.Method({Static:false, Public:true }, "get_GraphicsDevice", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      DrawableGameComponent_get_GraphicsDevice
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Visible", 
      JSIL.MethodSignature.Return($.Boolean), 
      DrawableGameComponent_get_Visible
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      DrawableGameComponent_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      JSIL.MethodSignature.Void, 
      DrawableGameComponent_LoadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnDrawOrderChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      DrawableGameComponent_OnDrawOrderChanged
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnVisibleChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      DrawableGameComponent_OnVisibleChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_DrawOrderChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      DrawableGameComponent_remove_DrawOrderChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_VisibleChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      DrawableGameComponent_remove_VisibleChanged
    );

    $.Method({Static:false, Public:true }, "set_DrawOrder", 
      JSIL.MethodSignature.Action($.Int32), 
      DrawableGameComponent_set_DrawOrder
    );

    $.Method({Static:false, Public:true }, "set_Visible", 
      JSIL.MethodSignature.Action($.Boolean), 
      DrawableGameComponent_set_Visible
    );

    $.Method({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      JSIL.MethodSignature.Void, 
      DrawableGameComponent_UnloadContent
    );

    $.Field({Static:false, Public:false}, "_initialized", $.Boolean); 
    $.Field({Static:false, Public:false}, "_drawOrder", $.Int32); 
    $.Field({Static:false, Public:false}, "_visible", $.Boolean); 
    $.Field({Static:false, Public:false}, "DrawOrderChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "VisibleChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true }, "GraphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"));

    $.Property({Static:false, Public:true , Virtual:true }, "DrawOrder", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Visible", $.Boolean);

    $.Event({Static:false, Public:true , Virtual:true }, "DrawOrderChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "VisibleChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 4 */ $asm00.TypeRef("Microsoft.Xna.Framework.IDrawable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.InstancePlayLimitException */ 

(function InstancePlayLimitException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Runtime.InteropServices.ExternalException)) ();
  };

  function InstancePlayLimitException__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Runtime.InteropServices.ExternalException"), 
      Name: "Microsoft.Xna.Framework.Audio.InstancePlayLimitException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      InstancePlayLimitException__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.TextureCollection */ 

(function TextureCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.Texture))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.System.Collections.Generic.Queue$b1.Of($asm01.System.Int32))) ();
  };

  function TextureCollection__ctor (parentDevice) {
    this.textures = JSIL.Array.New($T01(), parentDevice.GraphicsDevice$GLDevice$value.OpenGLDevice$MaxTextureSlots$value);
    this.graphicsDevice = parentDevice;

    for (var i = 0; i < (this.textures.length | 0); i = ((i + 1) | 0)) {
      this.textures[i] = null;
    }
  };

  function TextureCollection_get_Item (index) {
    return this.textures[index];
  };

  function TextureCollection_set_Item (index, value) {
    this.textures[index] = value;
    if (!$T05().prototype.Contains.call(this.graphicsDevice.ModifiedSamplers, index)) {
      $T05().prototype.Enqueue.call(this.graphicsDevice.ModifiedSamplers, index);
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.TextureCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      TextureCollection__ctor
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture"), [$.Int32]), 
      TextureCollection_get_Item
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")]), 
      TextureCollection_set_Item
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "textures", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")])); 
    $.Field({Static:false, Public:false}, "graphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum Microsoft.Xna.Framework.Graphics.Blend */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.Blend", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    One: 0, 
    Zero: 1, 
    SourceColor: 2, 
    InverseSourceColor: 3, 
    SourceAlpha: 4, 
    InverseSourceAlpha: 5, 
    DestinationColor: 6, 
    InverseDestinationColor: 7, 
    DestinationAlpha: 8, 
    InverseDestinationAlpha: 9, 
    BlendFactor: 10, 
    InverseBlendFactor: 11, 
    SourceAlphaSaturation: 12, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.BlendFunction */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.BlendFunction", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Add: 0, 
    Subtract: 1, 
    ReverseSubtract: 2, 
    Max: 3, 
    Min: 4, 
  }
);

/* class Microsoft.Xna.Framework.Graphics.BlendState */ 

(function BlendState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Blend)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BlendFunction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ColorWriteChannels)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState"), [
        $asm01.TypeRef("System.String"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")
      ]))) ();
  };

  function BlendState__ctor$00 () {
    $T01().prototype._ctor.call(this);
    this.BlendState$AlphaBlendFunction$value = $T02().Add;
    this.BlendState$AlphaDestinationBlend$value = $T00().Zero;
    this.BlendState$AlphaSourceBlend$value = $T00().One;
    this.BlendState$ColorBlendFunction$value = $T02().Add;
    this.BlendState$ColorDestinationBlend$value = $T00().Zero;
    this.BlendState$ColorSourceBlend$value = $T00().One;
    this.BlendState$ColorWriteChannels$value = $T03().All;
    this.BlendState$ColorWriteChannels1$value = $T03().All;
    this.BlendState$ColorWriteChannels2$value = $T03().All;
    this.BlendState$ColorWriteChannels3$value = $T03().All;
    (this.BlendState$BlendFactor$value = $T04().Color$White$value.MemberwiseClone());
    this.BlendState$MultiSampleMask$value = -1;
  };

  function BlendState__ctor$01 (name, colorSourceBlend, alphaSourceBlend, colorDestBlend, alphaDestBlend) {
    $thisType.prototype._ctor.call(this);
    this.GraphicsResource$Name$value = name;
    this.BlendState$ColorSourceBlend$value = colorSourceBlend;
    this.BlendState$AlphaSourceBlend$value = alphaSourceBlend;
    this.BlendState$ColorDestinationBlend$value = colorDestBlend;
    this.BlendState$AlphaDestinationBlend$value = alphaDestBlend;
  };

  function BlendState_get_AlphaBlendFunction () {
    return this.BlendState$AlphaBlendFunction$value;
  };

  function BlendState_get_AlphaDestinationBlend () {
    return this.BlendState$AlphaDestinationBlend$value;
  };

  function BlendState_get_AlphaSourceBlend () {
    return this.BlendState$AlphaSourceBlend$value;
  };

  function BlendState_get_BlendFactor () {
    return this.BlendState$BlendFactor$value;
  };

  function BlendState_get_ColorBlendFunction () {
    return this.BlendState$ColorBlendFunction$value;
  };

  function BlendState_get_ColorDestinationBlend () {
    return this.BlendState$ColorDestinationBlend$value;
  };

  function BlendState_get_ColorSourceBlend () {
    return this.BlendState$ColorSourceBlend$value;
  };

  function BlendState_get_ColorWriteChannels () {
    return this.BlendState$ColorWriteChannels$value;
  };

  function BlendState_get_ColorWriteChannels1 () {
    return this.BlendState$ColorWriteChannels1$value;
  };

  function BlendState_get_ColorWriteChannels2 () {
    return this.BlendState$ColorWriteChannels2$value;
  };

  function BlendState_get_ColorWriteChannels3 () {
    return this.BlendState$ColorWriteChannels3$value;
  };

  function BlendState_get_MultiSampleMask () {
    return this.BlendState$MultiSampleMask$value;
  };

  function BlendState_set_AlphaBlendFunction (value) {
    this.BlendState$AlphaBlendFunction$value = value;
  };

  function BlendState_set_AlphaDestinationBlend (value) {
    this.BlendState$AlphaDestinationBlend$value = value;
  };

  function BlendState_set_AlphaSourceBlend (value) {
    this.BlendState$AlphaSourceBlend$value = value;
  };

  function BlendState_set_BlendFactor (value) {
    this.BlendState$BlendFactor$value = value.MemberwiseClone();
  };

  function BlendState_set_ColorBlendFunction (value) {
    this.BlendState$ColorBlendFunction$value = value;
  };

  function BlendState_set_ColorDestinationBlend (value) {
    this.BlendState$ColorDestinationBlend$value = value;
  };

  function BlendState_set_ColorSourceBlend (value) {
    this.BlendState$ColorSourceBlend$value = value;
  };

  function BlendState_set_ColorWriteChannels (value) {
    this.BlendState$ColorWriteChannels$value = value;
  };

  function BlendState_set_ColorWriteChannels1 (value) {
    this.BlendState$ColorWriteChannels1$value = value;
  };

  function BlendState_set_ColorWriteChannels2 (value) {
    this.BlendState$ColorWriteChannels2$value = value;
  };

  function BlendState_set_ColorWriteChannels3 (value) {
    this.BlendState$ColorWriteChannels3$value = value;
  };

  function BlendState_set_MultiSampleMask (value) {
    this.BlendState$MultiSampleMask$value = (value | 0);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.BlendState", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BlendState__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")
        ]), 
      BlendState__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_AlphaBlendFunction", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction")), 
      BlendState_get_AlphaBlendFunction
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_AlphaDestinationBlend", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")), 
      BlendState_get_AlphaDestinationBlend
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_AlphaSourceBlend", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")), 
      BlendState_get_AlphaSourceBlend
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_BlendFactor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Color")), 
      BlendState_get_BlendFactor
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ColorBlendFunction", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction")), 
      BlendState_get_ColorBlendFunction
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ColorDestinationBlend", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")), 
      BlendState_get_ColorDestinationBlend
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ColorSourceBlend", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")), 
      BlendState_get_ColorSourceBlend
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ColorWriteChannels", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")), 
      BlendState_get_ColorWriteChannels
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ColorWriteChannels1", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")), 
      BlendState_get_ColorWriteChannels1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ColorWriteChannels2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")), 
      BlendState_get_ColorWriteChannels2
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ColorWriteChannels3", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")), 
      BlendState_get_ColorWriteChannels3
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MultiSampleMask", 
      JSIL.MethodSignature.Return($.Int32), 
      BlendState_get_MultiSampleMask
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AlphaBlendFunction", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction")), 
      BlendState_set_AlphaBlendFunction
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AlphaDestinationBlend", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")), 
      BlendState_set_AlphaDestinationBlend
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AlphaSourceBlend", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")), 
      BlendState_set_AlphaSourceBlend
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_BlendFactor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Color")), 
      BlendState_set_BlendFactor
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ColorBlendFunction", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction")), 
      BlendState_set_ColorBlendFunction
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ColorDestinationBlend", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")), 
      BlendState_set_ColorDestinationBlend
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ColorSourceBlend", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")), 
      BlendState_set_ColorSourceBlend
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ColorWriteChannels", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")), 
      BlendState_set_ColorWriteChannels
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ColorWriteChannels1", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")), 
      BlendState_set_ColorWriteChannels1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ColorWriteChannels2", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")), 
      BlendState_set_ColorWriteChannels2
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ColorWriteChannels3", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")), 
      BlendState_set_ColorWriteChannels3
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_MultiSampleMask", 
      JSIL.MethodSignature.Action($.Int32), 
      BlendState_set_MultiSampleMask
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Additive", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "AlphaBlend", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NonPremultiplied", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Opaque", $.Type); 
    $.Field({Static:false, Public:false}, "BlendState$AlphaBlendFunction$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlendState$AlphaDestinationBlend$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlendState$AlphaSourceBlend$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlendState$ColorBlendFunction$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlendState$ColorDestinationBlend$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlendState$ColorSourceBlend$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlendState$ColorWriteChannels$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlendState$ColorWriteChannels1$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlendState$ColorWriteChannels2$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlendState$ColorWriteChannels3$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlendState$BlendFactor$value", $asm00.TypeRef("Microsoft.Xna.Framework.Color"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlendState$MultiSampleMask$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function BlendState__cctor () {
      $thisType.Additive = $S00().Construct("BlendState.Additive", $T00().SourceAlpha, $T00().SourceAlpha, $T00().One, $T00().One);
      $thisType.AlphaBlend = $S00().Construct("BlendState.AlphaBlend", $T00().One, $T00().One, $T00().InverseSourceAlpha, $T00().InverseSourceAlpha);
      $thisType.NonPremultiplied = $S00().Construct("BlendState.NonPremultiplied", $T00().SourceAlpha, $T00().SourceAlpha, $T00().InverseSourceAlpha, $T00().InverseSourceAlpha);
      $thisType.Opaque = $S00().Construct("BlendState.Opaque", $T00().One, $T00().One, $T00().Zero, $T00().Zero);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BlendState__cctor
    );

    $.Property({Static:false, Public:true }, "AlphaBlendFunction", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction"));

    $.Property({Static:false, Public:true }, "AlphaDestinationBlend", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"));

    $.Property({Static:false, Public:true }, "AlphaSourceBlend", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"));

    $.Property({Static:false, Public:true }, "ColorBlendFunction", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction"));

    $.Property({Static:false, Public:true }, "ColorDestinationBlend", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"));

    $.Property({Static:false, Public:true }, "ColorSourceBlend", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"));

    $.Property({Static:false, Public:true }, "ColorWriteChannels", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels"));

    $.Property({Static:false, Public:true }, "ColorWriteChannels1", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels"));

    $.Property({Static:false, Public:true }, "ColorWriteChannels2", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels"));

    $.Property({Static:false, Public:true }, "ColorWriteChannels3", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels"));

    $.Property({Static:false, Public:true }, "BlendFactor", $asm00.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Property({Static:false, Public:true }, "MultiSampleMask", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.EffectParameterCollection */ 

(function EffectParameterCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter).GetEnumerator)) ();
  };

  function EffectParameterCollection__ctor (parameters) {
    this._parameters = parameters;
  };

  function EffectParameterCollection_Clone () {
    if ((this._parameters.length | 0) === 0) {
      var result = $thisType.Empty;
    } else {
      var parameters = JSIL.Array.New($T00(), this._parameters.length);

      for (var i = 0; i < (this._parameters.length | 0); i = ((i + 1) | 0)) {
        parameters[i] = $S00().Construct(this._parameters[i]);
      }
      result = new $thisType(parameters);
    }
    return result;
  };

  function EffectParameterCollection_get_Count () {
    return this._parameters.length;
  };

  function EffectParameterCollection_get_Item$00 (index) {
    return this._parameters[index];
  };

  function EffectParameterCollection_get_Item$01 (name) {
    var parameters = this._parameters;

    for (var i = 0; i < (parameters.length | 0); i = ((i + 1) | 0)) {
      var parameter = parameters[i];
      if (parameter.EffectParameter$Name$value == name) {
        var result = parameter;
        return result;
      }
    }
    result = null;
    return result;
  };

  function EffectParameterCollection_GetEnumerator () {
    return $IM00().Call($T04().$Cast(this._parameters), null);
  };

  function EffectParameterCollection_System_Collections_IEnumerable_GetEnumerator () {
    return JSIL.GetEnumerator(this._parameters);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.EffectParameterCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")])), 
      EffectParameterCollection__ctor
    );

    $.Method({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      EffectParameterCollection_Clone
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      EffectParameterCollection_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$.Int32]), 
      EffectParameterCollection_get_Item$00
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$.String]), 
      EffectParameterCollection_get_Item$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")])), 
      EffectParameterCollection_GetEnumerator
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      EffectParameterCollection_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Empty", $.Type); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_parameters", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")])); 
    function EffectParameterCollection__cctor () {
      $thisType.Empty = new $thisType(JSIL.Array.New($T00(), 0));
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EffectParameterCollection__cctor
    );

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"));

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Graphics.EffectPassCollection */ 

(function EffectPassCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectPass)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass).GetEnumerator)) ();
  };

  function EffectPassCollection__ctor (passes) {
    this._passes = passes;
  };

  function EffectPassCollection_Clone (effect) {
    var passes = JSIL.Array.New($T02(), this._passes.length);

    for (var i = 0; i < (this._passes.length | 0); i = ((i + 1) | 0)) {
      passes[i] = $S00().Construct(effect, this._passes[i]);
    }
    return new $thisType(passes);
  };

  function EffectPassCollection_get_Count () {
    return this._passes.length;
  };

  function EffectPassCollection_get_Item$00 (index) {
    return this._passes[index];
  };

  function EffectPassCollection_get_Item$01 (name) {
    var passes = this._passes;

    for (var i = 0; i < (passes.length | 0); i = ((i + 1) | 0)) {
      var pass = passes[i];
      if (pass.EffectPass$Name$value == name) {
        var result = pass;
        return result;
      }
    }
    result = null;
    return result;
  };

  function EffectPassCollection_System_Collections_Generic_IEnumerable$lMicrosoft_Xna_Framework_Graphics_EffectPass$g_GetEnumerator () {
    return $IM00().Call($T05().$Cast(this._passes), null);
  };

  function EffectPassCollection_System_Collections_IEnumerable_GetEnumerator () {
    return JSIL.GetEnumerator(this._passes);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.EffectPassCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass")])), 
      EffectPassCollection__ctor
    );

    $.Method({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")]), 
      EffectPassCollection_Clone
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      EffectPassCollection_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass"), [$.Int32]), 
      EffectPassCollection_get_Item$00
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass"), [$.String]), 
      EffectPassCollection_get_Item$01
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.Xna.Framework.Graphics.EffectPass$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass")])), 
      EffectPassCollection_System_Collections_Generic_IEnumerable$lMicrosoft_Xna_Framework_Graphics_EffectPass$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      EffectPassCollection_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_passes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass")])); 
    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass"));

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Graphics.EffectTechnique */ 

(function EffectTechnique$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectPassCollection)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection)) ();
  };

  function EffectTechnique__ctor$00 (effect, cloneSource) {
    this.EffectTechnique$Name$value = cloneSource.EffectTechnique$Name$value;
    this.EffectTechnique$Annotations$value = cloneSource.EffectTechnique$Annotations$value;
    this.EffectTechnique$Passes$value = (cloneSource.EffectTechnique$Passes$value).Clone(effect);
  };

  function EffectTechnique__ctor$01 (effect, name, passes, annotations) {
    this.EffectTechnique$Name$value = name;
    this.EffectTechnique$Passes$value = passes;
    this.EffectTechnique$Annotations$value = annotations;
  };

  function EffectTechnique_get_Annotations () {
    return this.EffectTechnique$Annotations$value;
  };

  function EffectTechnique_get_Name () {
    return this.EffectTechnique$Name$value;
  };

  function EffectTechnique_get_Passes () {
    return this.EffectTechnique$Passes$value;
  };

  function EffectTechnique_set_Annotations (value) {
    this.EffectTechnique$Annotations$value = value;
  };

  function EffectTechnique_set_Name (value) {
    this.EffectTechnique$Name$value = value;
  };

  function EffectTechnique_set_Passes (value) {
    this.EffectTechnique$Passes$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.EffectTechnique", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), $.Type]), 
      EffectTechnique__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), $.String, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPassCollection"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection")
        ]), 
      EffectTechnique__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_Annotations", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection")), 
      EffectTechnique_get_Annotations
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      EffectTechnique_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Passes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPassCollection")), 
      EffectTechnique_get_Passes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Annotations", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection")), 
      EffectTechnique_set_Annotations
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      EffectTechnique_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Passes", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPassCollection")), 
      EffectTechnique_set_Passes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "EffectTechnique$Passes$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPassCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectTechnique$Annotations$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectTechnique$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Passes", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPassCollection"));

    $.Property({Static:false, Public:true }, "Annotations", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection */ 

(function EffectTechniqueCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectTechnique))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectTechnique)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectTechnique))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectTechnique).GetEnumerator)) ();
  };

  function EffectTechniqueCollection__ctor (techniques) {
    this._techniques = techniques;
  };

  function EffectTechniqueCollection_Clone (effect) {
    var techniques = JSIL.Array.New($T02(), this._techniques.length);

    for (var i = 0; i < (this._techniques.length | 0); i = ((i + 1) | 0)) {
      techniques[i] = $S00().Construct(effect, this._techniques[i]);
    }
    return new $thisType(techniques);
  };

  function EffectTechniqueCollection_get_Count () {
    return this._techniques.length;
  };

  function EffectTechniqueCollection_get_Item$00 (index) {
    return this._techniques[index];
  };

  function EffectTechniqueCollection_get_Item$01 (name) {
    var techniques = this._techniques;

    for (var i = 0; i < (techniques.length | 0); i = ((i + 1) | 0)) {
      var technique = techniques[i];
      if (technique.EffectTechnique$Name$value == name) {
        var result = technique;
        return result;
      }
    }
    result = null;
    return result;
  };

  function EffectTechniqueCollection_GetEnumerator () {
    return $IM00().Call($T05().$Cast(this._techniques), null);
  };

  function EffectTechniqueCollection_System_Collections_IEnumerable_GetEnumerator () {
    return JSIL.GetEnumerator(this._techniques);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique")])), 
      EffectTechniqueCollection__ctor
    );

    $.Method({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")]), 
      EffectTechniqueCollection_Clone
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      EffectTechniqueCollection_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"), [$.Int32]), 
      EffectTechniqueCollection_get_Item$00
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"), [$.String]), 
      EffectTechniqueCollection_get_Item$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique")])), 
      EffectTechniqueCollection_GetEnumerator
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      EffectTechniqueCollection_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_techniques", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique")])); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"));

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum Microsoft.Xna.Framework.Graphics.CompareFunction */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.CompareFunction", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Always: 0, 
    Never: 1, 
    Less: 2, 
    LessEqual: 3, 
    Equal: 4, 
    GreaterEqual: 5, 
    Greater: 6, 
    NotEqual: 7, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.CullMode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.CullMode", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    CullClockwiseFace: 1, 
    CullCounterClockwiseFace: 2, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.DepthFormat */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.DepthFormat", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: -1, 
    Depth24Stencil8: 48, 
    Depth24: 51, 
    Depth16: 54, 
  }
);

/* class Microsoft.Xna.Framework.Graphics.DepthStencilState */ 

(function DepthStencilState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CompareFunction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.StencilOperation)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Boolean"), 
        $asm01.TypeRef("System.Boolean")
      ]))) ();
  };

  function DepthStencilState__ctor$00 () {
    $T00().prototype._ctor.call(this);
    this.DepthStencilState$DepthBufferEnable$value = true;
    this.DepthStencilState$DepthBufferWriteEnable$value = true;
    this.DepthStencilState$DepthBufferFunction$value = $T01().LessEqual;
    this.DepthStencilState$StencilEnable$value = false;
    this.DepthStencilState$StencilFunction$value = $T01().Always;
    this.DepthStencilState$StencilPass$value = $T02().Keep;
    this.DepthStencilState$StencilFail$value = $T02().Keep;
    this.DepthStencilState$StencilDepthBufferFail$value = $T02().Keep;
    this.DepthStencilState$TwoSidedStencilMode$value = false;
    this.DepthStencilState$CounterClockwiseStencilFunction$value = $T01().Always;
    this.DepthStencilState$CounterClockwiseStencilFail$value = $T02().Keep;
    this.DepthStencilState$CounterClockwiseStencilPass$value = $T02().Keep;
    this.DepthStencilState$CounterClockwiseStencilDepthBufferFail$value = $T02().Keep;
    this.DepthStencilState$StencilMask$value = 2147483647;
    this.DepthStencilState$StencilWriteMask$value = 2147483647;
    this.DepthStencilState$ReferenceStencil$value = 0;
  };

  function DepthStencilState__ctor$01 (name, depthBufferEnable, depthBufferWriteEnable) {
    $thisType.prototype._ctor.call(this);
    this.GraphicsResource$Name$value = name;
    this.DepthStencilState$DepthBufferEnable$value = depthBufferEnable;
    this.DepthStencilState$DepthBufferWriteEnable$value = depthBufferWriteEnable;
  };

  function DepthStencilState_get_CounterClockwiseStencilDepthBufferFail () {
    return this.DepthStencilState$CounterClockwiseStencilDepthBufferFail$value;
  };

  function DepthStencilState_get_CounterClockwiseStencilFail () {
    return this.DepthStencilState$CounterClockwiseStencilFail$value;
  };

  function DepthStencilState_get_CounterClockwiseStencilFunction () {
    return this.DepthStencilState$CounterClockwiseStencilFunction$value;
  };

  function DepthStencilState_get_CounterClockwiseStencilPass () {
    return this.DepthStencilState$CounterClockwiseStencilPass$value;
  };

  function DepthStencilState_get_DepthBufferEnable () {
    return this.DepthStencilState$DepthBufferEnable$value;
  };

  function DepthStencilState_get_DepthBufferFunction () {
    return this.DepthStencilState$DepthBufferFunction$value;
  };

  function DepthStencilState_get_DepthBufferWriteEnable () {
    return this.DepthStencilState$DepthBufferWriteEnable$value;
  };

  function DepthStencilState_get_ReferenceStencil () {
    return this.DepthStencilState$ReferenceStencil$value;
  };

  function DepthStencilState_get_StencilDepthBufferFail () {
    return this.DepthStencilState$StencilDepthBufferFail$value;
  };

  function DepthStencilState_get_StencilEnable () {
    return this.DepthStencilState$StencilEnable$value;
  };

  function DepthStencilState_get_StencilFail () {
    return this.DepthStencilState$StencilFail$value;
  };

  function DepthStencilState_get_StencilFunction () {
    return this.DepthStencilState$StencilFunction$value;
  };

  function DepthStencilState_get_StencilMask () {
    return this.DepthStencilState$StencilMask$value;
  };

  function DepthStencilState_get_StencilPass () {
    return this.DepthStencilState$StencilPass$value;
  };

  function DepthStencilState_get_StencilWriteMask () {
    return this.DepthStencilState$StencilWriteMask$value;
  };

  function DepthStencilState_get_TwoSidedStencilMode () {
    return this.DepthStencilState$TwoSidedStencilMode$value;
  };

  function DepthStencilState_set_CounterClockwiseStencilDepthBufferFail (value) {
    this.DepthStencilState$CounterClockwiseStencilDepthBufferFail$value = value;
  };

  function DepthStencilState_set_CounterClockwiseStencilFail (value) {
    this.DepthStencilState$CounterClockwiseStencilFail$value = value;
  };

  function DepthStencilState_set_CounterClockwiseStencilFunction (value) {
    this.DepthStencilState$CounterClockwiseStencilFunction$value = value;
  };

  function DepthStencilState_set_CounterClockwiseStencilPass (value) {
    this.DepthStencilState$CounterClockwiseStencilPass$value = value;
  };

  function DepthStencilState_set_DepthBufferEnable (value) {
    this.DepthStencilState$DepthBufferEnable$value = value;
  };

  function DepthStencilState_set_DepthBufferFunction (value) {
    this.DepthStencilState$DepthBufferFunction$value = value;
  };

  function DepthStencilState_set_DepthBufferWriteEnable (value) {
    this.DepthStencilState$DepthBufferWriteEnable$value = value;
  };

  function DepthStencilState_set_ReferenceStencil (value) {
    this.DepthStencilState$ReferenceStencil$value = (value | 0);
  };

  function DepthStencilState_set_StencilDepthBufferFail (value) {
    this.DepthStencilState$StencilDepthBufferFail$value = value;
  };

  function DepthStencilState_set_StencilEnable (value) {
    this.DepthStencilState$StencilEnable$value = value;
  };

  function DepthStencilState_set_StencilFail (value) {
    this.DepthStencilState$StencilFail$value = value;
  };

  function DepthStencilState_set_StencilFunction (value) {
    this.DepthStencilState$StencilFunction$value = value;
  };

  function DepthStencilState_set_StencilMask (value) {
    this.DepthStencilState$StencilMask$value = (value | 0);
  };

  function DepthStencilState_set_StencilPass (value) {
    this.DepthStencilState$StencilPass$value = value;
  };

  function DepthStencilState_set_StencilWriteMask (value) {
    this.DepthStencilState$StencilWriteMask$value = (value | 0);
  };

  function DepthStencilState_set_TwoSidedStencilMode (value) {
    this.DepthStencilState$TwoSidedStencilMode$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.DepthStencilState", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DepthStencilState__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean
        ]), 
      DepthStencilState__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_CounterClockwiseStencilDepthBufferFail", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_get_CounterClockwiseStencilDepthBufferFail
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CounterClockwiseStencilFail", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_get_CounterClockwiseStencilFail
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CounterClockwiseStencilFunction", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")), 
      DepthStencilState_get_CounterClockwiseStencilFunction
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CounterClockwiseStencilPass", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_get_CounterClockwiseStencilPass
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DepthBufferEnable", 
      JSIL.MethodSignature.Return($.Boolean), 
      DepthStencilState_get_DepthBufferEnable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DepthBufferFunction", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")), 
      DepthStencilState_get_DepthBufferFunction
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DepthBufferWriteEnable", 
      JSIL.MethodSignature.Return($.Boolean), 
      DepthStencilState_get_DepthBufferWriteEnable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ReferenceStencil", 
      JSIL.MethodSignature.Return($.Int32), 
      DepthStencilState_get_ReferenceStencil
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_StencilDepthBufferFail", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_get_StencilDepthBufferFail
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_StencilEnable", 
      JSIL.MethodSignature.Return($.Boolean), 
      DepthStencilState_get_StencilEnable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_StencilFail", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_get_StencilFail
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_StencilFunction", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")), 
      DepthStencilState_get_StencilFunction
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_StencilMask", 
      JSIL.MethodSignature.Return($.Int32), 
      DepthStencilState_get_StencilMask
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_StencilPass", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_get_StencilPass
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_StencilWriteMask", 
      JSIL.MethodSignature.Return($.Int32), 
      DepthStencilState_get_StencilWriteMask
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TwoSidedStencilMode", 
      JSIL.MethodSignature.Return($.Boolean), 
      DepthStencilState_get_TwoSidedStencilMode
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CounterClockwiseStencilDepthBufferFail", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_set_CounterClockwiseStencilDepthBufferFail
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CounterClockwiseStencilFail", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_set_CounterClockwiseStencilFail
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CounterClockwiseStencilFunction", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")), 
      DepthStencilState_set_CounterClockwiseStencilFunction
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CounterClockwiseStencilPass", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_set_CounterClockwiseStencilPass
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DepthBufferEnable", 
      JSIL.MethodSignature.Action($.Boolean), 
      DepthStencilState_set_DepthBufferEnable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DepthBufferFunction", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")), 
      DepthStencilState_set_DepthBufferFunction
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DepthBufferWriteEnable", 
      JSIL.MethodSignature.Action($.Boolean), 
      DepthStencilState_set_DepthBufferWriteEnable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ReferenceStencil", 
      JSIL.MethodSignature.Action($.Int32), 
      DepthStencilState_set_ReferenceStencil
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_StencilDepthBufferFail", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_set_StencilDepthBufferFail
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_StencilEnable", 
      JSIL.MethodSignature.Action($.Boolean), 
      DepthStencilState_set_StencilEnable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_StencilFail", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_set_StencilFail
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_StencilFunction", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")), 
      DepthStencilState_set_StencilFunction
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_StencilMask", 
      JSIL.MethodSignature.Action($.Int32), 
      DepthStencilState_set_StencilMask
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_StencilPass", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")), 
      DepthStencilState_set_StencilPass
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_StencilWriteMask", 
      JSIL.MethodSignature.Action($.Int32), 
      DepthStencilState_set_StencilWriteMask
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TwoSidedStencilMode", 
      JSIL.MethodSignature.Action($.Boolean), 
      DepthStencilState_set_TwoSidedStencilMode
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DepthRead", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "None", $.Type); 
    $.Field({Static:false, Public:false}, "DepthStencilState$DepthBufferEnable$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$DepthBufferWriteEnable$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$CounterClockwiseStencilDepthBufferFail$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$CounterClockwiseStencilFail$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$CounterClockwiseStencilFunction$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$CounterClockwiseStencilPass$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$DepthBufferFunction$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$ReferenceStencil$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$StencilDepthBufferFail$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$StencilEnable$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$StencilFail$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$StencilFunction$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$StencilMask$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$StencilPass$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$StencilWriteMask$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DepthStencilState$TwoSidedStencilMode$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function DepthStencilState__cctor () {
      $thisType.Default = $S00().Construct("DepthStencilState.Default", true, true);
      $thisType.DepthRead = $S00().Construct("DepthStencilState.DepthRead", true, false);
      $thisType.None = $S00().Construct("DepthStencilState.None", false, false);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DepthStencilState__cctor
    );

    $.Property({Static:false, Public:true }, "DepthBufferEnable", $.Boolean);

    $.Property({Static:false, Public:true }, "DepthBufferWriteEnable", $.Boolean);

    $.Property({Static:false, Public:true }, "CounterClockwiseStencilDepthBufferFail", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"));

    $.Property({Static:false, Public:true }, "CounterClockwiseStencilFail", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"));

    $.Property({Static:false, Public:true }, "CounterClockwiseStencilFunction", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction"));

    $.Property({Static:false, Public:true }, "CounterClockwiseStencilPass", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"));

    $.Property({Static:false, Public:true }, "DepthBufferFunction", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction"));

    $.Property({Static:false, Public:true }, "ReferenceStencil", $.Int32);

    $.Property({Static:false, Public:true }, "StencilDepthBufferFail", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"));

    $.Property({Static:false, Public:true }, "StencilEnable", $.Boolean);

    $.Property({Static:false, Public:true }, "StencilFail", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"));

    $.Property({Static:false, Public:true }, "StencilFunction", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction"));

    $.Property({Static:false, Public:true }, "StencilMask", $.Int32);

    $.Property({Static:false, Public:true }, "StencilPass", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"));

    $.Property({Static:false, Public:true }, "StencilWriteMask", $.Int32);

    $.Property({Static:false, Public:true }, "TwoSidedStencilMode", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.FillMode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.FillMode", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Solid: 0, 
    WireFrame: 1, 
  }
);

/* class Microsoft.Xna.Framework.Graphics.RasterizerState */ 

(function RasterizerState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CullMode)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.FillMode)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState"), [$asm01.TypeRef("System.String"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CullMode")]))) ();
  };

  function RasterizerState__ctor$00 () {
    $T01().prototype._ctor.call(this);
    this.RasterizerState$CullMode$value = $T00().CullCounterClockwiseFace;
    this.RasterizerState$FillMode$value = $T02().Solid;
    this.RasterizerState$DepthBias$value = 0;
    this.RasterizerState$MultiSampleAntiAlias$value = true;
    this.RasterizerState$ScissorTestEnable$value = false;
    this.RasterizerState$SlopeScaleDepthBias$value = 0;
  };

  function RasterizerState__ctor$01 (name, cullMode) {
    $thisType.prototype._ctor.call(this);
    this.GraphicsResource$Name$value = name;
    this.RasterizerState$CullMode$value = cullMode;
  };

  function RasterizerState_get_CullMode () {
    return this.RasterizerState$CullMode$value;
  };

  function RasterizerState_get_DepthBias () {
    return this.RasterizerState$DepthBias$value;
  };

  function RasterizerState_get_FillMode () {
    return this.RasterizerState$FillMode$value;
  };

  function RasterizerState_get_MultiSampleAntiAlias () {
    return this.RasterizerState$MultiSampleAntiAlias$value;
  };

  function RasterizerState_get_ScissorTestEnable () {
    return this.RasterizerState$ScissorTestEnable$value;
  };

  function RasterizerState_get_SlopeScaleDepthBias () {
    return this.RasterizerState$SlopeScaleDepthBias$value;
  };

  function RasterizerState_set_CullMode (value) {
    this.RasterizerState$CullMode$value = value;
  };

  function RasterizerState_set_DepthBias (value) {
    this.RasterizerState$DepthBias$value = +value;
  };

  function RasterizerState_set_FillMode (value) {
    this.RasterizerState$FillMode$value = value;
  };

  function RasterizerState_set_MultiSampleAntiAlias (value) {
    this.RasterizerState$MultiSampleAntiAlias$value = value;
  };

  function RasterizerState_set_ScissorTestEnable (value) {
    this.RasterizerState$ScissorTestEnable$value = value;
  };

  function RasterizerState_set_SlopeScaleDepthBias (value) {
    this.RasterizerState$SlopeScaleDepthBias$value = +value;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.RasterizerState", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      RasterizerState__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CullMode")]), 
      RasterizerState__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_CullMode", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CullMode")), 
      RasterizerState_get_CullMode
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DepthBias", 
      JSIL.MethodSignature.Return($.Single), 
      RasterizerState_get_DepthBias
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_FillMode", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.FillMode")), 
      RasterizerState_get_FillMode
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MultiSampleAntiAlias", 
      JSIL.MethodSignature.Return($.Boolean), 
      RasterizerState_get_MultiSampleAntiAlias
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ScissorTestEnable", 
      JSIL.MethodSignature.Return($.Boolean), 
      RasterizerState_get_ScissorTestEnable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SlopeScaleDepthBias", 
      JSIL.MethodSignature.Return($.Single), 
      RasterizerState_get_SlopeScaleDepthBias
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CullMode", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CullMode")), 
      RasterizerState_set_CullMode
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DepthBias", 
      JSIL.MethodSignature.Action($.Single), 
      RasterizerState_set_DepthBias
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_FillMode", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.FillMode")), 
      RasterizerState_set_FillMode
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_MultiSampleAntiAlias", 
      JSIL.MethodSignature.Action($.Boolean), 
      RasterizerState_set_MultiSampleAntiAlias
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ScissorTestEnable", 
      JSIL.MethodSignature.Action($.Boolean), 
      RasterizerState_set_ScissorTestEnable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SlopeScaleDepthBias", 
      JSIL.MethodSignature.Action($.Single), 
      RasterizerState_set_SlopeScaleDepthBias
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "CullClockwise", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "CullCounterClockwise", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "CullNone", $.Type); 
    $.Field({Static:false, Public:false}, "RasterizerState$CullMode$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CullMode"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RasterizerState$DepthBias$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RasterizerState$FillMode$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.FillMode"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RasterizerState$MultiSampleAntiAlias$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RasterizerState$ScissorTestEnable$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RasterizerState$SlopeScaleDepthBias$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function RasterizerState__cctor () {
      $thisType.CullClockwise = $S00().Construct("RasterizerState.CullClockwise", $T00().CullClockwiseFace);
      $thisType.CullCounterClockwise = $S00().Construct("RasterizerState.CullCounterClockwise", $T00().CullCounterClockwiseFace);
      $thisType.CullNone = $S00().Construct("RasterizerState.CullNone", $T00().None);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      RasterizerState__cctor
    );

    $.Property({Static:false, Public:true }, "CullMode", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CullMode"));

    $.Property({Static:false, Public:true }, "DepthBias", $.Single);

    $.Property({Static:false, Public:true }, "FillMode", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.FillMode"));

    $.Property({Static:false, Public:true }, "MultiSampleAntiAlias", $.Boolean);

    $.Property({Static:false, Public:true }, "ScissorTestEnable", $.Boolean);

    $.Property({Static:false, Public:true }, "SlopeScaleDepthBias", $.Single);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.SamplerState */ 

(function SamplerState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureFilter)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureAddressMode)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState"), [
        $asm01.TypeRef("System.String"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureFilter"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode")
      ]))) ();
  };

  function SamplerState__ctor$00 () {
    $T02().prototype._ctor.call(this);
    this.SamplerState$Filter$value = $T00().Linear;
    this.SamplerState$AddressU$value = $T01().Wrap;
    this.SamplerState$AddressV$value = $T01().Wrap;
    this.SamplerState$AddressW$value = $T01().Wrap;
    this.SamplerState$MaxAnisotropy$value = 4;
    this.SamplerState$MaxMipLevel$value = 0;
    this.SamplerState$MipMapLevelOfDetailBias$value = 0;
  };

  function SamplerState__ctor$01 (name, filter, addressU, addressV, addressW) {
    $thisType.prototype._ctor.call(this);
    this.GraphicsResource$Name$value = name;
    this.SamplerState$Filter$value = filter;
    this.SamplerState$AddressU$value = addressU;
    this.SamplerState$AddressV$value = addressV;
    this.SamplerState$AddressW$value = addressW;
  };

  function SamplerState_get_AddressU () {
    return this.SamplerState$AddressU$value;
  };

  function SamplerState_get_AddressV () {
    return this.SamplerState$AddressV$value;
  };

  function SamplerState_get_AddressW () {
    return this.SamplerState$AddressW$value;
  };

  function SamplerState_get_Filter () {
    return this.SamplerState$Filter$value;
  };

  function SamplerState_get_MaxAnisotropy () {
    return this.SamplerState$MaxAnisotropy$value;
  };

  function SamplerState_get_MaxMipLevel () {
    return this.SamplerState$MaxMipLevel$value;
  };

  function SamplerState_get_MipMapLevelOfDetailBias () {
    return this.SamplerState$MipMapLevelOfDetailBias$value;
  };

  function SamplerState_set_AddressU (value) {
    this.SamplerState$AddressU$value = value;
  };

  function SamplerState_set_AddressV (value) {
    this.SamplerState$AddressV$value = value;
  };

  function SamplerState_set_AddressW (value) {
    this.SamplerState$AddressW$value = value;
  };

  function SamplerState_set_Filter (value) {
    this.SamplerState$Filter$value = value;
  };

  function SamplerState_set_MaxAnisotropy (value) {
    this.SamplerState$MaxAnisotropy$value = (value | 0);
  };

  function SamplerState_set_MaxMipLevel (value) {
    this.SamplerState$MaxMipLevel$value = (value | 0);
  };

  function SamplerState_set_MipMapLevelOfDetailBias (value) {
    this.SamplerState$MipMapLevelOfDetailBias$value = +value;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.SamplerState", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SamplerState__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureFilter"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode")
        ]), 
      SamplerState__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_AddressU", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode")), 
      SamplerState_get_AddressU
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_AddressV", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode")), 
      SamplerState_get_AddressV
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_AddressW", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode")), 
      SamplerState_get_AddressW
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Filter", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureFilter")), 
      SamplerState_get_Filter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MaxAnisotropy", 
      JSIL.MethodSignature.Return($.Int32), 
      SamplerState_get_MaxAnisotropy
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MaxMipLevel", 
      JSIL.MethodSignature.Return($.Int32), 
      SamplerState_get_MaxMipLevel
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MipMapLevelOfDetailBias", 
      JSIL.MethodSignature.Return($.Single), 
      SamplerState_get_MipMapLevelOfDetailBias
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AddressU", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode")), 
      SamplerState_set_AddressU
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AddressV", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode")), 
      SamplerState_set_AddressV
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AddressW", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode")), 
      SamplerState_set_AddressW
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Filter", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureFilter")), 
      SamplerState_set_Filter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_MaxAnisotropy", 
      JSIL.MethodSignature.Action($.Int32), 
      SamplerState_set_MaxAnisotropy
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_MaxMipLevel", 
      JSIL.MethodSignature.Action($.Int32), 
      SamplerState_set_MaxMipLevel
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_MipMapLevelOfDetailBias", 
      JSIL.MethodSignature.Action($.Single), 
      SamplerState_set_MipMapLevelOfDetailBias
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "AnisotropicClamp", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "AnisotropicWrap", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LinearClamp", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LinearWrap", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "PointClamp", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "PointWrap", $.Type); 
    $.Field({Static:false, Public:false}, "SamplerState$AddressU$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SamplerState$AddressV$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SamplerState$AddressW$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SamplerState$Filter$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureFilter"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SamplerState$MaxAnisotropy$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SamplerState$MaxMipLevel$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SamplerState$MipMapLevelOfDetailBias$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function SamplerState__cctor () {
      $thisType.AnisotropicClamp = $S00().Construct("SamplerState.AnisotropicClamp", $T00().Anisotropic, $T01().Clamp, $T01().Clamp, $T01().Clamp);
      $thisType.AnisotropicWrap = $S00().Construct("SamplerState.AnisotropicWrap", $T00().Anisotropic, $T01().Wrap, $T01().Wrap, $T01().Wrap);
      $thisType.LinearClamp = $S00().Construct("SamplerState.LinearClamp", $T00().Linear, $T01().Clamp, $T01().Clamp, $T01().Clamp);
      $thisType.LinearWrap = $S00().Construct("SamplerState.LinearWrap", $T00().Linear, $T01().Wrap, $T01().Wrap, $T01().Wrap);
      $thisType.PointClamp = $S00().Construct("SamplerState.PointClamp", $T00().Point, $T01().Clamp, $T01().Clamp, $T01().Clamp);
      $thisType.PointWrap = $S00().Construct("SamplerState.PointWrap", $T00().Point, $T01().Wrap, $T01().Wrap, $T01().Wrap);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SamplerState__cctor
    );

    $.Property({Static:false, Public:true }, "AddressU", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"));

    $.Property({Static:false, Public:true }, "AddressV", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"));

    $.Property({Static:false, Public:true }, "AddressW", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"));

    $.Property({Static:false, Public:true }, "Filter", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureFilter"));

    $.Property({Static:false, Public:true }, "MaxAnisotropy", $.Int32);

    $.Property({Static:false, Public:true }, "MaxMipLevel", $.Int32);

    $.Property({Static:false, Public:true }, "MipMapLevelOfDetailBias", $.Single);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.StencilOperation */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.StencilOperation", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Keep: 0, 
    Zero: 1, 
    Replace: 2, 
    Increment: 3, 
    Decrement: 4, 
    IncrementSaturation: 5, 
    DecrementSaturation: 6, 
    Invert: 7, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.BufferUsage */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.BufferUsage", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    WriteOnly: 1, 
  }
);

/* interface Microsoft.Xna.Framework.Graphics.IVertexType */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.IVertexType", true, [], function ($) {
    $.Method({}, "get_VertexDeclaration", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")));
    $.Property({}, "VertexDeclaration");
  }, []);

/* enum Microsoft.Xna.Framework.Graphics.PrimitiveType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.PrimitiveType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    TriangleList: 0, 
    TriangleStrip: 1, 
    LineList: 2, 
    LineStrip: 3, 
  }
);

/* struct Microsoft.Xna.Framework.Graphics.VertexElement */ 

(function VertexElement$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementUsage)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };

  function VertexElement__ctor (offset, elementFormat, elementUsage, usageIndex) {
    JSIL.CopyMembers(new $thisType(), this);
    this.VertexElement$Offset$value = (offset | 0);
    this.VertexElement$UsageIndex$value = (usageIndex | 0);
    this.VertexElement$VertexElementFormat$value = elementFormat;
    this.VertexElement$VertexElementUsage$value = elementUsage;
  };

  function VertexElement_Object_Equals (obj) {
    return ((obj !== null) && 
      !$T04().op_Inequality(
        JSIL.GetType(obj), 
        JSIL.GetType(this)
      ) && $thisType.op_Equality(this, $thisType.$Cast(obj)));
  };

  function VertexElement_get_Offset () {
    return this.VertexElement$Offset$value;
  };

  function VertexElement_get_UsageIndex () {
    return this.VertexElement$UsageIndex$value;
  };

  function VertexElement_get_VertexElementFormat () {
    return this.VertexElement$VertexElementFormat$value;
  };

  function VertexElement_get_VertexElementUsage () {
    return this.VertexElement$VertexElementUsage$value;
  };

  function VertexElement_GetHashCode () {
    return 0;
  };

  function VertexElement_op_Equality (left, right) {
    return (!(((left.VertexElement$Offset$value | 0) !== (right.VertexElement$Offset$value | 0)) || 
        ((left.VertexElement$UsageIndex$value | 0) !== (right.VertexElement$UsageIndex$value | 0)) || 
        (left.VertexElement$VertexElementUsage$value !== right.VertexElement$VertexElementUsage$value)) && (left.VertexElement$VertexElementFormat$value === right.VertexElement$VertexElementFormat$value));
  };

  function VertexElement_op_Inequality (left, right) {
    return !$thisType.op_Equality(left, right);
  };

  function VertexElement_set_Offset (value) {
    this.VertexElement$Offset$value = (value | 0);
  };

  function VertexElement_set_UsageIndex (value) {
    this.VertexElement$UsageIndex$value = (value | 0);
  };

  function VertexElement_set_VertexElementFormat (value) {
    this.VertexElement$VertexElementFormat$value = value;
  };

  function VertexElement_set_VertexElementUsage (value) {
    this.VertexElement$VertexElementUsage$value = value;
  };

  function VertexElement_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T05(), ["{{Offset:", (this.VertexElement$Offset$value).toString(), " Format:", (this.VertexElement$VertexElementFormat$value).toString(), " Usage:", (this.VertexElement$VertexElementUsage$value).toString(), " UsageIndex: ", (this.VertexElement$UsageIndex$value).toString(), "}}"]));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexElement", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementUsage"), $.Int32
        ]), 
      VertexElement__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      VertexElement_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32), 
      VertexElement_get_Offset
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_UsageIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      VertexElement_get_UsageIndex
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_VertexElementFormat", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat")), 
      VertexElement_get_VertexElementFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_VertexElementUsage", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementUsage")), 
      VertexElement_get_VertexElementUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      VertexElement_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      VertexElement_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      VertexElement_op_Inequality
    );

    $.Method({Static:false, Public:true }, "set_Offset", 
      JSIL.MethodSignature.Action($.Int32), 
      VertexElement_set_Offset
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_UsageIndex", 
      JSIL.MethodSignature.Action($.Int32), 
      VertexElement_set_UsageIndex
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_VertexElementFormat", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat")), 
      VertexElement_set_VertexElementFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_VertexElementUsage", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementUsage")), 
      VertexElement_set_VertexElementUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      VertexElement_toString
    );

    $.Field({Static:false, Public:false}, "VertexElement$Offset$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "VertexElement$VertexElementFormat$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "VertexElement$VertexElementUsage$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementUsage"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "VertexElement$UsageIndex$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Offset", $.Int32);

    $.Property({Static:false, Public:true }, "VertexElementFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat"));

    $.Property({Static:false, Public:true }, "VertexElementUsage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementUsage"));

    $.Property({Static:false, Public:true }, "UsageIndex", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.VertexElementFormat */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.VertexElementFormat", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Single: 0, 
    Vector2: 1, 
    Vector3: 2, 
    Vector4: 3, 
    Color: 4, 
    Byte4: 5, 
    Short2: 6, 
    Short4: 7, 
    NormalizedShort2: 8, 
    NormalizedShort4: 9, 
    HalfVector2: 10, 
    HalfVector4: 11, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.VertexElementUsage */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.VertexElementUsage", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Position: 0, 
    Color: 1, 
    TextureCoordinate: 2, 
    Normal: 3, 
    Binormal: 4, 
    Tangent: 5, 
    BlendIndices: 6, 
    BlendWeight: 7, 
    Depth: 8, 
    Fog: 9, 
    PointSize: 10, 
    Sample: 11, 
    TessellateFactor: 12, 
  }
);

/* struct Microsoft.Xna.Framework.Graphics.VertexPositionColor */ 

(function VertexPositionColor$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElement)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementUsage)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElement")])]))) ();
  };

  function VertexPositionColor__ctor (position, color) {
    this.Position = position.MemberwiseClone();
    this.Color = color.MemberwiseClone();
  };

  function VertexPositionColor_Object_Equals (obj) {
    return ((obj !== null) && 
      !$T07().op_Inequality(
        JSIL.GetType(obj), 
        JSIL.GetType(this)
      ) && $thisType.op_Equality(this, $thisType.$Cast(obj).MemberwiseClone()));
  };

  function VertexPositionColor_GetHashCode () {
    return 0;
  };

  function VertexPositionColor_Microsoft_Xna_Framework_Graphics_IVertexType_get_VertexDeclaration () {
    return $thisType.VertexDeclaration;
  };

  function VertexPositionColor_op_Equality (left, right) {
    return ($T05().op_Equality(left.Color, right.Color) && $T04().op_Equality(left.Position.MemberwiseClone(), right.Position.MemberwiseClone()));
  };

  function VertexPositionColor_op_Inequality (left, right) {
    return !$thisType.op_Equality(left.MemberwiseClone(), right.MemberwiseClone());
  };

  function VertexPositionColor_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), ["{{Position:", (this.Position).toString(), " Color:", (this.Color).toString(), "}}"]));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexPositionColor", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Color")]), 
      VertexPositionColor__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      VertexPositionColor_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      VertexPositionColor_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IVertexType.get_VertexDeclaration", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")), 
      VertexPositionColor_Microsoft_Xna_Framework_Graphics_IVertexType_get_VertexDeclaration
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IVertexType"), "get_VertexDeclaration");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      VertexPositionColor_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      VertexPositionColor_op_Inequality
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      VertexPositionColor_toString
    );

    $.Field({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:true }, "Color", $asm00.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "VertexDeclaration", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")); 
    function VertexPositionColor__cctor () {
      $thisType.VertexDeclaration = $S00().Construct(JSIL.Array.New($T01(), [new ($T01())(0, $T02().Vector3, $T03().Position, 0), new ($T01())(12, $T02().Color, $T03().Color, 0)]));
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      VertexPositionColor__cctor
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IVertexType")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture */ 

(function VertexPositionNormalTexture$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElement)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementUsage)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElement")])]))) ();
  };

  function VertexPositionNormalTexture__ctor (position, normal, textureCoordinate) {
    this.Position = position.MemberwiseClone();
    this.Normal = normal.MemberwiseClone();
    this.TextureCoordinate = textureCoordinate.MemberwiseClone();
  };

  function VertexPositionNormalTexture_Object_Equals (obj) {
    return ((obj !== null) && 
      !$T07().op_Inequality(
        JSIL.GetType(obj), 
        JSIL.GetType(this)
      ) && $thisType.op_Equality(this, $thisType.$Cast(obj).MemberwiseClone()));
  };

  function VertexPositionNormalTexture_GetHashCode () {
    return 0;
  };

  function VertexPositionNormalTexture_Microsoft_Xna_Framework_Graphics_IVertexType_get_VertexDeclaration () {
    return $thisType.VertexDeclaration;
  };

  function VertexPositionNormalTexture_op_Equality (left, right) {
    return (!(!$T04().op_Equality(left.Position.MemberwiseClone(), right.Position.MemberwiseClone()) || 
        !$T04().op_Equality(left.Normal.MemberwiseClone(), right.Normal.MemberwiseClone())) && $T05().op_Equality(left.TextureCoordinate.MemberwiseClone(), right.TextureCoordinate.MemberwiseClone()));
  };

  function VertexPositionNormalTexture_op_Inequality (left, right) {
    return !$thisType.op_Equality(left.MemberwiseClone(), right.MemberwiseClone());
  };

  function VertexPositionNormalTexture_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), ["{{Position:", (this.Position).toString(), " Normal:", (this.Normal).toString(), " TextureCoordinate:", (this.TextureCoordinate).toString(), "}}"]));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      VertexPositionNormalTexture__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      VertexPositionNormalTexture_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      VertexPositionNormalTexture_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IVertexType.get_VertexDeclaration", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")), 
      VertexPositionNormalTexture_Microsoft_Xna_Framework_Graphics_IVertexType_get_VertexDeclaration
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IVertexType"), "get_VertexDeclaration");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      VertexPositionNormalTexture_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      VertexPositionNormalTexture_op_Inequality
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      VertexPositionNormalTexture_toString
    );

    $.Field({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:true }, "Normal", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:true }, "TextureCoordinate", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "VertexDeclaration", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")); 
    function VertexPositionNormalTexture__cctor () {
      $thisType.VertexDeclaration = $S00().Construct(JSIL.Array.New($T01(), [new ($T01())(0, $T02().Vector3, $T03().Position, 0), new ($T01())(12, $T02().Vector3, $T03().Normal, 0), new ($T01())(24, $T02().Vector2, $T03().TextureCoordinate, 0)]));
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      VertexPositionNormalTexture__cctor
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IVertexType")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.VertexPositionTexture */ 

(function VertexPositionTexture$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElement)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementUsage)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElement")])]))) ();
  };

  function VertexPositionTexture__ctor (position, textureCoordinate) {
    this.Position = position.MemberwiseClone();
    this.TextureCoordinate = textureCoordinate.MemberwiseClone();
  };

  function VertexPositionTexture_Object_Equals (obj) {
    return ((obj !== null) && 
      !$T07().op_Inequality(
        JSIL.GetType(obj), 
        JSIL.GetType(this)
      ) && $thisType.op_Equality(this, $thisType.$Cast(obj).MemberwiseClone()));
  };

  function VertexPositionTexture_GetHashCode () {
    return 0;
  };

  function VertexPositionTexture_Microsoft_Xna_Framework_Graphics_IVertexType_get_VertexDeclaration () {
    return $thisType.VertexDeclaration;
  };

  function VertexPositionTexture_op_Equality (left, right) {
    return ($T04().op_Equality(left.Position.MemberwiseClone(), right.Position.MemberwiseClone()) && $T05().op_Equality(left.TextureCoordinate.MemberwiseClone(), right.TextureCoordinate.MemberwiseClone()));
  };

  function VertexPositionTexture_op_Inequality (left, right) {
    return !$thisType.op_Equality(left.MemberwiseClone(), right.MemberwiseClone());
  };

  function VertexPositionTexture_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), ["{{Position:", (this.Position).toString(), " TextureCoordinate:", (this.TextureCoordinate).toString(), "}}"]));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexPositionTexture", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      VertexPositionTexture__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      VertexPositionTexture_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      VertexPositionTexture_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IVertexType.get_VertexDeclaration", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")), 
      VertexPositionTexture_Microsoft_Xna_Framework_Graphics_IVertexType_get_VertexDeclaration
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IVertexType"), "get_VertexDeclaration");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      VertexPositionTexture_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      VertexPositionTexture_op_Inequality
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      VertexPositionTexture_toString
    );

    $.Field({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:true }, "TextureCoordinate", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "VertexDeclaration", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")); 
    function VertexPositionTexture__cctor () {
      $thisType.VertexDeclaration = $S00().Construct(JSIL.Array.New($T01(), [new ($T01())(0, $T02().Vector3, $T03().Position, 0), new ($T01())(12, $T02().Vector2, $T03().TextureCoordinate, 0)]));
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      VertexPositionTexture__cctor
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IVertexType")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Graphics.PackedVector");
/* interface Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector", true, [], function ($) {
    $.Method({}, "PackFromVector4", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")));
    $.Method({}, "ToVector4", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")));
  }, []);

/* interface Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1 */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", true, ["TPacked"], function ($) {
    $.Method({}, "get_PackedValue", new JSIL.MethodSignature($.GenericParameter("TPacked"), null));
    $.Method({}, "set_PackedValue", new JSIL.MethodSignature(null, [$.GenericParameter("TPacked")]));
    $.Property({}, "PackedValue");
  }, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector")]);

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2 */ 

(function NormalizedByte2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.SByte)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };

  function NormalizedByte2__ctor$00 (vector) {
    this.packedValue = ($thisType.Pack(vector.X, vector.Y) | 0);
  };

  function NormalizedByte2__ctor$01 (x, y) {
    this.packedValue = ($thisType.Pack(x, y) | 0);
  };

  function NormalizedByte2_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  };

  function NormalizedByte2_Equals$02 (other) {
    return ((this.packedValue | 0) === (other.packedValue | 0));
  };

  function NormalizedByte2_get_PackedValue () {
    return this.packedValue;
  };

  function NormalizedByte2_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function NormalizedByte2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 (vector) {
    this.packedValue = ($thisType.Pack(vector.X, vector.Y) | 0);
  };

  function NormalizedByte2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4 () {
    return $S00().Construct(this.ToVector2(), 0, 1);
  };

  function NormalizedByte2_op_Equality (a, b) {
    return ((a.packedValue | 0) === (b.packedValue | 0));
  };

  function NormalizedByte2_op_Inequality (a, b) {
    return ((a.packedValue | 0) !== (b.packedValue | 0));
  };

  function NormalizedByte2_Pack (x, y) {
    return ((((+$S01().CallStatic($T05(), "Clamp", null, x, -1, 1) * 127) | 0) & 255) | ((((+$S01().CallStatic($T05(), "Clamp", null, y, -1, 1) * 127) | 0) << 8) & 65280) & 0xFFFF);
  };

  function NormalizedByte2_set_PackedValue (value) {
    this.packedValue = (value | 0);
  };

  function NormalizedByte2_toString () {
    return JSIL.NumberToFormattedString(this.packedValue, null, "X");
  };

  function NormalizedByte2_ToVector2 () {
    return $S02().Construct(+((+((((this.packedValue | 0) & 255 + 0x80 & 0xFF) - 0x80)) / 127)), +((+(((((this.packedValue | 0) >> 8) & 255 + 0x80 & 0xFF) - 0x80)) / 127)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      NormalizedByte2__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single]), 
      NormalizedByte2__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      NormalizedByte2_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      NormalizedByte2_Equals$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt16), 
      NormalizedByte2_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      NormalizedByte2_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      NormalizedByte2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      NormalizedByte2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "ToVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      NormalizedByte2_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      NormalizedByte2_op_Inequality
    );

    $.Method({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature($.UInt16, [$.Single, $.Single]), 
      NormalizedByte2_Pack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt16), 
      NormalizedByte2_set_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      NormalizedByte2_toString
    );

    $.Method({Static:false, Public:true }, "ToVector2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      NormalizedByte2_ToVector2
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), 
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4 */ 

(function NormalizedByte4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.SByte)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function NormalizedByte4__ctor$00 (vector) {
    this.packedValue = ($thisType.Pack(vector.X, vector.Y, vector.Z, vector.W) >>> 0);
  };

  function NormalizedByte4__ctor$01 (x, y, z, w) {
    this.packedValue = ($thisType.Pack(x, y, z, w) >>> 0);
  };

  function NormalizedByte4_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  };

  function NormalizedByte4_Equals$02 (other) {
    return ((this.packedValue >>> 0) === (other.packedValue >>> 0));
  };

  function NormalizedByte4_get_PackedValue () {
    return this.packedValue;
  };

  function NormalizedByte4_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function NormalizedByte4_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 (vector) {
    this.packedValue = ($thisType.Pack(vector.X, vector.Y, vector.Z, vector.W) >>> 0);
  };

  function NormalizedByte4_op_Equality (a, b) {
    return ((a.packedValue >>> 0) === (b.packedValue >>> 0));
  };

  function NormalizedByte4_op_Inequality (a, b) {
    return ((a.packedValue >>> 0) !== (b.packedValue >>> 0));
  };

  function NormalizedByte4_Pack (x, y, z, w) {
    return ((((((+$S00().CallStatic($T04(), "Clamp", null, x, -1, 1) * 127) | 0) & 255) | ((((+$S00().CallStatic($T04(), "Clamp", null, y, -1, 1) * 127) | 0) << 8) & 65280)) | ((((+$S00().CallStatic($T04(), "Clamp", null, z, -1, 1) * 127) | 0) << 16) & 16711680)) | ((((+$S00().CallStatic($T04(), "Clamp", null, w, -1, 1) * 127) | 0) << 24) & 4278190080));
  };

  function NormalizedByte4_set_PackedValue (value) {
    this.packedValue = (value >>> 0);
  };

  function NormalizedByte4_toString () {
    return JSIL.NumberToFormattedString(this.packedValue, null, "X");
  };

  function NormalizedByte4_ToVector4 () {
    return $S01().Construct(+((+((((this.packedValue >>> 0) & 255 + 0x80 & 0xFF) - 0x80)) / 127)), +((+(((((this.packedValue >>> 0) >>> 8) & 255 + 0x80 & 0xFF) - 0x80)) / 127)), +((+(((((this.packedValue >>> 0) >>> 16) & 255 + 0x80 & 0xFF) - 0x80)) / 127)), +((+(((((this.packedValue >>> 0) >>> 24) & 255 + 0x80 & 0xFF) - 0x80)) / 127)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      NormalizedByte4__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      NormalizedByte4__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      NormalizedByte4_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      NormalizedByte4_Equals$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt32), 
      NormalizedByte4_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      NormalizedByte4_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      NormalizedByte4_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      NormalizedByte4_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      NormalizedByte4_op_Inequality
    );

    $.Method({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature($.UInt32, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      NormalizedByte4_Pack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt32), 
      NormalizedByte4_set_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      NormalizedByte4_toString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      NormalizedByte4_ToVector4
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs */ 

(function PreparingDeviceSettingsEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GraphicsDeviceInformation)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };

  function PreparingDeviceSettingsEventArgs__ctor (graphicsDeviceInformation) {
    $T01().prototype._ctor.call(this);
    this.PreparingDeviceSettingsEventArgs$GraphicsDeviceInformation$value = graphicsDeviceInformation;
  };

  function PreparingDeviceSettingsEventArgs_get_GraphicsDeviceInformation () {
    return this.PreparingDeviceSettingsEventArgs$GraphicsDeviceInformation$value;
  };

  function PreparingDeviceSettingsEventArgs_set_GraphicsDeviceInformation (value) {
    this.PreparingDeviceSettingsEventArgs$GraphicsDeviceInformation$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.EventArgs"), 
      Name: "Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")), 
      PreparingDeviceSettingsEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_GraphicsDeviceInformation", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")), 
      PreparingDeviceSettingsEventArgs_get_GraphicsDeviceInformation
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_GraphicsDeviceInformation", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation")), 
      PreparingDeviceSettingsEventArgs_set_GraphicsDeviceInformation
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PreparingDeviceSettingsEventArgs$GraphicsDeviceInformation$value", $asm00.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "GraphicsDeviceInformation", $asm00.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceInformation"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GraphicsDeviceInformation */ 

(function GraphicsDeviceInformation$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PresentationParameters)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsAdapter)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsProfile)) ();
  };

  function GraphicsDeviceInformation__ctor () {
  };

  function GraphicsDeviceInformation_Clone () {
    var graphicsDeviceInformation = new $thisType();
    graphicsDeviceInformation.GraphicsDeviceInformation$Adapter$value = this.GraphicsDeviceInformation$Adapter$value;
    graphicsDeviceInformation.GraphicsDeviceInformation$GraphicsProfile$value = this.GraphicsDeviceInformation$GraphicsProfile$value;
    graphicsDeviceInformation.GraphicsDeviceInformation$PresentationParameters$value = (this.GraphicsDeviceInformation$PresentationParameters$value).Clone();
    return graphicsDeviceInformation;
  };

  function GraphicsDeviceInformation_get_Adapter () {
    return this.GraphicsDeviceInformation$Adapter$value;
  };

  function GraphicsDeviceInformation_get_GraphicsProfile () {
    return this.GraphicsDeviceInformation$GraphicsProfile$value;
  };

  function GraphicsDeviceInformation_get_PresentationParameters () {
    return this.GraphicsDeviceInformation$PresentationParameters$value;
  };

  function GraphicsDeviceInformation_set_Adapter (value) {
    this.GraphicsDeviceInformation$Adapter$value = value;
  };

  function GraphicsDeviceInformation_set_GraphicsProfile (value) {
    this.GraphicsDeviceInformation$GraphicsProfile$value = value;
  };

  function GraphicsDeviceInformation_set_PresentationParameters (value) {
    this.GraphicsDeviceInformation$PresentationParameters$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GraphicsDeviceInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GraphicsDeviceInformation__ctor
    );

    $.Method({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      GraphicsDeviceInformation_Clone
    );

    $.Method({Static:false, Public:true }, "get_Adapter", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter")), 
      GraphicsDeviceInformation_get_Adapter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_GraphicsProfile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile")), 
      GraphicsDeviceInformation_get_GraphicsProfile
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PresentationParameters", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters")), 
      GraphicsDeviceInformation_get_PresentationParameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Adapter", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter")), 
      GraphicsDeviceInformation_set_Adapter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_GraphicsProfile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile")), 
      GraphicsDeviceInformation_set_GraphicsProfile
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PresentationParameters", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters")), 
      GraphicsDeviceInformation_set_PresentationParameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GraphicsDeviceInformation$Adapter$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDeviceInformation$GraphicsProfile$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDeviceInformation$PresentationParameters$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Adapter", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter"));

    $.Property({Static:false, Public:true }, "GraphicsProfile", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"));

    $.Property({Static:false, Public:true }, "PresentationParameters", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GraphicsDeviceManager */ 

(function GraphicsDeviceManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.DisplayOrientation)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthFormat)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameServiceContainer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IGraphicsDeviceManager)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm00.Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PresentationParameters)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GamePlatform)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PresentInterval)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GraphicsDeviceInformation)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsAdapter)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchPanel)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsProfile)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.GC)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_FauxBackbuffer)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice)) ();
  };

  function GraphicsDeviceManager__ctor (game) {
    if (game === null) {
      throw $S00().Construct("The game cannot be null!");
    }
    this.game = game;
    this.supportedOrientations = $T02().Default;
    this.GraphicsDeviceManager$PreferredBackBufferHeight$value = ($thisType.DefaultBackBufferHeight | 0);
    this.GraphicsDeviceManager$PreferredBackBufferWidth$value = ($thisType.DefaultBackBufferWidth | 0);
    this.GraphicsDeviceManager$PreferredBackBufferFormat$value = $T03().Color;
    this.GraphicsDeviceManager$PreferredDepthStencilFormat$value = $T04().Depth24;
    this.GraphicsDeviceManager$SynchronizeWithVerticalRetrace$value = true;
    if ((game.get_Services()).GetService($T06().__Type__) !== null) {
      throw $S01().Construct("Graphics Device Manager Already Present");
    }
    (game.get_Services()).AddService($T06().__Type__, this);
    (game.get_Services()).AddService($T08().__Type__, this);
  };

  function GraphicsDeviceManager_add_DeviceCreated (value) {
    var eventHandler = this.DeviceCreated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Combine(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "DeviceCreated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_add_DeviceDisposing (value) {
    var eventHandler = this.DeviceDisposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Combine(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "DeviceDisposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_add_DeviceReset (value) {
    var eventHandler = this.DeviceReset;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Combine(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "DeviceReset"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_add_DeviceResetting (value) {
    var eventHandler = this.DeviceResetting;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Combine(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "DeviceResetting"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_add_Disposed (value) {
    var eventHandler = this.Disposed;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Combine(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "Disposed"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_add_PreparingDeviceSettings (value) {
    var eventHandler = this.PreparingDeviceSettings;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Combine(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "PreparingDeviceSettings"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_ApplyChanges () {
    if (this.graphicsDevice !== null) {
      this.OnDeviceResetting(this, $T0D().Empty);
      this.GraphicsDevice.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferFormat$value = this.GraphicsDeviceManager$PreferredBackBufferFormat$value;
      this.GraphicsDevice.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferWidth$value = (this.GraphicsDeviceManager$PreferredBackBufferWidth$value | 0);
      this.GraphicsDevice.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferHeight$value = (this.GraphicsDeviceManager$PreferredBackBufferHeight$value | 0);
      this.GraphicsDevice.GraphicsDevice$PresentationParameters$value.PresentationParameters$DepthStencilFormat$value = this.GraphicsDeviceManager$PreferredDepthStencilFormat$value;
      this.GraphicsDevice.GraphicsDevice$PresentationParameters$value.PresentationParameters$IsFullScreen$value = this.GraphicsDeviceManager$IsFullScreen$value;
      (this.game.Platform).BeginScreenDeviceChange(this.get_GraphicsDevice().GraphicsDevice$PresentationParameters$value.PresentationParameters$IsFullScreen$value);
      (this.game.Platform).EndScreenDeviceChange(
        "FNA", 
        this.get_GraphicsDevice().GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferWidth$value, 
        this.get_GraphicsDevice().GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferHeight$value
      );
      (this.game.Platform).SetPresentationInterval((
          this.GraphicsDeviceManager$SynchronizeWithVerticalRetrace$value
             ? this.get_GraphicsDevice().GraphicsDevice$PresentationParameters$value.PresentationParameters$PresentationInterval$value
             : $T11().Immediate)
      );
      (this.get_GraphicsDevice()).Reset();
      this.OnDeviceReset(this, $T0D().Empty);
      this.UpdateTouchPanel();
    }
  };

  function GraphicsDeviceManager_Dispose (disposing) {
    if (!this.disposed) {
      if (disposing) {
        if (this.graphicsDevice !== null) {
          this.OnDeviceDisposing(this, $T0D().Empty);
          (this.graphicsDevice).Dispose();
          this.graphicsDevice = null;
        }
      }
      if (this.Disposed !== null) {
        this.Disposed(this, $T0D().Empty);
      }
      this.disposed = true;
    }
  };

  function GraphicsDeviceManager_Finalize () {
    try {
      this.Dispose(false);
    } finally {
      $T13().prototype.Finalize.call(this);
    }
  };

  function GraphicsDeviceManager_get_GraphicsDevice () {
    if (this.graphicsDevice === null) {
      $IM00().Call(this, null);
    }
    return this.graphicsDevice;
  };

  function GraphicsDeviceManager_get_GraphicsProfile () {
    return this.GraphicsDeviceManager$GraphicsProfile$value;
  };

  function GraphicsDeviceManager_get_IsFullScreen () {
    return this.GraphicsDeviceManager$IsFullScreen$value;
  };

  function GraphicsDeviceManager_get_PreferMultiSampling () {
    return this.GraphicsDeviceManager$PreferMultiSampling$value;
  };

  function GraphicsDeviceManager_get_PreferredBackBufferFormat () {
    return this.GraphicsDeviceManager$PreferredBackBufferFormat$value;
  };

  function GraphicsDeviceManager_get_PreferredBackBufferHeight () {
    return this.GraphicsDeviceManager$PreferredBackBufferHeight$value;
  };

  function GraphicsDeviceManager_get_PreferredBackBufferWidth () {
    return this.GraphicsDeviceManager$PreferredBackBufferWidth$value;
  };

  function GraphicsDeviceManager_get_PreferredDepthStencilFormat () {
    return this.GraphicsDeviceManager$PreferredDepthStencilFormat$value;
  };

  function GraphicsDeviceManager_get_SupportedOrientations () {
    return this.supportedOrientations;
  };

  function GraphicsDeviceManager_get_SynchronizeWithVerticalRetrace () {
    return this.GraphicsDeviceManager$SynchronizeWithVerticalRetrace$value;
  };

  function GraphicsDeviceManager_INTERNAL_ResizeGraphicsDevice (width, height) {
    var pp = this.get_GraphicsDevice().GraphicsDevice$PresentationParameters$value;
    if (!(((pp.PresentationParameters$BackBufferWidth$value | 0) === (width | 0)) && ((pp.PresentationParameters$BackBufferHeight$value | 0) === (height | 0)))) {
      this.OnDeviceResetting(this, $T0D().Empty);
      pp.PresentationParameters$BackBufferWidth$value = (width | 0);
      pp.PresentationParameters$BackBufferHeight$value = (height | 0);
      (this.get_GraphicsDevice()).Reset();
      this.OnDeviceReset(this, $T0D().Empty);
      this.UpdateTouchPanel();
    }
  };

  function GraphicsDeviceManager_Microsoft_Xna_Framework_IGraphicsDeviceManager_BeginDraw () {
    if (this.graphicsDevice === null) {
      var result = false;
    } else {
      this.drawBegun = true;
      result = true;
    }
    return result;
  };

  function GraphicsDeviceManager_Microsoft_Xna_Framework_IGraphicsDeviceManager_CreateDevice () {
    var gdi = new ($T15())();
    gdi.GraphicsDeviceInformation$Adapter$value = $T16().get_DefaultAdapter();
    gdi.GraphicsDeviceInformation$GraphicsProfile$value = this.GraphicsDeviceManager$GraphicsProfile$value;
    gdi.GraphicsDeviceInformation$PresentationParameters$value = new ($T0E())();
    (gdi.GraphicsDeviceInformation$PresentationParameters$value.PresentationParameters$DeviceWindowHandle$value = ((this.game).get_Window()).get_Handle().MemberwiseClone());
    gdi.GraphicsDeviceInformation$PresentationParameters$value.PresentationParameters$DepthStencilFormat$value = $T04().Depth24;
    gdi.GraphicsDeviceInformation$PresentationParameters$value.PresentationParameters$IsFullScreen$value = false;
    this.OnPreparingDeviceSettings(this, new ($T18())(gdi));
    this.GraphicsDeviceManager$GraphicsProfile$value = gdi.GraphicsDeviceInformation$GraphicsProfile$value;
    this.GraphicsDeviceManager$PreferredBackBufferFormat$value = gdi.GraphicsDeviceInformation$PresentationParameters$value.PresentationParameters$BackBufferFormat$value;
    this.GraphicsDeviceManager$PreferredDepthStencilFormat$value = gdi.GraphicsDeviceInformation$PresentationParameters$value.PresentationParameters$DepthStencilFormat$value;
    this.graphicsDevice = new ($T0F())(gdi.GraphicsDeviceInformation$Adapter$value, gdi.GraphicsDeviceInformation$GraphicsProfile$value, gdi.GraphicsDeviceInformation$PresentationParameters$value);
    this.ApplyChanges();
    $T19().set_DisplayOrientation(this.graphicsDevice.GraphicsDevice$PresentationParameters$value.PresentationParameters$DisplayOrientation$value);
    this.OnDeviceCreated(this, $T0D().Empty);
  };

  function GraphicsDeviceManager_Microsoft_Xna_Framework_IGraphicsDeviceManager_EndDraw () {
    if (!((this.graphicsDevice === null) || !this.drawBegun)) {
      this.drawBegun = false;
      (this.graphicsDevice).Present();
    }
  };

  function GraphicsDeviceManager_OnDeviceCreated (sender, args) {
    if (this.DeviceCreated !== null) {
      this.DeviceCreated(sender, args);
    }
  };

  function GraphicsDeviceManager_OnDeviceDisposing (sender, args) {
    if (this.DeviceDisposing !== null) {
      this.DeviceDisposing(sender, args);
    }
  };

  function GraphicsDeviceManager_OnDeviceReset (sender, args) {
    if (this.DeviceReset !== null) {
      this.DeviceReset(sender, args);
    }
  };

  function GraphicsDeviceManager_OnDeviceResetting (sender, args) {
    if (this.DeviceResetting !== null) {
      this.DeviceResetting(sender, args);
    }
  };

  function GraphicsDeviceManager_OnPreparingDeviceSettings (sender, args) {
    if (this.PreparingDeviceSettings !== null) {
      this.PreparingDeviceSettings(sender, args);
    }
  };

  function GraphicsDeviceManager_remove_DeviceCreated (value) {
    var eventHandler = this.DeviceCreated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Remove(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "DeviceCreated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_remove_DeviceDisposing (value) {
    var eventHandler = this.DeviceDisposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Remove(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "DeviceDisposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_remove_DeviceReset (value) {
    var eventHandler = this.DeviceReset;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Remove(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "DeviceReset"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_remove_DeviceResetting (value) {
    var eventHandler = this.DeviceResetting;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Remove(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "DeviceResetting"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_remove_Disposed (value) {
    var eventHandler = this.Disposed;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Remove(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "Disposed"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_remove_PreparingDeviceSettings (value) {
    var eventHandler = this.PreparingDeviceSettings;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Remove(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "PreparingDeviceSettings"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDeviceManager_set_GraphicsProfile (value) {
    this.GraphicsDeviceManager$GraphicsProfile$value = value;
  };

  function GraphicsDeviceManager_set_IsFullScreen (value) {
    this.GraphicsDeviceManager$IsFullScreen$value = value;
  };

  function GraphicsDeviceManager_set_PreferMultiSampling (value) {
    this.GraphicsDeviceManager$PreferMultiSampling$value = value;
  };

  function GraphicsDeviceManager_set_PreferredBackBufferFormat (value) {
    this.GraphicsDeviceManager$PreferredBackBufferFormat$value = value;
  };

  function GraphicsDeviceManager_set_PreferredBackBufferHeight (value) {
    this.GraphicsDeviceManager$PreferredBackBufferHeight$value = (value | 0);
  };

  function GraphicsDeviceManager_set_PreferredBackBufferWidth (value) {
    this.GraphicsDeviceManager$PreferredBackBufferWidth$value = (value | 0);
  };

  function GraphicsDeviceManager_set_PreferredDepthStencilFormat (value) {
    this.GraphicsDeviceManager$PreferredDepthStencilFormat$value = value;
  };

  function GraphicsDeviceManager_set_SupportedOrientations (value) {
    this.supportedOrientations = value;
    if ((this.game).get_Window() !== null) {
      ((this.game).get_Window()).SetSupportedOrientations(this.supportedOrientations);
    }
  };

  function GraphicsDeviceManager_set_SynchronizeWithVerticalRetrace (value) {
    this.GraphicsDeviceManager$SynchronizeWithVerticalRetrace$value = value;
  };

  function GraphicsDeviceManager_System_IDisposable_Dispose () {
    this.Dispose(true);
    $T1B().SuppressFinalize(this);
  };

  function GraphicsDeviceManager_ToggleFullScreen () {
    this.GraphicsDeviceManager$IsFullScreen$value = !this.GraphicsDeviceManager$IsFullScreen$value;
    this.graphicsDevice.GraphicsDevice$PresentationParameters$value.PresentationParameters$IsFullScreen$value = this.GraphicsDeviceManager$IsFullScreen$value;
    (this.game.Platform).BeginScreenDeviceChange(this.GraphicsDeviceManager$IsFullScreen$value);
    (this.game.Platform).EndScreenDeviceChange(
      "FNA", 
      this.get_GraphicsDevice().GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Width$value, 
      this.get_GraphicsDevice().GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Height$value
    );
  };

  function GraphicsDeviceManager_UpdateTouchPanel () {
    $T19().set_DisplayWidth(this.graphicsDevice.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferWidth$value);
    $T19().set_DisplayHeight(this.graphicsDevice.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferHeight$value);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GraphicsDeviceManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Game")), 
      GraphicsDeviceManager__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_DeviceCreated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDeviceManager_add_DeviceCreated
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_DeviceDisposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDeviceManager_add_DeviceDisposing
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_DeviceReset", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDeviceManager_add_DeviceReset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "add_DeviceResetting", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDeviceManager_add_DeviceResetting
    );

    $.Method({Static:false, Public:true }, "add_Disposed", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDeviceManager_add_Disposed
    );

    $.Method({Static:false, Public:true }, "add_PreparingDeviceSettings", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs")])), 
      GraphicsDeviceManager_add_PreparingDeviceSettings
    );

    $.Method({Static:false, Public:true }, "ApplyChanges", 
      JSIL.MethodSignature.Void, 
      GraphicsDeviceManager_ApplyChanges
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      GraphicsDeviceManager_Dispose
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      GraphicsDeviceManager_Finalize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_GraphicsDevice", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      GraphicsDeviceManager_get_GraphicsDevice
    );

    $.Method({Static:false, Public:true }, "get_GraphicsProfile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile")), 
      GraphicsDeviceManager_get_GraphicsProfile
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsFullScreen", 
      JSIL.MethodSignature.Return($.Boolean), 
      GraphicsDeviceManager_get_IsFullScreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PreferMultiSampling", 
      JSIL.MethodSignature.Return($.Boolean), 
      GraphicsDeviceManager_get_PreferMultiSampling
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PreferredBackBufferFormat", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")), 
      GraphicsDeviceManager_get_PreferredBackBufferFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PreferredBackBufferHeight", 
      JSIL.MethodSignature.Return($.Int32), 
      GraphicsDeviceManager_get_PreferredBackBufferHeight
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PreferredBackBufferWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      GraphicsDeviceManager_get_PreferredBackBufferWidth
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PreferredDepthStencilFormat", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")), 
      GraphicsDeviceManager_get_PreferredDepthStencilFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SupportedOrientations", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")), 
      GraphicsDeviceManager_get_SupportedOrientations
    );

    $.Method({Static:false, Public:true }, "get_SynchronizeWithVerticalRetrace", 
      JSIL.MethodSignature.Return($.Boolean), 
      GraphicsDeviceManager_get_SynchronizeWithVerticalRetrace
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "INTERNAL_ResizeGraphicsDevice", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      GraphicsDeviceManager_INTERNAL_ResizeGraphicsDevice
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw", 
      JSIL.MethodSignature.Return($.Boolean), 
      GraphicsDeviceManager_Microsoft_Xna_Framework_IGraphicsDeviceManager_BeginDraw
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.IGraphicsDeviceManager"), "BeginDraw");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice", 
      JSIL.MethodSignature.Void, 
      GraphicsDeviceManager_Microsoft_Xna_Framework_IGraphicsDeviceManager_CreateDevice
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.IGraphicsDeviceManager"), "CreateDevice");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw", 
      JSIL.MethodSignature.Void, 
      GraphicsDeviceManager_Microsoft_Xna_Framework_IGraphicsDeviceManager_EndDraw
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.IGraphicsDeviceManager"), "EndDraw");

    $.Method({Static:false, Public:false, Virtual:true }, "OnDeviceCreated", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      GraphicsDeviceManager_OnDeviceCreated
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnDeviceDisposing", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      GraphicsDeviceManager_OnDeviceDisposing
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnDeviceReset", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      GraphicsDeviceManager_OnDeviceReset
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnDeviceResetting", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      GraphicsDeviceManager_OnDeviceResetting
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnPreparingDeviceSettings", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs")]), 
      GraphicsDeviceManager_OnPreparingDeviceSettings
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_DeviceCreated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDeviceManager_remove_DeviceCreated
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_DeviceDisposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDeviceManager_remove_DeviceDisposing
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_DeviceReset", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDeviceManager_remove_DeviceReset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "remove_DeviceResetting", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDeviceManager_remove_DeviceResetting
    );

    $.Method({Static:false, Public:true }, "remove_Disposed", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDeviceManager_remove_Disposed
    );

    $.Method({Static:false, Public:true }, "remove_PreparingDeviceSettings", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs")])), 
      GraphicsDeviceManager_remove_PreparingDeviceSettings
    );

    $.Method({Static:false, Public:true }, "set_GraphicsProfile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile")), 
      GraphicsDeviceManager_set_GraphicsProfile
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsFullScreen", 
      JSIL.MethodSignature.Action($.Boolean), 
      GraphicsDeviceManager_set_IsFullScreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PreferMultiSampling", 
      JSIL.MethodSignature.Action($.Boolean), 
      GraphicsDeviceManager_set_PreferMultiSampling
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PreferredBackBufferFormat", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")), 
      GraphicsDeviceManager_set_PreferredBackBufferFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PreferredBackBufferHeight", 
      JSIL.MethodSignature.Action($.Int32), 
      GraphicsDeviceManager_set_PreferredBackBufferHeight
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PreferredBackBufferWidth", 
      JSIL.MethodSignature.Action($.Int32), 
      GraphicsDeviceManager_set_PreferredBackBufferWidth
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PreferredDepthStencilFormat", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")), 
      GraphicsDeviceManager_set_PreferredDepthStencilFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SupportedOrientations", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")), 
      GraphicsDeviceManager_set_SupportedOrientations
    );

    $.Method({Static:false, Public:true }, "set_SynchronizeWithVerticalRetrace", 
      JSIL.MethodSignature.Action($.Boolean), 
      GraphicsDeviceManager_set_SynchronizeWithVerticalRetrace
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      GraphicsDeviceManager_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Method({Static:false, Public:true }, "ToggleFullScreen", 
      JSIL.MethodSignature.Void, 
      GraphicsDeviceManager_ToggleFullScreen
    );

    $.Method({Static:false, Public:false}, "UpdateTouchPanel", 
      JSIL.MethodSignature.Void, 
      GraphicsDeviceManager_UpdateTouchPanel
    );

    $.Field({Static:false, Public:false}, "game", $asm00.TypeRef("Microsoft.Xna.Framework.Game")); 
    $.Field({Static:false, Public:false}, "graphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Field({Static:false, Public:false}, "supportedOrientations", $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")); 
    $.Field({Static:false, Public:false}, "drawBegun", $.Boolean); 
    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultBackBufferWidth", $.Int32, 800); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultBackBufferHeight", $.Int32, 480); 
    $.Field({Static:false, Public:false}, "Disposed", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "DeviceCreated", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "DeviceDisposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "DeviceReset", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "DeviceResetting", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "PreparingDeviceSettings", $asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs")])); 
    $.Field({Static:false, Public:false}, "GraphicsDeviceManager$GraphicsProfile$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDeviceManager$IsFullScreen$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDeviceManager$PreferMultiSampling$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDeviceManager$PreferredBackBufferFormat$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDeviceManager$PreferredBackBufferHeight$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDeviceManager$PreferredBackBufferWidth$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDeviceManager$PreferredDepthStencilFormat$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDeviceManager$SynchronizeWithVerticalRetrace$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function GraphicsDeviceManager__cctor () {
      $thisType.DefaultBackBufferWidth = 800;
      $thisType.DefaultBackBufferHeight = 480;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      GraphicsDeviceManager__cctor
    );

    $.Property({Static:false, Public:true }, "GraphicsProfile", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"));

    $.Property({Static:false, Public:true , Virtual:true }, "GraphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"));

    $.Property({Static:false, Public:true }, "IsFullScreen", $.Boolean);

    $.Property({Static:false, Public:true }, "PreferMultiSampling", $.Boolean);

    $.Property({Static:false, Public:true }, "PreferredBackBufferFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"));

    $.Property({Static:false, Public:true }, "PreferredBackBufferHeight", $.Int32);

    $.Property({Static:false, Public:true }, "PreferredBackBufferWidth", $.Int32);

    $.Property({Static:false, Public:true }, "PreferredDepthStencilFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"));

    $.Property({Static:false, Public:true }, "SynchronizeWithVerticalRetrace", $.Boolean);

    $.Property({Static:false, Public:true }, "SupportedOrientations", $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"));

    $.Event({Static:false, Public:true }, "Disposed", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "DeviceCreated", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "DeviceDisposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "DeviceReset", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true , Virtual:true }, "DeviceResetting", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "PreparingDeviceSettings", $asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService"), 
      /* 1 */ $asm01.TypeRef("System.IDisposable"), 
      /* 2 */ $asm00.TypeRef("Microsoft.Xna.Framework.IGraphicsDeviceManager")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.ColorWriteChannels */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.ColorWriteChannels", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Red: 1, 
    Green: 2, 
    Blue: 4, 
    Alpha: 8, 
    All: 15, 
  }
);

/* interface Microsoft.Xna.Framework.Graphics.IEffectFog */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.IEffectFog", true, [], function ($) {
    $.Method({}, "get_FogColor", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")));
    $.Method({}, "set_FogColor", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")));
    $.Method({}, "get_FogEnabled", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_FogEnabled", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_FogEnd", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_FogEnd", JSIL.MethodSignature.Action($.Single));
    $.Method({}, "get_FogStart", JSIL.MethodSignature.Return($.Single));
    $.Method({}, "set_FogStart", JSIL.MethodSignature.Action($.Single));
    $.Property({}, "FogColor");
    $.Property({}, "FogEnabled");
    $.Property({}, "FogEnd");
    $.Property({}, "FogStart");
  }, []);

/* interface Microsoft.Xna.Framework.Graphics.IEffectLights */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.IEffectLights", true, [], function ($) {
    $.Method({}, "get_AmbientLightColor", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")));
    $.Method({}, "set_AmbientLightColor", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")));
    $.Method({}, "get_DirectionalLight0", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")));
    $.Method({}, "get_DirectionalLight1", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")));
    $.Method({}, "get_DirectionalLight2", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")));
    $.Method({}, "get_LightingEnabled", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_LightingEnabled", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "EnableDefaultLighting", JSIL.MethodSignature.Void);
    $.Property({}, "AmbientLightColor");
    $.Property({}, "DirectionalLight0");
    $.Property({}, "DirectionalLight1");
    $.Property({}, "DirectionalLight2");
    $.Property({}, "LightingEnabled");
  }, []);

/* interface Microsoft.Xna.Framework.Graphics.IEffectMatrices */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.IEffectMatrices", true, [], function ($) {
    $.Method({}, "get_Projection", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")));
    $.Method({}, "set_Projection", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")));
    $.Method({}, "get_View", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")));
    $.Method({}, "set_View", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")));
    $.Method({}, "get_World", JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")));
    $.Method({}, "set_World", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")));
    $.Property({}, "Projection");
    $.Property({}, "View");
    $.Property({}, "World");
  }, []);

/* class Microsoft.Xna.Framework.Graphics.DirectionalLight */ 

(function DirectionalLight$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")))) ();
  };

  function DirectionalLight__ctor (directionParameter, diffuseColorParameter, specularColorParameter, cloneSource) {
    this.diffuseColorParameter = diffuseColorParameter;
    this.directionParameter = directionParameter;
    this.specularColorParameter = specularColorParameter;
    if (cloneSource !== null) {
      (this.DiffuseColor = cloneSource.get_DiffuseColor().MemberwiseClone());
      (this.Direction = cloneSource.get_Direction().MemberwiseClone());
      (this.SpecularColor = cloneSource.get_SpecularColor().MemberwiseClone());
      this.set_Enabled(cloneSource.get_Enabled());
    }
  };

  function DirectionalLight_get_DiffuseColor () {
    return this.INTERNAL_diffuseColor;
  };

  function DirectionalLight_get_Direction () {
    return this.INTERNAL_direction;
  };

  function DirectionalLight_get_Enabled () {
    return this.INTERNAL_enabled;
  };

  function DirectionalLight_get_SpecularColor () {
    return this.INTERNAL_specularColor;
  };

  function DirectionalLight_set_DiffuseColor (value) {
    this.INTERNAL_diffuseColor = value.MemberwiseClone();
    if (!(!this.get_Enabled() || (this.diffuseColorParameter === null))) {
      $S00().CallVirtual("SetValue", null, this.diffuseColorParameter, this.INTERNAL_diffuseColor);
    }
  };

  function DirectionalLight_set_Direction (value) {
    this.INTERNAL_direction = value.MemberwiseClone();
    if (this.directionParameter !== null) {
      $S00().CallVirtual("SetValue", null, this.directionParameter, this.INTERNAL_direction);
    }
  };

  function DirectionalLight_set_Enabled (value) {
    if (this.INTERNAL_enabled !== value) {
      this.INTERNAL_enabled = value;
      if (this.INTERNAL_enabled) {
        if (this.diffuseColorParameter !== null) {
          $S00().CallVirtual("SetValue", null, this.diffuseColorParameter, this.get_DiffuseColor());
        }
        if (this.specularColorParameter !== null) {
          $S00().CallVirtual("SetValue", null, this.specularColorParameter, this.get_SpecularColor());
        }
      } else {
        if (this.diffuseColorParameter !== null) {
          $S00().CallVirtual("SetValue", null, this.diffuseColorParameter, $T01().get_Zero());
        }
        if (this.specularColorParameter !== null) {
          $S00().CallVirtual("SetValue", null, this.specularColorParameter, $T01().get_Zero());
        }
      }
    }
  };

  function DirectionalLight_set_SpecularColor (value) {
    this.INTERNAL_specularColor = value.MemberwiseClone();
    if (!(!this.get_Enabled() || (this.specularColorParameter === null))) {
      $S00().CallVirtual("SetValue", null, this.specularColorParameter, this.INTERNAL_specularColor);
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.DirectionalLight", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), $.Type
        ]), 
      DirectionalLight__ctor
    );

    $.Method({Static:false, Public:true }, "get_DiffuseColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      DirectionalLight_get_DiffuseColor
    );

    $.Method({Static:false, Public:true }, "get_Direction", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      DirectionalLight_get_Direction
    );

    $.Method({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      DirectionalLight_get_Enabled
    );

    $.Method({Static:false, Public:true }, "get_SpecularColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      DirectionalLight_get_SpecularColor
    );

    $.Method({Static:false, Public:true }, "set_DiffuseColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      DirectionalLight_set_DiffuseColor
    );

    $.Method({Static:false, Public:true }, "set_Direction", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      DirectionalLight_set_Direction
    );

    $.Method({Static:false, Public:true }, "set_Enabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      DirectionalLight_set_Enabled
    );

    $.Method({Static:false, Public:true }, "set_SpecularColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      DirectionalLight_set_SpecularColor
    );

    $.Field({Static:false, Public:false}, "INTERNAL_diffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "INTERNAL_direction", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "INTERNAL_specularColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "INTERNAL_enabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "diffuseColorParameter", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "directionParameter", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "specularColorParameter", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Property({Static:false, Public:true }, "DiffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Direction", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "SpecularColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.TextureAddressMode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.TextureAddressMode", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Wrap: 0, 
    Clamp: 1, 
    Mirror: 2, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.TextureFilter */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.TextureFilter", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Linear: 0, 
    Point: 1, 
    Anisotropic: 2, 
    LinearMipPoint: 3, 
    PointMipLinear: 4, 
    MinLinearMagPointMipLinear: 5, 
    MinLinearMagPointMipPoint: 6, 
    MinPointMagLinearMipLinear: 7, 
    MinPointMagLinearMipPoint: 8, 
  }
);

/* class Microsoft.Xna.Framework.Graphics.SamplerStateCollection */ 

(function SamplerStateCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.SamplerState))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm03.System.Collections.Generic.Queue$b1.Of($asm01.System.Int32))) ();
  };

  function SamplerStateCollection__ctor (parentDevice) {
    this.samplers = JSIL.Array.New($T01(), parentDevice.GraphicsDevice$GLDevice$value.OpenGLDevice$MaxTextureSlots$value);
    this.graphicsDevice = parentDevice;

    for (var i = 0; i < (this.samplers.length | 0); i = ((i + 1) | 0)) {
      this.samplers[i] = $T01().LinearWrap;
    }
  };

  function SamplerStateCollection_get_Item (index) {
    return this.samplers[index];
  };

  function SamplerStateCollection_set_Item (index, value) {
    this.samplers[index] = value;
    if (!$T05().prototype.Contains.call(this.graphicsDevice.ModifiedSamplers, index)) {
      $T05().prototype.Enqueue.call(this.graphicsDevice.ModifiedSamplers, index);
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.SamplerStateCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      SamplerStateCollection__ctor
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState"), [$.Int32]), 
      SamplerStateCollection_get_Item
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState")]), 
      SamplerStateCollection_set_Item
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "samplers", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "graphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Content.ContentSerializerAttribute */ 

(function ContentSerializerAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function ContentSerializerAttribute__ctor () {
    $T00().prototype._ctor.call(this);
    this.ContentSerializerAttribute$AllowNull$value = true;
  };

  function ContentSerializerAttribute_Clone () {
    var clone = new $thisType();
    clone.ContentSerializerAttribute$AllowNull$value = this.ContentSerializerAttribute$AllowNull$value;
    clone.collectionItemName = this.collectionItemName;
    clone.ContentSerializerAttribute$ElementName$value = this.ContentSerializerAttribute$ElementName$value;
    clone.ContentSerializerAttribute$FlattenContent$value = this.ContentSerializerAttribute$FlattenContent$value;
    clone.ContentSerializerAttribute$Optional$value = this.ContentSerializerAttribute$Optional$value;
    clone.ContentSerializerAttribute$SharedResource$value = this.ContentSerializerAttribute$SharedResource$value;
    return clone;
  };

  function ContentSerializerAttribute_get_AllowNull () {
    return this.ContentSerializerAttribute$AllowNull$value;
  };

  function ContentSerializerAttribute_get_CollectionItemName () {
    if ($T01().IsNullOrEmpty(this.collectionItemName)) {
      var result = "Item";
    } else {
      result = this.collectionItemName;
    }
    return result;
  };

  function ContentSerializerAttribute_get_ElementName () {
    return this.ContentSerializerAttribute$ElementName$value;
  };

  function ContentSerializerAttribute_get_FlattenContent () {
    return this.ContentSerializerAttribute$FlattenContent$value;
  };

  function ContentSerializerAttribute_get_HasCollectionItemName () {
    return !$T01().IsNullOrEmpty(this.collectionItemName);
  };

  function ContentSerializerAttribute_get_Optional () {
    return this.ContentSerializerAttribute$Optional$value;
  };

  function ContentSerializerAttribute_get_SharedResource () {
    return this.ContentSerializerAttribute$SharedResource$value;
  };

  function ContentSerializerAttribute_set_AllowNull (value) {
    this.ContentSerializerAttribute$AllowNull$value = value;
  };

  function ContentSerializerAttribute_set_CollectionItemName (value) {
    this.collectionItemName = value;
  };

  function ContentSerializerAttribute_set_ElementName (value) {
    this.ContentSerializerAttribute$ElementName$value = value;
  };

  function ContentSerializerAttribute_set_FlattenContent (value) {
    this.ContentSerializerAttribute$FlattenContent$value = value;
  };

  function ContentSerializerAttribute_set_Optional (value) {
    this.ContentSerializerAttribute$Optional$value = value;
  };

  function ContentSerializerAttribute_set_SharedResource (value) {
    this.ContentSerializerAttribute$SharedResource$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "Microsoft.Xna.Framework.Content.ContentSerializerAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ContentSerializerAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      ContentSerializerAttribute_Clone
    );

    $.Method({Static:false, Public:true }, "get_AllowNull", 
      JSIL.MethodSignature.Return($.Boolean), 
      ContentSerializerAttribute_get_AllowNull
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CollectionItemName", 
      JSIL.MethodSignature.Return($.String), 
      ContentSerializerAttribute_get_CollectionItemName
    );

    $.Method({Static:false, Public:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String), 
      ContentSerializerAttribute_get_ElementName
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_FlattenContent", 
      JSIL.MethodSignature.Return($.Boolean), 
      ContentSerializerAttribute_get_FlattenContent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasCollectionItemName", 
      JSIL.MethodSignature.Return($.Boolean), 
      ContentSerializerAttribute_get_HasCollectionItemName
    );

    $.Method({Static:false, Public:true }, "get_Optional", 
      JSIL.MethodSignature.Return($.Boolean), 
      ContentSerializerAttribute_get_Optional
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SharedResource", 
      JSIL.MethodSignature.Return($.Boolean), 
      ContentSerializerAttribute_get_SharedResource
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AllowNull", 
      JSIL.MethodSignature.Action($.Boolean), 
      ContentSerializerAttribute_set_AllowNull
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CollectionItemName", 
      JSIL.MethodSignature.Action($.String), 
      ContentSerializerAttribute_set_CollectionItemName
    );

    $.Method({Static:false, Public:true }, "set_ElementName", 
      JSIL.MethodSignature.Action($.String), 
      ContentSerializerAttribute_set_ElementName
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_FlattenContent", 
      JSIL.MethodSignature.Action($.Boolean), 
      ContentSerializerAttribute_set_FlattenContent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Optional", 
      JSIL.MethodSignature.Action($.Boolean), 
      ContentSerializerAttribute_set_Optional
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SharedResource", 
      JSIL.MethodSignature.Action($.Boolean), 
      ContentSerializerAttribute_set_SharedResource
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "collectionItemName", $.String); 
    $.Field({Static:false, Public:false}, "ContentSerializerAttribute$AllowNull$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ContentSerializerAttribute$ElementName$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ContentSerializerAttribute$FlattenContent$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ContentSerializerAttribute$Optional$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ContentSerializerAttribute$SharedResource$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "AllowNull", $.Boolean);

    $.Property({Static:false, Public:true }, "CollectionItemName", $.String);

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "FlattenContent", $.Boolean);

    $.Property({Static:false, Public:true }, "HasCollectionItemName", $.Boolean);

    $.Property({Static:false, Public:true }, "Optional", $.Boolean);

    $.Property({Static:false, Public:true }, "SharedResource", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute */ 

(function ContentSerializerIgnoreAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  function ContentSerializerIgnoreAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ContentSerializerIgnoreAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class Microsoft.Xna.Framework.Content.ReflectiveReader`1 */ 

(function ReflectiveReader$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReaderManager)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Reflection.PropertyInfo)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentSerializerAttribute)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Action$b2.Of($asm01.System.Object, $asm01.System.Object))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentLoadException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Object, $asm01.System.Object))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentExtensions)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.PropertyInfo))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.FieldInfo))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Activator)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Attribute"), [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Type")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("System.Object")]))) ();
  };

  function ReflectiveReader$b1__ctor () {
    $T00().prototype._ctor.call(this, $thisType.T.get(this));
  };

  function ReflectiveReader$b1_$lGetElementReader$gb__1 (o, v) {
  };

  function ReflectiveReader$b1_$lGetElementReader$gb__4 (parent) {
    return null;
  };

  function ReflectiveReader$b1_GetElementReader (manager, member) {
    var $closure0 = new ($asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd.Of($thisType.T.get(this))) ();
    $closure0.property = $T04().$As(member);
    var field = $T05().$As(member);
    if (!(!$T04().op_Inequality($closure0.property, null) || (($closure0.property).get_CanWrite() && 
          ($closure0.property).get_CanRead()))) {
      var result = null;
    } else {
      if ($T04().op_Inequality($closure0.property, null)) {
        if (!($closure0.property).get_CanRead()) {
          result = null;
          return result;
        }
        if (($closure0.property).get_Name() == "Item") {
          var getMethod = ($closure0.property).GetGetMethod();
          var setMethod = ($closure0.property).GetSetMethod();
          if (!(!($T07().op_Inequality(getMethod, null) && 
                ((getMethod.GetParameters().length | 0) > 0)) && (!$T07().op_Inequality(setMethod, null) || 
                ((setMethod.GetParameters().length | 0) <= 0)))) {
            result = null;
            return result;
          }
        }
      }
      var attr = $S00().CallStatic($T0A(), "GetCustomAttribute", null, member, $T0B().__Type__);
      if (attr !== null) {
        result = null;
      } else {
        var contentSerializerAttribute = $T0C().$As($S00().CallStatic($T0A(), "GetCustomAttribute", null, member, $T0C().__Type__));
        if (contentSerializerAttribute === null) {
          if ($T04().op_Inequality($closure0.property, null)) {
            getMethod = ($closure0.property).GetGetMethod();
            if (!(!$T07().op_Equality(getMethod, null) && getMethod.get_IsPublic())) {
              result = null;
              return result;
            }
            setMethod = ($closure0.property).GetSetMethod();
            if (!(!$T07().op_Equality(setMethod, null) && setMethod.get_IsPublic())) {
              result = null;
              return result;
            }
            if (!(($closure0.property).get_CanWrite() || (manager.GetTypeReader(($closure0.property).get_PropertyType()) !== null))) {
              result = null;
              return result;
            }
          } else {
            if (!field.get_IsPublic()) {
              result = null;
              return result;
            }
            if (field.get_IsInitOnly()) {
              result = null;
              return result;
            }
          }
        }
        if ($T04().op_Inequality($closure0.property, null)) {
          var elementType = ($closure0.property).get_PropertyType();
          if (($closure0.property).get_CanWrite()) {
            $closure0.setter = $T0E().New($closure0, $asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd.Of($thisType.T.get(this)).prototype.$lGetElementReader$gb__0, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd.Of($thisType.T.get(this)), "$lGetElementReader$gb__0", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.Object]), false); });
          } else {
            $closure0.setter = $T0E().New($thisType.Of($thisType.T.get(this)), $thisType.Of($thisType.T.get(this)).$lGetElementReader$gb__1, function () { return JSIL.GetMethodInfo($thisType.Of($thisType.T.get(this)), "$lGetElementReader$gb__1", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.Object]), true); });
          }
        } else {
          elementType = field.get_FieldType();
          $closure0.setter = $T0E().New(field, $T05().prototype.SetValue, function () { return JSIL.GetMethodInfo($asm01.System.Reflection.FieldInfo, "SetValue", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.Object]), false); });
        }
        if (!((contentSerializerAttribute === null) || !contentSerializerAttribute.ContentSerializerAttribute$SharedResource$value)) {
          result = $asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_ReadElement.Of($thisType.T.get(this)).New($closure0, $asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd.Of($thisType.T.get(this)).prototype.$lGetElementReader$gb__2, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd.Of($thisType.T.get(this)), "$lGetElementReader$gb__2", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.Content.ContentReader, $asm01.System.Object]), false); });
        } else {
          $closure0.reader = manager.GetTypeReader(elementType);
          if ($closure0.reader === null) {
            throw $S01().Construct($T06().Format("Content reader could not be found for {0} type.", elementType.get_FullName()));
          }
          $closure0.construct = $T10().New($thisType.Of($thisType.T.get(this)), $thisType.Of($thisType.T.get(this)).$lGetElementReader$gb__4, function () { return JSIL.GetMethodInfo($thisType.Of($thisType.T.get(this)), "$lGetElementReader$gb__4", new JSIL.MethodSignature($asm01.System.Object, [$asm01.System.Object]), true); });
          if (!(!$T04().op_Inequality($closure0.property, null) || ($closure0.property).get_CanWrite())) {
            $closure0.construct = $T10().New($closure0, $asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd.Of($thisType.T.get(this)).prototype.$lGetElementReader$gb__5, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd.Of($thisType.T.get(this)), "$lGetElementReader$gb__5", new JSIL.MethodSignature($asm01.System.Object, [$asm01.System.Object]), false); });
          } else if (!(!$T0D().op_Inequality(elementType, $T01().__Type__) || 
              !elementType.get_IsClass() || elementType.get_IsAbstract())) {
            var $closure1 = new ($asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClass12.Of($thisType.T.get(this))) ();
            $closure1.CS$$l$g8__localse = $closure0;
            $closure1.$constructor = $T11().GetDefaultConstructor(elementType);
            if ($T12().op_Inequality($closure1.$constructor, null)) {
              $closure0.construct = $T10().New($closure1, $asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClass12.Of($thisType.T.get(this)).prototype.$lGetElementReader$gb__6, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClass12.Of($thisType.T.get(this)), "$lGetElementReader$gb__6", new JSIL.MethodSignature($asm01.System.Object, [$asm01.System.Object]), false); });
            }
          }
          result = $asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_ReadElement.Of($thisType.T.get(this)).New($closure0, $asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd.Of($thisType.T.get(this)).prototype.$lGetElementReader$gb__7, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd.Of($thisType.T.get(this)), "$lGetElementReader$gb__7", new JSIL.MethodSignature(null, [$asm00.Microsoft.Xna.Framework.Content.ContentReader, $asm01.System.Object]), false); });
        }
      }
    }
    return result;
  };

  function ReflectiveReader$b1_Initialize (manager) {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ReflectiveReader`1+ReadElement", [$thisType.T.get(this)])]), [$asm01.System.Int32]);
    $T00().prototype.Initialize.call(this, manager);
    var baseType = (this.get_TargetType()).get_BaseType();
    if (!(!$T0D().op_Inequality(baseType, null) || !$T0D().op_Inequality(baseType, $T01().__Type__))) {
      this.baseTypeReader = manager.GetTypeReader(baseType);
    }
    this.$constructor = $T11().GetDefaultConstructor(this.get_TargetType());
    var properties = $T11().GetAllProperties(this.get_TargetType());
    var fields = $T11().GetAllFields(this.get_TargetType());
    this.readers = $s00.Construct((((fields.length | 0) + (properties.length | 0)) | 0));
    var array = properties;

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var property = array[i];
      var read = $thisType.Of($thisType.T.get(this)).GetElementReader(manager, property);
      if (read !== null) {
        (this.readers).Add(read);
      }
    }
    var array2 = fields;

    for (i = 0; i < (array2.length | 0); i = ((i + 1) | 0)) {
      var field = array2[i];
      read = $thisType.Of($thisType.T.get(this)).GetElementReader(manager, field);
      if (read !== null) {
        (this.readers).Add(read);
      }
    }
  };

  function ReflectiveReader$b1_Read (input, existingInstance) {
    var $temp00;
    if (existingInstance !== null) {
      var obj = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(existingInstance));
    } else if ($T12().op_Equality(this.$constructor, null)) {
      obj = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($S02().CallStatic($T17(), "CreateInstance", null, $thisType.T.get(this))));
    } else {
      obj = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((this.$constructor).Invoke(null)));
    }
    if (this.baseTypeReader !== null) {
      $S03().CallVirtual("Read", null, this.baseTypeReader, input, JSIL.CloneParameter($thisType.T.get(this), obj));
    }
    var boxed = JSIL.CloneParameter($thisType.T.get(this), obj);

    for (var a$0 = this.readers._items, i$0 = 0, l$0 = (this.readers._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var reader = a$0[i$0];
      reader(input, boxed);
    }
    obj = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(boxed));
    return obj;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), 
      Name: "Microsoft.Xna.Framework.Content.ReflectiveReader`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ReflectiveReader$b1__ctor
    );

    $.Method({Static:true , Public:false}, "$lGetElementReader$gb__1", 
      new JSIL.MethodSignature(null, [$.Object, $.Object]), 
      ReflectiveReader$b1_$lGetElementReader$gb__1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$lGetElementReader$gb__4", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      ReflectiveReader$b1_$lGetElementReader$gb__4
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "GetElementReader", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ReflectiveReader`1+ReadElement", [$.GenericParameter("T")]), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager"), $asm01.TypeRef("System.Reflection.MemberInfo")]), 
      ReflectiveReader$b1_GetElementReader
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")), 
      ReflectiveReader$b1_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object]), 
      ReflectiveReader$b1_Read
    );

    $.Field({Static:false, Public:false}, "readers", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ReflectiveReader`1+ReadElement", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "$constructor", $asm01.TypeRef("System.Reflection.ConstructorInfo")); 
    $.Field({Static:false, Public:false}, "baseTypeReader", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate9", $asm01.TypeRef("System.Action`2", [$.Object, $.Object]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegateb", $asm01.TypeRef("System.Func`2", [$.Object, $.Object]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Xna.Framework.Content.ReflectiveReader`1+ReadElement */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Content.ReflectiveReader`1+ReadElement", false, ["T"], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("System.Object")]));

/* class Microsoft.Xna.Framework.Content.ReflectiveReader`1+<>c__DisplayClassd */ 

(function $l$gc__DisplayClassd$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.PropertyInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Action$b1.Of($asm01.System.Object))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "!!0"], ["T"]))) ();
  };

  function $l$gc__DisplayClassd__ctor () {
  };

  function $l$gc__DisplayClassd_$lGetElementReader$gb__0 (o, v) {
    (this.property).SetValue(o, v, null);
  };

  function $l$gc__DisplayClassd_$lGetElementReader$gb__2 (input, parent) {
    var $closure0 = new ($asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd_$l$gc__DisplayClassf.Of($thisType.T.get(this))) ();
    $closure0.CS$$l$g8__localse = this;
    $closure0.parent = parent;
    var action = $T03().New($closure0, $asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd_$l$gc__DisplayClassf.Of($thisType.T.get(this)).prototype.$lGetElementReader$gb__3, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.ReflectiveReader$b1_$l$gc__DisplayClassd_$l$gc__DisplayClassf.Of($thisType.T.get(this)), "$lGetElementReader$gb__3", JSIL.MethodSignature.Action($.Object), false); });
    input.ReadSharedResource$b1($T00())(action);
  };

  function $l$gc__DisplayClassd_$lGetElementReader$gb__5 (parent) {
    return (this.property).GetValue(parent, null);
  };

  function $l$gc__DisplayClassd_$lGetElementReader$gb__7 (input, parent) {
    var existing = this.construct(parent);
    var obj2 = $S00().CallVirtual("ReadObject$b1", [$asm01.System.Object], input, this.reader, existing);
    this.setter(parent, obj2);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ReflectiveReader`1+<>c__DisplayClassd", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassd__ctor
    );

    $.Method({Static:false, Public:true }, "$lGetElementReader$gb__0", 
      new JSIL.MethodSignature(null, [$.Object, $.Object]), 
      $l$gc__DisplayClassd_$lGetElementReader$gb__0
    );

    $.Method({Static:false, Public:true }, "$lGetElementReader$gb__2", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object]), 
      $l$gc__DisplayClassd_$lGetElementReader$gb__2
    );

    $.Method({Static:false, Public:true }, "$lGetElementReader$gb__5", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      $l$gc__DisplayClassd_$lGetElementReader$gb__5
    );

    $.Method({Static:false, Public:true }, "$lGetElementReader$gb__7", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object]), 
      $l$gc__DisplayClassd_$lGetElementReader$gb__7
    );

    $.Field({Static:false, Public:true }, "property", $asm01.TypeRef("System.Reflection.PropertyInfo")); 
    $.Field({Static:false, Public:true }, "setter", $asm01.TypeRef("System.Action`2", [$.Object, $.Object])); 
    $.Field({Static:false, Public:true }, "reader", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    $.Field({Static:false, Public:true }, "construct", $asm01.TypeRef("System.Func`2", [$.Object, $.Object])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Content.ReflectiveReader`1+<>c__DisplayClassd+<>c__DisplayClassf */ 

(function $l$gc__DisplayClassf$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function $l$gc__DisplayClassf__ctor () {
  };

  function $l$gc__DisplayClassf_$lGetElementReader$gb__3 (value) {
    this.CS$$l$g8__localse.setter(this.parent, value);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ReflectiveReader`1+<>c__DisplayClassd+<>c__DisplayClassf", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassf__ctor
    );

    $.Method({Static:false, Public:true }, "$lGetElementReader$gb__3", 
      JSIL.MethodSignature.Action($.Object), 
      $l$gc__DisplayClassf_$lGetElementReader$gb__3
    );

    $.Field({Static:false, Public:true }, "CS$$l$g8__localse", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ReflectiveReader`1+<>c__DisplayClassd", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "parent", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ReflectiveReader`1+<>c__DisplayClass12 */ 

(function $l$gc__DisplayClass12$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };

  function $l$gc__DisplayClass12__ctor () {
  };

  function $l$gc__DisplayClass12_$lGetElementReader$gb__6 (parent) {
    return (this.$constructor).Invoke(null);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ReflectiveReader`1+<>c__DisplayClass12", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass12__ctor
    );

    $.Method({Static:false, Public:true }, "$lGetElementReader$gb__6", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      $l$gc__DisplayClass12_$lGetElementReader$gb__6
    );

    $.Field({Static:false, Public:true }, "CS$$l$g8__localse", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ReflectiveReader`1+<>c__DisplayClassd", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "$constructor", $asm01.TypeRef("System.Reflection.ConstructorInfo")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Content.Int32Reader */ 

(function Int32Reader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Int32))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function Int32Reader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Int32Reader_Read$00 (input, existingInstance) {
    return input.ReadInt32();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Int32")]), 
      Name: "Microsoft.Xna.Framework.Content.Int32Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Int32Reader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Int32]), 
      Int32Reader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.SingleReader */ 

(function SingleReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Single))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function SingleReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SingleReader_Read$00 (input, existingInstance) {
    return input.ReadSingle();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Single")]), 
      Name: "Microsoft.Xna.Framework.Content.SingleReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      SingleReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Single]), 
      SingleReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Int16Reader */ 

(function Int16Reader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Int16))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function Int16Reader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Int16Reader_Read$00 (input, existingInstance) {
    return input.ReadInt16();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Int16")]), 
      Name: "Microsoft.Xna.Framework.Content.Int16Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Int16Reader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int16, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Int16]), 
      Int16Reader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Int64Reader */ 

(function Int64Reader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Int64))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function Int64Reader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Int64Reader_Read$00 (input, existingInstance) {
    return input.ReadInt64();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Int64")]), 
      Name: "Microsoft.Xna.Framework.Content.Int64Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Int64Reader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Int64]), 
      Int64Reader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.TimeSpanReader */ 

(function TimeSpanReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.TimeSpan))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.TimeSpan"), [$asm01.TypeRef("System.Int64")]))) ();
  };

  function TimeSpanReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function TimeSpanReader_Read$00 (input, existingInstance) {
    return $S00().Construct(input.ReadInt64());
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.TimeSpan")]), 
      Name: "Microsoft.Xna.Framework.Content.TimeSpanReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      TimeSpanReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("System.TimeSpan")]), 
      TimeSpanReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ColorReader */ 

(function ColorReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Color))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Color"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };

  function ColorReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ColorReader_Read$00 (input, existingInstance) {
    var r = (input.ReadByte() | 0);
    var g = (input.ReadByte() | 0);
    var b = (input.ReadByte() | 0);
    var a = (input.ReadByte() | 0);
    return $S00().Construct(r, g, b, a);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Color")]), 
      Name: "Microsoft.Xna.Framework.Content.ColorReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ColorReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Color"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Color")]), 
      ColorReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Color */ 

(function Color$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Color"), [$asm01.TypeRef("System.UInt32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Color"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Color"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Byte")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function Color__ctor$00 (color) {
    this._packedValue = 0;
    this.set_R((($S01().CallStatic($T01(), "Clamp", null, +color.X * 255, 0, 255)) | 0));
    this.set_G((($S01().CallStatic($T01(), "Clamp", null, +color.Y * 255, 0, 255)) | 0));
    this.set_B((($S01().CallStatic($T01(), "Clamp", null, +color.Z * 255, 0, 255)) | 0));
    this.set_A((($S01().CallStatic($T01(), "Clamp", null, +color.W * 255, 0, 255)) | 0));
  };

  function Color__ctor$01 (color) {
    this._packedValue = 0;
    this.set_R((($S01().CallStatic($T01(), "Clamp", null, +color.X * 255, 0, 255)) | 0));
    this.set_G((($S01().CallStatic($T01(), "Clamp", null, +color.Y * 255, 0, 255)) | 0));
    this.set_B((($S01().CallStatic($T01(), "Clamp", null, +color.Z * 255, 0, 255)) | 0));
    this.set_A(255);
  };

  function Color__ctor$02 (color, alpha) {
    this._packedValue = 0;
    this.set_R(color.get_R());
    this.set_G(color.get_G());
    this.set_B(color.get_B());
    this.set_A(($S02().CallStatic($T01(), "Clamp", null, alpha, 0, 255) & 0xFF));
  };

  function Color__ctor$03 (color, alpha) {
    this._packedValue = 0;
    this.set_R(color.get_R());
    this.set_G(color.get_G());
    this.set_B(color.get_B());
    this.set_A((($S01().CallStatic($T01(), "Clamp", null, +alpha * 255, 0, 255)) | 0));
  };

  function Color__ctor$04 (r, g, b) {
    this._packedValue = 0;
    this.set_R((($S01().CallStatic($T01(), "Clamp", null, +r * 255, 0, 255)) | 0));
    this.set_G((($S01().CallStatic($T01(), "Clamp", null, +g * 255, 0, 255)) | 0));
    this.set_B((($S01().CallStatic($T01(), "Clamp", null, +b * 255, 0, 255)) | 0));
    this.set_A(255);
  };

  function Color__ctor$05 (r, g, b) {
    this._packedValue = 0;
    this.set_R(($S02().CallStatic($T01(), "Clamp", null, r, 0, 255) & 0xFF));
    this.set_G(($S02().CallStatic($T01(), "Clamp", null, g, 0, 255) & 0xFF));
    this.set_B(($S02().CallStatic($T01(), "Clamp", null, b, 0, 255) & 0xFF));
    this.set_A(255);
  };

  function Color__ctor$06 (r, g, b, alpha) {
    this._packedValue = 0;
    this.set_R(($S02().CallStatic($T01(), "Clamp", null, r, 0, 255) & 0xFF));
    this.set_G(($S02().CallStatic($T01(), "Clamp", null, g, 0, 255) & 0xFF));
    this.set_B(($S02().CallStatic($T01(), "Clamp", null, b, 0, 255) & 0xFF));
    this.set_A(($S02().CallStatic($T01(), "Clamp", null, alpha, 0, 255) & 0xFF));
  };

  function Color__ctor$07 (r, g, b, alpha) {
    this._packedValue = 0;
    this.set_R((($S01().CallStatic($T01(), "Clamp", null, +r * 255, 0, 255)) | 0));
    this.set_G((($S01().CallStatic($T01(), "Clamp", null, +g * 255, 0, 255)) | 0));
    this.set_B((($S01().CallStatic($T01(), "Clamp", null, +b * 255, 0, 255)) | 0));
    this.set_A((($S01().CallStatic($T01(), "Clamp", null, +alpha * 255, 0, 255)) | 0));
  };

  function Color__ctor$08 (packedValue) {
    this._packedValue = (packedValue >>> 0);
  };

  function Color_Equals$09 (other) {
    return ((this.get_PackedValue() >>> 0) === (other.get_PackedValue() >>> 0));
  };

  function Color_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  };

  function Color_FromNonPremultiplied$0A (vector) {
    return $S03().Construct((+vector.X * +vector.W), (+vector.Y * +vector.W), (+vector.Z * +vector.W), vector.W);
  };

  function Color_FromNonPremultiplied$0B (r, g, b, a) {
    return $S04().Construct((((Math.imul(r, a) / 255) | 0) & 0xFF), (((Math.imul(g, a) / 255) | 0) & 0xFF), (((Math.imul(b, a) / 255) | 0) & 0xFF), a);
  };

  function Color_get_A () {
    return ((this._packedValue >>> 0) >>> 24 & 0xFF);
  };

  function Color_get_AliceBlue () {
    return $thisType.Color$AliceBlue$value;
  };

  function Color_get_AntiqueWhite () {
    return $thisType.Color$AntiqueWhite$value;
  };

  function Color_get_Aqua () {
    return $thisType.Color$Aqua$value;
  };

  function Color_get_Aquamarine () {
    return $thisType.Color$Aquamarine$value;
  };

  function Color_get_Azure () {
    return $thisType.Color$Azure$value;
  };

  function Color_get_B () {
    return ((this._packedValue >>> 0) >>> 16 & 0xFF);
  };

  function Color_get_Beige () {
    return $thisType.Color$Beige$value;
  };

  function Color_get_Bisque () {
    return $thisType.Color$Bisque$value;
  };

  function Color_get_Black () {
    return $thisType.Color$Black$value;
  };

  function Color_get_BlanchedAlmond () {
    return $thisType.Color$BlanchedAlmond$value;
  };

  function Color_get_Blue () {
    return $thisType.Color$Blue$value;
  };

  function Color_get_BlueViolet () {
    return $thisType.Color$BlueViolet$value;
  };

  function Color_get_Brown () {
    return $thisType.Color$Brown$value;
  };

  function Color_get_BurlyWood () {
    return $thisType.Color$BurlyWood$value;
  };

  function Color_get_CadetBlue () {
    return $thisType.Color$CadetBlue$value;
  };

  function Color_get_Chartreuse () {
    return $thisType.Color$Chartreuse$value;
  };

  function Color_get_Chocolate () {
    return $thisType.Color$Chocolate$value;
  };

  function Color_get_Coral () {
    return $thisType.Color$Coral$value;
  };

  function Color_get_CornflowerBlue () {
    return $thisType.Color$CornflowerBlue$value;
  };

  function Color_get_Cornsilk () {
    return $thisType.Color$Cornsilk$value;
  };

  function Color_get_Crimson () {
    return $thisType.Color$Crimson$value;
  };

  function Color_get_Cyan () {
    return $thisType.Color$Cyan$value;
  };

  function Color_get_DarkBlue () {
    return $thisType.Color$DarkBlue$value;
  };

  function Color_get_DarkCyan () {
    return $thisType.Color$DarkCyan$value;
  };

  function Color_get_DarkGoldenrod () {
    return $thisType.Color$DarkGoldenrod$value;
  };

  function Color_get_DarkGray () {
    return $thisType.Color$DarkGray$value;
  };

  function Color_get_DarkGreen () {
    return $thisType.Color$DarkGreen$value;
  };

  function Color_get_DarkKhaki () {
    return $thisType.Color$DarkKhaki$value;
  };

  function Color_get_DarkMagenta () {
    return $thisType.Color$DarkMagenta$value;
  };

  function Color_get_DarkOliveGreen () {
    return $thisType.Color$DarkOliveGreen$value;
  };

  function Color_get_DarkOrange () {
    return $thisType.Color$DarkOrange$value;
  };

  function Color_get_DarkOrchid () {
    return $thisType.Color$DarkOrchid$value;
  };

  function Color_get_DarkRed () {
    return $thisType.Color$DarkRed$value;
  };

  function Color_get_DarkSalmon () {
    return $thisType.Color$DarkSalmon$value;
  };

  function Color_get_DarkSeaGreen () {
    return $thisType.Color$DarkSeaGreen$value;
  };

  function Color_get_DarkSlateBlue () {
    return $thisType.Color$DarkSlateBlue$value;
  };

  function Color_get_DarkSlateGray () {
    return $thisType.Color$DarkSlateGray$value;
  };

  function Color_get_DarkTurquoise () {
    return $thisType.Color$DarkTurquoise$value;
  };

  function Color_get_DarkViolet () {
    return $thisType.Color$DarkViolet$value;
  };

  function Color_get_DebugDisplayString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [(this.get_R()).toString(), " ", (this.get_G()).toString(), " ", (this.get_B()).toString(), " ", (this.get_A()).toString()]));
  };

  function Color_get_DeepPink () {
    return $thisType.Color$DeepPink$value;
  };

  function Color_get_DeepSkyBlue () {
    return $thisType.Color$DeepSkyBlue$value;
  };

  function Color_get_DimGray () {
    return $thisType.Color$DimGray$value;
  };

  function Color_get_DodgerBlue () {
    return $thisType.Color$DodgerBlue$value;
  };

  function Color_get_Firebrick () {
    return $thisType.Color$Firebrick$value;
  };

  function Color_get_FloralWhite () {
    return $thisType.Color$FloralWhite$value;
  };

  function Color_get_ForestGreen () {
    return $thisType.Color$ForestGreen$value;
  };

  function Color_get_Fuchsia () {
    return $thisType.Color$Fuchsia$value;
  };

  function Color_get_G () {
    return ((this._packedValue >>> 0) >>> 8 & 0xFF);
  };

  function Color_get_Gainsboro () {
    return $thisType.Color$Gainsboro$value;
  };

  function Color_get_GhostWhite () {
    return $thisType.Color$GhostWhite$value;
  };

  function Color_get_Gold () {
    return $thisType.Color$Gold$value;
  };

  function Color_get_Goldenrod () {
    return $thisType.Color$Goldenrod$value;
  };

  function Color_get_Gray () {
    return $thisType.Color$Gray$value;
  };

  function Color_get_Green () {
    return $thisType.Color$Green$value;
  };

  function Color_get_GreenYellow () {
    return $thisType.Color$GreenYellow$value;
  };

  function Color_get_Honeydew () {
    return $thisType.Color$Honeydew$value;
  };

  function Color_get_HotPink () {
    return $thisType.Color$HotPink$value;
  };

  function Color_get_IndianRed () {
    return $thisType.Color$IndianRed$value;
  };

  function Color_get_Indigo () {
    return $thisType.Color$Indigo$value;
  };

  function Color_get_Ivory () {
    return $thisType.Color$Ivory$value;
  };

  function Color_get_Khaki () {
    return $thisType.Color$Khaki$value;
  };

  function Color_get_Lavender () {
    return $thisType.Color$Lavender$value;
  };

  function Color_get_LavenderBlush () {
    return $thisType.Color$LavenderBlush$value;
  };

  function Color_get_LawnGreen () {
    return $thisType.Color$LawnGreen$value;
  };

  function Color_get_LemonChiffon () {
    return $thisType.Color$LemonChiffon$value;
  };

  function Color_get_LightBlue () {
    return $thisType.Color$LightBlue$value;
  };

  function Color_get_LightCoral () {
    return $thisType.Color$LightCoral$value;
  };

  function Color_get_LightCyan () {
    return $thisType.Color$LightCyan$value;
  };

  function Color_get_LightGoldenrodYellow () {
    return $thisType.Color$LightGoldenrodYellow$value;
  };

  function Color_get_LightGray () {
    return $thisType.Color$LightGray$value;
  };

  function Color_get_LightGreen () {
    return $thisType.Color$LightGreen$value;
  };

  function Color_get_LightPink () {
    return $thisType.Color$LightPink$value;
  };

  function Color_get_LightSalmon () {
    return $thisType.Color$LightSalmon$value;
  };

  function Color_get_LightSeaGreen () {
    return $thisType.Color$LightSeaGreen$value;
  };

  function Color_get_LightSkyBlue () {
    return $thisType.Color$LightSkyBlue$value;
  };

  function Color_get_LightSlateGray () {
    return $thisType.Color$LightSlateGray$value;
  };

  function Color_get_LightSteelBlue () {
    return $thisType.Color$LightSteelBlue$value;
  };

  function Color_get_LightYellow () {
    return $thisType.Color$LightYellow$value;
  };

  function Color_get_Lime () {
    return $thisType.Color$Lime$value;
  };

  function Color_get_LimeGreen () {
    return $thisType.Color$LimeGreen$value;
  };

  function Color_get_Linen () {
    return $thisType.Color$Linen$value;
  };

  function Color_get_Magenta () {
    return $thisType.Color$Magenta$value;
  };

  function Color_get_Maroon () {
    return $thisType.Color$Maroon$value;
  };

  function Color_get_MediumAquamarine () {
    return $thisType.Color$MediumAquamarine$value;
  };

  function Color_get_MediumBlue () {
    return $thisType.Color$MediumBlue$value;
  };

  function Color_get_MediumOrchid () {
    return $thisType.Color$MediumOrchid$value;
  };

  function Color_get_MediumPurple () {
    return $thisType.Color$MediumPurple$value;
  };

  function Color_get_MediumSeaGreen () {
    return $thisType.Color$MediumSeaGreen$value;
  };

  function Color_get_MediumSlateBlue () {
    return $thisType.Color$MediumSlateBlue$value;
  };

  function Color_get_MediumSpringGreen () {
    return $thisType.Color$MediumSpringGreen$value;
  };

  function Color_get_MediumTurquoise () {
    return $thisType.Color$MediumTurquoise$value;
  };

  function Color_get_MediumVioletRed () {
    return $thisType.Color$MediumVioletRed$value;
  };

  function Color_get_MidnightBlue () {
    return $thisType.Color$MidnightBlue$value;
  };

  function Color_get_MintCream () {
    return $thisType.Color$MintCream$value;
  };

  function Color_get_MistyRose () {
    return $thisType.Color$MistyRose$value;
  };

  function Color_get_Moccasin () {
    return $thisType.Color$Moccasin$value;
  };

  function Color_get_NavajoWhite () {
    return $thisType.Color$NavajoWhite$value;
  };

  function Color_get_Navy () {
    return $thisType.Color$Navy$value;
  };

  function Color_get_OldLace () {
    return $thisType.Color$OldLace$value;
  };

  function Color_get_Olive () {
    return $thisType.Color$Olive$value;
  };

  function Color_get_OliveDrab () {
    return $thisType.Color$OliveDrab$value;
  };

  function Color_get_Orange () {
    return $thisType.Color$Orange$value;
  };

  function Color_get_OrangeRed () {
    return $thisType.Color$OrangeRed$value;
  };

  function Color_get_Orchid () {
    return $thisType.Color$Orchid$value;
  };

  function Color_get_PackedValue () {
    return this._packedValue;
  };

  function Color_get_PaleGoldenrod () {
    return $thisType.Color$PaleGoldenrod$value;
  };

  function Color_get_PaleGreen () {
    return $thisType.Color$PaleGreen$value;
  };

  function Color_get_PaleTurquoise () {
    return $thisType.Color$PaleTurquoise$value;
  };

  function Color_get_PaleVioletRed () {
    return $thisType.Color$PaleVioletRed$value;
  };

  function Color_get_PapayaWhip () {
    return $thisType.Color$PapayaWhip$value;
  };

  function Color_get_PeachPuff () {
    return $thisType.Color$PeachPuff$value;
  };

  function Color_get_Peru () {
    return $thisType.Color$Peru$value;
  };

  function Color_get_Pink () {
    return $thisType.Color$Pink$value;
  };

  function Color_get_Plum () {
    return $thisType.Color$Plum$value;
  };

  function Color_get_PowderBlue () {
    return $thisType.Color$PowderBlue$value;
  };

  function Color_get_Purple () {
    return $thisType.Color$Purple$value;
  };

  function Color_get_R () {
    return (this._packedValue & 0xFF);
  };

  function Color_get_Red () {
    return $thisType.Color$Red$value;
  };

  function Color_get_RosyBrown () {
    return $thisType.Color$RosyBrown$value;
  };

  function Color_get_RoyalBlue () {
    return $thisType.Color$RoyalBlue$value;
  };

  function Color_get_SaddleBrown () {
    return $thisType.Color$SaddleBrown$value;
  };

  function Color_get_Salmon () {
    return $thisType.Color$Salmon$value;
  };

  function Color_get_SandyBrown () {
    return $thisType.Color$SandyBrown$value;
  };

  function Color_get_SeaGreen () {
    return $thisType.Color$SeaGreen$value;
  };

  function Color_get_SeaShell () {
    return $thisType.Color$SeaShell$value;
  };

  function Color_get_Sienna () {
    return $thisType.Color$Sienna$value;
  };

  function Color_get_Silver () {
    return $thisType.Color$Silver$value;
  };

  function Color_get_SkyBlue () {
    return $thisType.Color$SkyBlue$value;
  };

  function Color_get_SlateBlue () {
    return $thisType.Color$SlateBlue$value;
  };

  function Color_get_SlateGray () {
    return $thisType.Color$SlateGray$value;
  };

  function Color_get_Snow () {
    return $thisType.Color$Snow$value;
  };

  function Color_get_SpringGreen () {
    return $thisType.Color$SpringGreen$value;
  };

  function Color_get_SteelBlue () {
    return $thisType.Color$SteelBlue$value;
  };

  function Color_get_Tan () {
    return $thisType.Color$Tan$value;
  };

  function Color_get_Teal () {
    return $thisType.Color$Teal$value;
  };

  function Color_get_Thistle () {
    return $thisType.Color$Thistle$value;
  };

  function Color_get_Tomato () {
    return $thisType.Color$Tomato$value;
  };

  function Color_get_Transparent () {
    return $thisType.Color$Transparent$value;
  };

  function Color_get_Turquoise () {
    return $thisType.Color$Turquoise$value;
  };

  function Color_get_Violet () {
    return $thisType.Color$Violet$value;
  };

  function Color_get_Wheat () {
    return $thisType.Color$Wheat$value;
  };

  function Color_get_White () {
    return $thisType.Color$White$value;
  };

  function Color_get_WhiteSmoke () {
    return $thisType.Color$WhiteSmoke$value;
  };

  function Color_get_Yellow () {
    return $thisType.Color$Yellow$value;
  };

  function Color_get_YellowGreen () {
    return $thisType.Color$YellowGreen$value;
  };

  function Color_GetHashCode () {
    return (this._packedValue).GetHashCode();
  };

  function Color_Lerp (value1, value2, amount) {
    amount = +$S01().CallStatic($T01(), "Clamp", null, amount, 0, 1);
    return $S04().Construct((($T01().Lerp(
          +(value1.get_R()), 
          +(value2.get_R()), 
          amount
        )) | 0), (($T01().Lerp(
          +(value1.get_G()), 
          +(value2.get_G()), 
          amount
        )) | 0), (($T01().Lerp(
          +(value1.get_B()), 
          +(value2.get_B()), 
          amount
        )) | 0), (($T01().Lerp(
          +(value1.get_A()), 
          +(value2.get_A()), 
          amount
        )) | 0));
  };

  function Color_Multiply (value, scale) {
    return $S04().Construct(((+(value.get_R()) * +scale) | 0), ((+(value.get_G()) * +scale) | 0), ((+(value.get_B()) * +scale) | 0), ((+(value.get_A()) * +scale) | 0));
  };

  function Color_op_Equality (a, b) {
    return (!(((a.get_A() | 0) !== (b.get_A() | 0)) || 
        ((a.get_R() | 0) !== (b.get_R() | 0)) || 
        ((a.get_G() | 0) !== (b.get_G() | 0))) && ((a.get_B() | 0) === (b.get_B() | 0)));
  };

  function Color_op_Inequality (a, b) {
    return !$thisType.op_Equality(a, b);
  };

  function Color_op_Multiply (value, scale) {
    return $S04().Construct(((+(value.get_R()) * +scale) | 0), ((+(value.get_G()) * +scale) | 0), ((+(value.get_B()) * +scale) | 0), ((+(value.get_A()) * +scale) | 0));
  };

  function Color_set_A (value) {
    this._packedValue = ((this._packedValue >>> 0) & 16777215) | ((value | 0) << 24 >>> 0);
  };

  function Color_set_AliceBlue (value) {
    $thisType.Color$AliceBlue$value = value.MemberwiseClone();
  };

  function Color_set_AntiqueWhite (value) {
    $thisType.Color$AntiqueWhite$value = value.MemberwiseClone();
  };

  function Color_set_Aqua (value) {
    $thisType.Color$Aqua$value = value.MemberwiseClone();
  };

  function Color_set_Aquamarine (value) {
    $thisType.Color$Aquamarine$value = value.MemberwiseClone();
  };

  function Color_set_Azure (value) {
    $thisType.Color$Azure$value = value.MemberwiseClone();
  };

  function Color_set_B (value) {
    this._packedValue = ((this._packedValue >>> 0) & 4278255615) | ((value | 0) << 16 >>> 0);
  };

  function Color_set_Beige (value) {
    $thisType.Color$Beige$value = value.MemberwiseClone();
  };

  function Color_set_Bisque (value) {
    $thisType.Color$Bisque$value = value.MemberwiseClone();
  };

  function Color_set_Black (value) {
    $thisType.Color$Black$value = value.MemberwiseClone();
  };

  function Color_set_BlanchedAlmond (value) {
    $thisType.Color$BlanchedAlmond$value = value.MemberwiseClone();
  };

  function Color_set_Blue (value) {
    $thisType.Color$Blue$value = value.MemberwiseClone();
  };

  function Color_set_BlueViolet (value) {
    $thisType.Color$BlueViolet$value = value.MemberwiseClone();
  };

  function Color_set_Brown (value) {
    $thisType.Color$Brown$value = value.MemberwiseClone();
  };

  function Color_set_BurlyWood (value) {
    $thisType.Color$BurlyWood$value = value.MemberwiseClone();
  };

  function Color_set_CadetBlue (value) {
    $thisType.Color$CadetBlue$value = value.MemberwiseClone();
  };

  function Color_set_Chartreuse (value) {
    $thisType.Color$Chartreuse$value = value.MemberwiseClone();
  };

  function Color_set_Chocolate (value) {
    $thisType.Color$Chocolate$value = value.MemberwiseClone();
  };

  function Color_set_Coral (value) {
    $thisType.Color$Coral$value = value.MemberwiseClone();
  };

  function Color_set_CornflowerBlue (value) {
    $thisType.Color$CornflowerBlue$value = value.MemberwiseClone();
  };

  function Color_set_Cornsilk (value) {
    $thisType.Color$Cornsilk$value = value.MemberwiseClone();
  };

  function Color_set_Crimson (value) {
    $thisType.Color$Crimson$value = value.MemberwiseClone();
  };

  function Color_set_Cyan (value) {
    $thisType.Color$Cyan$value = value.MemberwiseClone();
  };

  function Color_set_DarkBlue (value) {
    $thisType.Color$DarkBlue$value = value.MemberwiseClone();
  };

  function Color_set_DarkCyan (value) {
    $thisType.Color$DarkCyan$value = value.MemberwiseClone();
  };

  function Color_set_DarkGoldenrod (value) {
    $thisType.Color$DarkGoldenrod$value = value.MemberwiseClone();
  };

  function Color_set_DarkGray (value) {
    $thisType.Color$DarkGray$value = value.MemberwiseClone();
  };

  function Color_set_DarkGreen (value) {
    $thisType.Color$DarkGreen$value = value.MemberwiseClone();
  };

  function Color_set_DarkKhaki (value) {
    $thisType.Color$DarkKhaki$value = value.MemberwiseClone();
  };

  function Color_set_DarkMagenta (value) {
    $thisType.Color$DarkMagenta$value = value.MemberwiseClone();
  };

  function Color_set_DarkOliveGreen (value) {
    $thisType.Color$DarkOliveGreen$value = value.MemberwiseClone();
  };

  function Color_set_DarkOrange (value) {
    $thisType.Color$DarkOrange$value = value.MemberwiseClone();
  };

  function Color_set_DarkOrchid (value) {
    $thisType.Color$DarkOrchid$value = value.MemberwiseClone();
  };

  function Color_set_DarkRed (value) {
    $thisType.Color$DarkRed$value = value.MemberwiseClone();
  };

  function Color_set_DarkSalmon (value) {
    $thisType.Color$DarkSalmon$value = value.MemberwiseClone();
  };

  function Color_set_DarkSeaGreen (value) {
    $thisType.Color$DarkSeaGreen$value = value.MemberwiseClone();
  };

  function Color_set_DarkSlateBlue (value) {
    $thisType.Color$DarkSlateBlue$value = value.MemberwiseClone();
  };

  function Color_set_DarkSlateGray (value) {
    $thisType.Color$DarkSlateGray$value = value.MemberwiseClone();
  };

  function Color_set_DarkTurquoise (value) {
    $thisType.Color$DarkTurquoise$value = value.MemberwiseClone();
  };

  function Color_set_DarkViolet (value) {
    $thisType.Color$DarkViolet$value = value.MemberwiseClone();
  };

  function Color_set_DeepPink (value) {
    $thisType.Color$DeepPink$value = value.MemberwiseClone();
  };

  function Color_set_DeepSkyBlue (value) {
    $thisType.Color$DeepSkyBlue$value = value.MemberwiseClone();
  };

  function Color_set_DimGray (value) {
    $thisType.Color$DimGray$value = value.MemberwiseClone();
  };

  function Color_set_DodgerBlue (value) {
    $thisType.Color$DodgerBlue$value = value.MemberwiseClone();
  };

  function Color_set_Firebrick (value) {
    $thisType.Color$Firebrick$value = value.MemberwiseClone();
  };

  function Color_set_FloralWhite (value) {
    $thisType.Color$FloralWhite$value = value.MemberwiseClone();
  };

  function Color_set_ForestGreen (value) {
    $thisType.Color$ForestGreen$value = value.MemberwiseClone();
  };

  function Color_set_Fuchsia (value) {
    $thisType.Color$Fuchsia$value = value.MemberwiseClone();
  };

  function Color_set_G (value) {
    this._packedValue = ((this._packedValue >>> 0) & 4294902015) | ((value | 0) << 8 >>> 0);
  };

  function Color_set_Gainsboro (value) {
    $thisType.Color$Gainsboro$value = value.MemberwiseClone();
  };

  function Color_set_GhostWhite (value) {
    $thisType.Color$GhostWhite$value = value.MemberwiseClone();
  };

  function Color_set_Gold (value) {
    $thisType.Color$Gold$value = value.MemberwiseClone();
  };

  function Color_set_Goldenrod (value) {
    $thisType.Color$Goldenrod$value = value.MemberwiseClone();
  };

  function Color_set_Gray (value) {
    $thisType.Color$Gray$value = value.MemberwiseClone();
  };

  function Color_set_Green (value) {
    $thisType.Color$Green$value = value.MemberwiseClone();
  };

  function Color_set_GreenYellow (value) {
    $thisType.Color$GreenYellow$value = value.MemberwiseClone();
  };

  function Color_set_Honeydew (value) {
    $thisType.Color$Honeydew$value = value.MemberwiseClone();
  };

  function Color_set_HotPink (value) {
    $thisType.Color$HotPink$value = value.MemberwiseClone();
  };

  function Color_set_IndianRed (value) {
    $thisType.Color$IndianRed$value = value.MemberwiseClone();
  };

  function Color_set_Indigo (value) {
    $thisType.Color$Indigo$value = value.MemberwiseClone();
  };

  function Color_set_Ivory (value) {
    $thisType.Color$Ivory$value = value.MemberwiseClone();
  };

  function Color_set_Khaki (value) {
    $thisType.Color$Khaki$value = value.MemberwiseClone();
  };

  function Color_set_Lavender (value) {
    $thisType.Color$Lavender$value = value.MemberwiseClone();
  };

  function Color_set_LavenderBlush (value) {
    $thisType.Color$LavenderBlush$value = value.MemberwiseClone();
  };

  function Color_set_LawnGreen (value) {
    $thisType.Color$LawnGreen$value = value.MemberwiseClone();
  };

  function Color_set_LemonChiffon (value) {
    $thisType.Color$LemonChiffon$value = value.MemberwiseClone();
  };

  function Color_set_LightBlue (value) {
    $thisType.Color$LightBlue$value = value.MemberwiseClone();
  };

  function Color_set_LightCoral (value) {
    $thisType.Color$LightCoral$value = value.MemberwiseClone();
  };

  function Color_set_LightCyan (value) {
    $thisType.Color$LightCyan$value = value.MemberwiseClone();
  };

  function Color_set_LightGoldenrodYellow (value) {
    $thisType.Color$LightGoldenrodYellow$value = value.MemberwiseClone();
  };

  function Color_set_LightGray (value) {
    $thisType.Color$LightGray$value = value.MemberwiseClone();
  };

  function Color_set_LightGreen (value) {
    $thisType.Color$LightGreen$value = value.MemberwiseClone();
  };

  function Color_set_LightPink (value) {
    $thisType.Color$LightPink$value = value.MemberwiseClone();
  };

  function Color_set_LightSalmon (value) {
    $thisType.Color$LightSalmon$value = value.MemberwiseClone();
  };

  function Color_set_LightSeaGreen (value) {
    $thisType.Color$LightSeaGreen$value = value.MemberwiseClone();
  };

  function Color_set_LightSkyBlue (value) {
    $thisType.Color$LightSkyBlue$value = value.MemberwiseClone();
  };

  function Color_set_LightSlateGray (value) {
    $thisType.Color$LightSlateGray$value = value.MemberwiseClone();
  };

  function Color_set_LightSteelBlue (value) {
    $thisType.Color$LightSteelBlue$value = value.MemberwiseClone();
  };

  function Color_set_LightYellow (value) {
    $thisType.Color$LightYellow$value = value.MemberwiseClone();
  };

  function Color_set_Lime (value) {
    $thisType.Color$Lime$value = value.MemberwiseClone();
  };

  function Color_set_LimeGreen (value) {
    $thisType.Color$LimeGreen$value = value.MemberwiseClone();
  };

  function Color_set_Linen (value) {
    $thisType.Color$Linen$value = value.MemberwiseClone();
  };

  function Color_set_Magenta (value) {
    $thisType.Color$Magenta$value = value.MemberwiseClone();
  };

  function Color_set_Maroon (value) {
    $thisType.Color$Maroon$value = value.MemberwiseClone();
  };

  function Color_set_MediumAquamarine (value) {
    $thisType.Color$MediumAquamarine$value = value.MemberwiseClone();
  };

  function Color_set_MediumBlue (value) {
    $thisType.Color$MediumBlue$value = value.MemberwiseClone();
  };

  function Color_set_MediumOrchid (value) {
    $thisType.Color$MediumOrchid$value = value.MemberwiseClone();
  };

  function Color_set_MediumPurple (value) {
    $thisType.Color$MediumPurple$value = value.MemberwiseClone();
  };

  function Color_set_MediumSeaGreen (value) {
    $thisType.Color$MediumSeaGreen$value = value.MemberwiseClone();
  };

  function Color_set_MediumSlateBlue (value) {
    $thisType.Color$MediumSlateBlue$value = value.MemberwiseClone();
  };

  function Color_set_MediumSpringGreen (value) {
    $thisType.Color$MediumSpringGreen$value = value.MemberwiseClone();
  };

  function Color_set_MediumTurquoise (value) {
    $thisType.Color$MediumTurquoise$value = value.MemberwiseClone();
  };

  function Color_set_MediumVioletRed (value) {
    $thisType.Color$MediumVioletRed$value = value.MemberwiseClone();
  };

  function Color_set_MidnightBlue (value) {
    $thisType.Color$MidnightBlue$value = value.MemberwiseClone();
  };

  function Color_set_MintCream (value) {
    $thisType.Color$MintCream$value = value.MemberwiseClone();
  };

  function Color_set_MistyRose (value) {
    $thisType.Color$MistyRose$value = value.MemberwiseClone();
  };

  function Color_set_Moccasin (value) {
    $thisType.Color$Moccasin$value = value.MemberwiseClone();
  };

  function Color_set_NavajoWhite (value) {
    $thisType.Color$NavajoWhite$value = value.MemberwiseClone();
  };

  function Color_set_Navy (value) {
    $thisType.Color$Navy$value = value.MemberwiseClone();
  };

  function Color_set_OldLace (value) {
    $thisType.Color$OldLace$value = value.MemberwiseClone();
  };

  function Color_set_Olive (value) {
    $thisType.Color$Olive$value = value.MemberwiseClone();
  };

  function Color_set_OliveDrab (value) {
    $thisType.Color$OliveDrab$value = value.MemberwiseClone();
  };

  function Color_set_Orange (value) {
    $thisType.Color$Orange$value = value.MemberwiseClone();
  };

  function Color_set_OrangeRed (value) {
    $thisType.Color$OrangeRed$value = value.MemberwiseClone();
  };

  function Color_set_Orchid (value) {
    $thisType.Color$Orchid$value = value.MemberwiseClone();
  };

  function Color_set_PackedValue (value) {
    this._packedValue = (value >>> 0);
  };

  function Color_set_PaleGoldenrod (value) {
    $thisType.Color$PaleGoldenrod$value = value.MemberwiseClone();
  };

  function Color_set_PaleGreen (value) {
    $thisType.Color$PaleGreen$value = value.MemberwiseClone();
  };

  function Color_set_PaleTurquoise (value) {
    $thisType.Color$PaleTurquoise$value = value.MemberwiseClone();
  };

  function Color_set_PaleVioletRed (value) {
    $thisType.Color$PaleVioletRed$value = value.MemberwiseClone();
  };

  function Color_set_PapayaWhip (value) {
    $thisType.Color$PapayaWhip$value = value.MemberwiseClone();
  };

  function Color_set_PeachPuff (value) {
    $thisType.Color$PeachPuff$value = value.MemberwiseClone();
  };

  function Color_set_Peru (value) {
    $thisType.Color$Peru$value = value.MemberwiseClone();
  };

  function Color_set_Pink (value) {
    $thisType.Color$Pink$value = value.MemberwiseClone();
  };

  function Color_set_Plum (value) {
    $thisType.Color$Plum$value = value.MemberwiseClone();
  };

  function Color_set_PowderBlue (value) {
    $thisType.Color$PowderBlue$value = value.MemberwiseClone();
  };

  function Color_set_Purple (value) {
    $thisType.Color$Purple$value = value.MemberwiseClone();
  };

  function Color_set_R (value) {
    this._packedValue = ((this._packedValue >>> 0) & 4294967040) | (value | 0);
  };

  function Color_set_Red (value) {
    $thisType.Color$Red$value = value.MemberwiseClone();
  };

  function Color_set_RosyBrown (value) {
    $thisType.Color$RosyBrown$value = value.MemberwiseClone();
  };

  function Color_set_RoyalBlue (value) {
    $thisType.Color$RoyalBlue$value = value.MemberwiseClone();
  };

  function Color_set_SaddleBrown (value) {
    $thisType.Color$SaddleBrown$value = value.MemberwiseClone();
  };

  function Color_set_Salmon (value) {
    $thisType.Color$Salmon$value = value.MemberwiseClone();
  };

  function Color_set_SandyBrown (value) {
    $thisType.Color$SandyBrown$value = value.MemberwiseClone();
  };

  function Color_set_SeaGreen (value) {
    $thisType.Color$SeaGreen$value = value.MemberwiseClone();
  };

  function Color_set_SeaShell (value) {
    $thisType.Color$SeaShell$value = value.MemberwiseClone();
  };

  function Color_set_Sienna (value) {
    $thisType.Color$Sienna$value = value.MemberwiseClone();
  };

  function Color_set_Silver (value) {
    $thisType.Color$Silver$value = value.MemberwiseClone();
  };

  function Color_set_SkyBlue (value) {
    $thisType.Color$SkyBlue$value = value.MemberwiseClone();
  };

  function Color_set_SlateBlue (value) {
    $thisType.Color$SlateBlue$value = value.MemberwiseClone();
  };

  function Color_set_SlateGray (value) {
    $thisType.Color$SlateGray$value = value.MemberwiseClone();
  };

  function Color_set_Snow (value) {
    $thisType.Color$Snow$value = value.MemberwiseClone();
  };

  function Color_set_SpringGreen (value) {
    $thisType.Color$SpringGreen$value = value.MemberwiseClone();
  };

  function Color_set_SteelBlue (value) {
    $thisType.Color$SteelBlue$value = value.MemberwiseClone();
  };

  function Color_set_Tan (value) {
    $thisType.Color$Tan$value = value.MemberwiseClone();
  };

  function Color_set_Teal (value) {
    $thisType.Color$Teal$value = value.MemberwiseClone();
  };

  function Color_set_Thistle (value) {
    $thisType.Color$Thistle$value = value.MemberwiseClone();
  };

  function Color_set_Tomato (value) {
    $thisType.Color$Tomato$value = value.MemberwiseClone();
  };

  function Color_set_Transparent (value) {
    $thisType.Color$Transparent$value = value.MemberwiseClone();
  };

  function Color_set_Turquoise (value) {
    $thisType.Color$Turquoise$value = value.MemberwiseClone();
  };

  function Color_set_Violet (value) {
    $thisType.Color$Violet$value = value.MemberwiseClone();
  };

  function Color_set_Wheat (value) {
    $thisType.Color$Wheat$value = value.MemberwiseClone();
  };

  function Color_set_White (value) {
    $thisType.Color$White$value = value.MemberwiseClone();
  };

  function Color_set_WhiteSmoke (value) {
    $thisType.Color$WhiteSmoke$value = value.MemberwiseClone();
  };

  function Color_set_Yellow (value) {
    $thisType.Color$Yellow$value = value.MemberwiseClone();
  };

  function Color_set_YellowGreen (value) {
    $thisType.Color$YellowGreen$value = value.MemberwiseClone();
  };

  function Color_toString () {
    var sb = $S05().Construct(25);
    $S06().CallVirtual("Append", null, sb, "{R:");
    $S07().CallVirtual("Append", null, sb, this.get_R());
    $S06().CallVirtual("Append", null, sb, " G:");
    $S07().CallVirtual("Append", null, sb, this.get_G());
    $S06().CallVirtual("Append", null, sb, " B:");
    $S07().CallVirtual("Append", null, sb, this.get_B());
    $S06().CallVirtual("Append", null, sb, " A:");
    $S07().CallVirtual("Append", null, sb, this.get_A());
    $S06().CallVirtual("Append", null, sb, "}");
    return sb.toString();
  };

  function Color_ToVector3 () {
    return $S08().Construct(+((+(this.get_R()) / 255)), +((+(this.get_G()) / 255)), +((+(this.get_B()) / 255)));
  };

  function Color_ToVector4 () {
    return $S09().Construct(+((+(this.get_R()) / 255)), +((+(this.get_G()) / 255)), +((+(this.get_B()) / 255)), +((+(this.get_A()) / 255)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Color", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Color__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Color__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $.Int32]), 
      Color__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $.Single]), 
      Color__ctor$03
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Color__ctor$04
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      Color__ctor$05
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      Color__ctor$06
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Color__ctor$07
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.UInt32), 
      Color__ctor$08
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Color_Equals$09
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Color_Object_Equals
    );

    $.Method({Static:true , Public:true }, "FromNonPremultiplied", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")]), 
      Color_FromNonPremultiplied$0A
    );

    $.Method({Static:true , Public:true }, "FromNonPremultiplied", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      Color_FromNonPremultiplied$0B
    );

    $.Method({Static:false, Public:true }, "get_A", 
      JSIL.MethodSignature.Return($.Byte), 
      Color_get_A
    );

    $.Method({Static:true , Public:true }, "get_AliceBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_AliceBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_AntiqueWhite", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_AntiqueWhite
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Aqua", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Aqua
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Aquamarine", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Aquamarine
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Azure", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Azure
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_B", 
      JSIL.MethodSignature.Return($.Byte), 
      Color_get_B
    );

    $.Method({Static:true , Public:true }, "get_Beige", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Beige
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Bisque", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Bisque
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Black", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Black
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_BlanchedAlmond", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_BlanchedAlmond
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Blue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Blue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_BlueViolet", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_BlueViolet
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Brown", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Brown
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_BurlyWood", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_BurlyWood
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_CadetBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_CadetBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Chartreuse", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Chartreuse
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Chocolate", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Chocolate
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Coral", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Coral
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_CornflowerBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_CornflowerBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Cornsilk", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Cornsilk
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Crimson", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Crimson
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Cyan", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Cyan
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkCyan", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkCyan
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkGoldenrod", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkGoldenrod
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkGray", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkKhaki", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkKhaki
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkMagenta", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkMagenta
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkOliveGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkOliveGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkOrange", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkOrange
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkOrchid", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkOrchid
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkRed", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkRed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkSalmon", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkSalmon
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkSeaGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkSeaGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkSlateBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkSlateBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkSlateGray", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkSlateGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkTurquoise", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkTurquoise
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DarkViolet", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DarkViolet
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      Color_get_DebugDisplayString
    );

    $.Method({Static:true , Public:true }, "get_DeepPink", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DeepPink
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DeepSkyBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DeepSkyBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DimGray", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DimGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_DodgerBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_DodgerBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Firebrick", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Firebrick
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_FloralWhite", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_FloralWhite
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_ForestGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_ForestGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Fuchsia", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Fuchsia
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_G", 
      JSIL.MethodSignature.Return($.Byte), 
      Color_get_G
    );

    $.Method({Static:true , Public:true }, "get_Gainsboro", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Gainsboro
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_GhostWhite", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_GhostWhite
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Gold", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Gold
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Goldenrod", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Goldenrod
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Gray", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Gray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Green", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Green
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_GreenYellow", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_GreenYellow
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Honeydew", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Honeydew
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_HotPink", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_HotPink
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_IndianRed", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_IndianRed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Indigo", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Indigo
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Ivory", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Ivory
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Khaki", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Khaki
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Lavender", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Lavender
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LavenderBlush", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LavenderBlush
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LawnGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LawnGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LemonChiffon", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LemonChiffon
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightCoral", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightCoral
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightCyan", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightCyan
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightGoldenrodYellow", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightGoldenrodYellow
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightGray", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightPink", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightPink
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightSalmon", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightSalmon
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightSeaGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightSeaGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightSkyBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightSkyBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightSlateGray", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightSlateGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightSteelBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightSteelBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LightYellow", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LightYellow
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Lime", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Lime
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_LimeGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_LimeGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Linen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Linen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Magenta", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Magenta
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Maroon", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Maroon
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MediumAquamarine", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MediumAquamarine
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MediumBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MediumBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MediumOrchid", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MediumOrchid
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MediumPurple", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MediumPurple
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MediumSeaGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MediumSeaGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MediumSlateBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MediumSlateBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MediumSpringGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MediumSpringGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MediumTurquoise", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MediumTurquoise
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MediumVioletRed", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MediumVioletRed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MidnightBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MidnightBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MintCream", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MintCream
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MistyRose", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_MistyRose
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Moccasin", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Moccasin
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_NavajoWhite", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_NavajoWhite
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Navy", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Navy
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_OldLace", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_OldLace
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Olive", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Olive
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_OliveDrab", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_OliveDrab
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Orange", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Orange
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_OrangeRed", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_OrangeRed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Orchid", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Orchid
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt32), 
      Color_get_PackedValue
    );

    $.Method({Static:true , Public:true }, "get_PaleGoldenrod", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_PaleGoldenrod
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_PaleGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_PaleGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_PaleTurquoise", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_PaleTurquoise
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_PaleVioletRed", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_PaleVioletRed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_PapayaWhip", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_PapayaWhip
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_PeachPuff", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_PeachPuff
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Peru", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Peru
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Pink", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Pink
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Plum", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Plum
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_PowderBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_PowderBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Purple", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Purple
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_R", 
      JSIL.MethodSignature.Return($.Byte), 
      Color_get_R
    );

    $.Method({Static:true , Public:true }, "get_Red", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Red
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_RosyBrown", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_RosyBrown
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_RoyalBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_RoyalBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SaddleBrown", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_SaddleBrown
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Salmon", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Salmon
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SandyBrown", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_SandyBrown
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SeaGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_SeaGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SeaShell", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_SeaShell
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Sienna", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Sienna
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Silver", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Silver
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SkyBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_SkyBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SlateBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_SlateBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SlateGray", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_SlateGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Snow", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Snow
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SpringGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_SpringGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SteelBlue", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_SteelBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Tan", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Tan
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Teal", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Teal
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Thistle", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Thistle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Tomato", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Tomato
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Transparent", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Transparent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Turquoise", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Turquoise
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Violet", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Violet
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Wheat", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Wheat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_White", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_White
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_WhiteSmoke", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_WhiteSmoke
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Yellow", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_Yellow
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_YellowGreen", 
      JSIL.MethodSignature.Return($.Type), 
      Color_get_YellowGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Color_GetHashCode
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ]), 
      Color_Lerp
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Color_Multiply
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Color_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Color_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single]), 
      Color_op_Multiply
    );

    $.Method({Static:false, Public:true }, "set_A", 
      JSIL.MethodSignature.Action($.Byte), 
      Color_set_A
    );

    $.Method({Static:true , Public:false}, "set_AliceBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_AliceBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_AntiqueWhite", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_AntiqueWhite
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Aqua", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Aqua
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Aquamarine", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Aquamarine
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Azure", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Azure
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_B", 
      JSIL.MethodSignature.Action($.Byte), 
      Color_set_B
    );

    $.Method({Static:true , Public:false}, "set_Beige", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Beige
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Bisque", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Bisque
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Black", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Black
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_BlanchedAlmond", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_BlanchedAlmond
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Blue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Blue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_BlueViolet", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_BlueViolet
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Brown", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Brown
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_BurlyWood", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_BurlyWood
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_CadetBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_CadetBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Chartreuse", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Chartreuse
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Chocolate", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Chocolate
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Coral", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Coral
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_CornflowerBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_CornflowerBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Cornsilk", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Cornsilk
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Crimson", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Crimson
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Cyan", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Cyan
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkCyan", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkCyan
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkGoldenrod", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkGoldenrod
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkGray", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkKhaki", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkKhaki
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkMagenta", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkMagenta
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkOliveGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkOliveGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkOrange", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkOrange
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkOrchid", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkOrchid
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkRed", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkRed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkSalmon", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkSalmon
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkSeaGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkSeaGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkSlateBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkSlateBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkSlateGray", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkSlateGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkTurquoise", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkTurquoise
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DarkViolet", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DarkViolet
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DeepPink", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DeepPink
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DeepSkyBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DeepSkyBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DimGray", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DimGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_DodgerBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_DodgerBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Firebrick", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Firebrick
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_FloralWhite", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_FloralWhite
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_ForestGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_ForestGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Fuchsia", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Fuchsia
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_G", 
      JSIL.MethodSignature.Action($.Byte), 
      Color_set_G
    );

    $.Method({Static:true , Public:false}, "set_Gainsboro", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Gainsboro
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_GhostWhite", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_GhostWhite
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Gold", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Gold
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Goldenrod", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Goldenrod
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Gray", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Gray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Green", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Green
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_GreenYellow", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_GreenYellow
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Honeydew", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Honeydew
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_HotPink", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_HotPink
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_IndianRed", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_IndianRed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Indigo", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Indigo
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Ivory", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Ivory
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Khaki", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Khaki
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Lavender", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Lavender
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LavenderBlush", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LavenderBlush
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LawnGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LawnGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LemonChiffon", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LemonChiffon
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightCoral", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightCoral
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightCyan", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightCyan
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightGoldenrodYellow", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightGoldenrodYellow
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightGray", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightPink", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightPink
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightSalmon", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightSalmon
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightSeaGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightSeaGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightSkyBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightSkyBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightSlateGray", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightSlateGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightSteelBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightSteelBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LightYellow", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LightYellow
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Lime", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Lime
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_LimeGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_LimeGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Linen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Linen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Magenta", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Magenta
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Maroon", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Maroon
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MediumAquamarine", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MediumAquamarine
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MediumBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MediumBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MediumOrchid", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MediumOrchid
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MediumPurple", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MediumPurple
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MediumSeaGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MediumSeaGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MediumSlateBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MediumSlateBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MediumSpringGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MediumSpringGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MediumTurquoise", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MediumTurquoise
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MediumVioletRed", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MediumVioletRed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MidnightBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MidnightBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MintCream", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MintCream
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_MistyRose", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_MistyRose
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Moccasin", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Moccasin
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_NavajoWhite", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_NavajoWhite
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Navy", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Navy
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_OldLace", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_OldLace
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Olive", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Olive
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_OliveDrab", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_OliveDrab
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Orange", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Orange
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_OrangeRed", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_OrangeRed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Orchid", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Orchid
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt32), 
      Color_set_PackedValue
    );

    $.Method({Static:true , Public:false}, "set_PaleGoldenrod", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_PaleGoldenrod
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_PaleGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_PaleGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_PaleTurquoise", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_PaleTurquoise
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_PaleVioletRed", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_PaleVioletRed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_PapayaWhip", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_PapayaWhip
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_PeachPuff", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_PeachPuff
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Peru", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Peru
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Pink", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Pink
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Plum", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Plum
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_PowderBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_PowderBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Purple", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Purple
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_R", 
      JSIL.MethodSignature.Action($.Byte), 
      Color_set_R
    );

    $.Method({Static:true , Public:false}, "set_Red", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Red
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_RosyBrown", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_RosyBrown
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_RoyalBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_RoyalBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_SaddleBrown", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_SaddleBrown
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Salmon", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Salmon
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_SandyBrown", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_SandyBrown
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_SeaGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_SeaGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_SeaShell", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_SeaShell
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Sienna", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Sienna
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Silver", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Silver
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_SkyBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_SkyBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_SlateBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_SlateBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_SlateGray", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_SlateGray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Snow", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Snow
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_SpringGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_SpringGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_SteelBlue", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_SteelBlue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Tan", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Tan
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Teal", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Teal
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Thistle", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Thistle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Tomato", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Tomato
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Transparent", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Transparent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Turquoise", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Turquoise
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Violet", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Violet
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Wheat", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Wheat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_White", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_White
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_WhiteSmoke", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_WhiteSmoke
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Yellow", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_Yellow
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_YellowGreen", 
      JSIL.MethodSignature.Action($.Type), 
      Color_set_YellowGreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Color_toString
    );

    $.Method({Static:false, Public:true }, "ToVector3", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Color_ToVector3
    );

    $.Method({Static:false, Public:true }, "ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Color_ToVector4
    );

    $.Field({Static:false, Public:false}, "_packedValue", $.UInt32); 
    $.Field({Static:true , Public:false}, "Color$Transparent$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$AliceBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$AntiqueWhite$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Aqua$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Aquamarine$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Azure$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Beige$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Bisque$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Black$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$BlanchedAlmond$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Blue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$BlueViolet$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Brown$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$BurlyWood$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$CadetBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Chartreuse$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Chocolate$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Coral$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$CornflowerBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Cornsilk$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Crimson$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Cyan$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkCyan$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkGoldenrod$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkGray$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkKhaki$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkMagenta$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkOliveGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkOrange$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkOrchid$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkRed$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkSalmon$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkSeaGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkSlateBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkSlateGray$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkTurquoise$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DarkViolet$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DeepPink$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DeepSkyBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DimGray$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$DodgerBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Firebrick$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$FloralWhite$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$ForestGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Fuchsia$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Gainsboro$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$GhostWhite$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Gold$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Goldenrod$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Gray$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Green$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$GreenYellow$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Honeydew$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$HotPink$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$IndianRed$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Indigo$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Ivory$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Khaki$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Lavender$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LavenderBlush$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LawnGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LemonChiffon$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightCoral$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightCyan$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightGoldenrodYellow$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightGray$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightPink$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightSalmon$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightSeaGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightSkyBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightSlateGray$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightSteelBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LightYellow$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Lime$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$LimeGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Linen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Magenta$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Maroon$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MediumAquamarine$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MediumBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MediumOrchid$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MediumPurple$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MediumSeaGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MediumSlateBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MediumSpringGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MediumTurquoise$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MediumVioletRed$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MidnightBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MintCream$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$MistyRose$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Moccasin$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$NavajoWhite$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Navy$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$OldLace$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Olive$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$OliveDrab$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Orange$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$OrangeRed$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Orchid$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$PaleGoldenrod$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$PaleGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$PaleTurquoise$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$PaleVioletRed$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$PapayaWhip$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$PeachPuff$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Peru$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Pink$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Plum$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$PowderBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Purple$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Red$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$RosyBrown$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$RoyalBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$SaddleBrown$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Salmon$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$SandyBrown$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$SeaGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$SeaShell$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Sienna$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Silver$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$SkyBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$SlateBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$SlateGray$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Snow$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$SpringGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$SteelBlue$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Tan$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Teal$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Thistle$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Tomato$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Turquoise$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Violet$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Wheat$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$White$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$WhiteSmoke$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$Yellow$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "Color$YellowGreen$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function Color__cctor () {
      $thisType.Color$Transparent$value = new $thisType();
      $thisType.Color$AliceBlue$value = new $thisType();
      $thisType.Color$AntiqueWhite$value = new $thisType();
      $thisType.Color$Aqua$value = new $thisType();
      $thisType.Color$Aquamarine$value = new $thisType();
      $thisType.Color$Azure$value = new $thisType();
      $thisType.Color$Beige$value = new $thisType();
      $thisType.Color$Bisque$value = new $thisType();
      $thisType.Color$Black$value = new $thisType();
      $thisType.Color$BlanchedAlmond$value = new $thisType();
      $thisType.Color$Blue$value = new $thisType();
      $thisType.Color$BlueViolet$value = new $thisType();
      $thisType.Color$Brown$value = new $thisType();
      $thisType.Color$BurlyWood$value = new $thisType();
      $thisType.Color$CadetBlue$value = new $thisType();
      $thisType.Color$Chartreuse$value = new $thisType();
      $thisType.Color$Chocolate$value = new $thisType();
      $thisType.Color$Coral$value = new $thisType();
      $thisType.Color$CornflowerBlue$value = new $thisType();
      $thisType.Color$Cornsilk$value = new $thisType();
      $thisType.Color$Crimson$value = new $thisType();
      $thisType.Color$Cyan$value = new $thisType();
      $thisType.Color$DarkBlue$value = new $thisType();
      $thisType.Color$DarkCyan$value = new $thisType();
      $thisType.Color$DarkGoldenrod$value = new $thisType();
      $thisType.Color$DarkGray$value = new $thisType();
      $thisType.Color$DarkGreen$value = new $thisType();
      $thisType.Color$DarkKhaki$value = new $thisType();
      $thisType.Color$DarkMagenta$value = new $thisType();
      $thisType.Color$DarkOliveGreen$value = new $thisType();
      $thisType.Color$DarkOrange$value = new $thisType();
      $thisType.Color$DarkOrchid$value = new $thisType();
      $thisType.Color$DarkRed$value = new $thisType();
      $thisType.Color$DarkSalmon$value = new $thisType();
      $thisType.Color$DarkSeaGreen$value = new $thisType();
      $thisType.Color$DarkSlateBlue$value = new $thisType();
      $thisType.Color$DarkSlateGray$value = new $thisType();
      $thisType.Color$DarkTurquoise$value = new $thisType();
      $thisType.Color$DarkViolet$value = new $thisType();
      $thisType.Color$DeepPink$value = new $thisType();
      $thisType.Color$DeepSkyBlue$value = new $thisType();
      $thisType.Color$DimGray$value = new $thisType();
      $thisType.Color$DodgerBlue$value = new $thisType();
      $thisType.Color$Firebrick$value = new $thisType();
      $thisType.Color$FloralWhite$value = new $thisType();
      $thisType.Color$ForestGreen$value = new $thisType();
      $thisType.Color$Fuchsia$value = new $thisType();
      $thisType.Color$Gainsboro$value = new $thisType();
      $thisType.Color$GhostWhite$value = new $thisType();
      $thisType.Color$Gold$value = new $thisType();
      $thisType.Color$Goldenrod$value = new $thisType();
      $thisType.Color$Gray$value = new $thisType();
      $thisType.Color$Green$value = new $thisType();
      $thisType.Color$GreenYellow$value = new $thisType();
      $thisType.Color$Honeydew$value = new $thisType();
      $thisType.Color$HotPink$value = new $thisType();
      $thisType.Color$IndianRed$value = new $thisType();
      $thisType.Color$Indigo$value = new $thisType();
      $thisType.Color$Ivory$value = new $thisType();
      $thisType.Color$Khaki$value = new $thisType();
      $thisType.Color$Lavender$value = new $thisType();
      $thisType.Color$LavenderBlush$value = new $thisType();
      $thisType.Color$LawnGreen$value = new $thisType();
      $thisType.Color$LemonChiffon$value = new $thisType();
      $thisType.Color$LightBlue$value = new $thisType();
      $thisType.Color$LightCoral$value = new $thisType();
      $thisType.Color$LightCyan$value = new $thisType();
      $thisType.Color$LightGoldenrodYellow$value = new $thisType();
      $thisType.Color$LightGray$value = new $thisType();
      $thisType.Color$LightGreen$value = new $thisType();
      $thisType.Color$LightPink$value = new $thisType();
      $thisType.Color$LightSalmon$value = new $thisType();
      $thisType.Color$LightSeaGreen$value = new $thisType();
      $thisType.Color$LightSkyBlue$value = new $thisType();
      $thisType.Color$LightSlateGray$value = new $thisType();
      $thisType.Color$LightSteelBlue$value = new $thisType();
      $thisType.Color$LightYellow$value = new $thisType();
      $thisType.Color$Lime$value = new $thisType();
      $thisType.Color$LimeGreen$value = new $thisType();
      $thisType.Color$Linen$value = new $thisType();
      $thisType.Color$Magenta$value = new $thisType();
      $thisType.Color$Maroon$value = new $thisType();
      $thisType.Color$MediumAquamarine$value = new $thisType();
      $thisType.Color$MediumBlue$value = new $thisType();
      $thisType.Color$MediumOrchid$value = new $thisType();
      $thisType.Color$MediumPurple$value = new $thisType();
      $thisType.Color$MediumSeaGreen$value = new $thisType();
      $thisType.Color$MediumSlateBlue$value = new $thisType();
      $thisType.Color$MediumSpringGreen$value = new $thisType();
      $thisType.Color$MediumTurquoise$value = new $thisType();
      $thisType.Color$MediumVioletRed$value = new $thisType();
      $thisType.Color$MidnightBlue$value = new $thisType();
      $thisType.Color$MintCream$value = new $thisType();
      $thisType.Color$MistyRose$value = new $thisType();
      $thisType.Color$Moccasin$value = new $thisType();
      $thisType.Color$NavajoWhite$value = new $thisType();
      $thisType.Color$Navy$value = new $thisType();
      $thisType.Color$OldLace$value = new $thisType();
      $thisType.Color$Olive$value = new $thisType();
      $thisType.Color$OliveDrab$value = new $thisType();
      $thisType.Color$Orange$value = new $thisType();
      $thisType.Color$OrangeRed$value = new $thisType();
      $thisType.Color$Orchid$value = new $thisType();
      $thisType.Color$PaleGoldenrod$value = new $thisType();
      $thisType.Color$PaleGreen$value = new $thisType();
      $thisType.Color$PaleTurquoise$value = new $thisType();
      $thisType.Color$PaleVioletRed$value = new $thisType();
      $thisType.Color$PapayaWhip$value = new $thisType();
      $thisType.Color$PeachPuff$value = new $thisType();
      $thisType.Color$Peru$value = new $thisType();
      $thisType.Color$Pink$value = new $thisType();
      $thisType.Color$Plum$value = new $thisType();
      $thisType.Color$PowderBlue$value = new $thisType();
      $thisType.Color$Purple$value = new $thisType();
      $thisType.Color$Red$value = new $thisType();
      $thisType.Color$RosyBrown$value = new $thisType();
      $thisType.Color$RoyalBlue$value = new $thisType();
      $thisType.Color$SaddleBrown$value = new $thisType();
      $thisType.Color$Salmon$value = new $thisType();
      $thisType.Color$SandyBrown$value = new $thisType();
      $thisType.Color$SeaGreen$value = new $thisType();
      $thisType.Color$SeaShell$value = new $thisType();
      $thisType.Color$Sienna$value = new $thisType();
      $thisType.Color$Silver$value = new $thisType();
      $thisType.Color$SkyBlue$value = new $thisType();
      $thisType.Color$SlateBlue$value = new $thisType();
      $thisType.Color$SlateGray$value = new $thisType();
      $thisType.Color$Snow$value = new $thisType();
      $thisType.Color$SpringGreen$value = new $thisType();
      $thisType.Color$SteelBlue$value = new $thisType();
      $thisType.Color$Tan$value = new $thisType();
      $thisType.Color$Teal$value = new $thisType();
      $thisType.Color$Thistle$value = new $thisType();
      $thisType.Color$Tomato$value = new $thisType();
      $thisType.Color$Turquoise$value = new $thisType();
      $thisType.Color$Violet$value = new $thisType();
      $thisType.Color$Wheat$value = new $thisType();
      $thisType.Color$White$value = new $thisType();
      $thisType.Color$WhiteSmoke$value = new $thisType();
      $thisType.Color$Yellow$value = new $thisType();
      $thisType.Color$YellowGreen$value = new $thisType();
      ($thisType.Color$Transparent$value = $S00().Construct(0));
      ($thisType.Color$AliceBlue$value = $S00().Construct(4294965488));
      ($thisType.Color$AntiqueWhite$value = $S00().Construct(4292340730));
      ($thisType.Color$Aqua$value = $S00().Construct(4294967040));
      ($thisType.Color$Aquamarine$value = $S00().Construct(4292149119));
      ($thisType.Color$Azure$value = $S00().Construct(4294967280));
      ($thisType.Color$Beige$value = $S00().Construct(4292670965));
      ($thisType.Color$Bisque$value = $S00().Construct(4291093759));
      ($thisType.Color$Black$value = $S00().Construct(4278190080));
      ($thisType.Color$BlanchedAlmond$value = $S00().Construct(4291685375));
      ($thisType.Color$Blue$value = $S00().Construct(4294901760));
      ($thisType.Color$BlueViolet$value = $S00().Construct(4293012362));
      ($thisType.Color$Brown$value = $S00().Construct(4280953509));
      ($thisType.Color$BurlyWood$value = $S00().Construct(4287084766));
      ($thisType.Color$CadetBlue$value = $S00().Construct(4288716383));
      ($thisType.Color$Chartreuse$value = $S00().Construct(4278255487));
      ($thisType.Color$Chocolate$value = $S00().Construct(4280183250));
      ($thisType.Color$Coral$value = $S00().Construct(4283465727));
      ($thisType.Color$CornflowerBlue$value = $S00().Construct(4293760356));
      ($thisType.Color$Cornsilk$value = $S00().Construct(4292671743));
      ($thisType.Color$Crimson$value = $S00().Construct(4282127580));
      ($thisType.Color$Cyan$value = $S00().Construct(4294967040));
      ($thisType.Color$DarkBlue$value = $S00().Construct(4287299584));
      ($thisType.Color$DarkCyan$value = $S00().Construct(4287335168));
      ($thisType.Color$DarkGoldenrod$value = $S00().Construct(4278945464));
      ($thisType.Color$DarkGray$value = $S00().Construct(4289309097));
      ($thisType.Color$DarkGreen$value = $S00().Construct(4278215680));
      ($thisType.Color$DarkKhaki$value = $S00().Construct(4285249469));
      ($thisType.Color$DarkMagenta$value = $S00().Construct(4287299723));
      ($thisType.Color$DarkOliveGreen$value = $S00().Construct(4281297749));
      ($thisType.Color$DarkOrange$value = $S00().Construct(4278226175));
      ($thisType.Color$DarkOrchid$value = $S00().Construct(4291572377));
      ($thisType.Color$DarkRed$value = $S00().Construct(4278190219));
      ($thisType.Color$DarkSalmon$value = $S00().Construct(4286224105));
      ($thisType.Color$DarkSeaGreen$value = $S00().Construct(4287347855));
      ($thisType.Color$DarkSlateBlue$value = $S00().Construct(4287315272));
      ($thisType.Color$DarkSlateGray$value = $S00().Construct(4283387695));
      ($thisType.Color$DarkTurquoise$value = $S00().Construct(4291939840));
      ($thisType.Color$DarkViolet$value = $S00().Construct(4292018324));
      ($thisType.Color$DeepPink$value = $S00().Construct(4287829247));
      ($thisType.Color$DeepSkyBlue$value = $S00().Construct(4294950656));
      ($thisType.Color$DimGray$value = $S00().Construct(4285098345));
      ($thisType.Color$DodgerBlue$value = $S00().Construct(4294938654));
      ($thisType.Color$Firebrick$value = $S00().Construct(4280427186));
      ($thisType.Color$FloralWhite$value = $S00().Construct(4293982975));
      ($thisType.Color$ForestGreen$value = $S00().Construct(4280453922));
      ($thisType.Color$Fuchsia$value = $S00().Construct(4294902015));
      ($thisType.Color$Gainsboro$value = $S00().Construct(4292664540));
      ($thisType.Color$GhostWhite$value = $S00().Construct(4294965496));
      ($thisType.Color$Gold$value = $S00().Construct(4278245375));
      ($thisType.Color$Goldenrod$value = $S00().Construct(4280329690));
      ($thisType.Color$Gray$value = $S00().Construct(4286611584));
      ($thisType.Color$Green$value = $S00().Construct(4278222848));
      ($thisType.Color$GreenYellow$value = $S00().Construct(4281335725));
      ($thisType.Color$Honeydew$value = $S00().Construct(4293984240));
      ($thisType.Color$HotPink$value = $S00().Construct(4290013695));
      ($thisType.Color$IndianRed$value = $S00().Construct(4284243149));
      ($thisType.Color$Indigo$value = $S00().Construct(4286709835));
      ($thisType.Color$Ivory$value = $S00().Construct(4293984255));
      ($thisType.Color$Khaki$value = $S00().Construct(4287424240));
      ($thisType.Color$Lavender$value = $S00().Construct(4294633190));
      ($thisType.Color$LavenderBlush$value = $S00().Construct(4294308095));
      ($thisType.Color$LawnGreen$value = $S00().Construct(4278254716));
      ($thisType.Color$LemonChiffon$value = $S00().Construct(4291689215));
      ($thisType.Color$LightBlue$value = $S00().Construct(4293318829));
      ($thisType.Color$LightCoral$value = $S00().Construct(4286611696));
      ($thisType.Color$LightCyan$value = $S00().Construct(4294967264));
      ($thisType.Color$LightGoldenrodYellow$value = $S00().Construct(4292016890));
      ($thisType.Color$LightGray$value = $S00().Construct(4292072403));
      ($thisType.Color$LightGreen$value = $S00().Construct(4287688336));
      ($thisType.Color$LightPink$value = $S00().Construct(4290885375));
      ($thisType.Color$LightSalmon$value = $S00().Construct(4286226687));
      ($thisType.Color$LightSeaGreen$value = $S00().Construct(4289376800));
      ($thisType.Color$LightSkyBlue$value = $S00().Construct(4294626951));
      ($thisType.Color$LightSlateGray$value = $S00().Construct(4288252023));
      ($thisType.Color$LightSteelBlue$value = $S00().Construct(4292789424));
      ($thisType.Color$LightYellow$value = $S00().Construct(4292935679));
      ($thisType.Color$Lime$value = $S00().Construct(4278255360));
      ($thisType.Color$LimeGreen$value = $S00().Construct(4281519410));
      ($thisType.Color$Linen$value = $S00().Construct(4293325050));
      ($thisType.Color$Magenta$value = $S00().Construct(4294902015));
      ($thisType.Color$Maroon$value = $S00().Construct(4278190208));
      ($thisType.Color$MediumAquamarine$value = $S00().Construct(4289383782));
      ($thisType.Color$MediumBlue$value = $S00().Construct(4291624960));
      ($thisType.Color$MediumOrchid$value = $S00().Construct(4292040122));
      ($thisType.Color$MediumPurple$value = $S00().Construct(4292571283));
      ($thisType.Color$MediumSeaGreen$value = $S00().Construct(4285641532));
      ($thisType.Color$MediumSlateBlue$value = $S00().Construct(4293814395));
      ($thisType.Color$MediumSpringGreen$value = $S00().Construct(4288346624));
      ($thisType.Color$MediumTurquoise$value = $S00().Construct(4291613000));
      ($thisType.Color$MediumVioletRed$value = $S00().Construct(4286911943));
      ($thisType.Color$MidnightBlue$value = $S00().Construct(4285536537));
      ($thisType.Color$MintCream$value = $S00().Construct(4294639605));
      ($thisType.Color$MistyRose$value = $S00().Construct(4292994303));
      ($thisType.Color$Moccasin$value = $S00().Construct(4290110719));
      ($thisType.Color$NavajoWhite$value = $S00().Construct(4289584895));
      ($thisType.Color$Navy$value = $S00().Construct(4286578688));
      ($thisType.Color$OldLace$value = $S00().Construct(4293326333));
      ($thisType.Color$Olive$value = $S00().Construct(4278222976));
      ($thisType.Color$OliveDrab$value = $S00().Construct(4280520299));
      ($thisType.Color$Orange$value = $S00().Construct(4278232575));
      ($thisType.Color$OrangeRed$value = $S00().Construct(4278207999));
      ($thisType.Color$Orchid$value = $S00().Construct(4292243674));
      ($thisType.Color$PaleGoldenrod$value = $S00().Construct(4289390830));
      ($thisType.Color$PaleGreen$value = $S00().Construct(4288215960));
      ($thisType.Color$PaleTurquoise$value = $S00().Construct(4293848751));
      ($thisType.Color$PaleVioletRed$value = $S00().Construct(4287852763));
      ($thisType.Color$PapayaWhip$value = $S00().Construct(4292210687));
      ($thisType.Color$PeachPuff$value = $S00().Construct(4290370303));
      ($thisType.Color$Peru$value = $S00().Construct(4282353101));
      ($thisType.Color$Pink$value = $S00().Construct(4291543295));
      ($thisType.Color$Plum$value = $S00().Construct(4292714717));
      ($thisType.Color$PowderBlue$value = $S00().Construct(4293320880));
      ($thisType.Color$Purple$value = $S00().Construct(4286578816));
      ($thisType.Color$Red$value = $S00().Construct(4278190335));
      ($thisType.Color$RosyBrown$value = $S00().Construct(4287598524));
      ($thisType.Color$RoyalBlue$value = $S00().Construct(4292962625));
      ($thisType.Color$SaddleBrown$value = $S00().Construct(4279453067));
      ($thisType.Color$Salmon$value = $S00().Construct(4285694202));
      ($thisType.Color$SandyBrown$value = $S00().Construct(4284523764));
      ($thisType.Color$SeaGreen$value = $S00().Construct(4283927342));
      ($thisType.Color$SeaShell$value = $S00().Construct(4293850623));
      ($thisType.Color$Sienna$value = $S00().Construct(4281160352));
      ($thisType.Color$Silver$value = $S00().Construct(4290822336));
      ($thisType.Color$SkyBlue$value = $S00().Construct(4293643911));
      ($thisType.Color$SlateBlue$value = $S00().Construct(4291648106));
      ($thisType.Color$SlateGray$value = $S00().Construct(4287660144));
      ($thisType.Color$Snow$value = $S00().Construct(4294638335));
      ($thisType.Color$SpringGreen$value = $S00().Construct(4286578432));
      ($thisType.Color$SteelBlue$value = $S00().Construct(4290019910));
      ($thisType.Color$Tan$value = $S00().Construct(4287411410));
      ($thisType.Color$Teal$value = $S00().Construct(4286611456));
      ($thisType.Color$Thistle$value = $S00().Construct(4292394968));
      ($thisType.Color$Tomato$value = $S00().Construct(4282868735));
      ($thisType.Color$Turquoise$value = $S00().Construct(4291878976));
      ($thisType.Color$Violet$value = $S00().Construct(4293821166));
      ($thisType.Color$Wheat$value = $S00().Construct(4289978101));
      ($thisType.Color$White$value = $S00().Construct(4294967295));
      ($thisType.Color$WhiteSmoke$value = $S00().Construct(4294309365));
      ($thisType.Color$Yellow$value = $S00().Construct(4278255615));
      ($thisType.Color$YellowGreen$value = $S00().Construct(4281519514));
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Color__cctor
    );

    $.Property({Static:false, Public:true }, "B", $.Byte);

    $.Property({Static:false, Public:true }, "G", $.Byte);

    $.Property({Static:false, Public:true }, "R", $.Byte);

    $.Property({Static:false, Public:true }, "A", $.Byte);

    $.Property({Static:false, Public:true }, "PackedValue", $.UInt32)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.Property({Static:true , Public:true }, "Transparent", $.Type);

    $.Property({Static:true , Public:true }, "AliceBlue", $.Type);

    $.Property({Static:true , Public:true }, "AntiqueWhite", $.Type);

    $.Property({Static:true , Public:true }, "Aqua", $.Type);

    $.Property({Static:true , Public:true }, "Aquamarine", $.Type);

    $.Property({Static:true , Public:true }, "Azure", $.Type);

    $.Property({Static:true , Public:true }, "Beige", $.Type);

    $.Property({Static:true , Public:true }, "Bisque", $.Type);

    $.Property({Static:true , Public:true }, "Black", $.Type);

    $.Property({Static:true , Public:true }, "BlanchedAlmond", $.Type);

    $.Property({Static:true , Public:true }, "Blue", $.Type);

    $.Property({Static:true , Public:true }, "BlueViolet", $.Type);

    $.Property({Static:true , Public:true }, "Brown", $.Type);

    $.Property({Static:true , Public:true }, "BurlyWood", $.Type);

    $.Property({Static:true , Public:true }, "CadetBlue", $.Type);

    $.Property({Static:true , Public:true }, "Chartreuse", $.Type);

    $.Property({Static:true , Public:true }, "Chocolate", $.Type);

    $.Property({Static:true , Public:true }, "Coral", $.Type);

    $.Property({Static:true , Public:true }, "CornflowerBlue", $.Type);

    $.Property({Static:true , Public:true }, "Cornsilk", $.Type);

    $.Property({Static:true , Public:true }, "Crimson", $.Type);

    $.Property({Static:true , Public:true }, "Cyan", $.Type);

    $.Property({Static:true , Public:true }, "DarkBlue", $.Type);

    $.Property({Static:true , Public:true }, "DarkCyan", $.Type);

    $.Property({Static:true , Public:true }, "DarkGoldenrod", $.Type);

    $.Property({Static:true , Public:true }, "DarkGray", $.Type);

    $.Property({Static:true , Public:true }, "DarkGreen", $.Type);

    $.Property({Static:true , Public:true }, "DarkKhaki", $.Type);

    $.Property({Static:true , Public:true }, "DarkMagenta", $.Type);

    $.Property({Static:true , Public:true }, "DarkOliveGreen", $.Type);

    $.Property({Static:true , Public:true }, "DarkOrange", $.Type);

    $.Property({Static:true , Public:true }, "DarkOrchid", $.Type);

    $.Property({Static:true , Public:true }, "DarkRed", $.Type);

    $.Property({Static:true , Public:true }, "DarkSalmon", $.Type);

    $.Property({Static:true , Public:true }, "DarkSeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "DarkSlateBlue", $.Type);

    $.Property({Static:true , Public:true }, "DarkSlateGray", $.Type);

    $.Property({Static:true , Public:true }, "DarkTurquoise", $.Type);

    $.Property({Static:true , Public:true }, "DarkViolet", $.Type);

    $.Property({Static:true , Public:true }, "DeepPink", $.Type);

    $.Property({Static:true , Public:true }, "DeepSkyBlue", $.Type);

    $.Property({Static:true , Public:true }, "DimGray", $.Type);

    $.Property({Static:true , Public:true }, "DodgerBlue", $.Type);

    $.Property({Static:true , Public:true }, "Firebrick", $.Type);

    $.Property({Static:true , Public:true }, "FloralWhite", $.Type);

    $.Property({Static:true , Public:true }, "ForestGreen", $.Type);

    $.Property({Static:true , Public:true }, "Fuchsia", $.Type);

    $.Property({Static:true , Public:true }, "Gainsboro", $.Type);

    $.Property({Static:true , Public:true }, "GhostWhite", $.Type);

    $.Property({Static:true , Public:true }, "Gold", $.Type);

    $.Property({Static:true , Public:true }, "Goldenrod", $.Type);

    $.Property({Static:true , Public:true }, "Gray", $.Type);

    $.Property({Static:true , Public:true }, "Green", $.Type);

    $.Property({Static:true , Public:true }, "GreenYellow", $.Type);

    $.Property({Static:true , Public:true }, "Honeydew", $.Type);

    $.Property({Static:true , Public:true }, "HotPink", $.Type);

    $.Property({Static:true , Public:true }, "IndianRed", $.Type);

    $.Property({Static:true , Public:true }, "Indigo", $.Type);

    $.Property({Static:true , Public:true }, "Ivory", $.Type);

    $.Property({Static:true , Public:true }, "Khaki", $.Type);

    $.Property({Static:true , Public:true }, "Lavender", $.Type);

    $.Property({Static:true , Public:true }, "LavenderBlush", $.Type);

    $.Property({Static:true , Public:true }, "LawnGreen", $.Type);

    $.Property({Static:true , Public:true }, "LemonChiffon", $.Type);

    $.Property({Static:true , Public:true }, "LightBlue", $.Type);

    $.Property({Static:true , Public:true }, "LightCoral", $.Type);

    $.Property({Static:true , Public:true }, "LightCyan", $.Type);

    $.Property({Static:true , Public:true }, "LightGoldenrodYellow", $.Type);

    $.Property({Static:true , Public:true }, "LightGray", $.Type);

    $.Property({Static:true , Public:true }, "LightGreen", $.Type);

    $.Property({Static:true , Public:true }, "LightPink", $.Type);

    $.Property({Static:true , Public:true }, "LightSalmon", $.Type);

    $.Property({Static:true , Public:true }, "LightSeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "LightSkyBlue", $.Type);

    $.Property({Static:true , Public:true }, "LightSlateGray", $.Type);

    $.Property({Static:true , Public:true }, "LightSteelBlue", $.Type);

    $.Property({Static:true , Public:true }, "LightYellow", $.Type);

    $.Property({Static:true , Public:true }, "Lime", $.Type);

    $.Property({Static:true , Public:true }, "LimeGreen", $.Type);

    $.Property({Static:true , Public:true }, "Linen", $.Type);

    $.Property({Static:true , Public:true }, "Magenta", $.Type);

    $.Property({Static:true , Public:true }, "Maroon", $.Type);

    $.Property({Static:true , Public:true }, "MediumAquamarine", $.Type);

    $.Property({Static:true , Public:true }, "MediumBlue", $.Type);

    $.Property({Static:true , Public:true }, "MediumOrchid", $.Type);

    $.Property({Static:true , Public:true }, "MediumPurple", $.Type);

    $.Property({Static:true , Public:true }, "MediumSeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "MediumSlateBlue", $.Type);

    $.Property({Static:true , Public:true }, "MediumSpringGreen", $.Type);

    $.Property({Static:true , Public:true }, "MediumTurquoise", $.Type);

    $.Property({Static:true , Public:true }, "MediumVioletRed", $.Type);

    $.Property({Static:true , Public:true }, "MidnightBlue", $.Type);

    $.Property({Static:true , Public:true }, "MintCream", $.Type);

    $.Property({Static:true , Public:true }, "MistyRose", $.Type);

    $.Property({Static:true , Public:true }, "Moccasin", $.Type);

    $.Property({Static:true , Public:true }, "NavajoWhite", $.Type);

    $.Property({Static:true , Public:true }, "Navy", $.Type);

    $.Property({Static:true , Public:true }, "OldLace", $.Type);

    $.Property({Static:true , Public:true }, "Olive", $.Type);

    $.Property({Static:true , Public:true }, "OliveDrab", $.Type);

    $.Property({Static:true , Public:true }, "Orange", $.Type);

    $.Property({Static:true , Public:true }, "OrangeRed", $.Type);

    $.Property({Static:true , Public:true }, "Orchid", $.Type);

    $.Property({Static:true , Public:true }, "PaleGoldenrod", $.Type);

    $.Property({Static:true , Public:true }, "PaleGreen", $.Type);

    $.Property({Static:true , Public:true }, "PaleTurquoise", $.Type);

    $.Property({Static:true , Public:true }, "PaleVioletRed", $.Type);

    $.Property({Static:true , Public:true }, "PapayaWhip", $.Type);

    $.Property({Static:true , Public:true }, "PeachPuff", $.Type);

    $.Property({Static:true , Public:true }, "Peru", $.Type);

    $.Property({Static:true , Public:true }, "Pink", $.Type);

    $.Property({Static:true , Public:true }, "Plum", $.Type);

    $.Property({Static:true , Public:true }, "PowderBlue", $.Type);

    $.Property({Static:true , Public:true }, "Purple", $.Type);

    $.Property({Static:true , Public:true }, "Red", $.Type);

    $.Property({Static:true , Public:true }, "RosyBrown", $.Type);

    $.Property({Static:true , Public:true }, "RoyalBlue", $.Type);

    $.Property({Static:true , Public:true }, "SaddleBrown", $.Type);

    $.Property({Static:true , Public:true }, "Salmon", $.Type);

    $.Property({Static:true , Public:true }, "SandyBrown", $.Type);

    $.Property({Static:true , Public:true }, "SeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "SeaShell", $.Type);

    $.Property({Static:true , Public:true }, "Sienna", $.Type);

    $.Property({Static:true , Public:true }, "Silver", $.Type);

    $.Property({Static:true , Public:true }, "SkyBlue", $.Type);

    $.Property({Static:true , Public:true }, "SlateBlue", $.Type);

    $.Property({Static:true , Public:true }, "SlateGray", $.Type);

    $.Property({Static:true , Public:true }, "Snow", $.Type);

    $.Property({Static:true , Public:true }, "SpringGreen", $.Type);

    $.Property({Static:true , Public:true }, "SteelBlue", $.Type);

    $.Property({Static:true , Public:true }, "Tan", $.Type);

    $.Property({Static:true , Public:true }, "Teal", $.Type);

    $.Property({Static:true , Public:true }, "Thistle", $.Type);

    $.Property({Static:true , Public:true }, "Tomato", $.Type);

    $.Property({Static:true , Public:true }, "Turquoise", $.Type);

    $.Property({Static:true , Public:true }, "Violet", $.Type);

    $.Property({Static:true , Public:true }, "Wheat", $.Type);

    $.Property({Static:true , Public:true }, "White", $.Type);

    $.Property({Static:true , Public:true }, "WhiteSmoke", $.Type);

    $.Property({Static:true , Public:true }, "Yellow", $.Type);

    $.Property({Static:true , Public:true }, "YellowGreen", $.Type);

    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString,nq}"]; })
    .Attribute($asm03.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm00.Microsoft.Xna.Framework.Design.ColorConverter.__Type__]; });

})();

/* class Microsoft.Xna.Framework.Content.DictionaryReader`2 */ 

(function DictionaryReader$b2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReaderManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"]))) ();
  };

  function DictionaryReader$b2__ctor () {
    $asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this))).prototype._ctor.call(this);
  };

  function DictionaryReader$b2_Initialize (manager) {
    this.keyType = $thisType.TKey.get(this);
    this.valueType = $thisType.TValue.get(this);
    this.keyReader = manager.GetTypeReader(this.keyType);
    this.valueReader = manager.GetTypeReader(this.valueType);
  };

  function DictionaryReader$b2_Read$00 (input, existingInstance) {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$thisType.TKey.get(this), $thisType.TValue.get(this)]), [$asm01.System.Int32]);
    var count = (input.ReadInt32() | 0);
    var dictionary = existingInstance;
    if (dictionary === null) {
      dictionary = $s00.Construct(count);
    } else {
      dictionary.Clear();
    }

    for (var i = 0; i < count; i = ((i + 1) | 0)) {
      if ((this.keyType).get_IsValueType()) {
        var key = JSIL.CloneParameter($thisType.TKey.get(this), $S00().CallVirtual("ReadObject$b1", [$thisType.TKey.get(this)], input, this.keyReader));
      } else {
        var readerType = (input.Read7BitEncodedInt() | 0);
        key = JSIL.CloneParameter($thisType.TKey.get(this), (
            (readerType > 0)
               ? $S00().CallVirtual("ReadObject$b1", [$thisType.TKey.get(this)], input, input.get_TypeReaders()[((readerType - 1) | 0)])
               : (
                $thisType.TKey.get(this).IsValueType
                   ? JSIL.CreateInstanceOfType($thisType.TKey.get(this))
                   : null)
          )
        );
      }
      if ((this.valueType).get_IsValueType()) {
        var value = JSIL.CloneParameter($thisType.TValue.get(this), $S01().CallVirtual("ReadObject$b1", [$thisType.TValue.get(this)], input, this.valueReader));
      } else {
        readerType = (input.Read7BitEncodedInt() | 0);
        value = JSIL.CloneParameter($thisType.TValue.get(this), (
            (readerType > 0)
               ? $S01().CallVirtual("ReadObject$b1", [$thisType.TValue.get(this)], input, input.get_TypeReaders()[((readerType - 1) | 0)])
               : (
                $thisType.TValue.get(this).IsValueType
                   ? JSIL.CreateInstanceOfType($thisType.TValue.get(this))
                   : null)
          )
        );
      }
      dictionary.Add(JSIL.CloneParameter($thisType.TKey.get(this), key), JSIL.CloneParameter($thisType.TValue.get(this), value));
    }
    return dictionary;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("TKey", "Microsoft.Xna.Framework.Content.DictionaryReader`2"), new JSIL.GenericParameter("TValue", "Microsoft.Xna.Framework.Content.DictionaryReader`2")])]), 
      Name: "Microsoft.Xna.Framework.Content.DictionaryReader`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DictionaryReader$b2__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")), 
      DictionaryReader$b2_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      DictionaryReader$b2_Read$00
    );

    $.Field({Static:false, Public:false}, "keyReader", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    $.Field({Static:false, Public:false}, "valueReader", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    $.Field({Static:false, Public:false}, "keyType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "valueType", $asm01.TypeRef("System.Type")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.DoubleReader */ 

(function DoubleReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Double))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function DoubleReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DoubleReader_Read$00 (input, existingInstance) {
    return input.ReadDouble();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Double")]), 
      Name: "Microsoft.Xna.Framework.Content.DoubleReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      DoubleReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Double]), 
      DoubleReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.EnumReader`1 */ 

(function EnumReader$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReaderManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Enum)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"]))) ();
  };

  function EnumReader$b1__ctor () {
    $asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($thisType.T.get(this)).prototype._ctor.call(this);
  };

  function EnumReader$b1_Initialize (manager) {
    var readerType = $T02().GetUnderlyingType($thisType.T.get(this));
    this.elementReader = manager.GetTypeReader(readerType);
  };

  function EnumReader$b1_Read$00 (input, existingInstance) {
    return $S00().CallVirtual("ReadRawObject$b1", [$thisType.T.get(this)], input, this.elementReader);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.EnumReader`1")]), 
      Name: "Microsoft.Xna.Framework.Content.EnumReader`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EnumReader$b1__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")), 
      EnumReader$b1_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.GenericParameter("T")]), 
      EnumReader$b1_Read$00
    );

    $.Field({Static:false, Public:false}, "elementReader", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.DxtUtil */ 

(function DxtUtil$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.MemoryStream)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.MemoryStream"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [
        $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.BinaryReader"), [$asm01.TypeRef("System.IO.Stream")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [
        $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [
        $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function DxtUtil_ConvertRgb565ToRgb888 (color, /* ref */ r, /* ref */ g, /* ref */ b) {
    var temp = ((Math.imul(((color | 0) >> 11), 255) + 16) | 0);
    r.set((((((((temp / 32) | 0) + temp) | 0) / 32) | 0) & 0xFF));
    temp = ((Math.imul((((color | 0) & 2016) >> 5), 255) + 32) | 0);
    g.set((((((((temp / 64) | 0) + temp) | 0) / 64) | 0) & 0xFF));
    temp = (((Math.imul(((color | 0) & 31), 255) >>> 0) + 16) & 0xFFFF);
    b.set((((((((temp / 32) | 0) + temp) | 0) / 32) | 0) & 0xFF));
  };

  function DxtUtil_DecompressDxt1$00 (imageData, width, height) {
    var imageStream = $S00().Construct(imageData);
    try {
      var result = $S01().CallStatic($thisType, "DecompressDxt1", null, imageStream, width, height);
    } finally {
      if (imageStream !== null) {
        $IM00().Call(imageStream, null);
      }
    }
    return result;
  };

  function DxtUtil_DecompressDxt1$01 (imageStream, width, height) {
    var imageData = JSIL.Array.New($T01(), Math.imul(Math.imul(width, height), 4));
    var imageReader = $S02().Construct(imageStream);
    try {
      var blockCountX = (((((width | 0) + 3) | 0) / 4) | 0);
      var blockCountY = (((((height | 0) + 3) | 0) / 4) | 0);

      for (var y = 0; y < blockCountY; y = ((y + 1) | 0)) {

        for (var x = 0; x < blockCountX; x = ((x + 1) | 0)) {
          $thisType.DecompressDxt1Block(
            imageReader, 
            x, 
            y, 
            blockCountX, 
            width, 
            height, 
            imageData
          );
        }
      }
    } finally {
      if (imageReader !== null) {
        $IM00().Call(imageReader, null);
      }
    }
    return imageData;
  };

  function DxtUtil_DecompressDxt1Block (imageReader, x, y, blockCountX, width, height, imageData) {
    var r0 = new JSIL.BoxedVariable(0);
    var g0 = new JSIL.BoxedVariable(0);
    var b0 = new JSIL.BoxedVariable(0);
    var r = new JSIL.BoxedVariable(0);
    var g = new JSIL.BoxedVariable(0);
    var b = new JSIL.BoxedVariable(0);
    var c0 = (imageReader.ReadUInt16() | 0);
    var c = (imageReader.ReadUInt16() | 0);
    $thisType.ConvertRgb565ToRgb888(c0, /* ref */ r0, /* ref */ g0, /* ref */ b0);
    $thisType.ConvertRgb565ToRgb888(c, /* ref */ r, /* ref */ g, /* ref */ b);
    var lookupTable = (imageReader.ReadUInt32() >>> 0);

    for (var blockY = 0; blockY < 4; blockY = ((blockY + 1) | 0)) {

      for (var blockX = 0; blockX < 4; blockX = ((blockX + 1) | 0)) {
        var r2 = 0;
        var g2 = 0;
        var b2 = 0;
        var a = 255;
        var index = (lookupTable >>> Math.imul(2, ((Math.imul(4, blockY) + blockX) | 0))) & 3;
        if (c0 > c) {
          switch (index) {
            case 0: 
              r2 = (r0.get() | 0);
              g2 = (g0.get() | 0);
              b2 = (b0.get() | 0);
              break;

            case 1: 
              r2 = (r.get() | 0);
              g2 = (g.get() | 0);
              b2 = (b.get() | 0);
              break;

            case 2: 
              r2 = (((((((2 * (r0.get() | 0)) | 0) + (r.get() | 0)) | 0) / 3) | 0) & 0xFF);
              g2 = (((((((2 * (g0.get() | 0)) | 0) + (g.get() | 0)) | 0) / 3) | 0) & 0xFF);
              b2 = (((((((2 * (b0.get() | 0)) | 0) + (b.get() | 0)) | 0) / 3) | 0) & 0xFF);
              break;

            case 3: 
              r2 = ((((((r0.get() | 0) + ((2 * (r.get() | 0)) | 0)) | 0) / 3) | 0) & 0xFF);
              g2 = ((((((g0.get() | 0) + ((2 * (g.get() | 0)) | 0)) | 0) / 3) | 0) & 0xFF);
              b2 = ((((((b0.get() | 0) + ((2 * (b.get() | 0)) | 0)) | 0) / 3) | 0) & 0xFF);
              break;

          }
        } else {
          switch (index) {
            case 0: 
              r2 = (r0.get() | 0);
              g2 = (g0.get() | 0);
              b2 = (b0.get() | 0);
              break;

            case 1: 
              r2 = (r.get() | 0);
              g2 = (g.get() | 0);
              b2 = (b.get() | 0);
              break;

            case 2: 
              r2 = ((((((r0.get() | 0) + (r.get() | 0)) & 0xFF) / 2) | 0) & 0xFF);
              g2 = ((((((g0.get() | 0) + (g.get() | 0)) & 0xFF) / 2) | 0) & 0xFF);
              b2 = ((((((b0.get() | 0) + (b.get() | 0)) & 0xFF) / 2) | 0) & 0xFF);
              break;

            case 3: 
              r2 = 0;
              g2 = 0;
              b2 = 0;
              a = 0;
              break;

          }
        }
        var px = ((((x | 0) << 2) + blockX) | 0);
        var py = ((((y | 0) << 2) + blockY) | 0);
        if (!((px >= (width | 0)) || (py >= (height | 0)))) {
          var offset = ((Math.imul(py, width) + px) | 0) << 2;
          imageData[offset] = r2;
          imageData[((offset + 1) | 0)] = g2;
          imageData[((offset + 2) | 0)] = b2;
          imageData[((offset + 3) | 0)] = a;
        }
      }
    }
  };

  function DxtUtil_DecompressDxt3$02 (imageData, width, height) {
    var imageStream = $S00().Construct(imageData);
    try {
      var result = $S03().CallStatic($thisType, "DecompressDxt3", null, imageStream, width, height);
    } finally {
      if (imageStream !== null) {
        $IM00().Call(imageStream, null);
      }
    }
    return result;
  };

  function DxtUtil_DecompressDxt3$03 (imageStream, width, height) {
    var imageData = JSIL.Array.New($T01(), Math.imul(Math.imul(width, height), 4));
    var imageReader = $S02().Construct(imageStream);
    try {
      var blockCountX = (((((width | 0) + 3) | 0) / 4) | 0);
      var blockCountY = (((((height | 0) + 3) | 0) / 4) | 0);

      for (var y = 0; y < blockCountY; y = ((y + 1) | 0)) {

        for (var x = 0; x < blockCountX; x = ((x + 1) | 0)) {
          $thisType.DecompressDxt3Block(
            imageReader, 
            x, 
            y, 
            blockCountX, 
            width, 
            height, 
            imageData
          );
        }
      }
    } finally {
      if (imageReader !== null) {
        $IM00().Call(imageReader, null);
      }
    }
    return imageData;
  };

  function DxtUtil_DecompressDxt3Block (imageReader, x, y, blockCountX, width, height, imageData) {
    var r0 = new JSIL.BoxedVariable(0);
    var g0 = new JSIL.BoxedVariable(0);
    var b0 = new JSIL.BoxedVariable(0);
    var r = new JSIL.BoxedVariable(0);
    var g = new JSIL.BoxedVariable(0);
    var b = new JSIL.BoxedVariable(0);
    var a0 = (imageReader.ReadByte() | 0);
    var a = (imageReader.ReadByte() | 0);
    var a2 = (imageReader.ReadByte() | 0);
    var a3 = (imageReader.ReadByte() | 0);
    var a4 = (imageReader.ReadByte() | 0);
    var a5 = (imageReader.ReadByte() | 0);
    var a6 = (imageReader.ReadByte() | 0);
    var a7 = (imageReader.ReadByte() | 0);
    var c0 = (imageReader.ReadUInt16() | 0);
    var c = (imageReader.ReadUInt16() | 0);
    $thisType.ConvertRgb565ToRgb888(c0, /* ref */ r0, /* ref */ g0, /* ref */ b0);
    $thisType.ConvertRgb565ToRgb888(c, /* ref */ r, /* ref */ g, /* ref */ b);
    var lookupTable = (imageReader.ReadUInt32() >>> 0);
    var alphaIndex = 0;

    for (var blockY = 0; blockY < 4; blockY = ((blockY + 1) | 0)) {

      for (var blockX = 0; blockX < 4; blockX = ((blockX + 1) | 0)) {
        var r2 = 0;
        var g2 = 0;
        var b2 = 0;
        var a8 = 0;
        var index = (lookupTable >>> Math.imul(2, ((Math.imul(4, blockY) + blockX) | 0))) & 3;
        switch (alphaIndex) {
          case 0: 
            a8 = ((a0 & 15) | ((a0 & 15) << 4) & 0xFF);
            break;

          case 1: 
            a8 = ((a0 & 240) | ((a0 & 240) >> 4) & 0xFF);
            break;

          case 2: 
            a8 = ((a & 15) | ((a & 15) << 4) & 0xFF);
            break;

          case 3: 
            a8 = ((a & 240) | ((a & 240) >> 4) & 0xFF);
            break;

          case 4: 
            a8 = ((a2 & 15) | ((a2 & 15) << 4) & 0xFF);
            break;

          case 5: 
            a8 = ((a2 & 240) | ((a2 & 240) >> 4) & 0xFF);
            break;

          case 6: 
            a8 = ((a3 & 15) | ((a3 & 15) << 4) & 0xFF);
            break;

          case 7: 
            a8 = ((a3 & 240) | ((a3 & 240) >> 4) & 0xFF);
            break;

          case 8: 
            a8 = ((a4 & 15) | ((a4 & 15) << 4) & 0xFF);
            break;

          case 9: 
            a8 = ((a4 & 240) | ((a4 & 240) >> 4) & 0xFF);
            break;

          case 10: 
            a8 = ((a5 & 15) | ((a5 & 15) << 4) & 0xFF);
            break;

          case 11: 
            a8 = ((a5 & 240) | ((a5 & 240) >> 4) & 0xFF);
            break;

          case 12: 
            a8 = ((a6 & 15) | ((a6 & 15) << 4) & 0xFF);
            break;

          case 13: 
            a8 = ((a6 & 240) | ((a6 & 240) >> 4) & 0xFF);
            break;

          case 14: 
            a8 = ((a7 & 15) | ((a7 & 15) << 4) & 0xFF);
            break;

          case 15: 
            a8 = ((a7 & 240) | ((a7 & 240) >> 4) & 0xFF);
            break;

        }
        alphaIndex = ((alphaIndex + 1) | 0);
        switch (index) {
          case 0: 
            r2 = (r0.get() | 0);
            g2 = (g0.get() | 0);
            b2 = (b0.get() | 0);
            break;

          case 1: 
            r2 = (r.get() | 0);
            g2 = (g.get() | 0);
            b2 = (b.get() | 0);
            break;

          case 2: 
            r2 = (((((((2 * (r0.get() | 0)) | 0) + (r.get() | 0)) | 0) / 3) | 0) & 0xFF);
            g2 = (((((((2 * (g0.get() | 0)) | 0) + (g.get() | 0)) | 0) / 3) | 0) & 0xFF);
            b2 = (((((((2 * (b0.get() | 0)) | 0) + (b.get() | 0)) | 0) / 3) | 0) & 0xFF);
            break;

          case 3: 
            r2 = ((((((r0.get() | 0) + ((2 * (r.get() | 0)) | 0)) | 0) / 3) | 0) & 0xFF);
            g2 = ((((((g0.get() | 0) + ((2 * (g.get() | 0)) | 0)) | 0) / 3) | 0) & 0xFF);
            b2 = ((((((b0.get() | 0) + ((2 * (b.get() | 0)) | 0)) | 0) / 3) | 0) & 0xFF);
            break;

        }
        var px = ((((x | 0) << 2) + blockX) | 0);
        var py = ((((y | 0) << 2) + blockY) | 0);
        if (!((px >= (width | 0)) || (py >= (height | 0)))) {
          var offset = ((Math.imul(py, width) + px) | 0) << 2;
          imageData[offset] = r2;
          imageData[((offset + 1) | 0)] = g2;
          imageData[((offset + 2) | 0)] = b2;
          imageData[((offset + 3) | 0)] = a8;
        }
      }
    }
  };

  function DxtUtil_DecompressDxt5$04 (imageData, width, height) {
    var imageStream = $S00().Construct(imageData);
    try {
      var result = $S04().CallStatic($thisType, "DecompressDxt5", null, imageStream, width, height);
    } finally {
      if (imageStream !== null) {
        $IM00().Call(imageStream, null);
      }
    }
    return result;
  };

  function DxtUtil_DecompressDxt5$05 (imageStream, width, height) {
    var imageData = JSIL.Array.New($T01(), Math.imul(Math.imul(width, height), 4));
    var imageReader = $S02().Construct(imageStream);
    try {
      var blockCountX = (((((width | 0) + 3) | 0) / 4) | 0);
      var blockCountY = (((((height | 0) + 3) | 0) / 4) | 0);

      for (var y = 0; y < blockCountY; y = ((y + 1) | 0)) {

        for (var x = 0; x < blockCountX; x = ((x + 1) | 0)) {
          $thisType.DecompressDxt5Block(
            imageReader, 
            x, 
            y, 
            blockCountX, 
            width, 
            height, 
            imageData
          );
        }
      }
    } finally {
      if (imageReader !== null) {
        $IM00().Call(imageReader, null);
      }
    }
    return imageData;
  };

  function DxtUtil_DecompressDxt5Block (imageReader, x, y, blockCountX, width, height, imageData) {
    var r0 = new JSIL.BoxedVariable(0);
    var g0 = new JSIL.BoxedVariable(0);
    var b0 = new JSIL.BoxedVariable(0);
    var r = new JSIL.BoxedVariable(0);
    var g = new JSIL.BoxedVariable(0);
    var b = new JSIL.BoxedVariable(0);
    var alpha0 = (imageReader.ReadByte() | 0);
    var alpha = (imageReader.ReadByte() | 0);
    var alphaMask = $T09().FromNumber(imageReader.ReadByte());
    alphaMask = $T09().op_Addition(alphaMask, $T09().op_LeftShift($T09().FromNumber(imageReader.ReadByte()), 8));
    alphaMask = $T09().op_Addition(alphaMask, $T09().op_LeftShift($T09().FromNumber(imageReader.ReadByte()), 16));
    alphaMask = $T09().op_Addition(alphaMask, $T09().op_LeftShift($T09().FromNumber(imageReader.ReadByte()), 24));
    alphaMask = $T09().op_Addition(alphaMask, $T09().op_LeftShift($T09().FromNumber(imageReader.ReadByte()), 32));
    alphaMask = $T09().op_Addition(alphaMask, $T09().op_LeftShift($T09().FromNumber(imageReader.ReadByte()), 40));
    var c0 = (imageReader.ReadUInt16() | 0);
    var c = (imageReader.ReadUInt16() | 0);
    $thisType.ConvertRgb565ToRgb888(c0, /* ref */ r0, /* ref */ g0, /* ref */ b0);
    $thisType.ConvertRgb565ToRgb888(c, /* ref */ r, /* ref */ g, /* ref */ b);
    var lookupTable = (imageReader.ReadUInt32() >>> 0);

    for (var blockY = 0; blockY < 4; blockY = ((blockY + 1) | 0)) {

      for (var blockX = 0; blockX < 4; blockX = ((blockX + 1) | 0)) {
        var r2 = 0;
        var g2 = 0;
        var b2 = 0;
        var index = (lookupTable >>> Math.imul(2, ((Math.imul(4, blockY) + blockX) | 0))) & 3;
        var alphaIndex = (($T09().op_BitwiseAnd(
            $T09().op_RightShift(alphaMask, Math.imul(3, ((Math.imul(4, blockY) + blockX) | 0))), 
            $T09().Create(7, 0, 0)
          )).ToNumber(4294967295, false) >>> 0);
        if (alphaIndex === 0) {
          var a = alpha0;
        } else if (alphaIndex === 1) {
          a = alpha;
        } else if (alpha0 > alpha) {
          a = ((((((Math.imul(((8 - alphaIndex) >>> 0), alpha0) >>> 0) + (Math.imul(((alphaIndex - 1) >>> 0), alpha) >>> 0)) >>> 0) / 7) >>> 0) & 0xFF);
        } else if (alphaIndex === 6) {
          a = 0;
        } else if (alphaIndex === 7) {
          a = 255;
        } else {
          a = ((((((Math.imul(((6 - alphaIndex) >>> 0), alpha0) >>> 0) + (Math.imul(((alphaIndex - 1) >>> 0), alpha) >>> 0)) >>> 0) / 5) >>> 0) & 0xFF);
        }
        switch (index) {
          case 0: 
            r2 = (r0.get() | 0);
            g2 = (g0.get() | 0);
            b2 = (b0.get() | 0);
            break;

          case 1: 
            r2 = (r.get() | 0);
            g2 = (g.get() | 0);
            b2 = (b.get() | 0);
            break;

          case 2: 
            r2 = (((((((2 * (r0.get() | 0)) | 0) + (r.get() | 0)) | 0) / 3) | 0) & 0xFF);
            g2 = (((((((2 * (g0.get() | 0)) | 0) + (g.get() | 0)) | 0) / 3) | 0) & 0xFF);
            b2 = (((((((2 * (b0.get() | 0)) | 0) + (b.get() | 0)) | 0) / 3) | 0) & 0xFF);
            break;

          case 3: 
            r2 = ((((((r0.get() | 0) + ((2 * (r.get() | 0)) | 0)) | 0) / 3) | 0) & 0xFF);
            g2 = ((((((g0.get() | 0) + ((2 * (g.get() | 0)) | 0)) | 0) / 3) | 0) & 0xFF);
            b2 = ((((((b0.get() | 0) + ((2 * (b.get() | 0)) | 0)) | 0) / 3) | 0) & 0xFF);
            break;

        }
        var px = ((((x | 0) << 2) + blockX) | 0);
        var py = ((((y | 0) << 2) + blockY) | 0);
        if (!((px >= (width | 0)) || (py >= (height | 0)))) {
          var offset = ((Math.imul(py, width) + px) | 0) << 2;
          imageData[offset] = r2;
          imageData[((offset + 1) | 0)] = g2;
          imageData[((offset + 2) | 0)] = b2;
          imageData[((offset + 3) | 0)] = a;
        }
      }
    }
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Graphics.DxtUtil", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "ConvertRgb565ToRgb888", 
      new JSIL.MethodSignature(null, [
          $.UInt16, $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Byte])
        ]), 
      DxtUtil_ConvertRgb565ToRgb888
    );

    $.Method({Static:true , Public:false}, "DecompressDxt1", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]), 
      DxtUtil_DecompressDxt1$00
    );

    $.Method({Static:true , Public:false}, "DecompressDxt1", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm01.TypeRef("System.IO.Stream"), $.Int32, 
          $.Int32
        ]), 
      DxtUtil_DecompressDxt1$01
    );

    $.Method({Static:true , Public:false}, "DecompressDxt1Block", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.BinaryReader"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      DxtUtil_DecompressDxt1Block
    );

    $.Method({Static:true , Public:false}, "DecompressDxt3", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]), 
      DxtUtil_DecompressDxt3$02
    );

    $.Method({Static:true , Public:false}, "DecompressDxt3", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm01.TypeRef("System.IO.Stream"), $.Int32, 
          $.Int32
        ]), 
      DxtUtil_DecompressDxt3$03
    );

    $.Method({Static:true , Public:false}, "DecompressDxt3Block", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.BinaryReader"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      DxtUtil_DecompressDxt3Block
    );

    $.Method({Static:true , Public:false}, "DecompressDxt5", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]), 
      DxtUtil_DecompressDxt5$04
    );

    $.Method({Static:true , Public:false}, "DecompressDxt5", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm01.TypeRef("System.IO.Stream"), $.Int32, 
          $.Int32
        ]), 
      DxtUtil_DecompressDxt5$05
    );

    $.Method({Static:true , Public:false}, "DecompressDxt5Block", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.BinaryReader"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      DxtUtil_DecompressDxt5Block
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture */ 

(function VertexPositionColorTexture$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElement)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementUsage)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElement")])]))) ();
  };

  function VertexPositionColorTexture__ctor (position, color, textureCoordinate) {
    this.Position = position.MemberwiseClone();
    this.Color = color.MemberwiseClone();
    this.TextureCoordinate = textureCoordinate.MemberwiseClone();
  };

  function VertexPositionColorTexture_Object_Equals (obj) {
    return ((obj !== null) && 
      !$T08().op_Inequality(
        JSIL.GetType(obj), 
        JSIL.GetType(this)
      ) && $thisType.op_Equality(this, $thisType.$Cast(obj).MemberwiseClone()));
  };

  function VertexPositionColorTexture_GetHashCode () {
    return 0;
  };

  function VertexPositionColorTexture_Microsoft_Xna_Framework_Graphics_IVertexType_get_VertexDeclaration () {
    return $thisType.VertexDeclaration;
  };

  function VertexPositionColorTexture_op_Equality (left, right) {
    return (!(!$T04().op_Equality(left.Position.MemberwiseClone(), right.Position.MemberwiseClone()) || 
        !$T05().op_Equality(left.Color, right.Color)) && $T06().op_Equality(left.TextureCoordinate.MemberwiseClone(), right.TextureCoordinate.MemberwiseClone()));
  };

  function VertexPositionColorTexture_op_Inequality (left, right) {
    return !$thisType.op_Equality(left.MemberwiseClone(), right.MemberwiseClone());
  };

  function VertexPositionColorTexture_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T09(), ["{{Position:", (this.Position).toString(), " Color:", (this.Color).toString(), " TextureCoordinate:", (this.TextureCoordinate).toString(), "}}"]));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      VertexPositionColorTexture__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      VertexPositionColorTexture_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      VertexPositionColorTexture_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IVertexType.get_VertexDeclaration", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")), 
      VertexPositionColorTexture_Microsoft_Xna_Framework_Graphics_IVertexType_get_VertexDeclaration
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IVertexType"), "get_VertexDeclaration");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      VertexPositionColorTexture_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      VertexPositionColorTexture_op_Inequality
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      VertexPositionColorTexture_toString
    );

    $.Field({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:true }, "Color", $asm00.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "TextureCoordinate", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "VertexDeclaration", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")); 
    function VertexPositionColorTexture__cctor () {
      $thisType.VertexDeclaration = $S00().Construct(JSIL.Array.New($T01(), [new ($T01())(0, $T02().Vector3, $T03().Position, 0), new ($T01())(12, $T02().Color, $T03().Color, 0), new ($T01())(16, $T02().Vector2, $T03().TextureCoordinate, 0)]));
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      VertexPositionColorTexture__cctor
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IVertexType")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.RenderTargetBinding */ 

(function RenderTargetBinding$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RenderTarget2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CubeMapFace)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RenderTargetCube)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetBinding"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTarget2D")]))) ();
  };

  function RenderTargetBinding__ctor$00 (renderTarget) {
    if (renderTarget === null) {
      throw $S00().Construct("renderTarget");
    }
    this.renderTarget = renderTarget;
    this.cubeMapFace = $T02().PositiveX;
  };

  function RenderTargetBinding__ctor$01 (renderTarget, cubeMapFace) {
    if (renderTarget === null) {
      throw $S00().Construct("renderTarget");
    }
    if (!((cubeMapFace >= $T02().PositiveX) && (cubeMapFace <= $T02().NegativeZ))) {
      throw $S01().Construct("cubeMapFace");
    }
    this.renderTarget = renderTarget;
    this.cubeMapFace = cubeMapFace;
  };

  function RenderTargetBinding_get_CubeMapFace () {
    return this.cubeMapFace;
  };

  function RenderTargetBinding_get_RenderTarget () {
    return this.renderTarget;
  };

  function RenderTargetBinding_op_Implicit (renderTarget) {
    return $S02().Construct(renderTarget);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.RenderTargetBinding", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTarget2D")), 
      RenderTargetBinding__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetCube"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace")]), 
      RenderTargetBinding__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_CubeMapFace", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace")), 
      RenderTargetBinding_get_CubeMapFace
    );

    $.Method({Static:false, Public:true }, "get_RenderTarget", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")), 
      RenderTargetBinding_get_RenderTarget
    );

    $.Method({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTarget2D")]), 
      RenderTargetBinding_op_Implicit
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "renderTarget", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "cubeMapFace", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace")); 
    $.Property({Static:false, Public:true }, "RenderTarget", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture"));

    $.Property({Static:false, Public:true }, "CubeMapFace", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.BooleanReader */ 

(function BooleanReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Boolean))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function BooleanReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function BooleanReader_Read$00 (input, existingInstance) {
    return input.ReadBoolean();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Boolean")]), 
      Name: "Microsoft.Xna.Framework.Content.BooleanReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      BooleanReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Boolean]), 
      BooleanReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ArrayReader`1 */ 

(function ArrayReader$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReaderManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"]))) ();
  };

  function ArrayReader$b1__ctor () {
    $asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Array.Of($thisType.T.get(this))).prototype._ctor.call(this);
  };

  function ArrayReader$b1_Initialize (manager) {
    this.elementReader = manager.GetTypeReader($thisType.T.get(this));
  };

  function ArrayReader$b1_Read$00 (input, existingInstance) {
    var count = (input.ReadUInt32() >>> 0);
    var array = existingInstance;
    if (array === null) {
      array = JSIL.Array.New($thisType.T.get(this), count);
    }
    if ($thisType.T.get(this).get_IsValueType()) {

      for (var i = 0; i < count; i = ((i + 1) >>> 0)) {
        array[i] = JSIL.CloneParameter($thisType.T.get(this), $S00().CallVirtual("ReadObject$b1", [$thisType.T.get(this)], input, this.elementReader));
      }
    } else {

      for (i = 0; i < count; i = ((i + 1) >>> 0)) {
        var readerType = (input.Read7BitEncodedInt() | 0);
        if (readerType > 0) {
          array[i] = JSIL.CloneParameter($thisType.T.get(this), $S00().CallVirtual("ReadObject$b1", [$thisType.T.get(this)], input, input.get_TypeReaders()[((readerType - 1) | 0)]));
        } else {
          array[i] = (
            $thisType.T.get(this).IsValueType
               ? JSIL.CreateInstanceOfType($thisType.T.get(this))
               : null)
          ;
        }
      }
    }
    return array;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ArrayReader`1")])]), 
      Name: "Microsoft.Xna.Framework.Content.ArrayReader`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ArrayReader$b1__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")), 
      ArrayReader$b1_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])]), 
      ArrayReader$b1_Read$00
    );

    $.Field({Static:false, Public:false}, "elementReader", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.NullableReader`1 */ 

(function NullableReader$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReaderManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"]))) ();
  };

  function NullableReader$b1__ctor () {
    $asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Nullable$b1.Of($thisType.T.get(this))).prototype._ctor.call(this);
  };

  function NullableReader$b1_Initialize (manager) {
    this.elementReader = manager.GetTypeReader($thisType.T.get(this));
  };

  function NullableReader$b1_Read$00 (input, existingInstance) {
    if (input.ReadBoolean()) {
      var result = JSIL.CloneParameter($thisType.T.get(this), $S00().CallVirtual("ReadObject$b1", [$thisType.T.get(this)], input, this.elementReader));
    } else {
      result = null;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Nullable`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.NullableReader`1")])]), 
      Name: "Microsoft.Xna.Framework.Content.NullableReader`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      NullableReader$b1__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")), 
      NullableReader$b1_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.GenericParameter("T")]), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("System.Nullable`1", [$.GenericParameter("T")])]), 
      NullableReader$b1_Read$00
    );

    $.Field({Static:false, Public:false}, "elementReader", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.UInt16Reader */ 

(function UInt16Reader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.UInt16))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function UInt16Reader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function UInt16Reader_Read$00 (input, existingInstance) {
    return input.ReadUInt16();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.UInt16")]), 
      Name: "Microsoft.Xna.Framework.Content.UInt16Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      UInt16Reader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.UInt16, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.UInt16]), 
      UInt16Reader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.UInt32Reader */ 

(function UInt32Reader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.UInt32))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function UInt32Reader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function UInt32Reader_Read$00 (input, existingInstance) {
    return input.ReadUInt32();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.UInt32")]), 
      Name: "Microsoft.Xna.Framework.Content.UInt32Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      UInt32Reader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.UInt32, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.UInt32]), 
      UInt32Reader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.UInt64Reader */ 

(function UInt64Reader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.UInt64))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function UInt64Reader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function UInt64Reader_Read$00 (input, existingInstance) {
    return input.ReadUInt64();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.UInt64")]), 
      Name: "Microsoft.Xna.Framework.Content.UInt64Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      UInt64Reader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.UInt64, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.UInt64]), 
      UInt64Reader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.BoundingFrustumReader */ 

(function BoundingFrustumReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.BoundingFrustum))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingFrustum)) ();
  };

  function BoundingFrustumReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function BoundingFrustumReader_Read$00 (input, existingInstance) {
    return new ($T02())(input.ReadMatrix().MemberwiseClone());
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")]), 
      Name: "Microsoft.Xna.Framework.Content.BoundingFrustumReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      BoundingFrustumReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.BoundingFrustum"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")]), 
      BoundingFrustumReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.BoundingSphereReader */ 

(function BoundingSphereReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.BoundingSphere))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingSphere)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function BoundingSphereReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function BoundingSphereReader_Read$00 (input, existingInstance) {
    var center = input.ReadVector3().MemberwiseClone();
    var radius = +input.ReadSingle();
    return new ($T02())(center.MemberwiseClone(), radius);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), 
      Name: "Microsoft.Xna.Framework.Content.BoundingSphereReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      BoundingSphereReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), 
      BoundingSphereReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ByteReader */ 

(function ByteReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Byte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function ByteReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ByteReader_Read$00 (input, existingInstance) {
    return input.ReadByte();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Byte")]), 
      Name: "Microsoft.Xna.Framework.Content.ByteReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ByteReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Byte, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Byte]), 
      ByteReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.DateTimeReader */ 

(function DateTimeReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.DateTime))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.DateTimeKind)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.Int64"), $asm01.TypeRef("System.DateTimeKind")]))) ();
  };

  function DateTimeReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DateTimeReader_Read$00 (input, existingInstance) {
    var value = input.ReadUInt64();
    var ticks = ($T03().op_BitwiseAnd(value, $T05().op_OnesComplement(($T03().Create(0, 0, 49152)).ToInt64()))).ToInt64();
    var kind = $T06().$Cast($T03().op_BitwiseAnd(
        $T03().op_RightShift(value, 62), 
        $T03().Create(3, 0, 0)
      ));
    return $S00().Construct(ticks, kind);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.DateTime")]), 
      Name: "Microsoft.Xna.Framework.Content.DateTimeReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      DateTimeReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("System.DateTime")]), 
      DateTimeReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.DecimalReader */ 

(function DecimalReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.Decimal))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Decimal)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function DecimalReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DecimalReader_Read$00 (input, existingInstance) {
    return input.ReadDecimal();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.Decimal")]), 
      Name: "Microsoft.Xna.Framework.Content.DecimalReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      DecimalReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("System.Decimal")]), 
      DecimalReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.RayReader */ 

(function RayReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Ray))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Ray)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };

  function RayReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function RayReader_Read$00 (input, existingInstance) {
    var position = input.ReadVector3().MemberwiseClone();
    var direction = input.ReadVector3().MemberwiseClone();
    return new ($T02())(position.MemberwiseClone(), direction.MemberwiseClone());
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Ray")]), 
      Name: "Microsoft.Xna.Framework.Content.RayReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      RayReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Ray"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Ray")]), 
      RayReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.SByteReader */ 

(function SByteReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm01.System.SByte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.SByte)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function SByteReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SByteReader_Read$00 (input, existingInstance) {
    return input.ReadSByte();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("System.SByte")]), 
      Name: "Microsoft.Xna.Framework.Content.SByteReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      SByteReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.SByte, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.SByte]), 
      SByteReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.EffectParameterClass */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.EffectParameterClass", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Scalar: 0, 
    Vector: 1, 
    Matrix: 2, 
    Object: 3, 
    Struct: 4, 
  }
);

/* enum Microsoft.Xna.Framework.Graphics.EffectParameterType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.EffectParameterType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Void: 0, 
    Bool: 1, 
    Int32: 2, 
    Single: 3, 
    String: 4, 
    Texture: 5, 
    Texture1D: 6, 
    Texture2D: 7, 
    Texture3D: 8, 
    TextureCube: 9, 
  }
);

/* class Microsoft.Xna.Framework.Audio.AudioEngine */ 

(function AudioEngine$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.TitleContainer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.IO.SeekOrigin)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Char))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.AudioCategory))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTCalculator)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioCategory)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.Variable))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.Variable)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int64, $asm00.Microsoft.Xna.Framework.Audio.RPC))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.RPCPoint))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.RPCPoint)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.RPCPointType)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.RPC)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.DSPParameter))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPParameter)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int64, $asm00.Microsoft.Xna.Framework.Audio.DSPPreset))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.DSPParameter))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPPreset)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm00.Microsoft.Xna.Framework.Audio.WaveBank))) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPFilter)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioStopOptions)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm01.System.Int64, $asm00.Microsoft.Xna.Framework.Audio.DSPPreset))) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int64, $asm00.Microsoft.Xna.Framework.Audio.DSPPreset))) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.WaveBank)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.Cue)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_ValueCollection_Enumerator.Of($asm01.System.Int64, $asm00.Microsoft.Xna.Framework.Audio.RPC))) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_ValueCollection.Of($asm01.System.Int64, $asm00.Microsoft.Xna.Framework.Audio.RPC))) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.RPCParameter)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_ValueCollection_Enumerator.Of($asm01.System.Int64, $asm00.Microsoft.Xna.Framework.Audio.DSPPreset))) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_ValueCollection.Of($asm01.System.Int64, $asm00.Microsoft.Xna.Framework.Audio.DSPPreset))) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPEffect)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.BinaryReader"), [$asm01.TypeRef("System.IO.Stream")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Char")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.String"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")])]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory")]), null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.Variable")]), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Int64"), $asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPC")]), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPParameter")]), null))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Int64"), $asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPPreset")]), null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.String"), $asm00.TypeRef("Microsoft.Xna.Framework.Audio.WaveBank")]), null))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function AudioEngine__ctor$00 (settingsFile) {
    var $temp00;
    if ($T00().IsNullOrEmpty(settingsFile)) {
      throw $S00().Construct("settingsFile");
    }
    var stream = $T03().OpenStream(settingsFile);
    try {
      var reader = $S01().Construct(stream);
      try {
        if ((reader.ReadUInt32() >>> 0) !== 1179862872) {
          throw $S02().Construct("XGSF format not recognized!");
        }
        if ((reader.ReadUInt16() | 0) !== 46) {
          throw $S02().Construct("XGSF Content version!");
        }
        if ((reader.ReadUInt16() | 0) !== 42) {
          throw $S02().Construct("XGSF Tool version!");
        }
        reader.ReadUInt16();
        reader.ReadUInt64();
        reader.ReadByte();
        var numCategories = (reader.ReadUInt16() | 0);
        var numVariables = (reader.ReadUInt16() | 0);
        reader.ReadUInt16();
        reader.ReadUInt16();
        var numRPCs = (reader.ReadUInt16() | 0);
        var numDSPPresets = (reader.ReadUInt16() | 0);
        var numDSPParameters = (reader.ReadUInt16() | 0);
        var categoryOffset = (reader.ReadUInt32() >>> 0);
        var variableOffset = (reader.ReadUInt32() >>> 0);
        reader.ReadUInt32();
        reader.ReadUInt32();
        reader.ReadUInt32();
        reader.ReadUInt32();
        var categoryNameOffset = (reader.ReadUInt32() >>> 0);
        var variableNameOffset = (reader.ReadUInt32() >>> 0);
        var rpcOffset = (reader.ReadUInt32() >>> 0);
        var dspPresetOffset = (reader.ReadUInt32() >>> 0);
        var dspParameterOffset = (reader.ReadUInt32() >>> 0);
        (reader.get_BaseStream()).Seek(($T09().FromNumber(categoryNameOffset)).ToInt64(), $T0A().Begin);
        var categoryNames = JSIL.Array.New($T00(), numCategories);

        for (var i = 0; i < numCategories; i = ((i + 1) | 0)) {
          var builtString = $S03().Construct();

          while ((reader.PeekChar() | 0) !== 0) {
            builtString.Add(reader.ReadChar());
          }
          reader.ReadChar();
          categoryNames[i] = $S04().Construct($T0D().prototype.ToArray.call(builtString));
        }
        (reader.get_BaseStream()).Seek(($T09().FromNumber(categoryOffset)).ToInt64(), $T0A().Begin);
        this.INTERNAL_categories = $S05().Construct();

        for (i = 0; i < numCategories; i = ((i + 1) | 0)) {
          var maxInstances = (reader.ReadByte() | 0);
          var fadeInMS = (reader.ReadUInt16() | 0);
          var fadeOutMS = (reader.ReadUInt16() | 0);
          var maxBehavior = (reader.ReadByte() | 0) & 15;
          reader.ReadUInt16();
          var volume = +$T11().CalculateVolume(reader.ReadByte());
          reader.ReadByte();
          (this.INTERNAL_categories).Add(new ($T12())(categoryNames[i], volume, maxInstances, maxBehavior, fadeInMS, fadeOutMS));
        }
        (reader.get_BaseStream()).Seek(($T09().FromNumber(variableNameOffset)).ToInt64(), $T0A().Begin);
        var variableNames = JSIL.Array.New($T00(), numVariables);

        for (i = 0; i < numVariables; i = ((i + 1) | 0)) {
          builtString = $S03().Construct();

          while ((reader.PeekChar() | 0) !== 0) {
            builtString.Add(reader.ReadChar());
          }
          reader.ReadChar();
          variableNames[i] = $S04().Construct($T0D().prototype.ToArray.call(builtString));
        }
        (reader.get_BaseStream()).Seek(($T09().FromNumber(variableOffset)).ToInt64(), $T0A().Begin);
        this.INTERNAL_variables = $S06().Construct();

        for (i = 0; i < numVariables; i = ((i + 1) | 0)) {
          var varFlags = (reader.ReadByte() | 0);
          var initialValue = +reader.ReadSingle();
          var minValue = +reader.ReadSingle();
          var maxValue = +reader.ReadSingle();
          (this.INTERNAL_variables).Add(new ($T14())(variableNames[i], ((varFlags & 1) !== 0), ((varFlags & 2) !== 0), ((varFlags & 4) === 0), ((varFlags & 8) !== 0), initialValue, minValue, maxValue));
        }
        var hasVolume = false;

        for (var a$0 = this.INTERNAL_variables._items, i$0 = 0, l$0 = (this.INTERNAL_variables._size | 0); i$0 < l$0; ($temp00 = i$0, 
            i$0 = ((i$0 + 1) | 0), 
            $temp00)) {
          var curVar = a$0[i$0];
          if (curVar.Variable$Name$value == "Volume") {
            hasVolume = true;
          }
        }
        if (!hasVolume) {
          (this.INTERNAL_variables).Add(new ($T14())("Volume", true, false, false, false, 1, 0, 1));
        }
        (reader.get_BaseStream()).Seek(($T09().FromNumber(rpcOffset)).ToInt64(), $T0A().Begin);
        this.INTERNAL_RPCs = $S07().Construct();

        for (i = 0; i < numRPCs; i = ((i + 1) | 0)) {
          var rpcCode = (reader.get_BaseStream()).get_Position();
          var rpcVariable = (reader.ReadUInt16() | 0);
          var numPoints = (reader.ReadByte() | 0);
          var rpcParameter = (reader.ReadUInt16() | 0);
          var rpcPoints = JSIL.Array.New($T18(), numPoints);

          for (var j = 0; j < numPoints; j = (((j + 1) | 0) & 0xFF)) {
            var x = +reader.ReadSingle();
            var y = +reader.ReadSingle();
            var type = (reader.ReadByte() | 0);
            rpcPoints[j] = new ($T18())(x, y, $T19().$Cast(type));
          }
          (this.INTERNAL_RPCs).Add(rpcCode, new ($T1A())((this.INTERNAL_variables).get_Item(rpcVariable).Variable$Name$value, rpcParameter, rpcPoints));
        }
        (reader.get_BaseStream()).Seek(($T09().FromNumber(dspParameterOffset)).ToInt64(), $T0A().Begin);
        this.INTERNAL_dspParameters = $S08().Construct();

        for (i = 0; i < numDSPParameters; i = ((i + 1) | 0)) {
          type = (reader.ReadByte() | 0);
          var value = +reader.ReadSingle();
          var minVal = +reader.ReadSingle();
          var maxVal = +reader.ReadSingle();
          reader.ReadUInt16();
          (this.INTERNAL_dspParameters).Add(new ($T1C())(type, value, minVal, maxVal));
        }
        (reader.get_BaseStream()).Seek(($T09().FromNumber(dspPresetOffset)).ToInt64(), $T0A().Begin);
        this.INTERNAL_dspPresets = $S09().Construct();
        var total = 0;

        for (i = 0; i < numDSPPresets; i = ((i + 1) | 0)) {
          var dspCode = (reader.get_BaseStream()).get_Position();
          var global = (reader.ReadByte() | 0) === 1;
          var numParams = (reader.ReadUInt32() >>> 0);
          var parameters = JSIL.Array.New($T1C(), numParams);

          for (var k = 0; k < numParams; k = ((k + 1) >>> 0)) {
            parameters[k] = (this.INTERNAL_dspParameters).get_Item(total);
            total = ((total + 1) | 0);
          }
          (this.INTERNAL_dspPresets).Add(dspCode, new ($T1F())(global, parameters));
        }
      } finally {
        if (reader !== null) {
          $IM00().Call(reader, null);
        }
      }
    } finally {
      if (stream !== null) {
        $IM00().Call(stream, null);
      }
    }
    this.INTERNAL_waveBanks = $S0A().Construct();
    this.AudioEngine$Filter$value = new ($T22())();
    this.AudioEngine$IsDisposed$value = false;
  };

  function AudioEngine__ctor$01 (settingsFile, lookAheadTime, rendererId) {
    throw $S0B().Construct();
  };

  function AudioEngine_add_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T26().Combine(eventHandler2, value);
      eventHandler = $T27().CompareExchange$b1($T25())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function AudioEngine_Dispose () {
    var $temp00;
    if (!this.AudioEngine$IsDisposed$value) {
      if (this.Disposing !== null) {
        this.Disposing(this, null);
      }

      for (var a$0 = this.INTERNAL_categories._items, i$0 = 0, l$0 = (this.INTERNAL_categories._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var curCategory = a$0[i$0].MemberwiseClone();
        curCategory.Stop($T28().Immediate);
      }
      (this.INTERNAL_categories).Clear();
      var enumerator2 = $T1D().prototype.GetEnumerator.call(this.INTERNAL_dspPresets);

      while ($T29().prototype.MoveNext.call(enumerator2)) {
        var curDSP = $T29().prototype.get_Current.call(enumerator2).MemberwiseClone();
        (curDSP.get_Value()).Dispose();
      }
      (this.INTERNAL_dspPresets).Clear();
      (this.INTERNAL_dspParameters).Clear();
      (this.INTERNAL_variables).Clear();
      (this.INTERNAL_RPCs).Clear();
      (this.AudioEngine$Filter$value).Dispose();
      this.AudioEngine$IsDisposed$value = true;
    }
  };

  function AudioEngine_Finalize () {
    try {
      this.Dispose();
    } finally {
      $T2B().prototype.Finalize.call(this);
    }
  };

  function AudioEngine_get_Filter () {
    return this.AudioEngine$Filter$value;
  };

  function AudioEngine_get_IsDisposed () {
    return this.AudioEngine$IsDisposed$value;
  };

  function AudioEngine_GetCategory (name) {
    if ($T00().IsNullOrEmpty(name)) {
      throw $S00().Construct("name");
    }

    for (var i = 0; i < ((this.INTERNAL_categories).get_Count() | 0); i = ((i + 1) | 0)) {
      if (((this.INTERNAL_categories).get_Item(i)).get_Name() == name) {
        return (this.INTERNAL_categories).get_Item(i);
      }
    }
    throw $S0C().Construct("Category not found!");
  };

  function AudioEngine_GetGlobalVariable (name) {
    if ($T00().IsNullOrEmpty(name)) {
      throw $S00().Construct("name");
    }

    for (var i = 0; i < ((this.INTERNAL_variables).get_Count() | 0); ) {
      if (name == (this.INTERNAL_variables).get_Item(i).Variable$Name$value) {
        if (!(this.INTERNAL_variables).get_Item(i).Variable$IsGlobal$value) {
          throw $S0C().Construct("Variable not global!");
        }
        return ((this.INTERNAL_variables).get_Item(i)).GetValue();
      } else {
        i = ((i + 1) | 0);
      }
    }
    throw $S0C().Construct("Variable not found!");
  };

  function AudioEngine_INTERNAL_addWaveBank (name, waveBank) {
    (this.INTERNAL_waveBanks).Add(name, waveBank);
  };

  function AudioEngine_INTERNAL_getDSP (code) {
    return (this.INTERNAL_dspPresets).get_Item(($T09().FromNumber(code)).ToInt64()).DSPPreset$Effect$value;
  };

  function AudioEngine_INTERNAL_getRPC (code) {
    return (this.INTERNAL_RPCs).get_Item(($T09().FromNumber(code)).ToInt64());
  };

  function AudioEngine_INTERNAL_getVariableName (index) {
    return (this.INTERNAL_variables).get_Item(index).Variable$Name$value;
  };

  function AudioEngine_INTERNAL_getWaveBankTrack (name, track) {
    return ((this.INTERNAL_waveBanks).get_Item(name)).INTERNAL_getTrack(track);
  };

  function AudioEngine_INTERNAL_initCue (newCue, category) {
    var $temp00;
    var cueVariables = $S06().Construct();

    for (var a$0 = this.INTERNAL_variables._items, i$0 = 0, l$0 = (this.INTERNAL_variables._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var curVar = a$0[i$0];
      if (!curVar.Variable$IsGlobal$value) {
        cueVariables.Add(curVar.Clone());
      }
    }
    newCue.INTERNAL_genVariables(cueVariables);
    return (this.INTERNAL_categories).get_Item(category);
  };

  function AudioEngine_INTERNAL_isGlobalVariable (name) {
    var $temp00;

    for (var a$0 = this.INTERNAL_variables._items, i$0 = 0, l$0 = (this.INTERNAL_variables._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var curVar = a$0[i$0];
      if (name == curVar.Variable$Name$value) {
        var result = curVar.Variable$IsGlobal$value;
        return result;
      }
    }
    result = false;
    return result;
  };

  function AudioEngine_INTERNAL_removeWaveBank (name) {
    (this.INTERNAL_waveBanks).Remove(name);
  };

  function AudioEngine_remove_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T26().Remove(eventHandler2, value);
      eventHandler = $T27().CompareExchange$b1($T25())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function AudioEngine_set_Filter (value) {
    this.AudioEngine$Filter$value = value;
  };

  function AudioEngine_set_IsDisposed (value) {
    this.AudioEngine$IsDisposed$value = value;
  };

  function AudioEngine_SetGlobalVariable (name, value) {
    if ($T00().IsNullOrEmpty(name)) {
      throw $S00().Construct("name");
    }

    for (var i = 0; i < ((this.INTERNAL_variables).get_Count() | 0); ) {
      if (name == (this.INTERNAL_variables).get_Item(i).Variable$Name$value) {
        if (!(this.INTERNAL_variables).get_Item(i).Variable$IsGlobal$value) {
          throw $S0C().Construct("Variable not global!");
        }
        ((this.INTERNAL_variables).get_Item(i)).SetValue(value);
        return;
      } else {
        i = ((i + 1) | 0);
      }
    }
    throw $S0C().Construct("Variable not found!");
  };

  function AudioEngine_Update () {
    var $temp00, $temp01;
    var enumerator = ((this.INTERNAL_RPCs).get_Values()).GetEnumerator();

    while ($T2F().prototype.MoveNext.call(enumerator)) {
      var curRPC = $T2F().prototype.get_Current.call(enumerator);
      if (curRPC.RPC$Parameter$value >= $T31().NUM_PARAMETERS) {

        for (var a$0 = this.INTERNAL_variables._items, i$0 = 0, l$0 = (this.INTERNAL_variables._size | 0); i$0 < l$0; ($temp00 = i$0, 
            i$0 = ((i$0 + 1) | 0), 
            $temp00)) {
          var curVar = a$0[i$0];
          if (!(!(curVar.Variable$Name$value == curRPC.RPC$Variable$value) || !curVar.Variable$IsGlobal$value)) {
            var enumerator3 = ((this.INTERNAL_dspPresets).get_Values()).GetEnumerator();

            while ($T32().prototype.MoveNext.call(enumerator3)) {
              var curDSP = $T32().prototype.get_Current.call(enumerator3);
              curDSP.SetParameter(((curRPC.RPC$Parameter$value - $T31().NUM_PARAMETERS) & 0xFFFF), curRPC.CalculateRPC(this.GetGlobalVariable(curVar.Variable$Name$value)));
            }
          }
        }
      }
    }
    enumerator3 = ((this.INTERNAL_dspPresets).get_Values()).GetEnumerator();

    while ($T32().prototype.MoveNext.call(enumerator3)) {
      curDSP = $T32().prototype.get_Current.call(enumerator3);
      (curDSP.DSPPreset$Effect$value).CommitChanges();
    }

    for (var a$1 = this.INTERNAL_categories._items, i$1 = 0, l$1 = (this.INTERNAL_categories._size | 0); i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      var curCategory = a$1[i$1].MemberwiseClone();
      curCategory.INTERNAL_update();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioEngine", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      AudioEngine__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.TimeSpan"), 
          $.String
        ]), 
      AudioEngine__ctor$01
    );

    $.Method({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      AudioEngine_add_Disposing
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      AudioEngine_Dispose
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      AudioEngine_Finalize
    );

    $.Method({Static:false, Public:false}, "get_Filter", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPFilter")), 
      AudioEngine_get_Filter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      AudioEngine_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetCategory", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory"), [$.String]), 
      AudioEngine_GetCategory
    );

    $.Method({Static:false, Public:true }, "GetGlobalVariable", 
      new JSIL.MethodSignature($.Single, [$.String]), 
      AudioEngine_GetGlobalVariable
    );

    $.Method({Static:false, Public:false}, "INTERNAL_addWaveBank", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Xna.Framework.Audio.WaveBank")]), 
      AudioEngine_INTERNAL_addWaveBank
    );

    $.Method({Static:false, Public:false}, "INTERNAL_getDSP", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPEffect"), [$.UInt32]), 
      AudioEngine_INTERNAL_getDSP
    );

    $.Method({Static:false, Public:false}, "INTERNAL_getRPC", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPC"), [$.UInt32]), 
      AudioEngine_INTERNAL_getRPC
    );

    $.Method({Static:false, Public:false}, "INTERNAL_getVariableName", 
      new JSIL.MethodSignature($.String, [$.UInt16]), 
      AudioEngine_INTERNAL_getVariableName
    );

    $.Method({Static:false, Public:false}, "INTERNAL_getWaveBankTrack", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), [$.String, $.UInt16]), 
      AudioEngine_INTERNAL_getWaveBankTrack
    );

    $.Method({Static:false, Public:false}, "INTERNAL_initCue", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory"), [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.Cue"), $.UInt16]), 
      AudioEngine_INTERNAL_initCue
    );

    $.Method({Static:false, Public:false}, "INTERNAL_isGlobalVariable", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      AudioEngine_INTERNAL_isGlobalVariable
    );

    $.Method({Static:false, Public:false}, "INTERNAL_removeWaveBank", 
      JSIL.MethodSignature.Action($.String), 
      AudioEngine_INTERNAL_removeWaveBank
    );

    $.Method({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      AudioEngine_remove_Disposing
    );

    $.Method({Static:false, Public:false}, "set_Filter", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPFilter")), 
      AudioEngine_set_Filter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      AudioEngine_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetGlobalVariable", 
      new JSIL.MethodSignature(null, [$.String, $.Single]), 
      AudioEngine_SetGlobalVariable
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Void, 
      AudioEngine_Update
    );

    $.Constant({Static:true , Public:true }, "ContentVersion", 46); 
    $.Field({Static:false, Public:false}, "INTERNAL_waveBanks", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("Microsoft.Xna.Framework.Audio.WaveBank")])); 
    $.Field({Static:false, Public:false}, "INTERNAL_categories", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory")])); 
    $.Field({Static:false, Public:false}, "INTERNAL_variables", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.Variable")])); 
    $.Field({Static:false, Public:false}, "INTERNAL_RPCs", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int64, $asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPC")])); 
    $.Field({Static:false, Public:false}, "INTERNAL_dspParameters", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPParameter")])); 
    $.Field({Static:false, Public:false}, "INTERNAL_dspPresets", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int64, $asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPPreset")])); 
    $.Field({Static:false, Public:false}, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "AudioEngine$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "AudioEngine$Filter$value", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPFilter"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Filter", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPFilter"));

    $.Event({Static:false, Public:true }, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.AudioStopOptions */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Audio.AudioStopOptions", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    AsAuthored: 0, 
    Immediate: 1, 
  }
);

/* class Microsoft.Xna.Framework.Audio.Cue */ 

(function Cue$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Random)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioEngine)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.String))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.CueData)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.XACTSound))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTSound)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Single))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioListener)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioEmitter)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioCategory)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundState)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.Variable)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.Variable))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize(System.Array.Of($asm01.System.UInt32))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPEffect)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm03.System.Diagnostics.Stopwatch)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.RPC)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.RPCParameter)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTCalculator)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.MaxInstanceBehavior)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioStopOptions)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Random"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Single")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener"), $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")]))) ();
  };

  function Cue__ctor (audioEngine, waveBankNames, name, data, managed) {
    this.INTERNAL_baseEngine = audioEngine;
    this.Cue$Name$value = name;
    this.INTERNAL_data = data;
    var sounds = data.CueData$Sounds$value;

    for (var i = 0; i < (sounds.length | 0); i = ((i + 1) | 0)) {
      var curSound = sounds[i];
      if (!curSound.XACTSound$HasLoadedTracks$value) {
        curSound.LoadTracks(this.INTERNAL_baseEngine, waveBankNames);
      }
    }
    this.INTERNAL_isManaged = managed;
    this.INTERNAL_category = (this.INTERNAL_baseEngine).INTERNAL_initCue(this, data.CueData$Category$value).MemberwiseClone();
    this.INTERNAL_userControlledPlaying = false;
    this.INTERNAL_isPositional = false;
    this.INTERNAL_queuedPlayback = false;
    this.INTERNAL_queuedPaused = false;
    this.INTERNAL_instancePool = $S01().Construct();
    this.INTERNAL_instanceVolumes = $S02().Construct();
    this.INTERNAL_instancePitches = $S02().Construct();
  };

  function Cue_add_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0C().Combine(eventHandler2, value);
      eventHandler = $T0D().CompareExchange$b1($T0B())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Cue_Apply3D (listener, emitter) {
    if (!(!this.get_IsPlaying() || this.INTERNAL_isPositional)) {
      throw $S03().Construct("Apply3D call after Play!");
    }
    if (listener === null) {
      throw $S04().Construct("listener");
    }
    if (emitter === null) {
      throw $S04().Construct("emitter");
    }
    this.INTERNAL_listener = listener;
    this.INTERNAL_emitter = emitter;
    this.SetVariable("Distance", $T12().Distance(this.INTERNAL_emitter.AudioEmitter$Position$value.MemberwiseClone(), this.INTERNAL_listener.AudioListener$Position$value.MemberwiseClone()));
    this.INTERNAL_isPositional = true;
  };

  function Cue_Dispose () {
    var $temp00;
    if (!this.Cue$IsDisposed$value) {
      if (this.Disposing !== null) {
        this.Disposing(this, null);
      }
      if (this.INTERNAL_instancePool !== null) {

        for (var a$0 = this.INTERNAL_instancePool._items, i$0 = 0, l$0 = (this.INTERNAL_instancePool._size | 0); i$0 < l$0; ($temp00 = i$0, 
            i$0 = ((i$0 + 1) | 0), 
            $temp00)) {
          var sfi = a$0[i$0];
          sfi.Dispose();
        }
        (this.INTERNAL_instancePool).Clear();
        (this.INTERNAL_instanceVolumes).Clear();
        (this.INTERNAL_instancePitches).Clear();
        this.INTERNAL_queuedPlayback = false;
      }
      (this.INTERNAL_category).INTERNAL_removeActiveCue(this);
      this.Cue$IsDisposed$value = true;
    }
  };

  function Cue_Finalize () {
    try {
      this.Dispose();
    } finally {
      $T15().prototype.Finalize.call(this);
    }
  };

  function Cue_get_IsCreated () {
    return this.Cue$IsCreated$value;
  };

  function Cue_get_IsDisposed () {
    return this.Cue$IsDisposed$value;
  };

  function Cue_get_IsPaused () {
    var $temp00;
    if (this.INTERNAL_queuedPaused) {
      var result = true;
    } else {

      for (var a$0 = this.INTERNAL_instancePool._items, i$0 = 0, l$0 = (this.INTERNAL_instancePool._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var sfi = a$0[i$0];
        if (sfi.get_State() === $T16().Paused) {
          result = true;
          return result;
        }
      }
      result = false;
    }
    return result;
  };

  function Cue_get_IsPlaying () {
    var $temp00;
    if (this.INTERNAL_queuedPlayback) {
      var result = true;
    } else {

      for (var a$0 = this.INTERNAL_instancePool._items, i$0 = 0, l$0 = (this.INTERNAL_instancePool._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var sfi = a$0[i$0];
        if (sfi.get_State() !== $T16().Stopped) {
          result = true;
          return result;
        }
      }
      result = false;
    }
    return result;
  };

  function Cue_get_IsPrepared () {
    return this.Cue$IsPrepared$value;
  };

  function Cue_get_IsPreparing () {
    return this.Cue$IsPreparing$value;
  };

  function Cue_get_IsStopped () {
    return !this.get_IsPlaying();
  };

  function Cue_get_IsStopping () {
    return false;
  };

  function Cue_get_Name () {
    return this.Cue$Name$value;
  };

  function Cue_GetVariable (name) {
    var $temp00;
    if ($T03().IsNullOrEmpty(name)) {
      throw $S04().Construct("name");
    }

    for (var a$0 = this.INTERNAL_variables._items, i$0 = 0, l$0 = (this.INTERNAL_variables._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var curVar = a$0[i$0];
      if (name == curVar.Variable$Name$value) {
        return curVar.GetValue();
      }
    }
    throw $S05().Construct("Instance variable not found!");
  };

  function Cue_INTERNAL_calculateNextSound () {
    this.INTERNAL_activeSound = null;
    if (this.INTERNAL_data.CueData$IsUserControlled$value) {
      this.INTERNAL_userControlledPlaying = true;
      if ((this.INTERNAL_baseEngine).INTERNAL_isGlobalVariable(this.INTERNAL_data.CueData$UserControlVariable$value)) {
        this.INTERNAL_controlledValue = +(this.INTERNAL_baseEngine).GetGlobalVariable(this.INTERNAL_data.CueData$UserControlVariable$value);
      } else {
        this.INTERNAL_controlledValue = +this.GetVariable(this.INTERNAL_data.CueData$UserControlVariable$value);
      }

      for (var i = 0; i < (((this.INTERNAL_data.CueData$Probabilities$value.length | 0) / 2) | 0); i = ((i + 1) | 0)) {
        if (!((+this.INTERNAL_controlledValue > +(this.INTERNAL_data.CueData$Probabilities$value).Get(i, 0)) || (+this.INTERNAL_controlledValue < +(this.INTERNAL_data.CueData$Probabilities$value).Get(i, 1)))) {
          this.INTERNAL_activeSound = this.INTERNAL_data.CueData$Sounds$value[i];
          var result = true;
          return result;
        }
      }
      result = false;
    } else {
      var max = 0;

      for (i = 0; i < (this.INTERNAL_data.CueData$Probabilities$value.length0 | 0); i = ((i + 1) | 0)) {
        max += +(this.INTERNAL_data.CueData$Probabilities$value).Get(i, 0) - +(this.INTERNAL_data.CueData$Probabilities$value).Get(i, 1);
      }
      var next = +$thisType.random.NextDouble() * max;

    $loop1: 
      for (i = (((this.INTERNAL_data.CueData$Probabilities$value.length0 | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
        if (next > (max - (+(this.INTERNAL_data.CueData$Probabilities$value).Get(i, 0) - +(this.INTERNAL_data.CueData$Probabilities$value).Get(i, 1)))) {
          this.INTERNAL_activeSound = this.INTERNAL_data.CueData$Sounds$value[i];
          break $loop1;
        }
        max -= +(this.INTERNAL_data.CueData$Probabilities$value).Get(i, 0) - +(this.INTERNAL_data.CueData$Probabilities$value).Get(i, 1);
      }
      result = true;
    }
    return result;
  };

  function Cue_INTERNAL_genVariables (cueVariables) {
    this.INTERNAL_variables = cueVariables;
  };

  function Cue_INTERNAL_setupSounds () {
    var $temp00;
    (this.INTERNAL_activeSound).GenerateInstances(this.INTERNAL_instancePool, this.INTERNAL_instanceVolumes, this.INTERNAL_instancePitches);
    var dSPCodes = this.INTERNAL_activeSound.XACTSound$DSPCodes$value;

    for (var i = 0; i < (dSPCodes.length | 0); i = ((i + 1) | 0)) {
      var curDSP = (dSPCodes[i] >>> 0);
      var handle = (this.INTERNAL_baseEngine).INTERNAL_getDSP(curDSP);

      for (var a$0 = this.INTERNAL_instancePool._items, i$0 = 0, l$0 = (this.INTERNAL_instancePool._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var sfi = a$0[i$0];
        sfi.INTERNAL_applyEffect(handle);
      }
    }
  };

  function Cue_INTERNAL_update () {
    var $temp00, $temp01, $temp02, $temp03;
    if (this.INTERNAL_queuedPlayback) {
      this.INTERNAL_queuedPlayback = false;

      for (var a$0 = this.INTERNAL_instancePool._items, i$0 = 0, l$0 = (this.INTERNAL_instancePool._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var sfi = a$0[i$0];
        sfi.Play();
        if (this.INTERNAL_queuedPaused) {
          sfi.Pause();
        }
      }
      this.INTERNAL_queuedPaused = false;
    }

    for (var i = 0; i < ((this.INTERNAL_instancePool).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!$T20().op_LessThanOrEqual(
          ((this.INTERNAL_instancePool).get_Item(i).INTERNAL_timer).get_ElapsedMilliseconds(), 
          ($T22().FromNumber((this.INTERNAL_instancePool).get_Item(i).INTERNAL_delayMS)).ToInt64()
        )) {
        ((this.INTERNAL_instancePool).get_Item(i)).Play();
        if (this.get_IsPaused()) {
          ((this.INTERNAL_instancePool).get_Item(i)).Pause();
        }
      }
      if (((this.INTERNAL_instancePool).get_Item(i)).get_State() === $T16().Stopped) {
        ((this.INTERNAL_instancePool).get_Item(i)).Dispose();
        (this.INTERNAL_instancePool).RemoveAt(i);
        (this.INTERNAL_instanceVolumes).RemoveAt(i);
        (this.INTERNAL_instancePitches).RemoveAt(i);
        i = ((i - 1) | 0);
      }
    }
    if (this.INTERNAL_data.CueData$IsUserControlled$value) {
      var varName = this.INTERNAL_data.CueData$UserControlVariable$value;
      if (!(!this.INTERNAL_userControlledPlaying || !(
            (this.INTERNAL_baseEngine).INTERNAL_isGlobalVariable(varName)
               ? (+this.INTERNAL_controlledValue !== +(this.INTERNAL_baseEngine).GetGlobalVariable(varName))
               : (+this.INTERNAL_controlledValue !== +this.GetVariable(this.INTERNAL_data.CueData$UserControlVariable$value)))
        )) {

        for (var a$1 = this.INTERNAL_instancePool._items, i$1 = 0, l$1 = (this.INTERNAL_instancePool._size | 0); i$1 < l$1; ($temp01 = i$1, 
            i$1 = ((i$1 + 1) | 0), 
            $temp01)) {
          sfi = a$1[i$1];
          sfi.Stop();
          sfi.Dispose();
        }
        (this.INTERNAL_instancePool).Clear();
        (this.INTERNAL_instanceVolumes).Clear();
        (this.INTERNAL_instancePitches).Clear();
        if (!this.INTERNAL_calculateNextSound()) {
          var result2 = true;
          return result2;
        }
        this.INTERNAL_setupSounds();

        for (var a$2 = this.INTERNAL_instancePool._items, i$2 = 0, l$2 = (this.INTERNAL_instancePool._size | 0); i$2 < l$2; ($temp02 = i$2, 
            i$2 = ((i$2 + 1) | 0), 
            $temp02)) {
          sfi = a$2[i$2];
          sfi.Play();
        }
      }
      if (this.INTERNAL_activeSound === null) {
        result2 = this.INTERNAL_userControlledPlaying;
        return result2;
      }
    }
    if (this.INTERNAL_isPositional) {

      for (var a$3 = this.INTERNAL_instancePool._items, i$3 = 0, l$3 = (this.INTERNAL_instancePool._size | 0); i$3 < l$3; ($temp03 = i$3, 
          i$3 = ((i$3 + 1) | 0), 
          $temp03)) {
        sfi = a$3[i$3];
        $S06().CallVirtual("Apply3D", null, sfi, this.INTERNAL_listener, this.INTERNAL_emitter);
      }
    }
    var rpcVolume = 1;
    var rpcPitch = 0;
    var hfGain = 1;
    var lfGain = 1;
    var rPCCodes = this.INTERNAL_activeSound.XACTSound$RPCCodes$value;

    for (var j = 0; j < (rPCCodes.length | 0); j = ((j + 1) | 0)) {
      var curCode = (rPCCodes[j] >>> 0);
      var curRPC = (this.INTERNAL_baseEngine).INTERNAL_getRPC(curCode);
      if (!(this.INTERNAL_baseEngine).INTERNAL_isGlobalVariable(curRPC.RPC$Variable$value)) {
        var result = +curRPC.CalculateRPC(this.GetVariable(curRPC.RPC$Variable$value));
      } else {
        result = +curRPC.CalculateRPC((this.INTERNAL_baseEngine).GetGlobalVariable(curRPC.RPC$Variable$value));
      }
      if (curRPC.RPC$Parameter$value === $T25().Volume) {
        rpcVolume *= +$T26().CalculateAmplitudeRatio(+((result / 100)));
      } else if (curRPC.RPC$Parameter$value === $T25().Pitch) {
        rpcPitch += +((result / 1000));
      } else {
        if (curRPC.RPC$Parameter$value !== $T25().FilterFrequency) {
          throw $S05().Construct(JSIL.ConcatString("RPC Parameter Type: ", (curRPC.RPC$Parameter$value).toString()));
        }
        hfGain = +((result / 20000));
        lfGain = 1 - hfGain;
      }
    }

    for (i = 0; i < ((this.INTERNAL_instancePool).get_Count() | 0); i = ((i + 1) | 0)) {
      ((this.INTERNAL_instancePool).get_Item(i)).set_Volume((+(this.INTERNAL_instanceVolumes).get_Item(i) * +this.GetVariable("Volume")) * rpcVolume);
      ((this.INTERNAL_instancePool).get_Item(i)).set_Pitch(+(this.INTERNAL_instancePitches).get_Item(i) + rpcPitch);
      ((this.INTERNAL_instancePool).get_Item(i)).INTERNAL_applyFilter(this.INTERNAL_baseEngine.AudioEngine$Filter$value, hfGain, lfGain);
    }
    if (!(!this.get_IsStopped() || 
        this.INTERNAL_queuedPlayback || this.INTERNAL_userControlledPlaying)) {
      if (this.INTERNAL_isManaged) {
        this.Dispose();
      } else {
        (this.INTERNAL_category).INTERNAL_removeActiveCue(this);
      }
      result2 = false;
    } else {
      result2 = true;
    }
    return result2;
  };

  function Cue_Pause () {
    var $temp00;
    if (!this.get_IsPlaying()) {
      if (this.INTERNAL_queuedPlayback) {
        this.INTERNAL_queuedPaused = true;
      }
    } else {

      for (var a$0 = this.INTERNAL_instancePool._items, i$0 = 0, l$0 = (this.INTERNAL_instancePool._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var sfi = a$0[i$0];
        sfi.Pause();
      }
    }
  };

  function Cue_Play () {
    var $temp00;
    if (this.get_IsPlaying()) {
      throw $S03().Construct("Cue already playing!");
    }
    (this.INTERNAL_category).INTERNAL_initCue(this);
    if (+this.GetVariable("NumCueInstances") >= +(this.INTERNAL_data.CueData$InstanceLimit$value)) {
      if (this.INTERNAL_data.CueData$MaxCueBehavior$value === $T27().Fail) {
        return;
      }
      if (this.INTERNAL_data.CueData$MaxCueBehavior$value === $T27().Queue) {
        throw $S05().Construct("Cue Queueing not handled!");
      }
      if (this.INTERNAL_data.CueData$MaxCueBehavior$value === $T27().ReplaceOldest) {
        (this.INTERNAL_category).INTERNAL_removeOldestCue(this.Cue$Name$value);
      } else if (this.INTERNAL_data.CueData$MaxCueBehavior$value === $T27().ReplaceQuietest) {
        (this.INTERNAL_category).INTERNAL_removeQuietestCue(this.Cue$Name$value);
      } else if (this.INTERNAL_data.CueData$MaxCueBehavior$value === $T27().ReplaceLowestPriority) {
        (this.INTERNAL_category).INTERNAL_removeOldestCue(this.Cue$Name$value);
      }
    }
    if ((this.INTERNAL_category).INTERNAL_addCue(this)) {
      if (this.INTERNAL_calculateNextSound()) {
        this.INTERNAL_setupSounds();
        if (this.INTERNAL_isPositional) {

          for (var a$0 = this.INTERNAL_instancePool._items, i$0 = 0, l$0 = (this.INTERNAL_instancePool._size | 0); i$0 < l$0; ($temp00 = i$0, 
              i$0 = ((i$0 + 1) | 0), 
              $temp00)) {
            var sfi = a$0[i$0];
            $S06().CallVirtual("Apply3D", null, sfi, this.INTERNAL_listener, this.INTERNAL_emitter);
          }
        }
        this.INTERNAL_queuedPlayback = true;
      }
    }
  };

  function Cue_remove_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0C().Remove(eventHandler2, value);
      eventHandler = $T0D().CompareExchange$b1($T0B())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Cue_Resume () {
    var $temp00;
    if (this.get_IsPaused()) {

      for (var a$0 = this.INTERNAL_instancePool._items, i$0 = 0, l$0 = (this.INTERNAL_instancePool._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var sfi = a$0[i$0];
        sfi.Resume();
      }
    }
  };

  function Cue_set_IsCreated (value) {
    this.Cue$IsCreated$value = value;
  };

  function Cue_set_IsDisposed (value) {
    this.Cue$IsDisposed$value = value;
  };

  function Cue_set_IsPrepared (value) {
    this.Cue$IsPrepared$value = value;
  };

  function Cue_set_IsPreparing (value) {
    this.Cue$IsPreparing$value = value;
  };

  function Cue_set_Name (value) {
    this.Cue$Name$value = value;
  };

  function Cue_SetVariable (name, value) {
    var $temp00;
    if ($T03().IsNullOrEmpty(name)) {
      throw $S04().Construct("name");
    }

    for (var a$0 = this.INTERNAL_variables._items, i$0 = 0, l$0 = (this.INTERNAL_variables._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var curVar = a$0[i$0];
      if (name == curVar.Variable$Name$value) {
        curVar.SetValue(value);
        return;
      }
    }
    throw $S05().Construct("Instance variable not found!");
  };

  function Cue_Stop (options) {
    var $temp00;
    if (this.INTERNAL_queuedPlayback) {
      this.INTERNAL_queuedPlayback = false;
      (this.INTERNAL_category).INTERNAL_removeActiveCue(this);
    } else {

      for (var a$0 = this.INTERNAL_instancePool._items, i$0 = 0, l$0 = (this.INTERNAL_instancePool._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var sfi = a$0[i$0];
        sfi.Stop();
        sfi.Dispose();
      }
      (this.INTERNAL_instancePool).Clear();
      (this.INTERNAL_instanceVolumes).Clear();
      (this.INTERNAL_instancePitches).Clear();
      this.INTERNAL_userControlledPlaying = false;
      (this.INTERNAL_category).INTERNAL_removeActiveCue(this);
      if (this.INTERNAL_isManaged) {
        this.Dispose();
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.Cue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $asm01.TypeRef("System.Collections.Generic.List`1", [$.String]), 
          $.String, $asm00.TypeRef("Microsoft.Xna.Framework.Audio.CueData"), 
          $.Boolean
        ]), 
      Cue__ctor
    );

    $.Method({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      Cue_add_Disposing
    );

    $.Method({Static:false, Public:true }, "Apply3D", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener"), $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")]), 
      Cue_Apply3D
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Cue_Dispose
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      Cue_Finalize
    );

    $.Method({Static:false, Public:true }, "get_IsCreated", 
      JSIL.MethodSignature.Return($.Boolean), 
      Cue_get_IsCreated
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      Cue_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsPaused", 
      JSIL.MethodSignature.Return($.Boolean), 
      Cue_get_IsPaused
    );

    $.Method({Static:false, Public:true }, "get_IsPlaying", 
      JSIL.MethodSignature.Return($.Boolean), 
      Cue_get_IsPlaying
    );

    $.Method({Static:false, Public:true }, "get_IsPrepared", 
      JSIL.MethodSignature.Return($.Boolean), 
      Cue_get_IsPrepared
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsPreparing", 
      JSIL.MethodSignature.Return($.Boolean), 
      Cue_get_IsPreparing
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsStopped", 
      JSIL.MethodSignature.Return($.Boolean), 
      Cue_get_IsStopped
    );

    $.Method({Static:false, Public:true }, "get_IsStopping", 
      JSIL.MethodSignature.Return($.Boolean), 
      Cue_get_IsStopping
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      Cue_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetVariable", 
      new JSIL.MethodSignature($.Single, [$.String]), 
      Cue_GetVariable
    );

    $.Method({Static:false, Public:false}, "INTERNAL_calculateNextSound", 
      JSIL.MethodSignature.Return($.Boolean), 
      Cue_INTERNAL_calculateNextSound
    );

    $.Method({Static:false, Public:false}, "INTERNAL_genVariables", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.Variable")])), 
      Cue_INTERNAL_genVariables
    );

    $.Method({Static:false, Public:false}, "INTERNAL_setupSounds", 
      JSIL.MethodSignature.Void, 
      Cue_INTERNAL_setupSounds
    );

    $.Method({Static:false, Public:false}, "INTERNAL_update", 
      JSIL.MethodSignature.Return($.Boolean), 
      Cue_INTERNAL_update
    );

    $.Method({Static:false, Public:true }, "Pause", 
      JSIL.MethodSignature.Void, 
      Cue_Pause
    );

    $.Method({Static:false, Public:true }, "Play", 
      JSIL.MethodSignature.Void, 
      Cue_Play
    );

    $.Method({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      Cue_remove_Disposing
    );

    $.Method({Static:false, Public:true }, "Resume", 
      JSIL.MethodSignature.Void, 
      Cue_Resume
    );

    $.Method({Static:false, Public:false}, "set_IsCreated", 
      JSIL.MethodSignature.Action($.Boolean), 
      Cue_set_IsCreated
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      Cue_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsPrepared", 
      JSIL.MethodSignature.Action($.Boolean), 
      Cue_set_IsPrepared
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsPreparing", 
      JSIL.MethodSignature.Action($.Boolean), 
      Cue_set_IsPreparing
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      Cue_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetVariable", 
      new JSIL.MethodSignature(null, [$.String, $.Single]), 
      Cue_SetVariable
    );

    $.Method({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioStopOptions")), 
      Cue_Stop
    );

    $.Field({Static:false, Public:false}, "INTERNAL_baseEngine", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine")); 
    $.Field({Static:false, Public:false}, "INTERNAL_data", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.CueData")); 
    $.Field({Static:false, Public:false}, "INTERNAL_activeSound", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTSound")); 
    $.Field({Static:false, Public:false}, "INTERNAL_instancePool", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")])); 
    $.Field({Static:false, Public:false}, "INTERNAL_instanceVolumes", $asm01.TypeRef("System.Collections.Generic.List`1", [$.Single])); 
    $.Field({Static:false, Public:false}, "INTERNAL_instancePitches", $asm01.TypeRef("System.Collections.Generic.List`1", [$.Single])); 
    $.Field({Static:false, Public:false}, "INTERNAL_userControlledPlaying", $.Boolean); 
    $.Field({Static:false, Public:false}, "INTERNAL_controlledValue", $.Single); 
    $.Field({Static:false, Public:false}, "INTERNAL_isPositional", $.Boolean); 
    $.Field({Static:false, Public:false}, "INTERNAL_listener", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener")); 
    $.Field({Static:false, Public:false}, "INTERNAL_emitter", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")); 
    $.Field({Static:false, Public:false}, "INTERNAL_variables", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.Variable")])); 
    $.Field({Static:false, Public:false}, "INTERNAL_category", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory")); 
    $.Field({Static:false, Public:false}, "INTERNAL_isManaged", $.Boolean); 
    $.Field({Static:false, Public:false}, "INTERNAL_queuedPlayback", $.Boolean); 
    $.Field({Static:false, Public:false}, "INTERNAL_queuedPaused", $.Boolean); 
    $.Field({Static:true , Public:false}, "random", $asm01.TypeRef("System.Random")); 
    $.Field({Static:false, Public:false}, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "Cue$IsCreated$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Cue$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Cue$IsPrepared$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Cue$IsPreparing$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Cue$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function Cue__cctor () {
      $thisType.random = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Cue__cctor
    );

    $.Property({Static:false, Public:true }, "IsCreated", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPaused", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPlaying", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPrepared", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPreparing", $.Boolean);

    $.Property({Static:false, Public:true }, "IsStopped", $.Boolean);

    $.Property({Static:false, Public:true }, "IsStopping", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Event({Static:false, Public:true }, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.SoundBank */ 

(function SoundBank$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioEngine)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.TitleContainer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.IO.SeekOrigin)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.String))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Text.Encoding)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm00.Microsoft.Xna.Framework.Audio.CueData))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.CueData)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTSound)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.XACTSound))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.Cue)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioListener)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioEmitter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.BinaryReader"), [$asm01.TypeRef("System.IO.Stream")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.String")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.String"), $asm00.TypeRef("Microsoft.Xna.Framework.Audio.CueData")]), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.CueData"), [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTSound")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTSound"), [$asm01.TypeRef("System.IO.BinaryReader")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTSound"), [$asm01.TypeRef("System.UInt16"), $asm01.TypeRef("System.Byte")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.CueData"), [
        $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTSound")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Single")]), 
        $asm01.TypeRef("System.String")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function SoundBank__ctor (audioEngine, filename) {
    if (audioEngine === null) {
      throw $S00().Construct("audioEngine");
    }
    if ($T01().IsNullOrEmpty(filename)) {
      throw $S00().Construct("filename");
    }
    this.INTERNAL_baseEngine = audioEngine;
    var soundBankStream = $T04().OpenStream(filename);
    try {
      var reader = $S01().Construct(soundBankStream);
      try {
        if ((reader.ReadUInt32() >>> 0) !== 1262634067) {
          throw $S02().Construct("SDBK format not recognized!");
        }
        if ((reader.ReadUInt16() | 0) !== 46) {
          throw $S02().Construct("SDBK Content version!");
        }
        if ((reader.ReadUInt16() | 0) !== 43) {
          throw $S02().Construct("SDBK Tool version!");
        }
        reader.ReadUInt16();
        reader.ReadUInt64();
        reader.ReadByte();
        var numCueSimple = (reader.ReadUInt16() | 0);
        var numCueComplex = (reader.ReadUInt16() | 0);
        reader.ReadUInt16();
        reader.ReadUInt16();
        var numWaveBanks = (reader.ReadByte() | 0);
        reader.ReadUInt16();
        var cueNameTableLength = (reader.ReadUInt16() | 0);
        reader.ReadUInt16();
        var cueSimpleOffset = (reader.ReadUInt32() >>> 0);
        var cueComplexOffset = (reader.ReadUInt32() >>> 0);
        var cueNameTableOffset = (reader.ReadUInt32() >>> 0);
        reader.ReadUInt32();
        reader.ReadUInt32();
        reader.ReadUInt32();
        var waveBankNameTableOffset = (reader.ReadUInt32() >>> 0);
        reader.ReadUInt32();
        reader.ReadUInt32();
        reader.ReadUInt32();
        reader.ReadBytes(64);
        soundBankStream.Seek(($T0B().FromNumber(waveBankNameTableOffset)).ToInt64(), $T0C().Begin);
        this.INTERNAL_waveBankNames = $S03().Construct();

        for (var i = 0; i < numWaveBanks; i = (((i + 1) | 0) & 0xFF)) {
          (this.INTERNAL_waveBankNames).Add(System.String.Replace($T0E().get_UTF8().GetString(reader.ReadBytes(64), 0, 64), "\x00", ""));
        }
        soundBankStream.Seek(($T0B().FromNumber(cueNameTableOffset)).ToInt64(), $T0C().Begin);
        var arg_1D5_0 = $T0E().get_UTF8().GetString(reader.ReadBytes(cueNameTableLength), 0, cueNameTableLength);
        var separator = JSIL.Array.New($T10(), 1);
        var cueNames = (JSIL.SplitString(arg_1D5_0, separator));
        this.INTERNAL_cueData = $S04().Construct();
        soundBankStream.Seek(($T0B().FromNumber(cueSimpleOffset)).ToInt64(), $T0C().Begin);

        for (var j = 0; j < numCueSimple; j = (((j + 1) >>> 0) & 0xFFFF)) {
          reader.ReadByte();
          var offset = (reader.ReadUInt32() >>> 0);
          var curPos = (reader.get_BaseStream()).get_Position();
          (reader.get_BaseStream()).Seek(($T0B().FromNumber(offset)).ToInt64(), $T0C().Begin);
          (this.INTERNAL_cueData).Add(cueNames[j], $S05().Construct($S06().Construct(reader)));
          (reader.get_BaseStream()).Seek(curPos, $T0C().Begin);
        }
        soundBankStream.Seek(($T0B().FromNumber(cueComplexOffset)).ToInt64(), $T0C().Begin);

        for (j = 0; j < numCueComplex; j = (((j + 1) >>> 0) & 0xFFFF)) {
          var cueFlags = (reader.ReadByte() | 0);
          if ((cueFlags & 4) !== 0) {
            offset = (reader.ReadUInt32() >>> 0);
            reader.ReadUInt32();
            curPos = (reader.get_BaseStream()).get_Position();
            (reader.get_BaseStream()).Seek(($T0B().FromNumber(offset)).ToInt64(), $T0C().Begin);
            (this.INTERNAL_cueData).Add(cueNames[((numCueSimple + j) & 0xFFFF)], $S05().Construct($S06().Construct(reader)));
            (reader.get_BaseStream()).Seek(curPos, $T0C().Begin);
          } else {
            offset = (reader.ReadUInt32() >>> 0);
            reader.ReadUInt32();
            curPos = (reader.get_BaseStream()).get_Position();
            (reader.get_BaseStream()).Seek(($T0B().FromNumber(offset)).ToInt64(), $T0C().Begin);
            var numVariations = (reader.ReadUInt16() | 0);
            var varTableFlags = (reader.ReadUInt16() | 0);
            reader.ReadUInt16();
            var variable = (reader.ReadUInt16() | 0);
            var cueSounds = JSIL.Array.New($T14(), numVariations);
            var cueProbs = JSIL.MultidimensionalArray.New($T17(), numVariations, 2);
            var varTableType = (varTableFlags >> 3) & 7;

            for (var k = 0; k < numVariations; k = (((k + 1) >>> 0) & 0xFFFF)) {
              if (varTableType === 0) {
                var track = (reader.ReadUInt16() | 0);
                var waveBank = (reader.ReadByte() | 0);
                var wMin = (reader.ReadByte() | 0);
                var wMax = (reader.ReadByte() | 0);
                cueSounds[k] = $S07().Construct(track, waveBank);
                cueProbs.Set(k, 0, +((+wMax / 255)));
                cueProbs.Set(k, 1, +((+wMin / 255)));
              } else if (varTableType === 1) {
                var varOffset = (reader.ReadUInt32() >>> 0);
                wMin = (reader.ReadByte() | 0);
                wMax = (reader.ReadByte() | 0);
                var varPos = (reader.get_BaseStream()).get_Position();
                (reader.get_BaseStream()).Seek(($T0B().FromNumber(varOffset)).ToInt64(), $T0C().Begin);
                cueSounds[k] = $S06().Construct(reader);
                (reader.get_BaseStream()).Seek(varPos, $T0C().Begin);
                cueProbs.Set(k, 0, +((+wMax / 255)));
                cueProbs.Set(k, 1, +((+wMin / 255)));
              } else if (varTableType === 3) {
                varOffset = (reader.ReadUInt32() >>> 0);
                var wMin2 = +reader.ReadSingle();
                var wMax2 = +reader.ReadSingle();
                reader.ReadUInt32();
                varPos = (reader.get_BaseStream()).get_Position();
                (reader.get_BaseStream()).Seek(($T0B().FromNumber(varOffset)).ToInt64(), $T0C().Begin);
                cueSounds[k] = $S06().Construct(reader);
                (reader.get_BaseStream()).Seek(varPos, $T0C().Begin);
                cueProbs.Set(k, 0, wMax2);
                cueProbs.Set(k, 1, wMin2);
              } else {
                if (varTableType !== 4) {
                  throw $S08().Construct();
                }
                track = (reader.ReadUInt16() | 0);
                waveBank = (reader.ReadByte() | 0);
                cueSounds[k] = $S07().Construct(track, waveBank);
                cueProbs.Set(k, 0, 1);
                cueProbs.Set(k, 1, 0);
              }
            }
            (reader.get_BaseStream()).Seek(curPos, $T0C().Begin);
            (this.INTERNAL_cueData).Add(cueNames[((numCueSimple + j) & 0xFFFF)], $S09().Construct(cueSounds, cueProbs, (
                  (varTableType === 3)
                     ? (this.INTERNAL_baseEngine).INTERNAL_getVariableName(variable)
                     : $T01().Empty)
              ));
          }
          var instanceLimit = (reader.ReadByte() | 0);
          reader.ReadUInt16();
          reader.ReadUInt16();
          var behavior = (reader.ReadByte() | 0);
          ((this.INTERNAL_cueData).get_Item(cueNames[((numCueSimple + j) & 0xFFFF)])).SetLimit(instanceLimit, behavior);
        }
      } finally {
        if (reader !== null) {
          $IM00().Call(reader, null);
        }
      }
    } finally {
      if (soundBankStream !== null) {
        $IM00().Call(soundBankStream, null);
      }
    }
    this.SoundBank$IsDisposed$value = false;
  };

  function SoundBank_add_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1C().Combine(eventHandler2, value);
      eventHandler = $T1D().CompareExchange$b1($T1B())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function SoundBank_Dispose$00 () {
    this.Dispose(false);
  };

  function SoundBank_Dispose$01 (disposing) {
    if (!this.SoundBank$IsDisposed$value) {
      if (this.Disposing !== null) {
        this.Disposing(this, null);
      }
      (this.INTERNAL_waveBankNames).Clear();
      (this.INTERNAL_cueData).Clear();
      this.SoundBank$IsDisposed$value = true;
    }
  };

  function SoundBank_Finalize () {
    try {
      this.Dispose(true);
    } finally {
      $T1F().prototype.Finalize.call(this);
    }
  };

  function SoundBank_get_IsDisposed () {
    return this.SoundBank$IsDisposed$value;
  };

  function SoundBank_GetCue (name) {
    if ($T01().IsNullOrEmpty(name)) {
      throw $S00().Construct("name");
    }
    if (!(this.INTERNAL_cueData).ContainsKey(name)) {
      throw $S02().Construct("name not found!");
    }
    return new ($T20())(this.INTERNAL_baseEngine, this.INTERNAL_waveBankNames, name, (this.INTERNAL_cueData).get_Item(name), false);
  };

  function SoundBank_PlayCue$02 (name) {
    if ($T01().IsNullOrEmpty(name)) {
      throw $S00().Construct("name");
    }
    if (!(this.INTERNAL_cueData).ContainsKey(name)) {
      throw $S0A().Construct("name not found!");
    }
    var newCue = new ($T20())(this.INTERNAL_baseEngine, this.INTERNAL_waveBankNames, name, (this.INTERNAL_cueData).get_Item(name), true);
    newCue.Play();
  };

  function SoundBank_PlayCue$03 (name, listener, emitter) {
    if ($T01().IsNullOrEmpty(name)) {
      throw $S00().Construct("name");
    }
    if (!(this.INTERNAL_cueData).ContainsKey(name)) {
      throw $S0A().Construct("name not found!");
    }
    var newCue = new ($T20())(this.INTERNAL_baseEngine, this.INTERNAL_waveBankNames, name, (this.INTERNAL_cueData).get_Item(name), true);
    newCue.Apply3D(listener, emitter);
    newCue.Play();
  };

  function SoundBank_remove_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1C().Remove(eventHandler2, value);
      eventHandler = $T1D().CompareExchange$b1($T1B())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function SoundBank_set_IsDisposed (value) {
    this.SoundBank$IsDisposed$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.SoundBank", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $.String]), 
      SoundBank__ctor
    );

    $.Method({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      SoundBank_add_Disposing
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      SoundBank_Dispose$00
    );

    $.Method({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      SoundBank_Dispose$01
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      SoundBank_Finalize
    );

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      SoundBank_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetCue", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.Cue"), [$.String]), 
      SoundBank_GetCue
    );

    $.Method({Static:false, Public:true }, "PlayCue", 
      JSIL.MethodSignature.Action($.String), 
      SoundBank_PlayCue$02
    );

    $.Method({Static:false, Public:true }, "PlayCue", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")
        ]), 
      SoundBank_PlayCue$03
    );

    $.Method({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      SoundBank_remove_Disposing
    );

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      SoundBank_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "INTERNAL_baseEngine", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine")); 
    $.Field({Static:false, Public:false}, "INTERNAL_waveBankNames", $asm01.TypeRef("System.Collections.Generic.List`1", [$.String])); 
    $.Field({Static:false, Public:false}, "INTERNAL_cueData", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("Microsoft.Xna.Framework.Audio.CueData")])); 
    $.Field({Static:false, Public:false}, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "SoundBank$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Event({Static:false, Public:true }, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.WaveBank */ 

(function WaveBank$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioEngine)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.TitleContainer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.SoundEffect))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm01.System.UInt32))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.IO.SeekOrigin)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Text.Encoding)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.WaveBank_SoundStreamEntry)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.BinaryReader"), [$asm01.TypeRef("System.IO.Stream")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), [
        $asm01.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), 
        $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.UInt32"), 
        $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.UInt32"), 
        $asm01.TypeRef("System.Boolean"), $asm01.TypeRef("System.UInt32")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function WaveBank__ctor$00 (audioEngine, nonStreamingWaveBankFilename) {
    if (audioEngine === null) {
      throw $S00().Construct("audioEngine");
    }
    if ($T01().IsNullOrEmpty(nonStreamingWaveBankFilename)) {
      throw $S00().Construct("nonStreamingWaveBankFilename");
    }
    var stream = $T04().OpenStream(nonStreamingWaveBankFilename);
    try {
      var reader = $S01().Construct(stream);
      try {
        this.LoadWaveBank(audioEngine, reader, false);
      } finally {
        if (reader !== null) {
          $IM00().Call(reader, null);
        }
      }
    } finally {
      if (stream !== null) {
        $IM00().Call(stream, null);
      }
    }
  };

  function WaveBank__ctor$01 (audioEngine, streamingWaveBankFilename, offset, packetsize) {
    if (audioEngine === null) {
      throw $S00().Construct("audioEngine");
    }
    if ($T01().IsNullOrEmpty(streamingWaveBankFilename)) {
      throw $S00().Construct("streamingWaveBankFilename");
    }
    this.INTERNAL_waveBankReader = $S01().Construct($T04().OpenStream(streamingWaveBankFilename));
    this.LoadWaveBank(audioEngine, this.INTERNAL_waveBankReader, true);
  };

  function WaveBank_add_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Combine(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function WaveBank_Dispose$02 () {
    this.Dispose(false);
  };

  function WaveBank_Dispose$03 (disposing) {
    if (!this.WaveBank$IsDisposed$value) {
      if (this.Disposing !== null) {
        this.Disposing(this, null);
      }
      var iNTERNAL_sounds = this.INTERNAL_sounds;

      for (var i = 0; i < (iNTERNAL_sounds.length | 0); i = ((i + 1) | 0)) {
        var se = iNTERNAL_sounds[i];
        if (se !== null) {
          se.Dispose();
        }
      }
      (this.INTERNAL_baseEngine).INTERNAL_removeWaveBank(this.INTERNAL_name);
      this.INTERNAL_sounds = null;
      if (this.INTERNAL_waveBankReader !== null) {
        (this.INTERNAL_waveBankReader).Close();
        this.INTERNAL_waveBankReader = null;
      }
      this.WaveBank$IsDisposed$value = true;
      this.WaveBank$IsPrepared$value = false;
    }
  };

  function WaveBank_Finalize () {
    try {
      this.Dispose(true);
    } finally {
      $T0F().prototype.Finalize.call(this);
    }
  };

  function WaveBank_get_IsDisposed () {
    return this.WaveBank$IsDisposed$value;
  };

  function WaveBank_get_IsPrepared () {
    return this.WaveBank$IsPrepared$value;
  };

  function WaveBank_INTERNAL_getTrack (track) {
    if (this.INTERNAL_sounds[track] === null) {
      this.LoadWaveEntry(this.INTERNAL_soundStreamEntries[track], track, this.INTERNAL_waveBankReader);
    }
    return this.INTERNAL_sounds[track];
  };

  function WaveBank_LoadWaveBank (audioEngine, reader, streaming) {
    this.WaveBank$IsPrepared$value = false;
    this.INTERNAL_baseEngine = audioEngine;
    if ((reader.ReadUInt32() >>> 0) !== 1145979479) {
      throw $S02().Construct("WBND format not recognized!");
    }
    if ((reader.ReadUInt32() >>> 0) !== 46) {
      throw $S02().Construct("WBND Content version!");
    }
    if ((reader.ReadUInt32() >>> 0) !== 44) {
      throw $S02().Construct("WBND Tool version!");
    }
    var offsets = JSIL.Array.New($T13(), 5);
    var lengths = JSIL.Array.New($T13(), 5);

    for (var i = 0; i < 5; i = ((i + 1) | 0)) {
      offsets[i] = (reader.ReadUInt32() >>> 0);
      lengths[i] = (reader.ReadUInt32() >>> 0);
    }
    (reader.get_BaseStream()).Seek(($T15().FromNumber(offsets[0])).ToInt64(), $T16().Begin);
    reader.ReadUInt16();
    var wavebankFlags = (reader.ReadUInt16() | 0);
    var compact = (wavebankFlags & 131072) !== 0;
    var numEntries = (reader.ReadUInt32() >>> 0);
    this.INTERNAL_name = (System.String.Replace($T17().get_UTF8().GetString(reader.ReadBytes(64), 0, 64), "\x00", ""));
    var metadataElementSize = (reader.ReadUInt32() >>> 0);
    reader.ReadUInt32();
    var alignment = (reader.ReadUInt32() >>> 0);
    var playRegionOffset = (offsets[4] >>> 0);
    if (playRegionOffset === 0) {
      playRegionOffset = (((offsets[1] >>> 0) + (Math.imul(numEntries, metadataElementSize) >>> 0)) >>> 0);
    }
    var entryFormat = 0;
    if (compact) {
      entryFormat = (reader.ReadUInt32() >>> 0);
    }
    this.INTERNAL_sounds = JSIL.Array.New($T0E(), numEntries);
    if (streaming) {
      this.INTERNAL_soundStreamEntries = JSIL.Array.New($T18(), numEntries);
    }
    var curOffset = (offsets[1] >>> 0);

    for (var curEntry = 0; $T14().op_LessThan(
        $T14().FromNumber(curEntry), 
        ($T15().FromNumber(numEntries)).ToInt64()
      ); curEntry = ((curEntry + 1) | 0)) {
      (reader.get_BaseStream()).Seek(($T15().FromNumber(curOffset)).ToInt64(), $T16().Begin);
      var entryPlayOffset = 0;
      var entryPlayLength = 0;
      var entryLoopOffset = 0;
      var entryLoopLength = 0;
      if (compact) {
        var entryLength = (reader.ReadUInt32() >>> 0);
        entryPlayOffset = (Math.imul((entryLength & 2097151), alignment) >>> 0);
        entryPlayLength = (entryLength >>> 21) & 2047;
        (reader.get_BaseStream()).Seek(($T15().FromNumber(((curOffset + metadataElementSize) >>> 0))).ToInt64(), $T16().Begin);
        if (!$T14().op_Inequality(
            $T14().FromNumber(curEntry), 
            ($T15().FromNumber(((numEntries - 1) >>> 0))).ToInt64()
          )) {
          entryLength = (lengths[4] >>> 0);
        } else {
          entryLength = (Math.imul(((reader.ReadUInt32() >>> 0) & 2097151), alignment) >>> 0);
        }
        entryPlayLength = ((entryLength - entryPlayOffset) >>> 0);
      } else {
        if (metadataElementSize >= 4) {
          reader.ReadUInt32();
        }
        if (metadataElementSize >= 8) {
          entryFormat = (reader.ReadUInt32() >>> 0);
        }
        if (metadataElementSize >= 12) {
          entryPlayOffset = (reader.ReadUInt32() >>> 0);
        }
        if (metadataElementSize >= 16) {
          entryPlayLength = (reader.ReadUInt32() >>> 0);
        }
        if (metadataElementSize >= 20) {
          entryLoopOffset = (reader.ReadUInt32() >>> 0);
        }
        if (metadataElementSize >= 24) {
          entryLoopLength = (reader.ReadUInt32() >>> 0);
        } else if (entryPlayLength !== 0) {
          entryPlayLength = (lengths[4] >>> 0);
        }
      }
      curOffset = ((curOffset + metadataElementSize) >>> 0);
      entryPlayOffset = ((entryPlayOffset + playRegionOffset) >>> 0);
      var entryCodec = entryFormat & 3;
      var entryChannels = (entryFormat >>> 2) & 7;
      var entryFrequency = (entryFormat >>> 5) & 262143;
      var entryAlignment = (entryFormat >>> 23) & 255;
      var entryBitDepth = entryFormat >>> 31;
      if (streaming) {
        this.INTERNAL_soundStreamEntries[curEntry] = new ($T18())(entryPlayOffset, entryPlayLength, entryCodec, entryFrequency, entryChannels, entryLoopOffset, entryLoopLength, entryAlignment, entryBitDepth);
      } else {
        var filler = new ($T18())(entryPlayOffset, entryPlayLength, entryCodec, entryFrequency, entryChannels, entryLoopOffset, entryLoopLength, entryAlignment, entryBitDepth);
        this.LoadWaveEntry(filler, (curEntry & 0xFFFF), reader);
      }
    }
    audioEngine.INTERNAL_addWaveBank(this.INTERNAL_name, this);
    this.WaveBank$IsDisposed$value = false;
    this.WaveBank$IsPrepared$value = true;
  };

  function WaveBank_LoadWaveEntry (entry, track, reader) {
    (reader.get_BaseStream()).Seek(($T15().FromNumber(entry.SoundStreamEntry$PlayOffset$value)).ToInt64(), $T16().Begin);
    var entryData = reader.ReadBytes((entry.SoundStreamEntry$PlayLength$value | 0));
    if ((entry.SoundStreamEntry$Codec$value >>> 0) === 0) {
      this.INTERNAL_sounds[track] = $S03().Construct("WaveBank Sound", entryData, entry.SoundStreamEntry$Frequency$value, entry.SoundStreamEntry$Channels$value, entry.SoundStreamEntry$LoopOffset$value, entry.SoundStreamEntry$LoopLength$value, false, entry.SoundStreamEntry$BitDepth$value);
    } else {
      if ((entry.SoundStreamEntry$Codec$value >>> 0) !== 2) {
        throw $S04().Construct();
      }
      this.INTERNAL_sounds[track] = $S03().Construct("WaveBank Sound", entryData, entry.SoundStreamEntry$Frequency$value, entry.SoundStreamEntry$Channels$value, entry.SoundStreamEntry$LoopOffset$value, entry.SoundStreamEntry$LoopLength$value, true, (Math.imul((((entry.SoundStreamEntry$Alignment$value >>> 0) + 16) >>> 0), 2) >>> 0));
    }
  };

  function WaveBank_remove_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0A().Remove(eventHandler2, value);
      eventHandler = $T0B().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function WaveBank_set_IsDisposed (value) {
    this.WaveBank$IsDisposed$value = value;
  };

  function WaveBank_set_IsPrepared (value) {
    this.WaveBank$IsPrepared$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.WaveBank", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $.String]), 
      WaveBank__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $.String, 
          $.Int32, $.Int16
        ]), 
      WaveBank__ctor$01
    );

    $.Method({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      WaveBank_add_Disposing
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      WaveBank_Dispose$02
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      WaveBank_Dispose$03
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      WaveBank_Finalize
    );

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      WaveBank_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsPrepared", 
      JSIL.MethodSignature.Return($.Boolean), 
      WaveBank_get_IsPrepared
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "INTERNAL_getTrack", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), [$.UInt16]), 
      WaveBank_INTERNAL_getTrack
    );

    $.Method({Static:false, Public:false}, "LoadWaveBank", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $asm01.TypeRef("System.IO.BinaryReader"), 
          $.Boolean
        ]), 
      WaveBank_LoadWaveBank
    );

    $.Method({Static:false, Public:false}, "LoadWaveEntry", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.WaveBank+SoundStreamEntry"), $.UInt16, 
          $asm01.TypeRef("System.IO.BinaryReader")
        ]), 
      WaveBank_LoadWaveEntry
    );

    $.Method({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      WaveBank_remove_Disposing
    );

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      WaveBank_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsPrepared", 
      JSIL.MethodSignature.Action($.Boolean), 
      WaveBank_set_IsPrepared
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "INTERNAL_baseEngine", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine")); 
    $.Field({Static:false, Public:false}, "INTERNAL_name", $.String); 
    $.Field({Static:false, Public:false}, "INTERNAL_waveBankReader", $asm01.TypeRef("System.IO.BinaryReader")); 
    $.Field({Static:false, Public:false}, "INTERNAL_soundStreamEntries", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.WaveBank+SoundStreamEntry")])); 
    $.Field({Static:false, Public:false}, "INTERNAL_sounds", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")])); 
    $.Field({Static:false, Public:false}, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "WaveBank$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "WaveBank$IsPrepared$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPrepared", $.Boolean);

    $.Event({Static:false, Public:true }, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.WaveBank+SoundStreamEntry */ 

(function SoundStreamEntry$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function SoundStreamEntry__ctor (playOffset, playLength, codec, frequency, channels, loopOffset, loopLength, alignment, bitDepth) {
    this.SoundStreamEntry$PlayOffset$value = (playOffset >>> 0);
    this.SoundStreamEntry$PlayLength$value = (playLength >>> 0);
    this.SoundStreamEntry$Codec$value = (codec >>> 0);
    this.SoundStreamEntry$Frequency$value = (frequency >>> 0);
    this.SoundStreamEntry$Channels$value = (channels >>> 0);
    this.SoundStreamEntry$LoopOffset$value = (loopOffset >>> 0);
    this.SoundStreamEntry$LoopLength$value = (loopLength >>> 0);
    this.SoundStreamEntry$Alignment$value = (alignment >>> 0);
    this.SoundStreamEntry$BitDepth$value = (bitDepth >>> 0);
  };

  function SoundStreamEntry_get_Alignment () {
    return this.SoundStreamEntry$Alignment$value;
  };

  function SoundStreamEntry_get_BitDepth () {
    return this.SoundStreamEntry$BitDepth$value;
  };

  function SoundStreamEntry_get_Channels () {
    return this.SoundStreamEntry$Channels$value;
  };

  function SoundStreamEntry_get_Codec () {
    return this.SoundStreamEntry$Codec$value;
  };

  function SoundStreamEntry_get_Frequency () {
    return this.SoundStreamEntry$Frequency$value;
  };

  function SoundStreamEntry_get_LoopLength () {
    return this.SoundStreamEntry$LoopLength$value;
  };

  function SoundStreamEntry_get_LoopOffset () {
    return this.SoundStreamEntry$LoopOffset$value;
  };

  function SoundStreamEntry_get_PlayLength () {
    return this.SoundStreamEntry$PlayLength$value;
  };

  function SoundStreamEntry_get_PlayOffset () {
    return this.SoundStreamEntry$PlayOffset$value;
  };

  function SoundStreamEntry_set_Alignment (value) {
    this.SoundStreamEntry$Alignment$value = (value >>> 0);
  };

  function SoundStreamEntry_set_BitDepth (value) {
    this.SoundStreamEntry$BitDepth$value = (value >>> 0);
  };

  function SoundStreamEntry_set_Channels (value) {
    this.SoundStreamEntry$Channels$value = (value >>> 0);
  };

  function SoundStreamEntry_set_Codec (value) {
    this.SoundStreamEntry$Codec$value = (value >>> 0);
  };

  function SoundStreamEntry_set_Frequency (value) {
    this.SoundStreamEntry$Frequency$value = (value >>> 0);
  };

  function SoundStreamEntry_set_LoopLength (value) {
    this.SoundStreamEntry$LoopLength$value = (value >>> 0);
  };

  function SoundStreamEntry_set_LoopOffset (value) {
    this.SoundStreamEntry$LoopOffset$value = (value >>> 0);
  };

  function SoundStreamEntry_set_PlayLength (value) {
    this.SoundStreamEntry$PlayLength$value = (value >>> 0);
  };

  function SoundStreamEntry_set_PlayOffset (value) {
    this.SoundStreamEntry$PlayOffset$value = (value >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.WaveBank+SoundStreamEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $.UInt32, $.UInt32, 
          $.UInt32, $.UInt32, 
          $.UInt32, $.UInt32, 
          $.UInt32
        ]), 
      SoundStreamEntry__ctor
    );

    $.Method({Static:false, Public:true }, "get_Alignment", 
      JSIL.MethodSignature.Return($.UInt32), 
      SoundStreamEntry_get_Alignment
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_BitDepth", 
      JSIL.MethodSignature.Return($.UInt32), 
      SoundStreamEntry_get_BitDepth
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Channels", 
      JSIL.MethodSignature.Return($.UInt32), 
      SoundStreamEntry_get_Channels
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Codec", 
      JSIL.MethodSignature.Return($.UInt32), 
      SoundStreamEntry_get_Codec
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Frequency", 
      JSIL.MethodSignature.Return($.UInt32), 
      SoundStreamEntry_get_Frequency
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LoopLength", 
      JSIL.MethodSignature.Return($.UInt32), 
      SoundStreamEntry_get_LoopLength
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LoopOffset", 
      JSIL.MethodSignature.Return($.UInt32), 
      SoundStreamEntry_get_LoopOffset
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PlayLength", 
      JSIL.MethodSignature.Return($.UInt32), 
      SoundStreamEntry_get_PlayLength
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PlayOffset", 
      JSIL.MethodSignature.Return($.UInt32), 
      SoundStreamEntry_get_PlayOffset
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Alignment", 
      JSIL.MethodSignature.Action($.UInt32), 
      SoundStreamEntry_set_Alignment
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_BitDepth", 
      JSIL.MethodSignature.Action($.UInt32), 
      SoundStreamEntry_set_BitDepth
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Channels", 
      JSIL.MethodSignature.Action($.UInt32), 
      SoundStreamEntry_set_Channels
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Codec", 
      JSIL.MethodSignature.Action($.UInt32), 
      SoundStreamEntry_set_Codec
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Frequency", 
      JSIL.MethodSignature.Action($.UInt32), 
      SoundStreamEntry_set_Frequency
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_LoopLength", 
      JSIL.MethodSignature.Action($.UInt32), 
      SoundStreamEntry_set_LoopLength
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_LoopOffset", 
      JSIL.MethodSignature.Action($.UInt32), 
      SoundStreamEntry_set_LoopOffset
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_PlayLength", 
      JSIL.MethodSignature.Action($.UInt32), 
      SoundStreamEntry_set_PlayLength
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_PlayOffset", 
      JSIL.MethodSignature.Action($.UInt32), 
      SoundStreamEntry_set_PlayOffset
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SoundStreamEntry$PlayOffset$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SoundStreamEntry$PlayLength$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SoundStreamEntry$Codec$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SoundStreamEntry$Frequency$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SoundStreamEntry$Channels$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SoundStreamEntry$LoopOffset$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SoundStreamEntry$LoopLength$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SoundStreamEntry$Alignment$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SoundStreamEntry$BitDepth$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "PlayOffset", $.UInt32);

    $.Property({Static:false, Public:true }, "PlayLength", $.UInt32);

    $.Property({Static:false, Public:true }, "Codec", $.UInt32);

    $.Property({Static:false, Public:true }, "Frequency", $.UInt32);

    $.Property({Static:false, Public:true }, "Channels", $.UInt32);

    $.Property({Static:false, Public:true }, "LoopOffset", $.UInt32);

    $.Property({Static:false, Public:true }, "LoopLength", $.UInt32);

    $.Property({Static:false, Public:true }, "Alignment", $.UInt32);

    $.Property({Static:false, Public:true }, "BitDepth", $.UInt32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ContentManager */ 

(function ContentManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.WeakReference))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Char))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IServiceProvider)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Object))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.StringComparer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.IDisposable))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.WeakReference)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.GC)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.TitleContainer)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Action$b1.Of($asm01.System.IDisposable))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentLoadException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.IO.MemoryStream)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.LzxDecoder)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.IO.SeekOrigin)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.ObjectDisposedException)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.Texture2DReader)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.SpriteFontReader)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Song)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.SongReader)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.SoundEffectReader)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Video)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.VideoReader)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.EffectReader)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Utilities.FileHelpers)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm01.System.IO.File)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm01.System.IO.FileNotFoundException)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm01.System.IO.DirectoryNotFoundException)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm03.System.Diagnostics.Debug)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm01.System.String, $asm01.System.Object))) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.String, $asm01.System.Object))) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm01.System.Convert)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm01.System.Reflection.BindingFlags)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.WeakReference")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Char")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Object")]), [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm01.TypeRef("System.String")])]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.IDisposable")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.WeakReference"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.MemoryStream"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ObjectDisposedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.BinaryReader"), [$asm01.TypeRef("System.IO.Stream")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Video"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature("!!0", ["!!0"], ["T"]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Type")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.get_GraphicsDevice)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.IServiceProvider.GetService)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function ContentManager__ctor$00 (serviceProvider) {
    this.loadedAssets = $S02().Construct($T05().get_OrdinalIgnoreCase());
    this.disposableAssets = $S03().Construct();
    if (serviceProvider === null) {
      throw $S04().Construct("serviceProvider");
    }
    this.ContentManager$RootDirectory$value = $T08().Empty;
    this.serviceProvider = serviceProvider;
    $thisType.AddContentManager(this);
  };

  function ContentManager__ctor$01 (serviceProvider, rootDirectory) {
    this.loadedAssets = $S02().Construct($T05().get_OrdinalIgnoreCase());
    this.disposableAssets = $S03().Construct();
    if (serviceProvider === null) {
      throw $S04().Construct("serviceProvider");
    }
    if (rootDirectory === null) {
      throw $S04().Construct("rootDirectory");
    }
    this.ContentManager$RootDirectory$value = rootDirectory;
    this.serviceProvider = serviceProvider;
    $thisType.AddContentManager(this);
  };

  function ContentManager_AddContentManager (contentManager) {
    var contentManagerLock = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T0A().Enter(contentManagerLock = $thisType.ContentManagerLock, /* ref */ flag);
      var contains = false;

      for (var i = ((($thisType.ContentManagers.get_Count() | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
        var contentRef = $thisType.ContentManagers.get_Item(i);
        if (contentRef.get_Target() === contentManager) {
          contains = true;
        }
        if (!contentRef.get_IsAlive()) {
          $thisType.ContentManagers.RemoveAt(i);
        }
      }
      if (!contains) {
        $thisType.ContentManagers.Add($S05().Construct(contentManager));
      }
    } finally {
      if (flag.get()) {
        $T0A().Exit(contentManagerLock);
      }
    }
  };

  function ContentManager_Dispose$02 () {
    this.Dispose(true);
    $T0D().SuppressFinalize(this);
    $thisType.RemoveContentManager(this);
  };

  function ContentManager_Dispose$03 (disposing) {
    if (!this.disposed) {
      if (disposing) {
        this.Unload();
      }
      this.disposed = true;
    }
  };

  function ContentManager_Finalize () {
    try {
      this.Dispose(false);
    } finally {
      $T00().prototype.Finalize.call(this);
    }
  };

  function ContentManager_get_LoadedAssets () {
    return this.loadedAssets;
  };

  function ContentManager_get_RootDirectory () {
    return this.ContentManager$RootDirectory$value;
  };

  function ContentManager_get_RootDirectoryFullPath () {
    if ($T0E().IsPathRooted(this.ContentManager$RootDirectory$value)) {
      var result = this.ContentManager$RootDirectory$value;
    } else {
      result = $T0E().Combine($T0F().TitleContainer$Location$value, this.ContentManager$RootDirectory$value);
    }
    return result;
  };

  function ContentManager_get_ServiceProvider () {
    return this.serviceProvider;
  };

  function ContentManager_GetContentReaderFromXnb (originalAssetName, /* ref */ stream, xnbReader, recordDisposableObject) {
    var x = (xnbReader.ReadByte() | 0);
    var i = (xnbReader.ReadByte() | 0);
    var b = (xnbReader.ReadByte() | 0);
    var platform = (xnbReader.ReadByte() | 0);
    if (!(!((x !== 88) || 
          (i !== 78) || 
          (b !== 66)) && $thisType.targetPlatformIdentifiers.Contains(String.fromCharCode(platform)))) {
      throw $S06().Construct("Asset does not appear to be a valid XNB file. Did you process your content for Windows?");
    }
    var version = (xnbReader.ReadByte() | 0);
    var flags = (xnbReader.ReadByte() | 0);
    if (!((version === 5) || (version === 4))) {
      throw $S06().Construct("Invalid XNB version");
    }
    var xnbLength = (xnbReader.ReadInt32() | 0);
    if ((flags & 128) !== 0) {
      var compressedSize = ((xnbLength - 14) | 0);
      var decompressedSize = (xnbReader.ReadInt32() | 0);
      var decompressedStream = $S07().Construct(decompressedSize);
      var dec = new ($T16())(16);
      var decodedBytes = 0;
      var startPos = (stream.get()).get_Position();

    $loop0: 
      for (var pos = startPos; $T17().op_LessThan(
          $T17().op_Subtraction(pos, startPos), 
          $T17().FromNumber(compressedSize)
        ); ) {
        var hi = ((stream.get()).ReadByte() | 0);
        var lo = ((stream.get()).ReadByte() | 0);
        var block_size = (hi << 8) | lo;
        var frame_size = 32768;
        if (hi === 255) {
          hi = lo;
          lo = ((stream.get()).ReadByte() & 0xFF);
          frame_size = (hi << 8) | lo;
          hi = ((stream.get()).ReadByte() & 0xFF);
          lo = ((stream.get()).ReadByte() & 0xFF);
          block_size = (hi << 8) | lo;
          pos = $T17().op_Addition(pos, $T17().Create(5, 0, 0));
        } else {
          pos = $T17().op_Addition(pos, $T17().Create(2, 0, 0));
        }
        if (!((block_size !== 0) && (frame_size !== 0))) {
          break $loop0;
        }
        dec.Decompress(stream.get(), block_size, decompressedStream, frame_size);
        pos = $T17().op_Addition(pos, $T17().FromNumber(block_size));
        decodedBytes = ((decodedBytes + frame_size) | 0);
        (stream.get()).Seek(pos, $T18().Begin);
      }
      if (!$T17().op_Equality(
          decompressedStream.get_Position(), 
          $T17().FromNumber(decompressedSize)
        )) {
        throw $S06().Construct(("Decompression of " + originalAssetName + " failed. "));
      }
      decompressedStream.Seek($T17().Create(0, 0, 0), $T18().Begin);
      var reader = new ($T19())(this, decompressedStream, $IM00().Call(this.graphicsDeviceService, null), originalAssetName, version, recordDisposableObject);
    } else {
      reader = new ($T19())(this, stream.get(), $IM00().Call(this.graphicsDeviceService, null), originalAssetName, version, recordDisposableObject);
    }
    return reader;
  };

  function ContentManager_Load$b1 (T, assetName) {
    if ($T08().IsNullOrEmpty(assetName)) {
      throw $S04().Construct("assetName");
    }
    if (this.disposed) {
      throw $S08().Construct("ContentManager");
    }
    var result = (
      T.IsValueType
         ? JSIL.CreateInstanceOfType(T)
         : null)
    ;
    var key = (System.String.Replace(assetName, "\\", "/"));
    var asset = new JSIL.BoxedVariable(null);
    if ((this.loadedAssets).TryGetValue(key, /* ref */ asset)) {
      if (T.$Is(asset.get())) {
        var result2 = JSIL.CloneParameter(T, T.$Cast(asset.get()));
        return result2;
      }
    }
    result = JSIL.CloneParameter(T, this.ReadAsset$b1(T)(assetName, null));
    (this.loadedAssets).set_Item(key, JSIL.CloneParameter(T, result));
    result2 = result;
    return result2;
  };

  function ContentManager_Normalize$b1 (T, assetName) {
    if (!(!$T1B().op_Equality(T, $T1E().__Type__) && !$T1B().op_Equality(T, $T1F().__Type__))) {
      var result = $T20().Normalize(assetName);
    } else if ($T1B().op_Equality(T, $T21().__Type__)) {
      result = $T22().Normalize(assetName);
    } else if ($T1B().op_Equality(T, $T23().__Type__)) {
      result = $T24().Normalize(assetName);
    } else if ($T1B().op_Equality(T, $T25().__Type__)) {
      result = $T26().Normalize(assetName);
    } else if ($T1B().op_Equality(T, $T27().__Type__)) {
      result = $T28().Normalize(assetName);
    } else if ($T1B().op_Equality(T, $T29().__Type__)) {
      result = $T2A().Normalize(assetName);
    } else {
      result = null;
    }
    return result;
  };

  function ContentManager_OpenStream (assetName, $exception) {
    try {
      var assetPath = $T2C().NormalizeFilePathSeparators(JSIL.ConcatString($T0E().Combine(this.get_RootDirectoryFullPath(), assetName), ".xnb"));
      var stream = $T2D().OpenRead(assetPath);
    } catch ($exception) {
      if ($T2E().$Is($exception)) {
        throw $S09().Construct("The content file was not found.", $exception);
      } else if ($T2F().$Is($exception)) {
        throw $S09().Construct("The directory was not found.", $exception);
      } else {
        throw $S09().Construct("Opening stream error.", $exception);
      }
    }
    return stream;
  };

  function ContentManager_ReadAsset$b1 (T, assetName, recordDisposableObject, $exception) {
    if ($T08().IsNullOrEmpty(assetName)) {
      throw $S04().Construct("assetName");
    }
    if (this.disposed) {
      throw $S08().Construct("ContentManager");
    }
    var originalAssetName = assetName;
    var result = null;
    if (this.graphicsDeviceService === null) {
      this.graphicsDeviceService = $T1A().$As($IM01().Call(this.serviceProvider, null, $T1A().__Type__));
      if (this.graphicsDeviceService === null) {
        throw $S0A().Construct("No Graphics Device Service");
      }
    }
    var stream = new JSIL.BoxedVariable(null);
    try {
      stream.set(this.OpenStream(assetName));
      try {
        var xnbReader = $S0B().Construct(stream.get());
        try {
          var reader = this.GetContentReaderFromXnb(assetName, /* ref */ stream, xnbReader, recordDisposableObject);
          try {
            result = reader.ReadAsset$b1(T)();
            var resource = $T31().$As(result);
            if (resource !== null) {
              resource.GraphicsResource$Name$value = originalAssetName;
            }
          } finally {
            if (reader !== null) {
              $IM02().Call(reader, null);
            }
          }
        } finally {
          if (xnbReader !== null) {
            $IM02().Call(xnbReader, null);
          }
        }
      } finally {
        if (stream.get() !== null) {
          (stream.get()).Dispose();
        }
      }
    } catch ($exception) {
      if ($T14().$Is($exception)) {
        assetName = $T2C().NormalizeFilePathSeparators($T0E().Combine(this.get_RootDirectoryFullPath(), assetName));
        assetName = this.Normalize$b1(T)(assetName);
        if ($T08().IsNullOrEmpty(assetName)) {
          throw $S09().Construct(("Could not load " + originalAssetName + " asset as a non-content file!"), $exception);
        }
        result = this.ReadRawAsset$b1(T)(assetName, originalAssetName);
        var disposableResult = $T32().$As(result);
        if (disposableResult !== null) {
          if (recordDisposableObject !== null) {
            recordDisposableObject(disposableResult);
          } else {
            (this.disposableAssets).Add(disposableResult);
          }
        }
      } else {
        throw $exception;
      }
    }
    if (result === null) {
      throw $S06().Construct(("Could not load " + originalAssetName + " asset!"));
    }
    return T.$Cast(result);
  };

  function ContentManager_ReadRawAsset$b1 (T, assetName, originalAssetName) {
    if (!(!$T1B().op_Equality(T, $T1E().__Type__) && !$T1B().op_Equality(T, $T1F().__Type__))) {
      var assetStream = $T2D().OpenRead(assetName);
      try {
        var texture = $T1E().FromStream($IM00().Call(this.graphicsDeviceService, null), assetStream);
        texture.GraphicsResource$Name$value = originalAssetName;
        var result = texture;
        return result;
      } finally {
        if (assetStream !== null) {
          $IM02().Call(assetStream, null);
        }
      }
    }
    if ($T1B().op_Equality(T, $T21().__Type__)) {
      throw $S0C().Construct();
    }
    if ($T1B().op_Equality(T, $T23().__Type__)) {
      result = $S0D().Construct(assetName);
    } else {
      if ($T1B().op_Equality(T, $T25().__Type__)) {
        var s = $T2D().OpenRead(assetName);
        try {
          result = $T25().FromStream(s);
          return result;
        } finally {
          if (s !== null) {
            $IM02().Call(s, null);
          }
        }
      }
      if ($T1B().op_Equality(T, $T27().__Type__)) {
        result = $S0E().Construct(assetName);
      } else {
        if ($T1B().op_Equality(T, $T29().__Type__)) {
          assetStream = $T2D().OpenRead(assetName);
          try {
            var data = JSIL.Array.New($T13(), assetStream.get_Length());
            assetStream.Read(data, 0, (assetStream.get_Length()).ToNumber(4294967295, true));
            result = $S0F().Construct($IM00().Call(this.graphicsDeviceService, null), data);
            return result;
          } finally {
            if (assetStream !== null) {
              $IM02().Call(assetStream, null);
            }
          }
        }
        result = null;
      }
    }
    return result;
  };

  function ContentManager_RecordDisposable (disposable) {
    $T35().Assert(disposable !== null, "The disposable is null!");
    if (!(this.disposableAssets).Contains(disposable)) {
      (this.disposableAssets).Add(disposable);
    }
  };

  function ContentManager_ReloadAsset$b1 (T, originalAssetName, currentAsset, $exception) {
    var assetName = originalAssetName;
    if ($T08().IsNullOrEmpty(assetName)) {
      throw $S04().Construct("assetName");
    }
    if (this.disposed) {
      throw $S08().Construct("ContentManager");
    }
    if (this.graphicsDeviceService === null) {
      this.graphicsDeviceService = $T1A().$As($IM01().Call(this.serviceProvider, null, $T1A().__Type__));
      if (this.graphicsDeviceService === null) {
        throw $S0A().Construct("No Graphics Device Service");
      }
    }
    var stream = new JSIL.BoxedVariable(null);
    try {
      stream.set(this.OpenStream(assetName));
      try {
        var xnbReader = $S0B().Construct(stream.get());
        try {
          var reader = this.GetContentReaderFromXnb(assetName, /* ref */ stream, xnbReader, null);
          try {
            reader.InitializeTypeReaders();
            $S10().CallVirtual("ReadObject$b1", [T], reader, currentAsset);
            reader.ReadSharedResources();
          } finally {
            if (reader !== null) {
              $IM02().Call(reader, null);
            }
          }
        } finally {
          if (xnbReader !== null) {
            $IM02().Call(xnbReader, null);
          }
        }
      } finally {
        if (stream.get() !== null) {
          (stream.get()).Dispose();
        }
      }
    } catch ($exception) {
      if ($T14().$Is($exception)) {
        assetName = $T2C().NormalizeFilePathSeparators($T0E().Combine(this.get_RootDirectoryFullPath(), assetName));
        assetName = this.Normalize$b1(T)(assetName);
        this.ReloadRawAsset$b1(T)(currentAsset, assetName, originalAssetName);
      } else {
        throw $exception;
      }
    }
  };

  function ContentManager_ReloadGraphicsAssets () {
    var enumerator = $T04().prototype.GetEnumerator.call(this.get_LoadedAssets());

    while ($T36().prototype.MoveNext.call(enumerator)) {
      var asset = $T36().prototype.get_Current.call(enumerator).MemberwiseClone();
      if (asset.get_Key() === null) {
        this.ReloadAsset$b1($T00())(
          asset.get_Key(), 
          $S11().CallStatic($T38(), "ChangeType", null, 
            asset.get_Value(), 
            JSIL.GetType(asset.get_Value())
          )
        );
      }
      var methodInfo = $S12().CallVirtual("GetMethod", null, $thisType.__Type__, "ReloadAsset", $T3A().$Flags("Instance", "NonPublic"));
      var genericMethod = methodInfo.MakeGenericMethod(JSIL.Array.New($T1B(), [JSIL.GetType(asset.get_Value())]));
      genericMethod.Invoke(this, JSIL.Array.New($T00(), [asset.get_Key(), $S11().CallStatic($T38(), "ChangeType", null, 
            asset.get_Value(), 
            JSIL.GetType(asset.get_Value())
          )]));
    }
  };

  function ContentManager_ReloadGraphicsContent () {
    var contentManagerLock = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T0A().Enter(contentManagerLock = $thisType.ContentManagerLock, /* ref */ flag);

      for (var i = ((($thisType.ContentManagers.get_Count() | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
        var contentRef = $thisType.ContentManagers.get_Item(i);
        if (contentRef.get_IsAlive()) {
          var contentManager = $thisType.$Cast(contentRef.get_Target());
          if (contentManager !== null) {
            contentManager.ReloadGraphicsAssets();
          }
        } else {
          $thisType.ContentManagers.RemoveAt(i);
        }
      }
    } finally {
      if (flag.get()) {
        $T0A().Exit(contentManagerLock);
      }
    }
  };

  function ContentManager_ReloadRawAsset$b1 (T, asset, assetName, originalAssetName) {
  };

  function ContentManager_RemoveContentManager (contentManager) {
    var contentManagerLock = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T0A().Enter(contentManagerLock = $thisType.ContentManagerLock, /* ref */ flag);

      for (var i = ((($thisType.ContentManagers.get_Count() | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
        var contentRef = $thisType.ContentManagers.get_Item(i);
        if (!(contentRef.get_IsAlive() && (contentRef.get_Target() !== contentManager))) {
          $thisType.ContentManagers.RemoveAt(i);
        }
      }
    } finally {
      if (flag.get()) {
        $T0A().Exit(contentManagerLock);
      }
    }
  };

  function ContentManager_set_RootDirectory (value) {
    this.ContentManager$RootDirectory$value = value;
  };

  function ContentManager_Unload () {
    var $temp00;

    for (var a$0 = this.disposableAssets._items, i$0 = 0, l$0 = (this.disposableAssets._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var disposable = a$0[i$0];
      if (disposable !== null) {
        $IM02().Call(disposable, null);
      }
    }
    (this.disposableAssets).Clear();
    (this.loadedAssets).Clear();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ContentManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IServiceProvider")), 
      ContentManager__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IServiceProvider"), $.String]), 
      ContentManager__ctor$01
    );

    $.Method({Static:true , Public:false}, "AddContentManager", 
      JSIL.MethodSignature.Action($.Type), 
      ContentManager_AddContentManager
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      ContentManager_Dispose$02
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      ContentManager_Dispose$03
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      ContentManager_Finalize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "get_LoadedAssets", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])), 
      ContentManager_get_LoadedAssets
    );

    $.Method({Static:false, Public:true }, "get_RootDirectory", 
      JSIL.MethodSignature.Return($.String), 
      ContentManager_get_RootDirectory
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_RootDirectoryFullPath", 
      JSIL.MethodSignature.Return($.String), 
      ContentManager_get_RootDirectoryFullPath
    );

    $.Method({Static:false, Public:true }, "get_ServiceProvider", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IServiceProvider")), 
      ContentManager_get_ServiceProvider
    );

    $.Method({Static:false, Public:false}, "GetContentReaderFromXnb", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.IO.Stream")]), 
          $asm01.TypeRef("System.IO.BinaryReader"), $asm01.TypeRef("System.Action`1", [$asm01.TypeRef("System.IDisposable")])
        ]), 
      ContentManager_GetContentReaderFromXnb
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Load", 
      new JSIL.MethodSignature("!!0", [$.String], ["T"]), 
      ContentManager_Load$b1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Normalize", 
      new JSIL.MethodSignature($.String, [$.String], ["T"]), 
      ContentManager_Normalize$b1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OpenStream", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String]), 
      ContentManager_OpenStream
    );

    $.Method({Static:false, Public:false}, "ReadAsset", 
      new JSIL.MethodSignature("!!0", [$.String, $asm01.TypeRef("System.Action`1", [$asm01.TypeRef("System.IDisposable")])], ["T"]), 
      ContentManager_ReadAsset$b1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ReadRawAsset", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], ["T"]), 
      ContentManager_ReadRawAsset$b1
    );

    $.Method({Static:false, Public:false}, "RecordDisposable", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IDisposable")), 
      ContentManager_RecordDisposable
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ReloadAsset", 
      new JSIL.MethodSignature(null, [$.String, "!!0"], ["T"]), 
      ContentManager_ReloadAsset$b1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ReloadGraphicsAssets", 
      JSIL.MethodSignature.Void, 
      ContentManager_ReloadGraphicsAssets
    );

    $.Method({Static:true , Public:false}, "ReloadGraphicsContent", 
      JSIL.MethodSignature.Void, 
      ContentManager_ReloadGraphicsContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ReloadRawAsset", 
      new JSIL.MethodSignature(null, [
          "!!0", $.String, 
          $.String
        ], ["T"]), 
      ContentManager_ReloadRawAsset$b1
    );

    $.Method({Static:true , Public:false}, "RemoveContentManager", 
      JSIL.MethodSignature.Action($.Type), 
      ContentManager_RemoveContentManager
    );

    $.Method({Static:false, Public:true }, "set_RootDirectory", 
      JSIL.MethodSignature.Action($.String), 
      ContentManager_set_RootDirectory
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "Unload", 
      JSIL.MethodSignature.Void, 
      ContentManager_Unload
    );

    $.Field({Static:false, Public:false}, "serviceProvider", $asm01.TypeRef("System.IServiceProvider")); 
    $.Field({Static:false, Public:false}, "graphicsDeviceService", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService")); 
    $.Field({Static:false, Public:false}, "loadedAssets", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])); 
    $.Field({Static:false, Public:false}, "disposableAssets", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.IDisposable")])); 
    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.Field({Static:true , Public:false}, "ContentManagerLock", $.Object); 
    $.Field({Static:true , Public:false}, "ContentManagers", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.WeakReference")])); 
    $.Field({Static:true , Public:false}, "targetPlatformIdentifiers", $asm01.TypeRef("System.Collections.Generic.List`1", [$.Char])); 
    $.Field({Static:false, Public:false}, "ContentManager$RootDirectory$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function ContentManager__cctor () {
      $thisType.ContentManagerLock = new ($T00())();
      $thisType.ContentManagers = $S00().Construct();
      var list = $S01().Construct();
      list.Add("w");
      list.Add("x");
      list.Add("m");
      list.Add("i");
      list.Add("a");
      list.Add("l");
      list.Add("X");
      list.Add("W");
      list.Add("n");
      list.Add("u");
      list.Add("p");
      list.Add("M");
      list.Add("r");
      list.Add("P");
      list.Add("g");
      $thisType.targetPlatformIdentifiers = list;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ContentManager__cctor
    );

    $.Property({Static:false, Public:true }, "ServiceProvider", $asm01.TypeRef("System.IServiceProvider"));

    $.Property({Static:false, Public:true }, "RootDirectory", $.String);

    $.Property({Static:false, Public:false}, "RootDirectoryFullPath", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "LoadedAssets", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.LzxDecoder */ 

(function LzxDecoder$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.UnsupportedWindowSizeRange)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.LzxDecoder_LzxState)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.LzxConstants_BLOCKTYPE)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.LzxDecoder_BitBuffer)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.IO.SeekOrigin)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm01.System.UInt16))) ();
  };

  function LzxDecoder__ctor (window) {
    var wndsize = 1 << (window | 0);
    if (!(((window | 0) >= 15) && ((window | 0) <= 21))) {
      throw new ($T02())();
    }
    this.m_state = new ($T03())();
    this.m_state.actual_size = 0;
    this.m_state.window = JSIL.Array.New($T04(), wndsize);

    for (var i = 0; $T05().op_LessThan(
        $T05().FromNumber(i), 
        ($T06().FromNumber(wndsize)).ToInt64()
      ); i = ((i + 1) | 0)) {
      this.m_state.window[i] = 220;
    }
    this.m_state.actual_size = wndsize;
    this.m_state.window_size = wndsize;
    this.m_state.window_posn = 0;
    if ($thisType.extra_bits === null) {
      $thisType.extra_bits = JSIL.Array.New($T04(), 52);
      i = 0;
      var j = 0;

      while (i <= 50) {
        $thisType.extra_bits[i] = $thisType.extra_bits[((i + 1) | 0)] = (j & 0xFF);
        if (!((i === 0) || (j >= 17))) {
          j = ((j + 1) | 0);
        }
        i = ((i + 2) | 0);
      }
    }
    if ($thisType.position_base === null) {
      $thisType.position_base = JSIL.Array.New($T01(), 51);
      i = 0;
      j = 0;

      while (i <= 50) {
        $thisType.position_base[i] = (j >>> 0);
        j = ((j + (1 << ($thisType.extra_bits[i] | 0))) | 0);
        i = ((i + 1) | 0);
      }
    }
    if ((window | 0) === 20) {
      var posn_slots = 42;
    } else if ((window | 0) === 21) {
      posn_slots = 50;
    } else {
      posn_slots = (window | 0) << 1;
    }
    this.m_state.R0 = this.m_state.R1 = this.m_state.R2 = 1;
    this.m_state.main_elements = (((256 + (posn_slots << 3)) | 0) & 0xFFFF);
    this.m_state.header_read = 0;
    this.m_state.frames_read = 0;
    this.m_state.block_remaining = 0;
    this.m_state.block_type = $T08().INVALID;
    this.m_state.intel_curpos = 0;
    this.m_state.intel_started = 0;
    this.m_state.PRETREE_table = JSIL.Array.New($T07(), 104);
    this.m_state.PRETREE_len = JSIL.Array.New($T04(), 84);
    this.m_state.MAINTREE_table = JSIL.Array.New($T07(), 5408);
    this.m_state.MAINTREE_len = JSIL.Array.New($T04(), 720);
    this.m_state.LENGTH_table = JSIL.Array.New($T07(), 4596);
    this.m_state.LENGTH_len = JSIL.Array.New($T04(), 314);
    this.m_state.ALIGNED_table = JSIL.Array.New($T07(), 144);
    this.m_state.ALIGNED_len = JSIL.Array.New($T04(), 72);

    for (i = 0; i < 656; i = ((i + 1) | 0)) {
      this.m_state.MAINTREE_len[i] = 0;
    }

    for (i = 0; i < 250; i = ((i + 1) | 0)) {
      this.m_state.LENGTH_len[i] = 0;
    }
  };

  function LzxDecoder_Decompress (inData, inLen, outData, outLen) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07, $temp08, $temp09, $temp0A, $temp0B, $temp0C, $temp0D;
    var this_run = 0, frames_read = 0;
    var bitbuf = new ($T0A())(inData);
    var startpos = inData.get_Position();
    var endpos = $T05().op_Addition(
      inData.get_Position(), 
      $T05().FromNumber(inLen)
    );
    var window = this.m_state.window;
    var window_posn = (this.m_state.window_posn >>> 0);
    var window_size = (this.m_state.window_size >>> 0);
    var R0 = (this.m_state.R0 >>> 0);
    var R = (this.m_state.R1 >>> 0);
    var R2 = (this.m_state.R2 >>> 0);
    var togo = (outLen | 0);
    bitbuf.InitBitStream();
    if ((this.m_state.header_read | 0) === 0) {
      var intel = (bitbuf.ReadBits(1) >>> 0);
      if (intel !== 0) {
        var i = (bitbuf.ReadBits(16) >>> 0);
        var j = (bitbuf.ReadBits(16) >>> 0);
        this.m_state.intel_filesize = ((i << 16) | j | 0);
      }
      this.m_state.header_read = 1;
    }

    while (togo > 0) {

      var $label1 = 0;
    $labelgroup1: 
      while (true) {
        switch ($label1) {
          case 0: /* $entry1 */ 
            if ((this.m_state.block_remaining >>> 0) === 0) {

              var $label0 = 0;
            $labelgroup0: 
              while (true) {
                switch ($label0) {
                  case 0: /* $entry0 */ 
                    if (this.m_state.block_type === $T08().UNCOMPRESSED) {
                      if (((this.m_state.block_length >>> 0) & 1) === 1) {
                        inData.ReadByte();
                      }
                      bitbuf.InitBitStream();
                    }
                    this.m_state.block_type = $T08().$Cast(bitbuf.ReadBits(3));
                    i = (bitbuf.ReadBits(16) >>> 0);
                    j = (bitbuf.ReadBits(8) >>> 0);
                    this.m_state.block_remaining = this.m_state.block_length = (i << 8) | j;
                    switch ((this.m_state.block_type).valueOf()) {
                      case 1: 
                        $label0 = 1 /* goto IL_1F9 */ ;
                        continue $labelgroup0;

                      case 2: 

                        for (i = 0; i < 8; i = ((i + 1) >>> 0)) {
                          j = (bitbuf.ReadBits(3) >>> 0);
                          this.m_state.ALIGNED_len[i] = (j & 0xFF);
                        }
                        this.MakeDecodeTable(8, 7, this.m_state.ALIGNED_len, this.m_state.ALIGNED_table);
                        $label0 = 1 /* goto IL_1F9 */ ;
                        continue $labelgroup0;

                      case 3: 
                        this.m_state.intel_started = 1;
                        bitbuf.EnsureBits(16);
                        if ((bitbuf.GetBitsLeft() | 0) > 16) {
                          inData.Seek($T05().Create(16777214, 16777215, 65535), $T0C().Current);
                        }
                        var lo = (inData.ReadByte() & 0xFF);
                        var ml = (inData.ReadByte() & 0xFF);
                        var mh = (inData.ReadByte() & 0xFF);
                        var hi = (inData.ReadByte() & 0xFF);
                        R0 = (((lo | (ml << 8)) | (mh << 16)) | (hi << 24) >>> 0);
                        lo = (inData.ReadByte() & 0xFF);
                        ml = (inData.ReadByte() & 0xFF);
                        mh = (inData.ReadByte() & 0xFF);
                        hi = (inData.ReadByte() & 0xFF);
                        R = (((lo | (ml << 8)) | (mh << 16)) | (hi << 24) >>> 0);
                        lo = (inData.ReadByte() & 0xFF);
                        ml = (inData.ReadByte() & 0xFF);
                        mh = (inData.ReadByte() & 0xFF);
                        hi = (inData.ReadByte() & 0xFF);
                        R2 = (((lo | (ml << 8)) | (mh << 16)) | (hi << 24) >>> 0);
                        break;

                      default: 
                        var result = -1;
                        return result;

                    }
                    $label1 = 1 /* goto IL_3AA */ ;
                    continue $labelgroup1;

                  case 1: /* IL_1F9 */ 
                    this.ReadLengths(this.m_state.MAINTREE_len, 0, 256, bitbuf);
                    this.ReadLengths(this.m_state.MAINTREE_len, 256, this.m_state.main_elements, bitbuf);
                    this.MakeDecodeTable(656, 12, this.m_state.MAINTREE_len, this.m_state.MAINTREE_table);
                    if ((this.m_state.MAINTREE_len[232] | 0) !== 0) {
                      this.m_state.intel_started = 1;
                    }
                    this.ReadLengths(this.m_state.LENGTH_len, 0, 249, bitbuf);
                    this.MakeDecodeTable(250, 12, this.m_state.LENGTH_len, this.m_state.LENGTH_table);
                    break $labelgroup0;

                }
              }
            }

            $label1 = 1 /* goto IL_3AA */ ;
            continue $labelgroup1;
          case 1: /* IL_3AA */ 
            if (!$T05().op_LessThanOrEqual(
                inData.get_Position(), 
                $T05().op_Addition(startpos, $T05().FromNumber(inLen))
              )) {
              if (!($T05().op_LessThanOrEqual(
                    inData.get_Position(), 
                    $T05().op_Addition(
                      $T05().op_Addition(startpos, $T05().FromNumber(inLen)), 
                      $T05().Create(2, 0, 0)
                    )
                  ) && (((bitbuf.GetBitsLeft() | 0) >= 16).valueOf() | 0))) {
                result = -1;
                return result;
              }
            }

            while (((this_run = (this.m_state.block_remaining | 0)) > 0) && (togo > 0)) {
              if (this_run > togo) {
                this_run = togo;
              }
              togo = ((togo - this_run) | 0);
              this.m_state.block_remaining = (((this.m_state.block_remaining >>> 0) - (this_run >>> 0)) >>> 0);
              window_posn = window_posn & ((window_size - 1) >>> 0);
              if (!$T06().op_LessThanOrEqual(
                  $T06().op_Addition(
                    $T06().FromNumber(window_posn), 
                    ($T05().FromNumber(this_run)).ToUInt64()
                  ), 
                  $T06().FromNumber(window_size)
                )) {
                result = -1;
                return result;
              }
              switch ((this.m_state.block_type).valueOf()) {
                case 1: 

                  while (this_run > 0) {
                    var main_element = (this.ReadHuffSym(
                      this.m_state.MAINTREE_table, 
                      this.m_state.MAINTREE_len, 
                      656, 
                      12, 
                      bitbuf
                    ) | 0);
                    if (main_element < 256) {
                      window[($temp00 = window_posn, 
                        window_posn = ((window_posn + 1) >>> 0), 
                        $temp00)] = (main_element & 0xFF);
                      this_run = ((this_run - 1) | 0);
                    } else {
                      main_element = ((main_element - 256) | 0);
                      var match_length = main_element & 7;
                      if (match_length === 7) {
                        var length_footer = (this.ReadHuffSym(
                          this.m_state.LENGTH_table, 
                          this.m_state.LENGTH_len, 
                          250, 
                          12, 
                          bitbuf
                        ) | 0);
                        match_length = ((match_length + length_footer) | 0);
                      }
                      match_length = ((match_length + 2) | 0);
                      var match_offset = main_element >> 3;
                      if (match_offset > 2) {
                        if (match_offset !== 3) {
                          var extra = ($thisType.extra_bits[match_offset] | 0);
                          var verbatim_bits = (bitbuf.ReadBits((extra & 0xFF)) | 0);
                          match_offset = (((((($thisType.position_base[match_offset] >>> 0) - 2) >>> 0) + (verbatim_bits >>> 0)) >>> 0) | 0);
                        } else {
                          match_offset = 1;
                        }
                        R2 = R;
                        R = R0;
                        R0 = (match_offset >>> 0);
                      } else if (match_offset === 0) {
                        match_offset = (R0 | 0);
                      } else if (match_offset === 1) {
                        match_offset = (R | 0);
                        R = R0;
                        R0 = (match_offset >>> 0);
                      } else {
                        match_offset = (R2 | 0);
                        R2 = R0;
                        R0 = (match_offset >>> 0);
                      }
                      var rundest = (window_posn | 0);
                      this_run = ((this_run - match_length) | 0);
                      if (!$T06().op_LessThan(
                          $T06().FromNumber(window_posn), 
                          ($T05().FromNumber(match_offset)).ToUInt64()
                        )) {
                        var runsrc = ((rundest - match_offset) | 0);
                      } else {
                        runsrc = ((rundest + (((window_size - (match_offset >>> 0)) >>> 0) | 0)) | 0);
                        var copy_length = ((match_offset - (window_posn | 0)) | 0);
                        if (copy_length < match_length) {
                          match_length = ((match_length - copy_length) | 0);
                          window_posn = ((window_posn + (copy_length >>> 0)) >>> 0);

                          while ((($temp01 = copy_length, 
                              copy_length = ((copy_length - 1) | 0), 
                              $temp01) | 0) > 0) {
                            window[($temp02 = rundest, 
                              rundest = ((rundest + 1) | 0), 
                              $temp02)] = (window[($temp03 = runsrc, 
                              runsrc = ((runsrc + 1) | 0), 
                              $temp03)] | 0);
                          }
                          runsrc = 0;
                        }
                      }
                      window_posn = ((window_posn + (match_length >>> 0)) >>> 0);

                      while ((($temp04 = match_length, 
                          match_length = ((match_length - 1) | 0), 
                          $temp04) | 0) > 0) {
                        window[($temp05 = rundest, 
                          rundest = ((rundest + 1) | 0), 
                          $temp05)] = (window[($temp06 = runsrc, 
                          runsrc = ((runsrc + 1) | 0), 
                          $temp06)] | 0);
                      }
                    }
                  }
                  break;

                case 2: 

                  while (this_run > 0) {
                    main_element = (this.ReadHuffSym(
                      this.m_state.MAINTREE_table, 
                      this.m_state.MAINTREE_len, 
                      656, 
                      12, 
                      bitbuf
                    ) | 0);
                    if (main_element < 256) {
                      window[($temp07 = window_posn, 
                        window_posn = ((window_posn + 1) >>> 0), 
                        $temp07)] = (main_element & 0xFF);
                      this_run = ((this_run - 1) | 0);
                    } else {
                      main_element = ((main_element - 256) | 0);
                      match_length = main_element & 7;
                      if (match_length === 7) {
                        length_footer = (this.ReadHuffSym(
                          this.m_state.LENGTH_table, 
                          this.m_state.LENGTH_len, 
                          250, 
                          12, 
                          bitbuf
                        ) | 0);
                        match_length = ((match_length + length_footer) | 0);
                      }
                      match_length = ((match_length + 2) | 0);
                      match_offset = main_element >> 3;
                      if (match_offset > 2) {
                        extra = ($thisType.extra_bits[match_offset] | 0);
                        match_offset = (((($thisType.position_base[match_offset] >>> 0) - 2) >>> 0) | 0);
                        if (extra > 3) {
                          extra = ((extra - 3) | 0);
                          verbatim_bits = (bitbuf.ReadBits((extra & 0xFF)) | 0);
                          match_offset = ((match_offset + (verbatim_bits << 3)) | 0);
                          var aligned_bits = (this.ReadHuffSym(
                            this.m_state.ALIGNED_table, 
                            this.m_state.ALIGNED_len, 
                            8, 
                            7, 
                            bitbuf
                          ) | 0);
                          match_offset = ((match_offset + aligned_bits) | 0);
                        } else if (extra === 3) {
                          aligned_bits = (this.ReadHuffSym(
                            this.m_state.ALIGNED_table, 
                            this.m_state.ALIGNED_len, 
                            8, 
                            7, 
                            bitbuf
                          ) | 0);
                          match_offset = ((match_offset + aligned_bits) | 0);
                        } else if (extra > 0) {
                          verbatim_bits = (bitbuf.ReadBits((extra & 0xFF)) | 0);
                          match_offset = ((match_offset + verbatim_bits) | 0);
                        } else {
                          match_offset = 1;
                        }
                        R2 = R;
                        R = R0;
                        R0 = (match_offset >>> 0);
                      } else if (match_offset === 0) {
                        match_offset = (R0 | 0);
                      } else if (match_offset === 1) {
                        match_offset = (R | 0);
                        R = R0;
                        R0 = (match_offset >>> 0);
                      } else {
                        match_offset = (R2 | 0);
                        R2 = R0;
                        R0 = (match_offset >>> 0);
                      }
                      rundest = (window_posn | 0);
                      this_run = ((this_run - match_length) | 0);
                      if (!$T06().op_LessThan(
                          $T06().FromNumber(window_posn), 
                          ($T05().FromNumber(match_offset)).ToUInt64()
                        )) {
                        runsrc = ((rundest - match_offset) | 0);
                      } else {
                        runsrc = ((rundest + (((window_size - (match_offset >>> 0)) >>> 0) | 0)) | 0);
                        copy_length = ((match_offset - (window_posn | 0)) | 0);
                        if (copy_length < match_length) {
                          match_length = ((match_length - copy_length) | 0);
                          window_posn = ((window_posn + (copy_length >>> 0)) >>> 0);

                          while ((($temp08 = copy_length, 
                              copy_length = ((copy_length - 1) | 0), 
                              $temp08) | 0) > 0) {
                            window[($temp09 = rundest, 
                              rundest = ((rundest + 1) | 0), 
                              $temp09)] = (window[($temp0A = runsrc, 
                              runsrc = ((runsrc + 1) | 0), 
                              $temp0A)] | 0);
                          }
                          runsrc = 0;
                        }
                      }
                      window_posn = ((window_posn + (match_length >>> 0)) >>> 0);

                      while ((($temp0B = match_length, 
                          match_length = ((match_length - 1) | 0), 
                          $temp0B) | 0) > 0) {
                        window[($temp0C = rundest, 
                          rundest = ((rundest + 1) | 0), 
                          $temp0C)] = (window[($temp0D = runsrc, 
                          runsrc = ((runsrc + 1) | 0), 
                          $temp0D)] | 0);
                      }
                    }
                  }
                  break;

                case 3: 
                  if (!$T05().op_LessThanOrEqual($T05().op_Addition(
                        inData.get_Position(), 
                        $T05().FromNumber(this_run)
                      ), endpos)) {
                    result = -1;
                    return result;
                  }
                  var temp_buffer = JSIL.Array.New($T04(), this_run);
                  inData.Read(temp_buffer, 0, this_run);
                  JSIL.Array.CopyTo(temp_buffer, window, (window_posn | 0));
                  window_posn = ((window_posn + (this_run >>> 0)) >>> 0);
                  break;

                default: 
                  result = -1;
                  return result;

              }
            }

            break $labelgroup1;
        }
      }
    }
    if (togo !== 0) {
      result = -1;
      return result;
    }
    var start_window_pos = (window_posn | 0);
    if (start_window_pos === 0) {
      start_window_pos = (window_size | 0);
    }
    start_window_pos = ((start_window_pos - (outLen | 0)) | 0);
    outData.Write(window, start_window_pos, outLen);
    this.m_state.window_posn = window_posn;
    this.m_state.R0 = R0;
    this.m_state.R1 = R;
    this.m_state.R2 = R2;
    this.m_state.frames_read = (((frames_read = (this.m_state.frames_read >>> 0)) + 1) >>> 0);
    if (!((frames_read >= 32768) || ((this.m_state.intel_filesize | 0) === 0))) {
      if (!(((outLen | 0) > 6) && ((this.m_state.intel_started | 0) !== 0))) {
        this.m_state.intel_curpos = (((this.m_state.intel_curpos | 0) + (outLen | 0)) | 0);
      } else {
        var dataend = (((outLen | 0) - 10) | 0);
        var curpos = (this.m_state.intel_curpos >>> 0);
        this.m_state.intel_curpos = (((curpos + (outLen >>> 0)) >>> 0) | 0);

        while ($T05().op_LessThan(
            outData.get_Position(), 
            $T05().FromNumber(dataend)
          )) {
          if ((outData.ReadByte() | 0) !== 232) {
            curpos = ((curpos + 1) >>> 0);
          }
        }
      }
      result = -1;
      return result;
    }
    result = 0;
    return result;
  };

  function LzxDecoder_MakeDecodeTable (nsyms, nbits, length, table) {
    var $temp00, $temp01, $temp02;
    var bit_num = 1;
    var pos = 0;
    var table_mask = 1 << (nbits | 0);
    var bit_mask = table_mask >>> 1;
    var next_symbol = bit_mask;

    while (bit_num <= (nbits >>> 0)) {

      for (var sym = 0; sym < (nsyms >>> 0); sym = (((sym + 1) >>> 0) & 0xFFFF)) {
        if ((length[sym] | 0) === bit_num) {
          var leaf = pos;
          if (((pos = ((pos + bit_mask) >>> 0), 
              pos) >>> 0) > table_mask) {
            var result = 1;
            return result;
          }

          for (var fill = bit_mask; (($temp00 = fill, 
              fill = ((fill - 1) >>> 0), 
              $temp00) >>> 0) > 0; ) {
            table[($temp01 = leaf, 
              leaf = ((leaf + 1) >>> 0), 
              $temp01)] = sym;
          }
        }
      }
      bit_mask = bit_mask >>> 1;
      bit_num = (((bit_num + 1) | 0) & 0xFF);
    }
    if (pos !== table_mask) {

      for (sym = (pos & 0xFFFF); sym < table_mask; sym = (((sym + 1) >>> 0) & 0xFFFF)) {
        table[sym] = 0;
      }
      pos = pos << 16;
      table_mask = table_mask << 16;
      bit_mask = 32768;

      while (bit_num <= 16) {

        for (sym = 0; sym < (nsyms >>> 0); sym = (((sym + 1) >>> 0) & 0xFFFF)) {
          if ((length[sym] | 0) === bit_num) {
            leaf = pos >>> 16;

            for (fill = 0; fill < ((bit_num - (nbits >>> 0)) >>> 0); fill = ((fill + 1) >>> 0)) {
              if ((table[leaf] | 0) === 0) {
                table[(next_symbol << 1)] = 0;
                table[(((next_symbol << 1) + 1) >>> 0)] = 0;
                table[leaf] = (($temp02 = next_symbol, 
                  next_symbol = ((next_symbol + 1) >>> 0), 
                  $temp02) & 0xFFFF);
              }
              leaf = ((table[leaf] | 0) << 1 >>> 0);
              if (((pos >>> (((15 - fill) >>> 0) | 0)) & 1) === 1) {
                leaf = ((leaf + 1) >>> 0);
              }
            }
            table[leaf] = sym;
            if (((pos = ((pos + bit_mask) >>> 0), 
                pos) >>> 0) > table_mask) {
              result = 1;
              return result;
            }
          }
        }
        bit_mask = bit_mask >>> 1;
        bit_num = (((bit_num + 1) | 0) & 0xFF);
      }
    }
    if (pos === table_mask) {
      result = 0;
      return result;
    }

    for (sym = 0; sym < (nsyms >>> 0); sym = (((sym + 1) >>> 0) & 0xFFFF)) {
      if ((length[sym] | 0) !== 0) {
        result = 1;
        return result;
      }
    }
    result = 0;
    return result;
  };

  function LzxDecoder_ReadHuffSym (table, lengths, nsyms, nbits, bitbuf) {
    var i = 0;

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          bitbuf.EnsureBits(16);
          if ((i = (table[bitbuf.PeekBits((nbits & 0xFF))] | 0)) >= (nsyms >>> 0)) {
            var j = 1 << (((32 - (nbits >>> 0)) >>> 0) | 0);

          $loop0: 
            while (true) {
              j = j >>> 1;
              i = i << 1;
              i = i | ((
                (((bitbuf.GetBuffer() >>> 0) & j) !== 0)
                   ? 1
                   : 0)
               >>> 0);
              if (j === 0) {
                break $loop0;
              }
              if ((i = (table[i] | 0)) < (nsyms >>> 0)) {
                $label0 = 1 /* goto IL_6A */ ;
                continue $labelgroup0;
              }
            }
            var result = 0;
            return result;
          }

          $label0 = 1 /* goto IL_6A */ ;
          continue $labelgroup0;
        case 1: /* IL_6A */ 
          j = (lengths[i] | 0);
          bitbuf.RemoveBits((j & 0xFF));
          result = i;
          return result;

          break $labelgroup0;
      }
    }
  };

  function LzxDecoder_ReadLengths (lens, first, last, bitbuf) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06;

    for (var x = 0; x < 20; x = ((x + 1) >>> 0)) {
      var y = (bitbuf.ReadBits(4) >>> 0);
      this.m_state.PRETREE_len[x] = (y & 0xFF);
    }
    this.MakeDecodeTable(20, 6, this.m_state.PRETREE_len, this.m_state.PRETREE_table);

    for (x = (first >>> 0); x < (last >>> 0); ) {
      var z = (this.ReadHuffSym(
        this.m_state.PRETREE_table, 
        this.m_state.PRETREE_len, 
        20, 
        6, 
        bitbuf
      ) | 0);
      if (z === 17) {
        y = (bitbuf.ReadBits(4) >>> 0);

        for (y = ((y + 4) >>> 0); (($temp00 = y, 
            y = ((y - 1) >>> 0), 
            $temp00) >>> 0) !== 0; ) {
          lens[($temp01 = x, 
            x = ((x + 1) >>> 0), 
            $temp01)] = 0;
        }
      } else if (z === 18) {
        y = (bitbuf.ReadBits(5) >>> 0);

        for (y = ((y + 20) >>> 0); (($temp02 = y, 
            y = ((y - 1) >>> 0), 
            $temp02) >>> 0) !== 0; ) {
          lens[($temp03 = x, 
            x = ((x + 1) >>> 0), 
            $temp03)] = 0;
        }
      } else if (z === 19) {
        y = (bitbuf.ReadBits(1) >>> 0);
        y = ((y + 4) >>> 0);
        z = (this.ReadHuffSym(
          this.m_state.PRETREE_table, 
          this.m_state.PRETREE_len, 
          20, 
          6, 
          bitbuf
        ) | 0);
        z = (((lens[x] | 0) - z) | 0);
        if (z < 0) {
          z = ((z + 17) | 0);
        }

        while ((($temp04 = y, 
            y = ((y - 1) >>> 0), 
            $temp04) >>> 0) !== 0) {
          lens[($temp05 = x, 
            x = ((x + 1) >>> 0), 
            $temp05)] = (z & 0xFF);
        }
      } else {
        z = (((lens[x] | 0) - z) | 0);
        if (z < 0) {
          z = ((z + 17) | 0);
        }
        lens[($temp06 = x, 
          x = ((x + 1) >>> 0), 
          $temp06)] = (z & 0xFF);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.LzxDecoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      LzxDecoder__ctor
    );

    $.Method({Static:false, Public:true }, "Decompress", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IO.Stream"), $.Int32, 
          $asm01.TypeRef("System.IO.Stream"), $.Int32
        ]), 
      LzxDecoder_Decompress
    );

    $.Method({Static:false, Public:false}, "MakeDecodeTable", 
      new JSIL.MethodSignature($.Int32, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.UInt16])
        ]), 
      LzxDecoder_MakeDecodeTable
    );

    $.Method({Static:false, Public:false}, "ReadHuffSym", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("System.Array", [$.UInt16]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $.UInt32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Content.LzxDecoder+BitBuffer")
        ]), 
      LzxDecoder_ReadHuffSym
    );

    $.Method({Static:false, Public:false}, "ReadLengths", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32, 
          $.UInt32, $asm00.TypeRef("Microsoft.Xna.Framework.Content.LzxDecoder+BitBuffer")
        ]), 
      LzxDecoder_ReadLengths
    );

    $.Field({Static:true , Public:true }, "position_base", $jsilcore.TypeRef("System.Array", [$.UInt32]), null); 
    $.Field({Static:true , Public:true }, "extra_bits", $jsilcore.TypeRef("System.Array", [$.Byte]), null); 
    $.Field({Static:false, Public:false}, "m_state", $asm00.TypeRef("Microsoft.Xna.Framework.Content.LzxDecoder+LzxState")); 
    function LzxDecoder__cctor () {
      $thisType.position_base = null;
      $thisType.extra_bits = null;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      LzxDecoder__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.LzxDecoder+BitBuffer */ 

(function BitBuffer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function BitBuffer__ctor (stream) {
    this.byteStream = stream;
    this.InitBitStream();
  };

  function BitBuffer_EnsureBits (bits) {

    while ((this.bitsleft | 0) < (bits | 0)) {
      var lo = ((this.byteStream).ReadByte() & 0xFF);
      var hi = ((this.byteStream).ReadByte() & 0xFF);
      this.buffer = (this.buffer >>> 0) | (((hi << 8) | lo >>> 0) << ((16 - (this.bitsleft | 0)) & 0xFF) >>> 0);
      this.bitsleft = ((((this.bitsleft | 0) + 16) | 0) & 0xFF);
    }
  };

  function BitBuffer_GetBitsLeft () {
    return this.bitsleft;
  };

  function BitBuffer_GetBuffer () {
    return this.buffer;
  };

  function BitBuffer_InitBitStream () {
    this.buffer = 0;
    this.bitsleft = 0;
  };

  function BitBuffer_PeekBits (bits) {
    return ((this.buffer >>> 0) >>> ((32 - (bits | 0)) & 0xFF));
  };

  function BitBuffer_ReadBits (bits) {
    var ret = 0;
    if ((bits | 0) > 0) {
      this.EnsureBits(bits);
      ret = (this.PeekBits(bits) >>> 0);
      this.RemoveBits(bits);
    }
    return ret;
  };

  function BitBuffer_RemoveBits (bits) {
    this.buffer = (this.buffer >>> 0) << (bits | 0);
    this.bitsleft = (((this.bitsleft | 0) - (bits | 0)) & 0xFF);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.LzxDecoder+BitBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IO.Stream")), 
      BitBuffer__ctor
    );

    $.Method({Static:false, Public:true }, "EnsureBits", 
      JSIL.MethodSignature.Action($.Byte), 
      BitBuffer_EnsureBits
    );

    $.Method({Static:false, Public:true }, "GetBitsLeft", 
      JSIL.MethodSignature.Return($.Byte), 
      BitBuffer_GetBitsLeft
    );

    $.Method({Static:false, Public:true }, "GetBuffer", 
      JSIL.MethodSignature.Return($.UInt32), 
      BitBuffer_GetBuffer
    );

    $.Method({Static:false, Public:true }, "InitBitStream", 
      JSIL.MethodSignature.Void, 
      BitBuffer_InitBitStream
    );

    $.Method({Static:false, Public:true }, "PeekBits", 
      new JSIL.MethodSignature($.UInt32, [$.Byte]), 
      BitBuffer_PeekBits
    );

    $.Method({Static:false, Public:true }, "ReadBits", 
      new JSIL.MethodSignature($.UInt32, [$.Byte]), 
      BitBuffer_ReadBits
    );

    $.Method({Static:false, Public:true }, "RemoveBits", 
      JSIL.MethodSignature.Action($.Byte), 
      BitBuffer_RemoveBits
    );

    $.Field({Static:false, Public:false}, "buffer", $.UInt32); 
    $.Field({Static:false, Public:false}, "bitsleft", $.Byte); 
    $.Field({Static:false, Public:false}, "byteStream", $asm01.TypeRef("System.IO.Stream")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Content.LzxDecoder+LzxState */ 

(function LzxState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Content.LzxDecoder+LzxState", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "R0", $.UInt32); 
    $.Field({Static:false, Public:true }, "R1", $.UInt32); 
    $.Field({Static:false, Public:true }, "R2", $.UInt32); 
    $.Field({Static:false, Public:true }, "main_elements", $.UInt16); 
    $.Field({Static:false, Public:true }, "header_read", $.Int32); 
    $.Field({Static:false, Public:true }, "block_type", $asm00.TypeRef("Microsoft.Xna.Framework.Content.LzxConstants+BLOCKTYPE")); 
    $.Field({Static:false, Public:true }, "block_length", $.UInt32); 
    $.Field({Static:false, Public:true }, "block_remaining", $.UInt32); 
    $.Field({Static:false, Public:true }, "frames_read", $.UInt32); 
    $.Field({Static:false, Public:true }, "intel_filesize", $.Int32); 
    $.Field({Static:false, Public:true }, "intel_curpos", $.Int32); 
    $.Field({Static:false, Public:true }, "intel_started", $.Int32); 
    $.Field({Static:false, Public:true }, "PRETREE_table", $jsilcore.TypeRef("System.Array", [$.UInt16])); 
    $.Field({Static:false, Public:true }, "PRETREE_len", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:true }, "MAINTREE_table", $jsilcore.TypeRef("System.Array", [$.UInt16])); 
    $.Field({Static:false, Public:true }, "MAINTREE_len", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:true }, "LENGTH_table", $jsilcore.TypeRef("System.Array", [$.UInt16])); 
    $.Field({Static:false, Public:true }, "LENGTH_len", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:true }, "ALIGNED_table", $jsilcore.TypeRef("System.Array", [$.UInt16])); 
    $.Field({Static:false, Public:true }, "ALIGNED_len", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:true }, "actual_size", $.UInt32); 
    $.Field({Static:false, Public:true }, "window", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:true }, "window_size", $.UInt32); 
    $.Field({Static:false, Public:true }, "window_posn", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Content.LzxConstants */ 

(function LzxConstants$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Content.LzxConstants", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "MIN_MATCH", 2); 
    $.Constant({Static:true , Public:true }, "MAX_MATCH", 257); 
    $.Constant({Static:true , Public:true }, "NUM_CHARS", 256); 
    $.Constant({Static:true , Public:true }, "PRETREE_NUM_ELEMENTS", 20); 
    $.Constant({Static:true , Public:true }, "ALIGNED_NUM_ELEMENTS", 8); 
    $.Constant({Static:true , Public:true }, "NUM_PRIMARY_LENGTHS", 7); 
    $.Constant({Static:true , Public:true }, "NUM_SECONDARY_LENGTHS", 249); 
    $.Constant({Static:true , Public:true }, "PRETREE_MAXSYMBOLS", 20); 
    $.Constant({Static:true , Public:true }, "PRETREE_TABLEBITS", 6); 
    $.Constant({Static:true , Public:true }, "MAINTREE_MAXSYMBOLS", 656); 
    $.Constant({Static:true , Public:true }, "MAINTREE_TABLEBITS", 12); 
    $.Constant({Static:true , Public:true }, "LENGTH_MAXSYMBOLS", 250); 
    $.Constant({Static:true , Public:true }, "LENGTH_TABLEBITS", 12); 
    $.Constant({Static:true , Public:true }, "ALIGNED_MAXSYMBOLS", 8); 
    $.Constant({Static:true , Public:true }, "ALIGNED_TABLEBITS", 7); 
    $.Constant({Static:true , Public:true }, "LENTABLE_SAFETY", 64); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Content.LzxConstants+BLOCKTYPE */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Content.LzxConstants+BLOCKTYPE", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    INVALID: 0, 
    VERBATIM: 1, 
    ALIGNED: 2, 
    UNCOMPRESSED: 3, 
  }
);

/* class Microsoft.Xna.Framework.Content.UnsupportedWindowSizeRange */ 

(function UnsupportedWindowSizeRange$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  function UnsupportedWindowSizeRange__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.Xna.Framework.Content.UnsupportedWindowSizeRange", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      UnsupportedWindowSizeRange__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Input.GamePadDeadZone */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.GamePadDeadZone", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    IndependentAxes: 1, 
    Circular: 2, 
  }
);

/* class Microsoft.Xna.Framework.Content.CurveReader */ 

(function CurveReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Curve))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Curve)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.CurveLoopType)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.CurveContinuity)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.CurveKeyCollection)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.CurveKey)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Curve"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.CurveKey"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.CurveContinuity")
      ]))) ();
  };

  function CurveReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function CurveReader_Read$00 (input, existingInstance) {
    var curve = existingInstance;
    if (curve === null) {
      curve = $S00().Construct();
    }
    curve.Curve$PreLoop$value = $T03().$Cast(input.ReadInt32());
    curve.Curve$PostLoop$value = $T03().$Cast(input.ReadInt32());
    var num6 = (input.ReadInt32() | 0);

    for (var i = 0; i < num6; i = ((i + 1) | 0)) {
      var position = +input.ReadSingle();
      var num7 = +input.ReadSingle();
      var tangentIn = +input.ReadSingle();
      var tangentOut = +input.ReadSingle();
      var continuity = $T07().$Cast(input.ReadInt32());
      (curve.Curve$Keys$value).Add($S01().Construct(position, num7, tangentIn, tangentOut, continuity));
    }
    return curve;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Curve")]), 
      Name: "Microsoft.Xna.Framework.Content.CurveReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CurveReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Curve"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Curve")]), 
      CurveReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.LaunchParameters */ 

(function LaunchParameters$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.String))) ();
  };

  function LaunchParameters__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]), 
      Name: "Microsoft.Xna.Framework.LaunchParameters", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LaunchParameters__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Audio.AudioCategory */ 

(function AudioCategory$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioCategory_PrimitiveInstance$b1.Of($asm01.System.Single))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.Cue))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Int32))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.MaxInstanceBehavior)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioCategory_PrimitiveInstance$b1.Of($asm01.System.Boolean))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioCategory_PrimitiveInstance$b1.Of($asm00.Microsoft.Xna.Framework.Audio.Cue))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm03.System.Diagnostics.Stopwatch)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.Cue)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioStopOptions)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.Cue")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32")]), null))) ();
  };

  function AudioCategory__ctor (name, volume, maxInstances, maxBehavior, fadeInMS, fadeOutMS) {
    this.INTERNAL_name = name;
    this.INTERNAL_volume = new ($T05())(volume);
    this.activeCues = $S00().Construct();
    this.cueInstanceCounts = $S01().Construct();
    this.maxCueInstances = (maxInstances | 0);
    this.maxCueBehavior = (($T08().$Cast(maxBehavior)).valueOf() | 0);
    this.maxFadeInMS = (fadeInMS | 0);
    this.maxFadeOutMS = (fadeOutMS | 0);
    this.fading = new ($T09())(false);
    this.fadingCue = new ($T0A())(null);
    this.queuedCue = new ($T0A())(null);
    this.fadingCueVolume = new ($T05())(0);
    this.fadeTimer = new ($T0B())();
  };

  function AudioCategory_Equals$00 (other) {
    return ((this.GetHashCode() | 0) === (other.GetHashCode() | 0));
  };

  function AudioCategory_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function AudioCategory_get_Name () {
    return this.INTERNAL_name;
  };

  function AudioCategory_GetHashCode () {
    return (this.get_Name()).GetHashCode();
  };

  function AudioCategory_INTERNAL_addCue (newCue) {
    var dictionary = null, name = null;
    if (((this.activeCues).get_Count() | 0) >= (this.maxCueInstances | 0)) {
      if (this.maxCueBehavior === $T08().Fail) {
        var result = false;
        return result;
      }
      if (this.maxCueBehavior === $T08().Queue) {
        newCue.SetVariable("Volume", 0);
        this.queuedCue.Value = newCue;
        this.fadingCue.Value = (this.activeCues).get_Item(0);
        this.fadingCueVolume.Value = +((this.activeCues).get_Item(0)).GetVariable("Volume");
        (this.fadeTimer).Reset();
        (this.fadeTimer).Start();
        this.fading.Value = true;
      } else if (this.maxCueBehavior === $T08().ReplaceOldest) {
        this.INTERNAL_removeOldestCue((this.activeCues).get_Item(0).Cue$Name$value);
      } else if (this.maxCueBehavior === $T08().ReplaceQuietest) {
        var lowestVolume = 3.40282347E+38;
        var lowestIndex = -1;

        for (var i = 0; i < ((this.activeCues).get_Count() | 0); i = ((i + 1) | 0)) {
          if (+((this.activeCues).get_Item(i)).GetVariable("Volume") < lowestVolume) {
            lowestVolume = +((this.activeCues).get_Item(i)).GetVariable("Volume");
            lowestIndex = i;
          }
        }
        if (lowestIndex > -1) {
          (dictionary = this.cueInstanceCounts).set_Item(
            name = (this.activeCues).get_Item(lowestIndex).Cue$Name$value, 
            (((dictionary.get_Item(name) | 0) - 1) | 0)
          );
          ((this.activeCues).get_Item(lowestIndex)).Stop($T0F().AsAuthored);
        }
      } else if (this.maxCueBehavior === $T08().ReplaceLowestPriority) {
        this.INTERNAL_removeOldestCue((this.activeCues).get_Item(0).Cue$Name$value);
      }
    }
    (dictionary = this.cueInstanceCounts).set_Item(name = newCue.Cue$Name$value, (((dictionary.get_Item(name) | 0) + 1) | 0));
    newCue.SetVariable("NumCueInstances", +((this.cueInstanceCounts).get_Item(newCue.Cue$Name$value)));
    (this.activeCues).Add(newCue);
    result = true;
    return result;
  };

  function AudioCategory_INTERNAL_initCue (newCue) {
    if (!(this.cueInstanceCounts).ContainsKey(newCue.Cue$Name$value)) {
      (this.cueInstanceCounts).Add(newCue.Cue$Name$value, 0);
    }
    newCue.SetVariable("NumCueInstances", +((this.cueInstanceCounts).get_Item(newCue.Cue$Name$value)));
    newCue.SetVariable("Volume", JSIL.CloneParameter(T, this.INTERNAL_volume.Value));
  };

  function AudioCategory_INTERNAL_removeActiveCue (cue) {
    var dictionary = null, name = null;
    if (!((this.activeCues === null) || !(this.activeCues).Contains(cue))) {
      (this.activeCues).Remove(cue);
      (dictionary = this.cueInstanceCounts).set_Item(name = cue.Cue$Name$value, (((dictionary.get_Item(name) | 0) - 1) | 0));
    }
  };

  function AudioCategory_INTERNAL_removeLatestCue () {
    var dictionary = null, name = null;
    var toDie = (this.activeCues).get_Item(((((this.activeCues).get_Count() | 0) - 1) | 0));
    (dictionary = this.cueInstanceCounts).set_Item(name = toDie.Cue$Name$value, (((dictionary.get_Item(name) | 0) - 1) | 0));
    (this.activeCues).RemoveAt(((((this.activeCues).get_Count() | 0) - 1) | 0));
  };

  function AudioCategory_INTERNAL_removeOldestCue (name) {

  $loop0: 
    for (var i = 0; i < ((this.activeCues).get_Count() | 0); i = ((i + 1) | 0)) {
      if ((this.activeCues).get_Item(i).Cue$Name$value == name) {
        ((this.activeCues).get_Item(i)).Stop($T0F().AsAuthored);
        break $loop0;
      }
    }
  };

  function AudioCategory_INTERNAL_removeQuietestCue (name) {
    var dictionary = null;
    var lowestVolume = 3.40282347E+38;
    var lowestIndex = -1;

    for (var i = 0; i < ((this.activeCues).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!(!((this.activeCues).get_Item(i).Cue$Name$value == name) || (+((this.activeCues).get_Item(i)).GetVariable("Volume") >= lowestVolume))) {
        lowestVolume = +((this.activeCues).get_Item(i)).GetVariable("Volume");
        lowestIndex = i;
      }
    }
    if (lowestIndex > -1) {
      (dictionary = this.cueInstanceCounts).set_Item(name, (((dictionary.get_Item(name) | 0) - 1) | 0));
      ((this.activeCues).get_Item(lowestIndex)).Stop($T0F().AsAuthored);
    }
  };

  function AudioCategory_INTERNAL_update () {
    var $temp00;
    var obj = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T10().Enter(obj = this.activeCues, /* ref */ flag);
      if (this.fading.Value !== (
          T.IsValueType
             ? JSIL.CreateInstanceOfType(T)
             : null)
      ) {
        var fadeOutPerc = +((+($T12().op_Subtraction(
              $T12().FromNumber(this.maxFadeOutMS), 
              ((this.fadeTimer).get_ElapsedMilliseconds()).ToUInt64()
            )).ToNumber(-1, false) / +(this.maxFadeOutMS)));
        var fadeInPerc = +((+((this.fadeTimer).get_ElapsedMilliseconds()).ToNumber(-1, false) / +(this.maxFadeInMS)));
        if (!((fadeInPerc < 1) || (fadeOutPerc > 0))) {
          (this.fadingCue.Value).Stop($T0F().Immediate);
          (this.queuedCue.Value).SetVariable("Volume", JSIL.CloneParameter(T, this.INTERNAL_volume.Value));
          this.fadingCue = null;
          this.queuedCue = null;
          this.fading.Value = false;
          (this.fadeTimer).Stop();
        }
        if (fadeOutPerc > 0) {
          (this.fadingCue.Value).SetVariable("Volume", this.fadingCueVolume.Value * fadeOutPerc);
        }
        if (fadeInPerc < 1) {
          (this.queuedCue.Value).SetVariable("Volume", this.INTERNAL_volume.Value * fadeInPerc);
        }
      }

      for (var i = 0; i < ((this.activeCues).get_Count() | 0); i = ((i + 1) | 0)) {
        if (!((this.activeCues).get_Item(i)).INTERNAL_update()) {
          i = ((i - 1) | 0);
        }
      }

      for (var a$0 = this.activeCues._items, i$0 = 0, l$0 = (this.activeCues._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var curCue = a$0[i$0];
        curCue.SetVariable("NumCueInstances", +((this.cueInstanceCounts).get_Item(curCue.Cue$Name$value)));
      }
    } finally {
      if (flag.get()) {
        $T10().Exit(obj);
      }
    }
  };

  function AudioCategory_op_Equality (value1, value2) {
    return value1.Equals(value2.MemberwiseClone());
  };

  function AudioCategory_op_Inequality (value1, value2) {
    return !value1.Equals(value2.MemberwiseClone());
  };

  function AudioCategory_Pause () {
    var $temp00;

    for (var a$0 = this.activeCues._items, i$0 = 0, l$0 = (this.activeCues._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var curCue = a$0[i$0];
      curCue.Pause();
    }
  };

  function AudioCategory_Resume () {
    var $temp00;

    for (var a$0 = this.activeCues._items, i$0 = 0, l$0 = (this.activeCues._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var curCue = a$0[i$0];
      curCue.Resume();
    }
  };

  function AudioCategory_SetVolume (volume) {
    var $temp00;
    this.INTERNAL_volume.Value = +volume;

    for (var a$0 = this.activeCues._items, i$0 = 0, l$0 = (this.activeCues._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var curCue = a$0[i$0];
      curCue.SetVariable("Volume", volume);
    }
  };

  function AudioCategory_Stop (options) {
    var dictionary = null, name = null;

    while (((this.activeCues).get_Count() | 0) > 0) {
      var curCue = (this.activeCues).get_Item(0);
      curCue.Stop(options);
      curCue.SetVariable("NumCueInstances", 0);
      (dictionary = this.cueInstanceCounts).set_Item(name = curCue.Cue$Name$value, (((dictionary.get_Item(name) | 0) - 1) | 0));
    }
    (this.activeCues).Clear();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioCategory", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Single, 
          $.Byte, $.Int32, 
          $.UInt16, $.UInt16
        ]), 
      AudioCategory__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      AudioCategory_Equals$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      AudioCategory_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      AudioCategory_get_Name
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      AudioCategory_GetHashCode
    );

    $.Method({Static:false, Public:false}, "INTERNAL_addCue", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.Cue")]), 
      AudioCategory_INTERNAL_addCue
    );

    $.Method({Static:false, Public:false}, "INTERNAL_initCue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.Cue")), 
      AudioCategory_INTERNAL_initCue
    );

    $.Method({Static:false, Public:false}, "INTERNAL_removeActiveCue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.Cue")), 
      AudioCategory_INTERNAL_removeActiveCue
    );

    $.Method({Static:false, Public:false}, "INTERNAL_removeLatestCue", 
      JSIL.MethodSignature.Void, 
      AudioCategory_INTERNAL_removeLatestCue
    );

    $.Method({Static:false, Public:false}, "INTERNAL_removeOldestCue", 
      JSIL.MethodSignature.Action($.String), 
      AudioCategory_INTERNAL_removeOldestCue
    );

    $.Method({Static:false, Public:false}, "INTERNAL_removeQuietestCue", 
      JSIL.MethodSignature.Action($.String), 
      AudioCategory_INTERNAL_removeQuietestCue
    );

    $.Method({Static:false, Public:false}, "INTERNAL_update", 
      JSIL.MethodSignature.Void, 
      AudioCategory_INTERNAL_update
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      AudioCategory_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      AudioCategory_op_Inequality
    );

    $.Method({Static:false, Public:true }, "Pause", 
      JSIL.MethodSignature.Void, 
      AudioCategory_Pause
    );

    $.Method({Static:false, Public:true }, "Resume", 
      JSIL.MethodSignature.Void, 
      AudioCategory_Resume
    );

    $.Method({Static:false, Public:true }, "SetVolume", 
      JSIL.MethodSignature.Action($.Single), 
      AudioCategory_SetVolume
    );

    $.Method({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioStopOptions")), 
      AudioCategory_Stop
    );

    $.Field({Static:false, Public:false}, "INTERNAL_name", $.String); 
    $.Field({Static:false, Public:false}, "activeCues", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.Cue")])); 
    $.Field({Static:false, Public:false}, "cueInstanceCounts", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
    $.Field({Static:false, Public:false}, "INTERNAL_volume", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory+PrimitiveInstance`1", [$.Single])); 
    $.Field({Static:false, Public:false}, "maxCueInstances", $.Byte); 
    $.Field({Static:false, Public:false}, "maxCueBehavior", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.MaxInstanceBehavior")); 
    $.Field({Static:false, Public:false}, "maxFadeInMS", $.UInt16); 
    $.Field({Static:false, Public:false}, "maxFadeOutMS", $.UInt16); 
    $.Field({Static:false, Public:false}, "fading", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory+PrimitiveInstance`1", [$.Boolean])); 
    $.Field({Static:false, Public:false}, "fadingCue", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory+PrimitiveInstance`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.Cue")])); 
    $.Field({Static:false, Public:false}, "queuedCue", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory+PrimitiveInstance`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.Cue")])); 
    $.Field({Static:false, Public:false}, "fadingCueVolume", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory+PrimitiveInstance`1", [$.Single])); 
    $.Field({Static:false, Public:false}, "fadeTimer", $asm03.TypeRef("System.Diagnostics.Stopwatch")); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.AudioCategory+PrimitiveInstance`1 */ 

(function PrimitiveInstance$b1$Members () {
  var $, $thisType;
  function PrimitiveInstance$b1__ctor (initial) {
    this.Value = JSIL.CloneParameter($thisType.T.get(this), initial);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioCategory+PrimitiveInstance`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      PrimitiveInstance$b1__ctor
    );

    $.Field({Static:false, Public:true }, "Value", $.GenericParameter("T")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.AlphaTestEffectReader */ 

(function AlphaTestEffectReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.AlphaTestEffect))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.AlphaTestEffect)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CompareFunction)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.AlphaTestEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")]))) ();
  };

  function AlphaTestEffectReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AlphaTestEffectReader_Read$00 (input, existingInstance) {
    var effect = $S00().Construct(input.get_GraphicsDevice());
    effect.set_Texture($T03().$As(input.ReadExternalReference$b1($T04())()));
    effect.set_AlphaFunction($T05().$Cast(input.ReadInt32()));
    effect.set_ReferenceAlpha((input.ReadUInt32() | 0));
    (effect.DiffuseColor = input.ReadVector3().MemberwiseClone());
    effect.set_Alpha(input.ReadSingle());
    effect.set_VertexColorEnabled(input.ReadBoolean());
    return effect;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.AlphaTestEffect")]), 
      Name: "Microsoft.Xna.Framework.Content.AlphaTestEffectReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AlphaTestEffectReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.AlphaTestEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.AlphaTestEffect")]), 
      AlphaTestEffectReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.BasicEffectReader */ 

(function BasicEffectReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.BasicEffect))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BasicEffect)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BasicEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")]))) ();
  };

  function BasicEffectReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function BasicEffectReader_Read$00 (input, existingInstance) {
    var effect = $S00().Construct(input.get_GraphicsDevice());
    var texture = $T03().$As(input.ReadExternalReference$b1($T04())());
    if (texture !== null) {
      effect.set_Texture(texture);
      effect.set_TextureEnabled(true);
    }
    (effect.DiffuseColor = input.ReadVector3().MemberwiseClone());
    (effect.EmissiveColor = input.ReadVector3().MemberwiseClone());
    (effect.SpecularColor = input.ReadVector3().MemberwiseClone());
    effect.set_SpecularPower(input.ReadSingle());
    effect.set_Alpha(input.ReadSingle());
    effect.set_VertexColorEnabled(input.ReadBoolean());
    return effect;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BasicEffect")]), 
      Name: "Microsoft.Xna.Framework.Content.BasicEffectReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BasicEffectReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BasicEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BasicEffect")]), 
      BasicEffectReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.BoundingBoxReader */ 

(function BoundingBoxReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.BoundingBox))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingBox)) ();
  };

  function BoundingBoxReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function BoundingBoxReader_Read$00 (input, existingInstance) {
    var result = new ($T02())(input.ReadVector3().MemberwiseClone(), input.ReadVector3().MemberwiseClone());
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), 
      Name: "Microsoft.Xna.Framework.Content.BoundingBoxReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BoundingBoxReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), 
      BoundingBoxReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.DualTextureEffectReader */ 

(function DualTextureEffectReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.DualTextureEffect))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DualTextureEffect)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DualTextureEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")]))) ();
  };

  function DualTextureEffectReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DualTextureEffectReader_Read$00 (input, existingInstance) {
    var effect = $S00().Construct(input.get_GraphicsDevice());
    effect.set_Texture($T03().$As(input.ReadExternalReference$b1($T04())()));
    effect.set_Texture2($T03().$As(input.ReadExternalReference$b1($T04())()));
    (effect.DiffuseColor = input.ReadVector3().MemberwiseClone());
    effect.set_Alpha(input.ReadSingle());
    effect.set_VertexColorEnabled(input.ReadBoolean());
    return effect;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DualTextureEffect")]), 
      Name: "Microsoft.Xna.Framework.Content.DualTextureEffectReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DualTextureEffectReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DualTextureEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DualTextureEffect")]), 
      DualTextureEffectReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.EffectReader */ 

(function EffectReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Effect))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.EffectReader_$l$gc__DisplayClass7)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm05.System.Linq.Enumerable)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.String, $asm01.System.Boolean))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.EffectReader_$l$gc__DisplayClass2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };

  function EffectReader__ctor () {
    $T01().prototype._ctor.call(this);
  };

  function EffectReader_Contains (search, arr) {
    var $closure0 = new ($T03())();
    $closure0.search = search;
    return $S00().CallStatic($T04(), "Any$b1", [$asm01.System.String], arr, $T05().New($closure0, $T03().prototype.$lContains$gb__6, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.EffectReader_$l$gc__DisplayClass7, "$lContains$gb__6", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.String]), false); }));
  };

  function EffectReader_Normalize (FileName) {
    return $T06().Normalize(FileName, $thisType.supportedExtensions);
  };

  function EffectReader_Read$00 (input, existingInstance) {
    var count = (input.ReadInt32() | 0);
    var effect = $S01().Construct(input.get_GraphicsDevice(), input.ReadBytes(count));
    effect.GraphicsResource$Name$value = input.get_AssetName();
    return effect;
  };

  function EffectReader_TryFindAnyCased (search, arr, extensions) {
    var $closure0 = new ($T0C())();
    $closure0.search = search;
    $closure0.extensions = extensions;
    return $S02().CallStatic($T04(), "FirstOrDefault$b1", [$asm01.System.String], arr, $T05().New($closure0, $T0C().prototype.$lTryFindAnyCased$gb__0, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.EffectReader_$l$gc__DisplayClass2, "$lTryFindAnyCased$gb__0", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.String]), false); }));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")]), 
      Name: "Microsoft.Xna.Framework.Content.EffectReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EffectReader__ctor
    );

    $.Method({Static:true , Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("System.Array", [$.String])]), 
      EffectReader_Contains
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.String, [$.String]), 
      EffectReader_Normalize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")]), 
      EffectReader_Read$00
    );

    $.Method({Static:true , Public:false}, "TryFindAnyCased", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ]), 
      EffectReader_TryFindAnyCased
    )
      .Parameter(2, "extensions", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false}, "supportedExtensions", $jsilcore.TypeRef("System.Array", [$.String])); 
    function EffectReader__cctor () {
      $thisType.supportedExtensions = JSIL.Array.New($T00(), [".fxg"]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EffectReader__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.EffectReader+<>c__DisplayClass2 */ 

(function $l$gc__DisplayClass2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.EffectReader_$l$gc__DisplayClass2_$l$gc__DisplayClass4)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm05.System.Linq.Enumerable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.String, $asm01.System.Boolean))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };

  function $l$gc__DisplayClass2__ctor () {
  };

  function $l$gc__DisplayClass2_$lTryFindAnyCased$gb__0 (s) {
    var $closure0 = new ($T01())();
    $closure0.CS$$l$g8__locals3 = this;
    $closure0.s = s;
    return $S00().CallStatic($T02(), "Any$b1", [$asm01.System.String], this.extensions, $T03().New($closure0, $T01().prototype.$lTryFindAnyCased$gb__1, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.EffectReader_$l$gc__DisplayClass2_$l$gc__DisplayClass4, "$lTryFindAnyCased$gb__1", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.String]), false); }));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.EffectReader+<>c__DisplayClass2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2__ctor
    );

    $.Method({Static:false, Public:true }, "$lTryFindAnyCased$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      $l$gc__DisplayClass2_$lTryFindAnyCased$gb__0
    );

    $.Field({Static:false, Public:true }, "search", $.String); 
    $.Field({Static:false, Public:true }, "extensions", $jsilcore.TypeRef("System.Array", [$.String])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Content.EffectReader+<>c__DisplayClass2+<>c__DisplayClass4 */ 

(function $l$gc__DisplayClass4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };

  function $l$gc__DisplayClass4__ctor () {
  };

  function $l$gc__DisplayClass4_$lTryFindAnyCased$gb__1 (ext) {
    return this.s.toLowerCase() == JSIL.ConcatString(this.CS$$l$g8__locals3.search.toLowerCase(), ext);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.EffectReader+<>c__DisplayClass2+<>c__DisplayClass4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass4__ctor
    );

    $.Method({Static:false, Public:true }, "$lTryFindAnyCased$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      $l$gc__DisplayClass4_$lTryFindAnyCased$gb__1
    );

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals3", $asm00.TypeRef("Microsoft.Xna.Framework.Content.EffectReader+<>c__DisplayClass2")); 
    $.Field({Static:false, Public:true }, "s", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.EffectReader+<>c__DisplayClass7 */ 

(function $l$gc__DisplayClass7$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };

  function $l$gc__DisplayClass7__ctor () {
  };

  function $l$gc__DisplayClass7_$lContains$gb__6 (s) {
    return s == this.search;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.EffectReader+<>c__DisplayClass7", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass7__ctor
    );

    $.Method({Static:false, Public:true }, "$lContains$gb__6", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      $l$gc__DisplayClass7_$lContains$gb__6
    );

    $.Field({Static:false, Public:true }, "search", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Content.EnvironmentMapEffectReader */ 

(function EnvironmentMapEffectReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureCube)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")]))) ();
  };

  function EnvironmentMapEffectReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EnvironmentMapEffectReader_Read$00 (input, existingInstance) {
    var effect = $S00().Construct(input.get_GraphicsDevice());
    effect.set_Texture($T03().$As(input.ReadExternalReference$b1($T04())()));
    effect.set_EnvironmentMap(input.ReadExternalReference$b1($T05())());
    effect.set_EnvironmentMapAmount(input.ReadSingle());
    (effect.EnvironmentMapSpecular = input.ReadVector3().MemberwiseClone());
    effect.set_FresnelFactor(input.ReadSingle());
    (effect.DiffuseColor = input.ReadVector3().MemberwiseClone());
    (effect.EmissiveColor = input.ReadVector3().MemberwiseClone());
    effect.set_Alpha(input.ReadSingle());
    return effect;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect")]), 
      Name: "Microsoft.Xna.Framework.Content.EnvironmentMapEffectReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EnvironmentMapEffectReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect")]), 
      EnvironmentMapEffectReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.IndexBufferReader */ 

(function IndexBufferReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexElementSize)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BufferUsage)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize"), 
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };

  function IndexBufferReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function IndexBufferReader_Read$00 (input, existingInstance) {
    var indexBuffer = existingInstance;
    var sixteenBits = input.ReadBoolean();
    var dataSize = (input.ReadInt32() | 0);
    var data = input.ReadBytes(dataSize);
    if (indexBuffer === null) {
      if (sixteenBits) {
        indexBuffer = $S00().Construct(input.get_GraphicsDevice(), $T07().SixteenBits, ((dataSize / 2) | 0), $T08().None);
      } else {
        indexBuffer = $S00().Construct(input.get_GraphicsDevice(), $T07().ThirtyTwoBits, ((dataSize / 4) | 0), $T08().None);
      }
    }
    $S01().CallVirtual("SetData$b1", [$asm01.System.Byte], indexBuffer, data);
    return indexBuffer;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer")]), 
      Name: "Microsoft.Xna.Framework.Content.IndexBufferReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      IndexBufferReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer")]), 
      IndexBufferReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.MatrixReader */ 

(function MatrixReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Matrix))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function MatrixReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MatrixReader_Read$00 (input, existingInstance) {
    return new ($T02())(input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle(), input.ReadSingle());
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Name: "Microsoft.Xna.Framework.Content.MatrixReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MatrixReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      MatrixReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ModelReader */ 

(function ModelReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Model))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Model)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelBone))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelBone)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ModelReader_$l$gc__DisplayClass4)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingSphere)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ModelReader_$l$gc__DisplayClass6)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Action$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Action$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Action$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Effect))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")]), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPart")]), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPart"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Model"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")]), 
        $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")])
      ]))) ();
  };

  function ModelReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ModelReader_Read$00 (reader, existingInstance) {
    var boneCount = (reader.ReadUInt32() >>> 0);
    var bones = $S00().Construct((boneCount | 0));

    for (var i = 0; i < boneCount; i = ((i + 1) >>> 0)) {
      var name = $S01().CallVirtual("ReadObject$b1", [$asm01.System.String], reader);
      var matrix = reader.ReadMatrix().MemberwiseClone();
      var modelBone = new ($T09())();
      (modelBone.ModelBone$Transform$value = matrix);
      modelBone.ModelBone$Index$value = (i | 0);
      modelBone.ModelBone$Name$value = name;
      var bone = modelBone;
      bones.Add(bone);
    }

    for (var j = 0; $T0A().op_LessThan(
        $T0A().FromNumber(j), 
        ($T0B().FromNumber(boneCount)).ToInt64()
      ); j = ((j + 1) | 0)) {
      bone = bones.get_Item(j);
      var parentIndex = ($thisType.ReadBoneReference(reader, boneCount) | 0);
      if (parentIndex !== -1) {
        bone.ModelBone$Parent$value = bones.get_Item(parentIndex);
      }
      var childCount = (reader.ReadUInt32() >>> 0);
      if (childCount !== 0) {

        for (var k = 0; k < childCount; k = ((k + 1) >>> 0)) {
          var childIndex = ($thisType.ReadBoneReference(reader, boneCount) | 0);
          if (childIndex !== -1) {
            bone.AddChild(bones.get_Item(childIndex));
          }
        }
      }
    }
    var meshes = $S02().Construct();
    var meshCount = (reader.ReadInt32() | 0);

    for (j = 0; j < meshCount; j = ((j + 1) | 0)) {
      var $closure0 = new ($T0D())();
      name = $S01().CallVirtual("ReadObject$b1", [$asm01.System.String], reader);
      var parentBoneIndex = ($thisType.ReadBoneReference(reader, boneCount) | 0);
      var boundingSphere = reader.ReadBoundingSphere();
      $S03().CallVirtual("ReadObject$b1", [$asm01.System.Object], reader);
      var partCount = (reader.ReadInt32() | 0);
      $closure0.parts = $S04().Construct(partCount);

      for (k = 0; $T0B().op_LessThan(
          $T0B().FromNumber(k), 
          ($T0A().FromNumber(partCount)).ToUInt64()
        ); k = ((k + 1) >>> 0)) {
        var $closure1 = new ($T11())();
        $closure1.CS$$l$g8__locals5 = $closure0;
        if (existingInstance !== null) {
          var part = $S05().CallVirtual("get_Item", null, $S06().CallVirtual("get_Item", null, existingInstance.Model$Meshes$value, j).ModelMesh$MeshParts$value, (k | 0));
        } else {
          part = new ($T12())();
        }
        part.ModelMeshPart$VertexOffset$value = (reader.ReadInt32() | 0);
        part.ModelMeshPart$NumVertices$value = (reader.ReadInt32() | 0);
        part.ModelMeshPart$StartIndex$value = (reader.ReadInt32() | 0);
        part.ModelMeshPart$PrimitiveCount$value = (reader.ReadInt32() | 0);
        part.ModelMeshPart$Tag$value = $S03().CallVirtual("ReadObject$b1", [$asm01.System.Object], reader);
        ($closure0.parts).Add(part);
        $closure1.jj = (k | 0);
        reader.ReadSharedResource$b1($T16())($T17().New($closure1, $T11().prototype.$lRead$gb__1, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.ModelReader_$l$gc__DisplayClass6, "$lRead$gb__1", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")), false); }));
        reader.ReadSharedResource$b1($T18())($T19().New($closure1, $T11().prototype.$lRead$gb__2, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.ModelReader_$l$gc__DisplayClass6, "$lRead$gb__2", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer")), false); }));
        reader.ReadSharedResource$b1($T1A())($T1B().New($closure1, $T11().prototype.$lRead$gb__3, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Content.ModelReader_$l$gc__DisplayClass6, "$lRead$gb__3", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), false); }));
      }
      if (existingInstance === null) {
        var mesh = new ($T14())(reader.get_GraphicsDevice(), $closure0.parts);
        mesh.ModelMesh$Name$value = name;
        mesh.ModelMesh$ParentBone$value = bones.get_Item(parentBoneIndex);
        (mesh.ModelMesh$ParentBone$value).AddMesh(mesh);
        (mesh.ModelMesh$BoundingSphere$value = boundingSphere);
        meshes.Add(mesh);
      }
    }
    if (existingInstance !== null) {
      $thisType.ReadBoneReference(reader, boneCount);
      $S03().CallVirtual("ReadObject$b1", [$asm01.System.Object], reader);
      var result = existingInstance;
    } else {
      var rootBoneIndex = ($thisType.ReadBoneReference(reader, boneCount) | 0);
      var model = $S07().Construct(reader.get_GraphicsDevice(), bones, meshes);
      model.Model$Root$value = bones.get_Item(rootBoneIndex);
      model.BuildHierarchy();
      model.Model$Tag$value = $S03().CallVirtual("ReadObject$b1", [$asm01.System.Object], reader);
      result = model;
    }
    return result;
  };

  function ModelReader_ReadBoneReference (reader, boneCount) {
    if ((boneCount >>> 0) < 255) {
      var boneId = (reader.ReadByte() | 0);
    } else {
      boneId = (reader.ReadUInt32() >>> 0);
    }
    if (boneId !== 0) {
      var result = (((boneId - 1) >>> 0) | 0);
    } else {
      result = -1;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Model")]), 
      Name: "Microsoft.Xna.Framework.Content.ModelReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModelReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Model"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Model")]), 
      ModelReader_Read$00
    );

    $.Method({Static:true , Public:false}, "ReadBoneReference", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.UInt32]), 
      ModelReader_ReadBoneReference
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ModelReader+<>c__DisplayClass4 */ 

(function $l$gc__DisplayClass4$Members () {
  var $, $thisType;
  function $l$gc__DisplayClass4__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ModelReader+<>c__DisplayClass4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass4__ctor
    );

    $.Field({Static:false, Public:true }, "parts", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPart")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Content.ModelReader+<>c__DisplayClass6 */ 

(function $l$gc__DisplayClass6$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };

  function $l$gc__DisplayClass6__ctor () {
  };

  function $l$gc__DisplayClass6_$lRead$gb__1 (v) {
    (this.CS$$l$g8__locals5.parts).get_Item(this.jj).ModelMeshPart$VertexBuffer$value = v;
  };

  function $l$gc__DisplayClass6_$lRead$gb__2 (v) {
    (this.CS$$l$g8__locals5.parts).get_Item(this.jj).ModelMeshPart$IndexBuffer$value = v;
  };

  function $l$gc__DisplayClass6_$lRead$gb__3 (v) {
    ((this.CS$$l$g8__locals5.parts).get_Item(this.jj)).set_Effect(v);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ModelReader+<>c__DisplayClass6", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass6__ctor
    );

    $.Method({Static:false, Public:true }, "$lRead$gb__1", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")), 
      $l$gc__DisplayClass6_$lRead$gb__1
    );

    $.Method({Static:false, Public:true }, "$lRead$gb__2", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer")), 
      $l$gc__DisplayClass6_$lRead$gb__2
    );

    $.Method({Static:false, Public:true }, "$lRead$gb__3", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      $l$gc__DisplayClass6_$lRead$gb__3
    );

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals5", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ModelReader+<>c__DisplayClass4")); 
    $.Field({Static:false, Public:true }, "jj", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Content.PointReader */ 

(function PointReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Point))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Point)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };

  function PointReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function PointReader_Read$00 (input, existingInstance) {
    var X = (input.ReadInt32() | 0);
    var Y = (input.ReadInt32() | 0);
    return new ($T02())(X, Y);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Point")]), 
      Name: "Microsoft.Xna.Framework.Content.PointReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      PointReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Point"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Point")]), 
      PointReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.SkinnedEffectReader */ 

(function SkinnedEffectReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.SkinnedEffect))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SkinnedEffect)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SkinnedEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")]))) ();
  };

  function SkinnedEffectReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SkinnedEffectReader_Read$00 (input, existingInstance) {
    var effect = $S00().Construct(input.get_GraphicsDevice());
    effect.set_Texture($T03().$As(input.ReadExternalReference$b1($T04())()));
    effect.set_WeightsPerVertex(input.ReadInt32());
    (effect.DiffuseColor = input.ReadVector3().MemberwiseClone());
    (effect.EmissiveColor = input.ReadVector3().MemberwiseClone());
    (effect.SpecularColor = input.ReadVector3().MemberwiseClone());
    effect.set_SpecularPower(input.ReadSingle());
    effect.set_Alpha(input.ReadSingle());
    return effect;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SkinnedEffect")]), 
      Name: "Microsoft.Xna.Framework.Content.SkinnedEffectReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SkinnedEffectReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SkinnedEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SkinnedEffect")]), 
      SkinnedEffectReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Texture2DReader */ 

(function Texture2DReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Texture2D))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DxtUtil)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.IO.MemoryStream)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.IO.SeekOrigin)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
        $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };

  function Texture2DReader__ctor () {
    $T01().prototype._ctor.call(this);
  };

  function Texture2DReader_Normalize (fileName) {
    return $T02().Normalize(fileName, $thisType.supportedExtensions);
  };

  function Texture2DReader_Read$00 (reader, existingInstance) {
    if ((reader.version | 0) < 5) {
      var legacyFormat = (reader.ReadInt32() | 0);
      if (legacyFormat === 1) {
      }
      if (legacyFormat === 28) {
        var surfaceFormat = $T07().Dxt1;
      } else if (legacyFormat === 30) {
        surfaceFormat = $T07().Dxt3;
      } else {
        if (legacyFormat !== 32) {
          throw $S00().Construct("Unsupported legacy surface format.");
        }
        surfaceFormat = $T07().Dxt5;
      }
    } else {
      surfaceFormat = $T07().$Cast(reader.ReadInt32());
    }
    var width = (reader.ReadInt32() | 0);
    var height = (reader.ReadInt32() | 0);
    var levelCount = (reader.ReadInt32() | 0);
    var convertedFormat = surfaceFormat;
    if (!((surfaceFormat !== $T07().Dxt1) || reader.get_GraphicsDevice().GraphicsDevice$GLDevice$value.OpenGLDevice$SupportsDxt1$value)) {
      convertedFormat = $T07().Color;
    } else if (!(((surfaceFormat !== $T07().Dxt3) && 
          (surfaceFormat !== $T07().Dxt5)) || reader.get_GraphicsDevice().GraphicsDevice$GLDevice$value.OpenGLDevice$SupportsS3tc$value)) {
      convertedFormat = $T07().Color;
    }
    if (existingInstance === null) {
      var texture = $S01().Construct(reader.get_GraphicsDevice(), width, height, (levelCount > 1), convertedFormat);
    } else {
      texture = existingInstance;
    }

    for (var level = 0; level < levelCount; level = ((level + 1) | 0)) {
      var levelDataSizeInBytes = (reader.ReadInt32() | 0);
      var levelData = null;
      var levelWidth = width >> level;
      var levelHeight = height >> level;
      if (level < levelCount) {
        if (!((surfaceFormat !== $T07().Dxt1) || reader.get_GraphicsDevice().GraphicsDevice$GLDevice$value.OpenGLDevice$SupportsDxt1$value)) {
          levelData = reader.ReadBytes(levelDataSizeInBytes);
          levelData = $S02().CallStatic($T0C(), "DecompressDxt1", null, levelData, levelWidth, levelHeight);
        } else if (!((surfaceFormat !== $T07().Dxt3) || reader.get_GraphicsDevice().GraphicsDevice$GLDevice$value.OpenGLDevice$SupportsS3tc$value)) {
          levelData = reader.ReadBytes(levelDataSizeInBytes);
          levelData = $S03().CallStatic($T0C(), "DecompressDxt3", null, levelData, levelWidth, levelHeight);
        } else if (!((surfaceFormat !== $T07().Dxt5) || reader.get_GraphicsDevice().GraphicsDevice$GLDevice$value.OpenGLDevice$SupportsS3tc$value)) {
          levelData = reader.ReadBytes(levelDataSizeInBytes);
          levelData = $S04().CallStatic($T0C(), "DecompressDxt5", null, levelData, levelWidth, levelHeight);
        }
        if (!((levelData !== null) || !$T0D().op_Inequality(JSIL.GetType(reader.get_BaseStream()), $T0E().__Type__))) {
          levelData = reader.ReadBytes(levelDataSizeInBytes);
        }
        if (levelData !== null) {
          $S05().CallVirtual("SetData$b1", [$asm01.System.Byte], texture, 
            level, 
            null, 
            levelData, 
            0, 
            levelData.length
          );
        } else {
          $S05().CallVirtual("SetData$b1", [$asm01.System.Byte], texture, 
            level, 
            null, 
            ($T0E().$Cast(reader.get_BaseStream())).GetBuffer(), 
            ((reader.get_BaseStream()).get_Position()).ToNumber(4294967295, true), 
            levelDataSizeInBytes
          );
          (reader.get_BaseStream()).Seek($T10().FromNumber(levelDataSizeInBytes), $T12().Current);
        }
      }
    }
    return texture;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]), 
      Name: "Microsoft.Xna.Framework.Content.Texture2DReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Texture2DReader__ctor
    );

    $.Method({Static:true , Public:false}, "Normalize", 
      new JSIL.MethodSignature($.String, [$.String]), 
      Texture2DReader_Normalize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]), 
      Texture2DReader_Read$00
    );

    $.Field({Static:true , Public:false}, "supportedExtensions", $jsilcore.TypeRef("System.Array", [$.String])); 
    function Texture2DReader__cctor () {
      $thisType.supportedExtensions = JSIL.Array.New($T00(), [".bmp", ".gif", ".jpg", ".jpeg", ".png", ".tga", ".tif", ".tiff"]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Texture2DReader__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.TextureCubeReader */ 

(function TextureCubeReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.TextureCube))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureCube)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CubeMapFace)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };

  function TextureCubeReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function TextureCubeReader_Read$00 (reader, existingInstance) {
    var surfaceFormat = $T03().$Cast(reader.ReadInt32());
    var size = (reader.ReadInt32() | 0);
    var levels = (reader.ReadInt32() | 0);
    if (existingInstance === null) {
      var textureCube = new ($T02())(reader.get_GraphicsDevice(), size, (levels > 1), surfaceFormat);
    } else {
      textureCube = existingInstance;
    }

    for (var face = 0; face < 6; face = ((face + 1) | 0)) {

      for (var i = 0; i < levels; i = ((i + 1) | 0)) {
        var faceSize = (reader.ReadInt32() | 0);
        var faceData = reader.ReadBytes(faceSize);
        $S00().CallVirtual("SetData$b1", [$asm01.System.Byte], textureCube, 
          $T08().$Cast(face), 
          i, 
          null, 
          faceData, 
          0, 
          faceSize
        );
      }
    }
    return textureCube;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCube")]), 
      Name: "Microsoft.Xna.Framework.Content.TextureCubeReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      TextureCubeReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCube"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCube")]), 
      TextureCubeReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.TextureReader */ 

(function TextureReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Texture))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };

  function TextureReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function TextureReader_Read$00 (reader, existingInstance) {
    return existingInstance;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")]), 
      Name: "Microsoft.Xna.Framework.Content.TextureReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      TextureReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")]), 
      TextureReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.VertexBufferReader */ 

(function VertexBufferReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BufferUsage)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"), 
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };

  function VertexBufferReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function VertexBufferReader_Read$00 (input, existingInstance) {
    var declaration = $S00().CallVirtual("ReadRawObject$b1", [$asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration], input);
    var vertexCount = (input.ReadUInt32() | 0);
    var data = input.ReadBytes(Math.imul(vertexCount, declaration.VertexDeclaration$VertexStride$value));
    var buffer = $S01().Construct(input.get_GraphicsDevice(), declaration, vertexCount, $T07().None);
    $S02().CallVirtual("SetData$b1", [$asm01.System.Byte], buffer, data);
    return buffer;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")]), 
      Name: "Microsoft.Xna.Framework.Content.VertexBufferReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      VertexBufferReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")]), 
      VertexBufferReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.VertexDeclarationReader */ 

(function VertexDeclarationReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.VertexElement))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElement)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementUsage)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"), [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElement")])]))) ();
  };

  function VertexDeclarationReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function VertexDeclarationReader_Read$00 (reader, existingInstance) {
    var vertexStride = (reader.ReadInt32() | 0);
    var elementCount = (reader.ReadInt32() | 0);
    var elements = JSIL.Array.New($T06(), elementCount);

    for (var i = 0; i < elementCount; i = ((i + 1) | 0)) {
      var offset = (reader.ReadInt32() | 0);
      var elementFormat = $T07().$Cast(reader.ReadInt32());
      var elementUsage = $T08().$Cast(reader.ReadInt32());
      var usageIndex = (reader.ReadInt32() | 0);
      elements[i] = new ($T06())(offset, elementFormat, elementUsage, usageIndex);
    }
    return $S00().Construct(vertexStride, elements);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")]), 
      Name: "Microsoft.Xna.Framework.Content.VertexDeclarationReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      VertexDeclarationReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")]), 
      VertexDeclarationReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.VideoReader */ 

(function VideoReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Media.Video))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Video)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Utilities.FileHelpers)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentLoadException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.VideoSoundtrackType)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Video"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Single"), $asm00.TypeRef("Microsoft.Xna.Framework.Media.VideoSoundtrackType")
      ]))) ();
  };

  function VideoReader__ctor () {
    $T01().prototype._ctor.call(this);
  };

  function VideoReader_Normalize (fileName) {
    return $T02().Normalize(fileName, $thisType.supportedExtensions);
  };

  function VideoReader_Read$00 (input, existingInstance) {
    var path = $T05().ResolveRelativePath(
      $T06().Combine(
        (input.get_ContentManager()).get_RootDirectoryFullPath(), 
        input.get_AssetName()
      ), 
      $S00().CallVirtual("ReadObject$b1", [$asm01.System.String], input)
    );
    path = $thisType.Normalize(path.substr(0, (((path.length | 0) - 4) | 0)));
    if ($T00().IsNullOrEmpty(path)) {
      throw $S01().Construct();
    }
    var durationMS = ($S02().CallVirtual("ReadObject$b1", [$asm01.System.Int32], input) | 0);
    var width = ($S02().CallVirtual("ReadObject$b1", [$asm01.System.Int32], input) | 0);
    var height = ($S02().CallVirtual("ReadObject$b1", [$asm01.System.Int32], input) | 0);
    var framesPerSecond = +$S03().CallVirtual("ReadObject$b1", [$asm01.System.Single], input);
    var soundTrackType = $T0B().$Cast($S02().CallVirtual("ReadObject$b1", [$asm01.System.Int32], input));
    return $S04().Construct(path, durationMS, width, height, framesPerSecond, soundTrackType);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Video")]), 
      Name: "Microsoft.Xna.Framework.Content.VideoReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      VideoReader__ctor
    );

    $.Method({Static:true , Public:false}, "Normalize", 
      new JSIL.MethodSignature($.String, [$.String]), 
      VideoReader_Normalize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Video"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Media.Video")]), 
      VideoReader_Read$00
    );

    $.Field({Static:true , Public:false}, "supportedExtensions", $jsilcore.TypeRef("System.Array", [$.String])); 
    function VideoReader__cctor () {
      $thisType.supportedExtensions = JSIL.Array.New($T00(), [".ogv", ".ogg"]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      VideoReader__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.Effect */ 

(function Effect$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm00.Microsoft.Xna.Framework.Graphics.Effect))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect_MGFXHeader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.IO.MemoryStream)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm03.System.Diagnostics.Debug)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterCollection)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ConstantBuffer)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.ConstantBuffer))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.Shader))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Shader)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm01.System.Int32, $asm00.Microsoft.Xna.Framework.Graphics.Effect))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm00.Microsoft.Xna.Framework.Graphics.Effect))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Reflection.Assembly)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectAnnotation))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectAnnotation)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectTechnique))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectTechnique)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectPassCollection)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.BitConverter)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.MonoGame.Utilities.Hash)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterClass)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterType)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass))) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectPass)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthStencilState)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BlendFunction)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Blend)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ColorWriteChannels)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.StencilOperation)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CompareFunction)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CullMode)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.FillMode)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.MemoryStream"), [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.BinaryReader"), [$asm01.TypeRef("System.IO.Stream")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.MemoryStream"), null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]), 
        $asm01.TypeRef("System.String")
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), $asm01.TypeRef("System.String"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPassCollection"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection")
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterClass"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterType"), 
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection"), $asm01.TypeRef("System.Object")
      ]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState"), null))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Color"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState"), null))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState"), null))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), $asm01.TypeRef("System.String"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function Effect__ctor$00 (graphicsDevice) {
    $T02().prototype._ctor.call(this);
    if (graphicsDevice === null) {
      throw $S01().Construct("Graphics Device Cannot Be Null");
    }
    this.GraphicsResource$GraphicsDevice$value = graphicsDevice;
  };

  function Effect__ctor$01 (cloneSource) {
    $S02().Call($thisType.prototype, "_ctor", null, this, cloneSource.GraphicsResource$GraphicsDevice$value);
    this._isClone = true;
    this.Clone(cloneSource);
  };

  function Effect__ctor$02 (graphicsDevice, effectCode) {
    var cloneSource = new JSIL.BoxedVariable(null);
    $S02().Call($thisType.prototype, "_ctor", null, this, graphicsDevice);
    var header = this.ReadHeader(effectCode).MemberwiseClone();
    var effectKey = (header.EffectKey | 0);
    var headerSize = (header.HeaderSize | 0);
    if (!$thisType.EffectCache.TryGetValue(effectKey, /* ref */ cloneSource)) {
      var stream = $S03().Construct(effectCode, headerSize, (((effectCode.length | 0) - headerSize) | 0), false);
      try {
        var reader = $S04().Construct(stream);
        try {
          cloneSource.set($S05().Construct(graphicsDevice));
          (cloneSource.get()).ReadEffect(reader);
          $thisType.EffectCache.Add(effectKey, cloneSource.get());
        } finally {
          if (reader !== null) {
            $IM00().Call(reader, null);
          }
        }
      } finally {
        if (stream !== null) {
          $IM00().Call(stream, null);
        }
      }
    }
    this._isClone = true;
    this.Clone(cloneSource.get());
  };

  function Effect_Clone$03 (cloneSource) {
    $T0A().Assert(this._isClone, "Cannot clone into non-cloned effect!");
    this.Effect$Parameters$value = (cloneSource.Effect$Parameters$value).Clone();
    this.Effect$Techniques$value = (cloneSource.Effect$Techniques$value).Clone(this);
    this.Effect$ConstantBuffers$value = JSIL.Array.New($T0D(), cloneSource.Effect$ConstantBuffers$value.length);

    for (var i = 0; i < (cloneSource.Effect$ConstantBuffers$value.length | 0); i = ((i + 1) | 0)) {
      this.Effect$ConstantBuffers$value[i] = $S06().Construct(cloneSource.Effect$ConstantBuffers$value[i]);
    }

  $loop1: 
    for (i = 0; i < ((cloneSource.Effect$Techniques$value).get_Count() | 0); i = ((i + 1) | 0)) {
      if ($S07().CallVirtual("get_Item", null, cloneSource.Effect$Techniques$value, i) === cloneSource.Effect$CurrentTechnique$value) {
        this.Effect$CurrentTechnique$value = $S07().CallVirtual("get_Item", null, this.Effect$Techniques$value, i);
        break $loop1;
      }
    }
    this._shaders = cloneSource._shaders;
  };

  function Effect_Clone$04 () {
    return $S08().Construct(this);
  };

  function Effect_Dispose$05 (disposing) {
    if (!this.GraphicsResource$IsDisposed$value) {
      if (disposing) {
        if (!this._isClone) {
          if (this._shaders !== null) {
            var shaders = this._shaders;

            for (var i = 0; i < (shaders.length | 0); i = ((i + 1) | 0)) {
              var shader = shaders[i];
              shader.Dispose();
            }
          }
        }
        if (this.Effect$ConstantBuffers$value !== null) {
          var constantBuffers = this.Effect$ConstantBuffers$value;

          for (i = 0; i < (constantBuffers.length | 0); i = ((i + 1) | 0)) {
            var buffer = constantBuffers[i];
            buffer.Dispose();
          }
          this.Effect$ConstantBuffers$value = null;
        }
      }
    }
    $T02().prototype.Dispose.call(this, disposing);
  };

  function Effect_FlushCache () {
    var enumerator = $T00().prototype.GetEnumerator.call($thisType.EffectCache);

    while ($T12().prototype.MoveNext.call(enumerator)) {
      var effect = $T12().prototype.get_Current.call(enumerator).MemberwiseClone();
      (effect.get_Value()).Dispose();
    }
    $thisType.EffectCache.Clear();
  };

  function Effect_get_ConstantBuffers () {
    return this.Effect$ConstantBuffers$value;
  };

  function Effect_get_CurrentTechnique () {
    return this.Effect$CurrentTechnique$value;
  };

  function Effect_get_Parameters () {
    return this.Effect$Parameters$value;
  };

  function Effect_get_Techniques () {
    return this.Effect$Techniques$value;
  };

  function Effect_GraphicsDeviceResetting () {

    for (var i = 0; i < (this.Effect$ConstantBuffers$value.length | 0); i = ((i + 1) | 0)) {
      (this.Effect$ConstantBuffers$value[i]).Clear();
    }
  };

  function Effect_LoadEffectResource (name) {
    var assembly = $thisType.__Type__.get_Assembly();
    var stream = assembly.GetManifestResourceStream(name);
    var ms = $S09().Construct();
    try {
      stream.CopyTo(ms);
      var result = ms.ToArray();
    } finally {
      if (ms !== null) {
        $IM00().Call(ms, null);
      }
    }
    return result;
  };

  function Effect_OnApply () {
    return false;
  };

  function Effect_ReadAnnotations (reader) {
    var count = (reader.ReadByte() | 0);
    if (count === 0) {
      var result = $T18().Empty;
    } else {
      var annotations = JSIL.Array.New($T1A(), count);
      result = new ($T18())(annotations);
    }
    return result;
  };

  function Effect_ReadEffect (reader) {
    var buffers = (reader.ReadByte() | 0);
    this.Effect$ConstantBuffers$value = JSIL.Array.New($T0D(), buffers);

    for (var c = 0; c < buffers; c = ((c + 1) | 0)) {
      var name = reader.ReadString();
      var sizeInBytes = (reader.ReadInt16() | 0);
      var parameters = JSIL.Array.New($T06(), reader.ReadByte());
      var offsets = JSIL.Array.New($T06(), parameters.length);

      for (var i = 0; i < (parameters.length | 0); i = ((i + 1) | 0)) {
        parameters[i] = (reader.ReadByte() | 0);
        offsets[i] = (reader.ReadUInt16() | 0);
      }
      var buffer = $S0A().Construct(this.GraphicsResource$GraphicsDevice$value, sizeInBytes, parameters, offsets, name);
      this.Effect$ConstantBuffers$value[c] = buffer;
    }
    var shaders = (reader.ReadByte() | 0);
    this._shaders = JSIL.Array.New($T11(), shaders);

    for (var s = 0; s < shaders; s = ((s + 1) | 0)) {
      this._shaders[s] = new ($T11())(this.GraphicsResource$GraphicsDevice$value, reader);
    }
    this.Effect$Parameters$value = $thisType.ReadParameters(reader);
    var techniqueCount = (reader.ReadByte() | 0);
    var techniques = JSIL.Array.New($T1D(), techniqueCount);

    for (var t = 0; t < techniqueCount; t = ((t + 1) | 0)) {
      name = reader.ReadString();
      var annotations = $thisType.ReadAnnotations(reader);
      var passes = $thisType.ReadPasses(reader, this, this._shaders);
      techniques[t] = $S0B().Construct(this, name, passes, annotations);
    }
    this.Effect$Techniques$value = new ($T0C())(techniques);
    this.Effect$CurrentTechnique$value = $S07().CallVirtual("get_Item", null, this.Effect$Techniques$value, 0);
  };

  function Effect_ReadHeader (effectCode) {
    var $temp00, $temp01;
    var header = new ($T05())();
    var i = 0;
    header.Signature = ($T1F().ToInt32(effectCode, i) | 0);
    i = ((i + 4) | 0);
    header.Version = (effectCode[($temp00 = i, 
      i = ((i + 1) | 0), 
      $temp00)] | 0);
    header.Profile = (effectCode[($temp01 = i, 
      i = ((i + 1) | 0), 
      $temp01)] | 0);
    if ((header.Version | 0) === 6) {
      header.EffectKey = ($T1F().ToInt32(effectCode, i) | 0);
      i = ((i + 4) | 0);
    } else if ((header.Version | 0) === 5) {
      header.EffectKey = ($S0C().CallStatic($T20(), "ComputeHash", null, effectCode) | 0);
    } else {
      if ((header.Version | 0) > 6) {
        throw $S0D().Construct("This MGFX effect seems to be for a newer release of MonoGame.");
      }
      throw $S0D().Construct("This MGFX effect is for an older release of MonoGame and needs to be rebuilt.");
    }
    header.HeaderSize = i;
    if ((header.Signature | 0) !== ($T05().MGFXSignature | 0)) {
      throw $S0D().Construct("This does not appear to be a MonoGame MGFX file!");
    }
    if ((header.Profile | 0) !== 0) {
      throw $S0D().Construct("This MGFX effect was built for a different platform!");
    }
    return header;
  };

  function Effect_ReadParameters (reader) {
    var count = (reader.ReadByte() | 0);
    if (count === 0) {
      var result = $T0B().Empty;
    } else {
      var parameters = JSIL.Array.New($T23(), count);

      for (var i = 0; i < count; i = ((i + 1) | 0)) {
        var class_ = $T24().$Cast(reader.ReadByte());
        var type = $T25().$Cast(reader.ReadByte());
        var name = reader.ReadString();
        var semantic = reader.ReadString();
        var annotations = $thisType.ReadAnnotations(reader);
        var rowCount = (reader.ReadByte() | 0);
        var columnCount = (reader.ReadByte() | 0);
        var elements = $thisType.ReadParameters(reader);
        var structMembers = $thisType.ReadParameters(reader);
        var data = null;
        if (!(((elements.get_Count() | 0) !== 0) || ((structMembers.get_Count() | 0) !== 0))) {
          switch (type.valueOf()) {
            case 1: 
            case 2: 
            case 3: 
              var buffer = JSIL.Array.New($T28(), Math.imul(rowCount, columnCount));

              for (var j = 0; j < (buffer.length | 0); j = ((j + 1) | 0)) {
                buffer[j] = +reader.ReadSingle();
              }
              data = buffer;
              break;

            case 4: 
              throw $S0E().Construct();

          }
        }
        parameters[i] = $S0F().Construct(class_, type, name, rowCount, columnCount, semantic, annotations, elements, structMembers, data);
      }
      result = new ($T0B())(parameters);
    }
    return result;
  };

  function Effect_ReadPasses (reader, effect, shaders) {
    var count = (reader.ReadByte() | 0);
    var passes = JSIL.Array.New($T2B(), count);

    for (var i = 0; i < count; i = ((i + 1) | 0)) {
      var name = reader.ReadString();
      var annotations = $thisType.ReadAnnotations(reader);
      var vertexShader = null;
      var shaderIndex = (reader.ReadByte() | 0);
      if (shaderIndex !== 255) {
        vertexShader = shaders[shaderIndex];
      }
      var pixelShader = null;
      shaderIndex = (reader.ReadByte() | 0);
      if (shaderIndex !== 255) {
        pixelShader = shaders[shaderIndex];
      }
      var blend = null;
      var depth = null;
      var raster = null;
      if (reader.ReadBoolean()) {
        var blendState = $S10().Construct();
        blendState.BlendState$AlphaBlendFunction$value = $T2F().$Cast(reader.ReadByte());
        blendState.BlendState$AlphaDestinationBlend$value = $T30().$Cast(reader.ReadByte());
        blendState.BlendState$AlphaSourceBlend$value = $T30().$Cast(reader.ReadByte());
        (blendState.BlendState$BlendFactor$value = $S11().Construct(reader.ReadByte(), reader.ReadByte(), reader.ReadByte(), reader.ReadByte()));
        blendState.BlendState$ColorBlendFunction$value = $T2F().$Cast(reader.ReadByte());
        blendState.BlendState$ColorDestinationBlend$value = $T30().$Cast(reader.ReadByte());
        blendState.BlendState$ColorSourceBlend$value = $T30().$Cast(reader.ReadByte());
        blendState.BlendState$ColorWriteChannels$value = $T32().$Cast(reader.ReadByte());
        blendState.BlendState$ColorWriteChannels1$value = $T32().$Cast(reader.ReadByte());
        blendState.BlendState$ColorWriteChannels2$value = $T32().$Cast(reader.ReadByte());
        blendState.BlendState$ColorWriteChannels3$value = $T32().$Cast(reader.ReadByte());
        blendState.BlendState$MultiSampleMask$value = (reader.ReadInt32() | 0);
        blend = blendState;
      }
      if (reader.ReadBoolean()) {
        var depthStencilState = $S12().Construct();
        depthStencilState.DepthStencilState$CounterClockwiseStencilDepthBufferFail$value = $T33().$Cast(reader.ReadByte());
        depthStencilState.DepthStencilState$CounterClockwiseStencilFail$value = $T33().$Cast(reader.ReadByte());
        depthStencilState.DepthStencilState$CounterClockwiseStencilFunction$value = $T34().$Cast(reader.ReadByte());
        depthStencilState.DepthStencilState$CounterClockwiseStencilPass$value = $T33().$Cast(reader.ReadByte());
        depthStencilState.DepthStencilState$DepthBufferEnable$value = reader.ReadBoolean();
        depthStencilState.DepthStencilState$DepthBufferFunction$value = $T34().$Cast(reader.ReadByte());
        depthStencilState.DepthStencilState$DepthBufferWriteEnable$value = reader.ReadBoolean();
        depthStencilState.DepthStencilState$ReferenceStencil$value = (reader.ReadInt32() | 0);
        depthStencilState.DepthStencilState$StencilDepthBufferFail$value = $T33().$Cast(reader.ReadByte());
        depthStencilState.DepthStencilState$StencilEnable$value = reader.ReadBoolean();
        depthStencilState.DepthStencilState$StencilFail$value = $T33().$Cast(reader.ReadByte());
        depthStencilState.DepthStencilState$StencilFunction$value = $T34().$Cast(reader.ReadByte());
        depthStencilState.DepthStencilState$StencilMask$value = (reader.ReadInt32() | 0);
        depthStencilState.DepthStencilState$StencilPass$value = $T33().$Cast(reader.ReadByte());
        depthStencilState.DepthStencilState$StencilWriteMask$value = (reader.ReadInt32() | 0);
        depthStencilState.DepthStencilState$TwoSidedStencilMode$value = reader.ReadBoolean();
        depth = depthStencilState;
      }
      if (reader.ReadBoolean()) {
        var rasterizerState = $S13().Construct();
        rasterizerState.RasterizerState$CullMode$value = $T35().$Cast(reader.ReadByte());
        rasterizerState.RasterizerState$DepthBias$value = +reader.ReadSingle();
        rasterizerState.RasterizerState$FillMode$value = $T36().$Cast(reader.ReadByte());
        rasterizerState.RasterizerState$MultiSampleAntiAlias$value = reader.ReadBoolean();
        rasterizerState.RasterizerState$ScissorTestEnable$value = reader.ReadBoolean();
        rasterizerState.RasterizerState$SlopeScaleDepthBias$value = +reader.ReadSingle();
        raster = rasterizerState;
      }
      passes[i] = $S14().Construct(effect, name, vertexShader, pixelShader, blend, depth, raster, annotations);
    }
    return new ($T1E())(passes);
  };

  function Effect_set_ConstantBuffers (value) {
    this.Effect$ConstantBuffers$value = value;
  };

  function Effect_set_CurrentTechnique (value) {
    this.Effect$CurrentTechnique$value = value;
  };

  function Effect_set_Parameters (value) {
    this.Effect$Parameters$value = value;
  };

  function Effect_set_Techniques (value) {
    this.Effect$Techniques$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.Effect", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      Effect__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      Effect__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $jsilcore.TypeRef("System.Array", [$.Byte])]), 
      Effect__ctor$02
    );

    $.Method({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Action($.Type), 
      Effect_Clone$03
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      Effect_Clone$04
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      Effect_Dispose$05
    );

    $.Method({Static:true , Public:false}, "FlushCache", 
      JSIL.MethodSignature.Void, 
      Effect_FlushCache
    );

    $.Method({Static:false, Public:false}, "get_ConstantBuffers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer")])), 
      Effect_get_ConstantBuffers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CurrentTechnique", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique")), 
      Effect_get_CurrentTechnique
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection")), 
      Effect_get_Parameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Techniques", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection")), 
      Effect_get_Techniques
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "GraphicsDeviceResetting", 
      JSIL.MethodSignature.Void, 
      Effect_GraphicsDeviceResetting
    );

    $.Method({Static:true , Public:false}, "LoadEffectResource", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String]), 
      Effect_LoadEffectResource
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnApply", 
      JSIL.MethodSignature.Return($.Boolean), 
      Effect_OnApply
    );

    $.Method({Static:true , Public:false}, "ReadAnnotations", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection"), [$asm01.TypeRef("System.IO.BinaryReader")]), 
      Effect_ReadAnnotations
    );

    $.Method({Static:false, Public:false}, "ReadEffect", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IO.BinaryReader")), 
      Effect_ReadEffect
    );

    $.Method({Static:false, Public:false}, "ReadHeader", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect+MGFXHeader"), [$jsilcore.TypeRef("System.Array", [$.Byte])]), 
      Effect_ReadHeader
    );

    $.Method({Static:true , Public:false}, "ReadParameters", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection"), [$asm01.TypeRef("System.IO.BinaryReader")]), 
      Effect_ReadParameters
    );

    $.Method({Static:true , Public:false}, "ReadPasses", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPassCollection"), [
          $asm01.TypeRef("System.IO.BinaryReader"), $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")])
        ]), 
      Effect_ReadPasses
    );

    $.Method({Static:false, Public:false}, "set_ConstantBuffers", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer")])), 
      Effect_set_ConstantBuffers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CurrentTechnique", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique")), 
      Effect_set_CurrentTechnique
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Parameters", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection")), 
      Effect_set_Parameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Techniques", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection")), 
      Effect_set_Techniques
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_shaders", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_isClone", $.Boolean); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "EffectCache", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Type])); 
    $.Field({Static:false, Public:false}, "Effect$Parameters$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Effect$Techniques$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Effect$CurrentTechnique$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Effect$ConstantBuffers$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function Effect__cctor () {
      $thisType.EffectCache = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Effect__cctor
    );

    $.Property({Static:false, Public:true }, "Parameters", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection"));

    $.Property({Static:false, Public:true }, "Techniques", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection"));

    $.Property({Static:false, Public:true }, "CurrentTechnique", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"));

    $.Property({Static:false, Public:false}, "ConstantBuffers", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.Effect+MGFXHeader */ 

(function MGFXHeader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.BitConverter)) ();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.Effect+MGFXHeader", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "MGFXVersion", 6); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MGFXSignature", $.Int32); 
    $.Field({Static:false, Public:true }, "Signature", $.Int32); 
    $.Field({Static:false, Public:true }, "Version", $.Int32); 
    $.Field({Static:false, Public:true }, "Profile", $.Int32); 
    $.Field({Static:false, Public:true }, "EffectKey", $.Int32); 
    $.Field({Static:false, Public:true }, "HeaderSize", $.Int32); 
    function MGFXHeader__cctor () {
      $thisType.MGFXSignature = ((
        $T00().IsLittleEndian
           ? 1481000781
           : 1296516696)
       | 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MGFXHeader__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.AlphaTestEffect */ 

(function AlphaTestEffect$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CompareFunction)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectDirtyFlags)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterCollection)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectHelpers)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.AlphaTestEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.AlphaTestEffect")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")))) ();
  };

  function AlphaTestEffect__ctor$00 (device) {
    this.world = $T02().get_Identity().MemberwiseClone();
    this.view = $T02().get_Identity().MemberwiseClone();
    this.projection = $T02().get_Identity().MemberwiseClone();
    this.diffuseColor = $T03().get_One().MemberwiseClone();
    this.alpha = 1;
    this.fogStart = 0;
    this.fogEnd = 1;
    this.alphaFunction = $T04().Greater;
    this.dirtyFlags = $T05().$Flags(
        "AlphaTest", "EyePosition", "Fog", "FogEnable", 
        "MaterialColor", "ShaderIndex", "World", "WorldViewProj"
    );
    $T00().prototype._ctor.call(this, device, $thisType.Bytecode);
    this.CacheEffectParameters();
  };

  function AlphaTestEffect__ctor$01 (cloneSource) {
    this.world = $T02().get_Identity().MemberwiseClone();
    this.view = $T02().get_Identity().MemberwiseClone();
    this.projection = $T02().get_Identity().MemberwiseClone();
    this.diffuseColor = $T03().get_One().MemberwiseClone();
    this.alpha = 1;
    this.fogStart = 0;
    this.fogEnd = 1;
    this.alphaFunction = $T04().Greater;
    this.dirtyFlags = $T05().$Flags(
        "AlphaTest", "EyePosition", "Fog", "FogEnable", 
        "MaterialColor", "ShaderIndex", "World", "WorldViewProj"
    );
    $S00().Call($T00().prototype, "_ctor", null, this, cloneSource);
    this.CacheEffectParameters();
    this.fogEnabled = cloneSource.fogEnabled;
    this.vertexColorEnabled = cloneSource.vertexColorEnabled;
    this.world = cloneSource.world.MemberwiseClone();
    this.view = cloneSource.view.MemberwiseClone();
    this.projection = cloneSource.projection.MemberwiseClone();
    this.diffuseColor = cloneSource.diffuseColor.MemberwiseClone();
    this.alpha = +cloneSource.alpha;
    this.fogStart = +cloneSource.fogStart;
    this.fogEnd = +cloneSource.fogEnd;
    this.alphaFunction = cloneSource.alphaFunction;
    this.referenceAlpha = (cloneSource.referenceAlpha | 0);
  };

  function AlphaTestEffect_CacheEffectParameters () {
    this.textureParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "Texture");
    this.diffuseColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DiffuseColor");
    this.alphaTestParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "AlphaTest");
    this.fogColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "FogColor");
    this.fogVectorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "FogVector");
    this.worldViewProjParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "WorldViewProj");
  };

  function AlphaTestEffect_Clone$02 () {
    return $S02().Construct(this);
  };

  function AlphaTestEffect_get_Alpha () {
    return this.alpha;
  };

  function AlphaTestEffect_get_AlphaFunction () {
    return this.alphaFunction;
  };

  function AlphaTestEffect_get_DiffuseColor () {
    return this.diffuseColor;
  };

  function AlphaTestEffect_get_FogColor () {
    return (this.fogColorParam).GetValueVector3();
  };

  function AlphaTestEffect_get_FogEnabled () {
    return this.fogEnabled;
  };

  function AlphaTestEffect_get_FogEnd () {
    return this.fogEnd;
  };

  function AlphaTestEffect_get_FogStart () {
    return this.fogStart;
  };

  function AlphaTestEffect_get_Projection () {
    return this.projection;
  };

  function AlphaTestEffect_get_ReferenceAlpha () {
    return this.referenceAlpha;
  };

  function AlphaTestEffect_get_Texture () {
    return (this.textureParam).GetValueTexture2D();
  };

  function AlphaTestEffect_get_VertexColorEnabled () {
    return this.vertexColorEnabled;
  };

  function AlphaTestEffect_get_View () {
    return this.view;
  };

  function AlphaTestEffect_get_World () {
    return this.world;
  };

  function AlphaTestEffect_OnApply () {
    this.dirtyFlags = $T08().SetWorldViewProjAndFog(
      this.dirtyFlags, 
      /* ref */ new JSIL.MemberReference(this, "world"), 
      /* ref */ new JSIL.MemberReference(this, "view"), 
      /* ref */ new JSIL.MemberReference(this, "projection"), 
      /* ref */ new JSIL.MemberReference(this, "worldView"), 
      this.fogEnabled, 
      this.fogStart, 
      this.fogEnd, 
      this.worldViewProjParam, 
      this.fogVectorParam
    );
    if ($T05().$Cast(this.dirtyFlags & $T05().MaterialColor) !== $T05().$Cast(0)) {
      $S03().CallVirtual("SetValue", null, this.diffuseColorParam, $S04().Construct($S05().CallStatic($T03(), "op_Multiply", null, this.diffuseColor.MemberwiseClone(), this.alpha), this.alpha));
      this.dirtyFlags = $T05().$Cast(this.dirtyFlags & $T05().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "ShaderIndex", "World", "WorldViewProj"
        ));
    }
    if ($T05().$Cast(this.dirtyFlags & $T05().AlphaTest) !== $T05().$Cast(0)) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            var alphaTest = new ($T09())();
            var eqNe = false;
            var reference = +((+(this.referenceAlpha) / 255));
            switch ((this.alphaFunction).valueOf()) {
              case 1: 
                alphaTest.Z = -1;
                alphaTest.W = -1;
                break $labelgroup0;

              case 2: 
                alphaTest.X = reference - 0.00196078443;
                alphaTest.Z = 1;
                alphaTest.W = -1;
                break $labelgroup0;

              case 3: 
                alphaTest.X = reference + 0.00196078443;
                alphaTest.Z = 1;
                alphaTest.W = -1;
                break $labelgroup0;

              case 4: 
                alphaTest.X = reference;
                alphaTest.Y = 0.00196078443;
                alphaTest.Z = 1;
                alphaTest.W = -1;
                eqNe = true;
                break $labelgroup0;

              case 5: 
                alphaTest.X = reference - 0.00196078443;
                alphaTest.Z = -1;
                alphaTest.W = 1;
                break $labelgroup0;

              case 6: 
                alphaTest.X = reference + 0.00196078443;
                alphaTest.Z = -1;
                alphaTest.W = 1;
                break $labelgroup0;

              case 7: 
                alphaTest.X = reference;
                alphaTest.Y = 0.00196078443;
                alphaTest.Z = -1;
                alphaTest.W = 1;
                eqNe = true;
                break $labelgroup0;

            }
            alphaTest.Z = 1;
            alphaTest.W = 1;
            break $labelgroup0;

        }
      }
      /* Original label IL_234 */ 
      $S03().CallVirtual("SetValue", null, this.alphaTestParam, alphaTest);
      this.dirtyFlags = $T05().$Cast(this.dirtyFlags & $T05().$Flags(
            "EyePosition", "Fog", "FogEnable", "MaterialColor", 
            "ShaderIndex", "World", "WorldViewProj"
        ));
      if (this.isEqNe !== eqNe) {
        this.isEqNe = eqNe;
        this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().ShaderIndex);
      }
    }
    if ($T05().$Cast(this.dirtyFlags & $T05().ShaderIndex) !== $T05().$Cast(0)) {
      var shaderIndex = 0;
      if (!this.fogEnabled) {
        shaderIndex = ((shaderIndex + 1) | 0);
      }
      if (this.vertexColorEnabled) {
        shaderIndex = ((shaderIndex + 2) | 0);
      }
      if (this.isEqNe) {
        shaderIndex = ((shaderIndex + 4) | 0);
      }
      this.dirtyFlags = $T05().$Cast(this.dirtyFlags & $T05().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "MaterialColor", "World", "WorldViewProj"
        ));
      if ((this._shaderIndex | 0) !== shaderIndex) {
        this._shaderIndex = shaderIndex;
        this.Effect$CurrentTechnique$value = $S06().CallVirtual("get_Item", null, this.Effect$Techniques$value, this._shaderIndex);
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function AlphaTestEffect_set_Alpha (value) {
    this.alpha = +value;
    this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().MaterialColor);
  };

  function AlphaTestEffect_set_AlphaFunction (value) {
    this.alphaFunction = value;
    this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().AlphaTest);
  };

  function AlphaTestEffect_set_DiffuseColor (value) {
    this.diffuseColor = value.MemberwiseClone();
    this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().MaterialColor);
  };

  function AlphaTestEffect_set_FogColor (value) {
    $S07().CallVirtual("SetValue", null, this.fogColorParam, value);
  };

  function AlphaTestEffect_set_FogEnabled (value) {
    if (this.fogEnabled !== value) {
      this.fogEnabled = value;
      this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().$Flags("FogEnable", "ShaderIndex"));
    }
  };

  function AlphaTestEffect_set_FogEnd (value) {
    this.fogEnd = +value;
    this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().Fog);
  };

  function AlphaTestEffect_set_FogStart (value) {
    this.fogStart = +value;
    this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().Fog);
  };

  function AlphaTestEffect_set_Projection (value) {
    this.projection = value.MemberwiseClone();
    this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().WorldViewProj);
  };

  function AlphaTestEffect_set_ReferenceAlpha (value) {
    this.referenceAlpha = (value | 0);
    this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().AlphaTest);
  };

  function AlphaTestEffect_set_Texture (value) {
    $S08().CallVirtual("SetValue", null, this.textureParam, value);
  };

  function AlphaTestEffect_set_VertexColorEnabled (value) {
    if (this.vertexColorEnabled !== value) {
      this.vertexColorEnabled = value;
      this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().ShaderIndex);
    }
  };

  function AlphaTestEffect_set_View (value) {
    this.view = value.MemberwiseClone();
    this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().$Flags("Fog", "WorldViewProj"));
  };

  function AlphaTestEffect_set_World (value) {
    this.world = value.MemberwiseClone();
    this.dirtyFlags = $T05().$Cast(this.dirtyFlags | $T05().$Flags("Fog", "WorldViewProj"));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), 
      Name: "Microsoft.Xna.Framework.Graphics.AlphaTestEffect", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      AlphaTestEffect__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      AlphaTestEffect__ctor$01
    );

    $.Method({Static:false, Public:false}, "CacheEffectParameters", 
      JSIL.MethodSignature.Void, 
      AlphaTestEffect_CacheEffectParameters
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      AlphaTestEffect_Clone$02
    );

    $.Method({Static:false, Public:true }, "get_Alpha", 
      JSIL.MethodSignature.Return($.Single), 
      AlphaTestEffect_get_Alpha
    );

    $.Method({Static:false, Public:true }, "get_AlphaFunction", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")), 
      AlphaTestEffect_get_AlphaFunction
    );

    $.Method({Static:false, Public:true }, "get_DiffuseColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AlphaTestEffect_get_DiffuseColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AlphaTestEffect_get_FogColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      AlphaTestEffect_get_FogEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogEnd", 
      JSIL.MethodSignature.Return($.Single), 
      AlphaTestEffect_get_FogEnd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogStart", 
      JSIL.MethodSignature.Return($.Single), 
      AlphaTestEffect_get_FogStart
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Projection", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      AlphaTestEffect_get_Projection
    );

    $.Method({Static:false, Public:true }, "get_ReferenceAlpha", 
      JSIL.MethodSignature.Return($.Int32), 
      AlphaTestEffect_get_ReferenceAlpha
    );

    $.Method({Static:false, Public:true }, "get_Texture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      AlphaTestEffect_get_Texture
    );

    $.Method({Static:false, Public:true }, "get_VertexColorEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      AlphaTestEffect_get_VertexColorEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_View", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      AlphaTestEffect_get_View
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_World", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      AlphaTestEffect_get_World
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnApply", 
      JSIL.MethodSignature.Return($.Boolean), 
      AlphaTestEffect_OnApply
    );

    $.Method({Static:false, Public:true }, "set_Alpha", 
      JSIL.MethodSignature.Action($.Single), 
      AlphaTestEffect_set_Alpha
    );

    $.Method({Static:false, Public:true }, "set_AlphaFunction", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")), 
      AlphaTestEffect_set_AlphaFunction
    );

    $.Method({Static:false, Public:true }, "set_DiffuseColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AlphaTestEffect_set_DiffuseColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AlphaTestEffect_set_FogColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      AlphaTestEffect_set_FogEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogEnd", 
      JSIL.MethodSignature.Action($.Single), 
      AlphaTestEffect_set_FogEnd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogStart", 
      JSIL.MethodSignature.Action($.Single), 
      AlphaTestEffect_set_FogStart
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Projection", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      AlphaTestEffect_set_Projection
    );

    $.Method({Static:false, Public:true }, "set_ReferenceAlpha", 
      JSIL.MethodSignature.Action($.Int32), 
      AlphaTestEffect_set_ReferenceAlpha
    );

    $.Method({Static:false, Public:true }, "set_Texture", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      AlphaTestEffect_set_Texture
    );

    $.Method({Static:false, Public:true }, "set_VertexColorEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      AlphaTestEffect_set_VertexColorEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_View", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      AlphaTestEffect_set_View
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_World", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      AlphaTestEffect_set_World
    );

    $.Field({Static:false, Public:false}, "textureParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "diffuseColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "alphaTestParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "fogColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "fogVectorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "worldViewProjParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "_shaderIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "fogEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "vertexColorEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "world", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "view", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "projection", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "worldView", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "diffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "alpha", $.Single); 
    $.Field({Static:false, Public:false}, "fogStart", $.Single); 
    $.Field({Static:false, Public:false}, "fogEnd", $.Single); 
    $.Field({Static:false, Public:false}, "alphaFunction", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")); 
    $.Field({Static:false, Public:false}, "referenceAlpha", $.Int32); 
    $.Field({Static:false, Public:false}, "isEqNe", $.Boolean); 
    $.Field({Static:false, Public:false}, "dirtyFlags", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectDirtyFlags")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Bytecode", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    function AlphaTestEffect__cctor () {
      $thisType.Bytecode = $T00().LoadEffectResource("Microsoft.Xna.Framework.Graphics.Effect.Resources.AlphaTestEffect.ogl.mgfxo");
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      AlphaTestEffect__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "World", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true , Virtual:true }, "View", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true , Virtual:true }, "Projection", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true }, "DiffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Alpha", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogEnabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "FogStart", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogEnd", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Property({Static:false, Public:true }, "VertexColorEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "AlphaFunction", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction"));

    $.Property({Static:false, Public:true }, "ReferenceAlpha", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectMatrices"), 
      /* 2 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectFog")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.BasicEffect */ 

(function BasicEffect$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectDirtyFlags)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DirectionalLight)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterCollection)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectHelpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BasicEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BasicEffect")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Single")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")))) ();
  };

  function BasicEffect__ctor$00 (device) {
    this._shaderIndex = -1;
    this.world = $T02().get_Identity().MemberwiseClone();
    this.view = $T02().get_Identity().MemberwiseClone();
    this.projection = $T02().get_Identity().MemberwiseClone();
    this.diffuseColor = $T03().get_One().MemberwiseClone();
    this.emissiveColor = $T03().get_Zero().MemberwiseClone();
    this.ambientLightColor = $T03().get_Zero().MemberwiseClone();
    this.alpha = 1;
    this.fogStart = 0;
    this.fogEnd = 1;
    this.dirtyFlags = $T04().$Flags(
        "AlphaTest", "EyePosition", "Fog", "FogEnable", 
        "MaterialColor", "ShaderIndex", "World", "WorldViewProj"
    );
    $T00().prototype._ctor.call(this, device, $thisType.Bytecode);
    this.CacheEffectParameters(null);
    (this.get_DirectionalLight0()).set_Enabled(true);
    (this.SpecularColor = $T03().get_One().MemberwiseClone());
    this.set_SpecularPower(16);
  };

  function BasicEffect__ctor$01 (cloneSource) {
    this._shaderIndex = -1;
    this.world = $T02().get_Identity().MemberwiseClone();
    this.view = $T02().get_Identity().MemberwiseClone();
    this.projection = $T02().get_Identity().MemberwiseClone();
    this.diffuseColor = $T03().get_One().MemberwiseClone();
    this.emissiveColor = $T03().get_Zero().MemberwiseClone();
    this.ambientLightColor = $T03().get_Zero().MemberwiseClone();
    this.alpha = 1;
    this.fogStart = 0;
    this.fogEnd = 1;
    this.dirtyFlags = $T04().$Flags(
        "AlphaTest", "EyePosition", "Fog", "FogEnable", 
        "MaterialColor", "ShaderIndex", "World", "WorldViewProj"
    );
    $S00().Call($T00().prototype, "_ctor", null, this, cloneSource);
    this.CacheEffectParameters(cloneSource);
    this.lightingEnabled = cloneSource.lightingEnabled;
    this.preferPerPixelLighting = cloneSource.preferPerPixelLighting;
    this.fogEnabled = cloneSource.fogEnabled;
    this.textureEnabled = cloneSource.textureEnabled;
    this.vertexColorEnabled = cloneSource.vertexColorEnabled;
    this.world = cloneSource.world.MemberwiseClone();
    this.view = cloneSource.view.MemberwiseClone();
    this.projection = cloneSource.projection.MemberwiseClone();
    this.diffuseColor = cloneSource.diffuseColor.MemberwiseClone();
    this.emissiveColor = cloneSource.emissiveColor.MemberwiseClone();
    this.ambientLightColor = cloneSource.ambientLightColor.MemberwiseClone();
    this.alpha = +cloneSource.alpha;
    this.fogStart = +cloneSource.fogStart;
    this.fogEnd = +cloneSource.fogEnd;
  };

  function BasicEffect_CacheEffectParameters (cloneSource) {
    this.textureParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "Texture");
    this.diffuseColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DiffuseColor");
    this.emissiveColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "EmissiveColor");
    this.specularColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "SpecularColor");
    this.specularPowerParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "SpecularPower");
    this.eyePositionParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "EyePosition");
    this.fogColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "FogColor");
    this.fogVectorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "FogVector");
    this.worldParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "World");
    this.worldInverseTransposeParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "WorldInverseTranspose");
    this.worldViewProjParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "WorldViewProj");
    this.light0 = new ($T05())($S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight0Direction"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight0DiffuseColor"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight0SpecularColor"), (
        (cloneSource !== null)
           ? cloneSource.light0
           : null)
    );
    this.light1 = new ($T05())($S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight1Direction"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight1DiffuseColor"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight1SpecularColor"), (
        (cloneSource !== null)
           ? cloneSource.light1
           : null)
    );
    this.light2 = new ($T05())($S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight2Direction"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight2DiffuseColor"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight2SpecularColor"), (
        (cloneSource !== null)
           ? cloneSource.light2
           : null)
    );
  };

  function BasicEffect_Clone$02 () {
    return $S02().Construct(this);
  };

  function BasicEffect_EnableDefaultLighting () {
    this.set_LightingEnabled(true);
    (this.AmbientLightColor = $T07().EnableDefaultLighting(this.light0, this.light1, this.light2));
  };

  function BasicEffect_get_Alpha () {
    return this.alpha;
  };

  function BasicEffect_get_AmbientLightColor () {
    return this.ambientLightColor;
  };

  function BasicEffect_get_DiffuseColor () {
    return this.diffuseColor;
  };

  function BasicEffect_get_DirectionalLight0 () {
    return this.light0;
  };

  function BasicEffect_get_DirectionalLight1 () {
    return this.light1;
  };

  function BasicEffect_get_DirectionalLight2 () {
    return this.light2;
  };

  function BasicEffect_get_EmissiveColor () {
    return this.emissiveColor;
  };

  function BasicEffect_get_FogColor () {
    return (this.fogColorParam).GetValueVector3();
  };

  function BasicEffect_get_FogEnabled () {
    return this.fogEnabled;
  };

  function BasicEffect_get_FogEnd () {
    return this.fogEnd;
  };

  function BasicEffect_get_FogStart () {
    return this.fogStart;
  };

  function BasicEffect_get_LightingEnabled () {
    return this.lightingEnabled;
  };

  function BasicEffect_get_PreferPerPixelLighting () {
    return this.preferPerPixelLighting;
  };

  function BasicEffect_get_Projection () {
    return this.projection;
  };

  function BasicEffect_get_SpecularColor () {
    return (this.specularColorParam).GetValueVector3();
  };

  function BasicEffect_get_SpecularPower () {
    return (this.specularPowerParam).GetValueSingle();
  };

  function BasicEffect_get_Texture () {
    return (this.textureParam).GetValueTexture2D();
  };

  function BasicEffect_get_TextureEnabled () {
    return this.textureEnabled;
  };

  function BasicEffect_get_VertexColorEnabled () {
    return this.vertexColorEnabled;
  };

  function BasicEffect_get_View () {
    return this.view;
  };

  function BasicEffect_get_World () {
    return this.world;
  };

  function BasicEffect_OnApply () {
    this.dirtyFlags = $T07().SetWorldViewProjAndFog(
      this.dirtyFlags, 
      /* ref */ new JSIL.MemberReference(this, "world"), 
      /* ref */ new JSIL.MemberReference(this, "view"), 
      /* ref */ new JSIL.MemberReference(this, "projection"), 
      /* ref */ new JSIL.MemberReference(this, "worldView"), 
      this.fogEnabled, 
      this.fogStart, 
      this.fogEnd, 
      this.worldViewProjParam, 
      this.fogVectorParam
    );
    if ($T04().$Cast(this.dirtyFlags & $T04().MaterialColor) !== $T04().$Cast(0)) {
      $T07().SetMaterialColor(
        this.lightingEnabled, 
        this.alpha, 
        /* ref */ new JSIL.MemberReference(this, "diffuseColor"), 
        /* ref */ new JSIL.MemberReference(this, "emissiveColor"), 
        /* ref */ new JSIL.MemberReference(this, "ambientLightColor"), 
        this.diffuseColorParam, 
        this.emissiveColorParam
      );
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags & $T04().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "ShaderIndex", "World", "WorldViewProj"
        ));
    }
    if (this.lightingEnabled) {
      this.dirtyFlags = $T07().SetLightingMatrices(
        this.dirtyFlags, 
        /* ref */ new JSIL.MemberReference(this, "world"), 
        /* ref */ new JSIL.MemberReference(this, "view"), 
        this.worldParam, 
        this.worldInverseTransposeParam, 
        this.eyePositionParam
      );
      var newOneLight = !(this.light1).get_Enabled() && 
      !(this.light2).get_Enabled();
      if (this.oneLight !== newOneLight) {
        this.oneLight = newOneLight;
        this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().ShaderIndex);
      }
    }
    if ($T04().$Cast(this.dirtyFlags & $T04().ShaderIndex) !== $T04().$Cast(0)) {
      var shaderIndex = 0;
      if (!this.fogEnabled) {
        shaderIndex = ((shaderIndex + 1) | 0);
      }
      if (this.vertexColorEnabled) {
        shaderIndex = ((shaderIndex + 2) | 0);
      }
      if (this.textureEnabled) {
        shaderIndex = ((shaderIndex + 4) | 0);
      }
      if (this.lightingEnabled) {
        if (this.preferPerPixelLighting) {
          shaderIndex = ((shaderIndex + 24) | 0);
        } else if (this.oneLight) {
          shaderIndex = ((shaderIndex + 16) | 0);
        } else {
          shaderIndex = ((shaderIndex + 8) | 0);
        }
      }
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags & $T04().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "MaterialColor", "World", "WorldViewProj"
        ));
      if ((this._shaderIndex | 0) !== shaderIndex) {
        this._shaderIndex = shaderIndex;
        this.Effect$CurrentTechnique$value = $S03().CallVirtual("get_Item", null, this.Effect$Techniques$value, this._shaderIndex);
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function BasicEffect_set_Alpha (value) {
    this.alpha = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function BasicEffect_set_AmbientLightColor (value) {
    this.ambientLightColor = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function BasicEffect_set_DiffuseColor (value) {
    this.diffuseColor = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function BasicEffect_set_EmissiveColor (value) {
    this.emissiveColor = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function BasicEffect_set_FogColor (value) {
    $S04().CallVirtual("SetValue", null, this.fogColorParam, value);
  };

  function BasicEffect_set_FogEnabled (value) {
    if (this.fogEnabled !== value) {
      this.fogEnabled = value;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("FogEnable", "ShaderIndex"));
    }
  };

  function BasicEffect_set_FogEnd (value) {
    this.fogEnd = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().Fog);
  };

  function BasicEffect_set_FogStart (value) {
    this.fogStart = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().Fog);
  };

  function BasicEffect_set_LightingEnabled (value) {
    if (this.lightingEnabled !== value) {
      this.lightingEnabled = value;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("MaterialColor", "ShaderIndex"));
    }
  };

  function BasicEffect_set_PreferPerPixelLighting (value) {
    if (this.preferPerPixelLighting !== value) {
      this.preferPerPixelLighting = value;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().ShaderIndex);
    }
  };

  function BasicEffect_set_Projection (value) {
    this.projection = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().WorldViewProj);
  };

  function BasicEffect_set_SpecularColor (value) {
    $S04().CallVirtual("SetValue", null, this.specularColorParam, value);
  };

  function BasicEffect_set_SpecularPower (value) {
    $S05().CallVirtual("SetValue", null, this.specularPowerParam, value);
  };

  function BasicEffect_set_Texture (value) {
    $S06().CallVirtual("SetValue", null, this.textureParam, value);
  };

  function BasicEffect_set_TextureEnabled (value) {
    if (this.textureEnabled !== value) {
      this.textureEnabled = value;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().ShaderIndex);
    }
  };

  function BasicEffect_set_VertexColorEnabled (value) {
    if (this.vertexColorEnabled !== value) {
      this.vertexColorEnabled = value;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().ShaderIndex);
    }
  };

  function BasicEffect_set_View (value) {
    this.view = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("EyePosition", "Fog", "WorldViewProj"));
  };

  function BasicEffect_set_World (value) {
    this.world = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("Fog", "World", "WorldViewProj"));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), 
      Name: "Microsoft.Xna.Framework.Graphics.BasicEffect", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      BasicEffect__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      BasicEffect__ctor$01
    );

    $.Method({Static:false, Public:false}, "CacheEffectParameters", 
      JSIL.MethodSignature.Action($.Type), 
      BasicEffect_CacheEffectParameters
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      BasicEffect_Clone$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EnableDefaultLighting", 
      JSIL.MethodSignature.Void, 
      BasicEffect_EnableDefaultLighting
    );

    $.Method({Static:false, Public:true }, "get_Alpha", 
      JSIL.MethodSignature.Return($.Single), 
      BasicEffect_get_Alpha
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AmbientLightColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      BasicEffect_get_AmbientLightColor
    );

    $.Method({Static:false, Public:true }, "get_DiffuseColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      BasicEffect_get_DiffuseColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DirectionalLight0", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")), 
      BasicEffect_get_DirectionalLight0
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DirectionalLight1", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")), 
      BasicEffect_get_DirectionalLight1
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DirectionalLight2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")), 
      BasicEffect_get_DirectionalLight2
    );

    $.Method({Static:false, Public:true }, "get_EmissiveColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      BasicEffect_get_EmissiveColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      BasicEffect_get_FogColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      BasicEffect_get_FogEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogEnd", 
      JSIL.MethodSignature.Return($.Single), 
      BasicEffect_get_FogEnd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogStart", 
      JSIL.MethodSignature.Return($.Single), 
      BasicEffect_get_FogStart
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_LightingEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      BasicEffect_get_LightingEnabled
    );

    $.Method({Static:false, Public:true }, "get_PreferPerPixelLighting", 
      JSIL.MethodSignature.Return($.Boolean), 
      BasicEffect_get_PreferPerPixelLighting
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Projection", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      BasicEffect_get_Projection
    );

    $.Method({Static:false, Public:true }, "get_SpecularColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      BasicEffect_get_SpecularColor
    );

    $.Method({Static:false, Public:true }, "get_SpecularPower", 
      JSIL.MethodSignature.Return($.Single), 
      BasicEffect_get_SpecularPower
    );

    $.Method({Static:false, Public:true }, "get_Texture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      BasicEffect_get_Texture
    );

    $.Method({Static:false, Public:true }, "get_TextureEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      BasicEffect_get_TextureEnabled
    );

    $.Method({Static:false, Public:true }, "get_VertexColorEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      BasicEffect_get_VertexColorEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_View", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      BasicEffect_get_View
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_World", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      BasicEffect_get_World
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnApply", 
      JSIL.MethodSignature.Return($.Boolean), 
      BasicEffect_OnApply
    );

    $.Method({Static:false, Public:true }, "set_Alpha", 
      JSIL.MethodSignature.Action($.Single), 
      BasicEffect_set_Alpha
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_AmbientLightColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      BasicEffect_set_AmbientLightColor
    );

    $.Method({Static:false, Public:true }, "set_DiffuseColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      BasicEffect_set_DiffuseColor
    );

    $.Method({Static:false, Public:true }, "set_EmissiveColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      BasicEffect_set_EmissiveColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      BasicEffect_set_FogColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      BasicEffect_set_FogEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogEnd", 
      JSIL.MethodSignature.Action($.Single), 
      BasicEffect_set_FogEnd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogStart", 
      JSIL.MethodSignature.Action($.Single), 
      BasicEffect_set_FogStart
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_LightingEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      BasicEffect_set_LightingEnabled
    );

    $.Method({Static:false, Public:true }, "set_PreferPerPixelLighting", 
      JSIL.MethodSignature.Action($.Boolean), 
      BasicEffect_set_PreferPerPixelLighting
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Projection", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      BasicEffect_set_Projection
    );

    $.Method({Static:false, Public:true }, "set_SpecularColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      BasicEffect_set_SpecularColor
    );

    $.Method({Static:false, Public:true }, "set_SpecularPower", 
      JSIL.MethodSignature.Action($.Single), 
      BasicEffect_set_SpecularPower
    );

    $.Method({Static:false, Public:true }, "set_Texture", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      BasicEffect_set_Texture
    );

    $.Method({Static:false, Public:true }, "set_TextureEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      BasicEffect_set_TextureEnabled
    );

    $.Method({Static:false, Public:true }, "set_VertexColorEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      BasicEffect_set_VertexColorEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_View", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      BasicEffect_set_View
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_World", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      BasicEffect_set_World
    );

    $.Field({Static:false, Public:false}, "textureParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "diffuseColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "emissiveColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "specularColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "specularPowerParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "eyePositionParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "fogColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "fogVectorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "worldParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "worldInverseTransposeParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "worldViewProjParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "_shaderIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "lightingEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "preferPerPixelLighting", $.Boolean); 
    $.Field({Static:false, Public:false}, "oneLight", $.Boolean); 
    $.Field({Static:false, Public:false}, "fogEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "textureEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "vertexColorEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "world", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "view", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "projection", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "worldView", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "diffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "emissiveColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "ambientLightColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "alpha", $.Single); 
    $.Field({Static:false, Public:false}, "light0", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")); 
    $.Field({Static:false, Public:false}, "light1", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")); 
    $.Field({Static:false, Public:false}, "light2", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")); 
    $.Field({Static:false, Public:false}, "fogStart", $.Single); 
    $.Field({Static:false, Public:false}, "fogEnd", $.Single); 
    $.Field({Static:false, Public:false}, "dirtyFlags", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectDirtyFlags")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Bytecode", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    function BasicEffect__cctor () {
      $thisType.Bytecode = $T00().LoadEffectResource("Microsoft.Xna.Framework.Graphics.Effect.Resources.BasicEffect.ogl.mgfxo");
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BasicEffect__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "World", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true , Virtual:true }, "View", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true , Virtual:true }, "Projection", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true }, "DiffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "EmissiveColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "SpecularColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "SpecularPower", $.Single);

    $.Property({Static:false, Public:true }, "Alpha", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "LightingEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "PreferPerPixelLighting", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AmbientLightColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true , Virtual:true }, "DirectionalLight0", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight"));

    $.Property({Static:false, Public:true , Virtual:true }, "DirectionalLight1", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight"));

    $.Property({Static:false, Public:true , Virtual:true }, "DirectionalLight2", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight"));

    $.Property({Static:false, Public:true , Virtual:true }, "FogEnabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "FogStart", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogEnd", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "TextureEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "Texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Property({Static:false, Public:true }, "VertexColorEnabled", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectMatrices"), 
      /* 2 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectLights"), 
      /* 3 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectFog")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.DualTextureEffect */ 

(function DualTextureEffect$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectDirtyFlags)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterCollection)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectHelpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DualTextureEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DualTextureEffect")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")))) ();
  };

  function DualTextureEffect__ctor$00 (device) {
    this._shaderIndex = -1;
    this.world = $T02().get_Identity().MemberwiseClone();
    this.view = $T02().get_Identity().MemberwiseClone();
    this.projection = $T02().get_Identity().MemberwiseClone();
    this.diffuseColor = $T03().get_One().MemberwiseClone();
    this.alpha = 1;
    this.fogStart = 0;
    this.fogEnd = 1;
    this.dirtyFlags = $T04().$Flags(
        "AlphaTest", "EyePosition", "Fog", "FogEnable", 
        "MaterialColor", "ShaderIndex", "World", "WorldViewProj"
    );
    $T00().prototype._ctor.call(this, device, $thisType.Bytecode);
    this.CacheEffectParameters();
  };

  function DualTextureEffect__ctor$01 (cloneSource) {
    this._shaderIndex = -1;
    this.world = $T02().get_Identity().MemberwiseClone();
    this.view = $T02().get_Identity().MemberwiseClone();
    this.projection = $T02().get_Identity().MemberwiseClone();
    this.diffuseColor = $T03().get_One().MemberwiseClone();
    this.alpha = 1;
    this.fogStart = 0;
    this.fogEnd = 1;
    this.dirtyFlags = $T04().$Flags(
        "AlphaTest", "EyePosition", "Fog", "FogEnable", 
        "MaterialColor", "ShaderIndex", "World", "WorldViewProj"
    );
    $S00().Call($T00().prototype, "_ctor", null, this, cloneSource);
    this.CacheEffectParameters();
    this.fogEnabled = cloneSource.fogEnabled;
    this.vertexColorEnabled = cloneSource.vertexColorEnabled;
    this.world = cloneSource.world.MemberwiseClone();
    this.view = cloneSource.view.MemberwiseClone();
    this.projection = cloneSource.projection.MemberwiseClone();
    this.diffuseColor = cloneSource.diffuseColor.MemberwiseClone();
    this.alpha = +cloneSource.alpha;
    this.fogStart = +cloneSource.fogStart;
    this.fogEnd = +cloneSource.fogEnd;
  };

  function DualTextureEffect_CacheEffectParameters () {
    this.textureParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "Texture");
    this.texture2Param = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "Texture2");
    this.diffuseColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DiffuseColor");
    this.fogColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "FogColor");
    this.fogVectorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "FogVector");
    this.worldViewProjParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "WorldViewProj");
  };

  function DualTextureEffect_Clone$02 () {
    return $S02().Construct(this);
  };

  function DualTextureEffect_get_Alpha () {
    return this.alpha;
  };

  function DualTextureEffect_get_DiffuseColor () {
    return this.diffuseColor;
  };

  function DualTextureEffect_get_FogColor () {
    return (this.fogColorParam).GetValueVector3();
  };

  function DualTextureEffect_get_FogEnabled () {
    return this.fogEnabled;
  };

  function DualTextureEffect_get_FogEnd () {
    return this.fogEnd;
  };

  function DualTextureEffect_get_FogStart () {
    return this.fogStart;
  };

  function DualTextureEffect_get_Projection () {
    return this.projection;
  };

  function DualTextureEffect_get_Texture () {
    return (this.textureParam).GetValueTexture2D();
  };

  function DualTextureEffect_get_Texture2 () {
    return (this.texture2Param).GetValueTexture2D();
  };

  function DualTextureEffect_get_VertexColorEnabled () {
    return this.vertexColorEnabled;
  };

  function DualTextureEffect_get_View () {
    return this.view;
  };

  function DualTextureEffect_get_World () {
    return this.world;
  };

  function DualTextureEffect_OnApply () {
    this.dirtyFlags = $T07().SetWorldViewProjAndFog(
      this.dirtyFlags, 
      /* ref */ new JSIL.MemberReference(this, "world"), 
      /* ref */ new JSIL.MemberReference(this, "view"), 
      /* ref */ new JSIL.MemberReference(this, "projection"), 
      /* ref */ new JSIL.MemberReference(this, "worldView"), 
      this.fogEnabled, 
      this.fogStart, 
      this.fogEnd, 
      this.worldViewProjParam, 
      this.fogVectorParam
    );
    if ($T04().$Cast(this.dirtyFlags & $T04().MaterialColor) !== $T04().$Cast(0)) {
      $S03().CallVirtual("SetValue", null, this.diffuseColorParam, $S04().Construct($S05().CallStatic($T03(), "op_Multiply", null, this.diffuseColor.MemberwiseClone(), this.alpha), this.alpha));
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags & $T04().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "ShaderIndex", "World", "WorldViewProj"
        ));
    }
    if ($T04().$Cast(this.dirtyFlags & $T04().ShaderIndex) !== $T04().$Cast(0)) {
      var shaderIndex = 0;
      if (!this.fogEnabled) {
        shaderIndex = ((shaderIndex + 1) | 0);
      }
      if (this.vertexColorEnabled) {
        shaderIndex = ((shaderIndex + 2) | 0);
      }
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags & $T04().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "MaterialColor", "World", "WorldViewProj"
        ));
      if ((this._shaderIndex | 0) !== shaderIndex) {
        this._shaderIndex = shaderIndex;
        this.Effect$CurrentTechnique$value = $S06().CallVirtual("get_Item", null, this.Effect$Techniques$value, this._shaderIndex);
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function DualTextureEffect_set_Alpha (value) {
    this.alpha = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function DualTextureEffect_set_DiffuseColor (value) {
    this.diffuseColor = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function DualTextureEffect_set_FogColor (value) {
    $S07().CallVirtual("SetValue", null, this.fogColorParam, value);
  };

  function DualTextureEffect_set_FogEnabled (value) {
    if (this.fogEnabled !== value) {
      this.fogEnabled = value;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("FogEnable", "ShaderIndex"));
    }
  };

  function DualTextureEffect_set_FogEnd (value) {
    this.fogEnd = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().Fog);
  };

  function DualTextureEffect_set_FogStart (value) {
    this.fogStart = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().Fog);
  };

  function DualTextureEffect_set_Projection (value) {
    this.projection = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().WorldViewProj);
  };

  function DualTextureEffect_set_Texture (value) {
    $S08().CallVirtual("SetValue", null, this.textureParam, value);
  };

  function DualTextureEffect_set_Texture2 (value) {
    $S08().CallVirtual("SetValue", null, this.texture2Param, value);
  };

  function DualTextureEffect_set_VertexColorEnabled (value) {
    if (this.vertexColorEnabled !== value) {
      this.vertexColorEnabled = value;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().ShaderIndex);
    }
  };

  function DualTextureEffect_set_View (value) {
    this.view = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("Fog", "WorldViewProj"));
  };

  function DualTextureEffect_set_World (value) {
    this.world = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("Fog", "WorldViewProj"));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), 
      Name: "Microsoft.Xna.Framework.Graphics.DualTextureEffect", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      DualTextureEffect__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      DualTextureEffect__ctor$01
    );

    $.Method({Static:false, Public:false}, "CacheEffectParameters", 
      JSIL.MethodSignature.Void, 
      DualTextureEffect_CacheEffectParameters
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      DualTextureEffect_Clone$02
    );

    $.Method({Static:false, Public:true }, "get_Alpha", 
      JSIL.MethodSignature.Return($.Single), 
      DualTextureEffect_get_Alpha
    );

    $.Method({Static:false, Public:true }, "get_DiffuseColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      DualTextureEffect_get_DiffuseColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      DualTextureEffect_get_FogColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      DualTextureEffect_get_FogEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogEnd", 
      JSIL.MethodSignature.Return($.Single), 
      DualTextureEffect_get_FogEnd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogStart", 
      JSIL.MethodSignature.Return($.Single), 
      DualTextureEffect_get_FogStart
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Projection", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      DualTextureEffect_get_Projection
    );

    $.Method({Static:false, Public:true }, "get_Texture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      DualTextureEffect_get_Texture
    );

    $.Method({Static:false, Public:true }, "get_Texture2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      DualTextureEffect_get_Texture2
    );

    $.Method({Static:false, Public:true }, "get_VertexColorEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      DualTextureEffect_get_VertexColorEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_View", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      DualTextureEffect_get_View
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_World", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      DualTextureEffect_get_World
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnApply", 
      JSIL.MethodSignature.Return($.Boolean), 
      DualTextureEffect_OnApply
    );

    $.Method({Static:false, Public:true }, "set_Alpha", 
      JSIL.MethodSignature.Action($.Single), 
      DualTextureEffect_set_Alpha
    );

    $.Method({Static:false, Public:true }, "set_DiffuseColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      DualTextureEffect_set_DiffuseColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      DualTextureEffect_set_FogColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      DualTextureEffect_set_FogEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogEnd", 
      JSIL.MethodSignature.Action($.Single), 
      DualTextureEffect_set_FogEnd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogStart", 
      JSIL.MethodSignature.Action($.Single), 
      DualTextureEffect_set_FogStart
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Projection", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      DualTextureEffect_set_Projection
    );

    $.Method({Static:false, Public:true }, "set_Texture", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      DualTextureEffect_set_Texture
    );

    $.Method({Static:false, Public:true }, "set_Texture2", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      DualTextureEffect_set_Texture2
    );

    $.Method({Static:false, Public:true }, "set_VertexColorEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      DualTextureEffect_set_VertexColorEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_View", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      DualTextureEffect_set_View
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_World", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      DualTextureEffect_set_World
    );

    $.Field({Static:false, Public:false}, "textureParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "texture2Param", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "diffuseColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "fogColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "fogVectorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "worldViewProjParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "_shaderIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "fogEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "vertexColorEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "world", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "view", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "projection", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "worldView", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "diffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "alpha", $.Single); 
    $.Field({Static:false, Public:false}, "fogStart", $.Single); 
    $.Field({Static:false, Public:false}, "fogEnd", $.Single); 
    $.Field({Static:false, Public:false}, "dirtyFlags", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectDirtyFlags")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Bytecode", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    function DualTextureEffect__cctor () {
      $thisType.Bytecode = $T00().LoadEffectResource("Microsoft.Xna.Framework.Graphics.Effect.Resources.DualTextureEffect.ogl.mgfxo");
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DualTextureEffect__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "World", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true , Virtual:true }, "View", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true , Virtual:true }, "Projection", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true }, "DiffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Alpha", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogEnabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "FogStart", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogEnd", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Property({Static:false, Public:true }, "Texture2", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Property({Static:false, Public:true }, "VertexColorEnabled", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectMatrices"), 
      /* 2 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectFog")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.ConstantBufferCollection */ 

(function ConstantBufferCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ShaderStage)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ConstantBuffer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.ConstantBuffer))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ShaderProgram)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };

  function ConstantBufferCollection__ctor (stage, maxBuffers) {
    this._stage = stage;
    this._buffers = JSIL.Array.New($T02(), maxBuffers);
    this._valid = 0;
  };

  function ConstantBufferCollection_Clear () {

    for (var i = 0; i < (this._buffers.length | 0); i = ((i + 1) | 0)) {
      this._buffers[i] = null;
    }
    this._valid = 0;
  };

  function ConstantBufferCollection_get_Item (index) {
    return this._buffers[index];
  };

  function ConstantBufferCollection_get_Stage () {
    return this._stage;
  };

  function ConstantBufferCollection_set_Item (index, value) {
    if (this._buffers[index] !== value) {
      if (value !== null) {
        this._buffers[index] = value;
        this._valid = (this._valid | 0) | (1 << (index | 0));
      } else {
        this._buffers[index] = null;
        this._valid = (this._valid | 0) & (~(1 << (index | 0)) | 0);
      }
    }
  };

  function ConstantBufferCollection_SetConstantBuffers (device, shaderProgram) {
    if ((this._valid | 0) !== 0) {
      var valid = (this._valid | 0);

    $loop0: 
      for (var i = 0; i < (this._buffers.length | 0); i = ((i + 1) | 0)) {
        var buffer = this._buffers[i];
        if (!((buffer === null) || buffer.GraphicsResource$IsDisposed$value)) {
          buffer.PlatformApply(device, shaderProgram);
        }
        valid = valid & (~(1 << i) | 0);
        if (valid === 0) {
          break $loop0;
        }
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.ConstantBufferCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderStage"), $.Int32]), 
      ConstantBufferCollection__ctor
    );

    $.Method({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void, 
      ConstantBufferCollection_Clear
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer"), [$.Int32]), 
      ConstantBufferCollection_get_Item
    );

    $.Method({Static:false, Public:false}, "get_Stage", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderStage")), 
      ConstantBufferCollection_get_Stage
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer")]), 
      ConstantBufferCollection_set_Item
    );

    $.Method({Static:false, Public:false}, "SetConstantBuffers", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderProgram")]), 
      ConstantBufferCollection_SetConstantBuffers
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_buffers", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer")])); 
    $.Field({Static:false, Public:false}, "_stage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderStage")); 
    $.Field({Static:false, Public:false}, "_valid", $.Int32); 
    $.Property({Static:false, Public:false}, "Stage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderStage"));

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Graphics.ConstantBuffer */ 

(function ConstantBuffer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ShaderProgram)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.MonoGame.Utilities.Hash)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Buffer)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterCollection)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterClass)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")])]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function ConstantBuffer__ctor$00 (cloneSource) {
    this._shaderProgram = null;
    $T00().prototype._ctor.call(this);
    this.GraphicsResource$GraphicsDevice$value = cloneSource.GraphicsResource$GraphicsDevice$value;
    this._name = cloneSource._name;
    this._parameters = cloneSource._parameters;
    this._offsets = cloneSource._offsets;
    this._buffer = $T01().$Cast(JSIL.Array.Clone(cloneSource._buffer));
    this.PlatformInitialize();
  };

  function ConstantBuffer__ctor$01 (device, sizeInBytes, parameterIndexes, parameterOffsets, name) {
    this._shaderProgram = null;
    $T00().prototype._ctor.call(this);
    this.GraphicsResource$GraphicsDevice$value = device;
    this._buffer = JSIL.Array.New($T02(), sizeInBytes);
    this._parameters = parameterIndexes;
    this._offsets = parameterOffsets;
    this._name = name;
    this.PlatformInitialize();
  };

  function ConstantBuffer_Clear () {
    this.PlatformClear();
  };

  function ConstantBuffer_get_Dirty () {
    return this._dirty;
  };

  function ConstantBuffer_get_HashKey () {
    return this.ConstantBuffer$HashKey$value;
  };

  function ConstantBuffer_PlatformApply (device, program) {
    if (this._shaderProgram !== program) {
      var location = (program.GetUniformLocation(this._name) | 0);
      if (location === -1) {
        return;
      }
      this._shaderProgram = program;
      this._location = location;
      this._dirty = true;
    }
    if (this !== $thisType._lastConstantBufferApplied) {
      this._dirty = true;
    }
    if (this._dirty) {
      var bytePtr = JSIL.PinAndGetPointer(this._buffer);
      device.GraphicsDevice$GLDevice$value.glUniform4fv(this._location, (((this._buffer.length | 0) / 16) | 0), $S00().CallStatic($T08(), "op_Explicit", null, bytePtr.cast(JSIL.Pointer.Of($asm01.System.Void))).MemberwiseClone());
      this._dirty = false;
      $thisType._lastConstantBufferApplied = this;
    }
  };

  function ConstantBuffer_PlatformClear () {
    this._shaderProgram = null;
  };

  function ConstantBuffer_PlatformInitialize () {
    var data = JSIL.Array.New($T02(), this._parameters.length);

    for (var i = 0; i < (this._parameters.length | 0); i = ((i + 1) | 0)) {
      data[i] = ((this._parameters[i] | 0) | (this._offsets[i] | 0) & 0xFF);
    }
    this.ConstantBuffer$HashKey$value = ($S01().CallStatic($T09(), "ComputeHash", null, data) | 0);
  };

  function ConstantBuffer_set_HashKey (value) {
    this.ConstantBuffer$HashKey$value = (value | 0);
  };

  function ConstantBuffer_SetData (offset, rows, columns, data) {
    if (!(((rows | 0) !== 1) || ((columns | 0) !== 1))) {
      if (!$T0B().$Is(data)) {
        throw $S02().Construct();
      }
      $T0D().BlockCopy(
        $T0B().$As(data), 
        0, 
        this._buffer, 
        offset, 
        4
      );
    } else if (!(((rows | 0) !== 1) && (((rows | 0) !== 4) || 
          ((columns | 0) !== 4)))) {
      $T0D().BlockCopy(
        $T0B().$As(data), 
        0, 
        this._buffer, 
        offset, 
        Math.imul(Math.imul(rows, columns), 4)
      );
    } else {
      var source = $T0B().$As(data);

      for (var y = 0; y < (rows | 0); y = ((y + 1) | 0)) {
        $T0D().BlockCopy(
          source, 
          Math.imul(Math.imul(columns, 4), y), 
          this._buffer, 
          (((offset | 0) + Math.imul(16, y)) | 0), 
          Math.imul(columns, 4)
        );
      }
    }
  };

  function ConstantBuffer_SetParameter (offset, param) {
    var rowsUsed = 0;
    var elements = param.EffectParameter$Elements$value;
    if ((elements.get_Count() | 0) > 0) {

      for (var i = 0; i < (elements.get_Count() | 0); i = ((i + 1) | 0)) {
        var rowsUsedSubParam = (this.SetParameter(offset, $S03().CallVirtual("get_Item", null, elements, i)) | 0);
        offset = (((offset | 0) + Math.imul(rowsUsedSubParam, 16)) | 0);
        rowsUsed = ((rowsUsed + rowsUsedSubParam) | 0);
      }
    } else if (param.EffectParameter$Data$value !== null) {
      switch ((param.EffectParameter$ParameterType$value).valueOf()) {
        case 1: 
        case 2: 
        case 3: 
          if (param.EffectParameter$ParameterClass$value === $T10().Matrix) {
            rowsUsed = (param.EffectParameter$ColumnCount$value | 0);
            this.SetData(offset, param.EffectParameter$ColumnCount$value, param.EffectParameter$RowCount$value, param.EffectParameter$Data$value);
          } else {
            rowsUsed = (param.EffectParameter$RowCount$value | 0);
            this.SetData(offset, param.EffectParameter$RowCount$value, param.EffectParameter$ColumnCount$value, param.EffectParameter$Data$value);
          }
          break;

        default: 
          throw $S04().Construct("Not supported!");

      }
    }
    return rowsUsed;
  };

  function ConstantBuffer_Update (parameters) {
    if (!$T12().op_LessThanOrEqual(this._stateKey, $T0E().EffectParameter$NextStateKey$value)) {
      this._stateKey = $T12().Create(0, 0, 0);
    }

    for (var p = 0; p < (this._parameters.length | 0); p = ((p + 1) | 0)) {
      var index = (this._parameters[p] | 0);
      var param = $S03().CallVirtual("get_Item", null, parameters, index);
      if ($T12().op_GreaterThanOrEqual(param.EffectParameter$StateKey$value, this._stateKey)) {
        var offset = (this._offsets[p] | 0);
        this._dirty = true;
        this.SetParameter(offset, param);
      }
    }
    this._stateKey = $T0E().EffectParameter$NextStateKey$value;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.ConstantBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      ConstantBuffer__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.String
        ]), 
      ConstantBuffer__ctor$01
    );

    $.Method({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void, 
      ConstantBuffer_Clear
    );

    $.Method({Static:false, Public:false}, "get_Dirty", 
      JSIL.MethodSignature.Return($.Boolean), 
      ConstantBuffer_get_Dirty
    );

    $.Method({Static:false, Public:false}, "get_HashKey", 
      JSIL.MethodSignature.Return($.Int32), 
      ConstantBuffer_get_HashKey
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "PlatformApply", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderProgram")]), 
      ConstantBuffer_PlatformApply
    );

    $.Method({Static:false, Public:false}, "PlatformClear", 
      JSIL.MethodSignature.Void, 
      ConstantBuffer_PlatformClear
    );

    $.Method({Static:false, Public:false}, "PlatformInitialize", 
      JSIL.MethodSignature.Void, 
      ConstantBuffer_PlatformInitialize
    );

    $.Method({Static:false, Public:false}, "set_HashKey", 
      JSIL.MethodSignature.Action($.Int32), 
      ConstantBuffer_set_HashKey
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "SetData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Object
        ]), 
      ConstantBuffer_SetData
    );

    $.Method({Static:false, Public:false}, "SetParameter", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")]), 
      ConstantBuffer_SetParameter
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection")), 
      ConstantBuffer_Update
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_parameters", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_offsets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
    $.Field({Static:false, Public:false}, "_stateKey", $.UInt64); 
    $.Field({Static:false, Public:false}, "_dirty", $.Boolean); 
    $.Field({Static:false, Public:false}, "_shaderProgram", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderProgram")); 
    $.Field({Static:false, Public:false}, "_location", $.Int32); 
    $.Field({Static:true , Public:false}, "_lastConstantBufferApplied", $.Type, null); 
    $.Field({Static:false, Public:false}, "ConstantBuffer$HashKey$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function ConstantBuffer__cctor () {
      $thisType._lastConstantBufferApplied = null;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ConstantBuffer__cctor
    );

    $.Property({Static:false, Public:false}, "Dirty", $.Boolean);

    $.Property({Static:false, Public:false}, "HashKey", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.SamplerType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.SamplerType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Sampler2D: 0, 
    SamplerCube: 1, 
    SamplerVolume: 2, 
    Sampler1D: 3, 
  }
);

/* struct Microsoft.Xna.Framework.Graphics.SamplerInfo */ 

(function SamplerInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.SamplerInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerType")); 
    $.Field({Static:false, Public:true }, "textureSlot", $.Int32); 
    $.Field({Static:false, Public:true }, "samplerSlot", $.Int32); 
    $.Field({Static:false, Public:true }, "$name", $.String); 
    $.Field({Static:false, Public:true }, "state", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState")); 
    $.Field({Static:false, Public:true }, "parameter", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.Shader */ 

(function Shader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ShaderStage)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SamplerInfo)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SamplerType)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureAddressMode)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureFilter)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.SamplerInfo))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementUsage)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.Shader_Attribute))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Text.Encoding)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.MonoGame.Utilities.Hash)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Shader_Attribute)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])]))) ();
  };

  function Shader__ctor (device, reader) {
    this._shaderHandle = 0;
    $T02().prototype._ctor.call(this);
    this.GraphicsResource$GraphicsDevice$value = device;
    var isVertexShader = reader.ReadBoolean();
    this.Shader$Stage$value = (
      isVertexShader
         ? $T04().Vertex
         : $T04().Pixel)
    ;
    var shaderLength = (reader.ReadInt32() | 0);
    var shaderBytecode = reader.ReadBytes(shaderLength);
    var samplerCount = (reader.ReadByte() | 0);
    this.Shader$Samplers$value = JSIL.Array.New($T07(), samplerCount);

    for (var s = 0; s < samplerCount; s = ((s + 1) | 0)) {
      this.Shader$Samplers$value[s].type = $T08().$Cast(reader.ReadByte());
      this.Shader$Samplers$value[s].textureSlot = (reader.ReadByte() | 0);
      this.Shader$Samplers$value[s].samplerSlot = (reader.ReadByte() | 0);
      if (reader.ReadBoolean()) {
        this.Shader$Samplers$value[s].state = $S00().Construct();
        this.Shader$Samplers$value[s].state.SamplerState$AddressU$value = $T0A().$Cast(reader.ReadByte());
        this.Shader$Samplers$value[s].state.SamplerState$AddressV$value = $T0A().$Cast(reader.ReadByte());
        this.Shader$Samplers$value[s].state.SamplerState$AddressW$value = $T0A().$Cast(reader.ReadByte());
        this.Shader$Samplers$value[s].state.SamplerState$Filter$value = $T0B().$Cast(reader.ReadByte());
        this.Shader$Samplers$value[s].state.SamplerState$MaxAnisotropy$value = (reader.ReadInt32() | 0);
        this.Shader$Samplers$value[s].state.SamplerState$MaxMipLevel$value = (reader.ReadInt32() | 0);
        this.Shader$Samplers$value[s].state.SamplerState$MipMapLevelOfDetailBias$value = +reader.ReadSingle();
      }
      this.Shader$Samplers$value[s].$name = reader.ReadString();
      this.Shader$Samplers$value[s].parameter = (reader.ReadByte() | 0);
    }
    var cbufferCount = (reader.ReadByte() | 0);
    this.Shader$CBuffers$value = JSIL.Array.New($T05(), cbufferCount);

    for (var c = 0; c < cbufferCount; c = ((c + 1) | 0)) {
      this.Shader$CBuffers$value[c] = (reader.ReadByte() | 0);
    }
    this.PlatformConstruct(reader, isVertexShader, shaderBytecode);
  };

  function Shader_$lDispose$gb__0 () {
    if ((this._shaderHandle >>> 0) !== 0) {
      if (this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glIsShader(this._shaderHandle)) {
        this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glDeleteShader(this._shaderHandle);
      }
      this._shaderHandle = 0;
    }
  };

  function Shader_ApplySamplerTextureUnits (program) {
    var samplers = this.Shader$Samplers$value;

    for (var i = 0; i < (samplers.length | 0); i = ((i + 1) | 0)) {
      var sampler = samplers[i].MemberwiseClone();
      var loc = (this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetUniformLocation(program, sampler.$name) | 0);
      if (loc !== -1) {
        this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glUniform1i(loc, sampler.textureSlot);
      }
    }
  };

  function Shader_Dispose$00 (disposing) {
    if (!this.GraphicsResource$IsDisposed$value) {
      $T00().AddDisposeAction($T0E().New(this, $thisType.prototype.$lDispose$gb__0, function () { return JSIL.GetMethodInfo($thisType, "$lDispose$gb__0", JSIL.MethodSignature.Void, false); }));
    }
    $T02().prototype.Dispose.call(this, disposing);
  };

  function Shader_get_CBuffers () {
    return this.Shader$CBuffers$value;
  };

  function Shader_get_HashKey () {
    return this.Shader$HashKey$value;
  };

  function Shader_get_Samplers () {
    return this.Shader$Samplers$value;
  };

  function Shader_get_Stage () {
    return this.Shader$Stage$value;
  };

  function Shader_GetAttribLocation (usage, index) {

    for (var i = 0; i < (this._attributes.length | 0); i = ((i + 1) | 0)) {
      if (!((this._attributes[i].usage !== usage) || ((this._attributes[i].index | 0) !== (index | 0)))) {
        var result = (this._attributes[i].location | 0);
        return result;
      }
    }
    result = -1;
    return result;
  };

  function Shader_GetShaderHandle () {
    var len = new JSIL.BoxedVariable(0);
    var compiled = new JSIL.BoxedVariable(0);
    if ((this._shaderHandle >>> 0) !== 0) {
      var shaderHandle = (this._shaderHandle >>> 0);
    } else {
      this._shaderHandle = (this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glCreateShader((
          (((this.Shader$Stage$value).valueOf() | 0) === 0)
             ? $T11().GL_VERTEX_SHADER
             : $T11().GL_FRAGMENT_SHADER)
      ) >>> 0);
      len.set(this._glslCode.length);
      this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glShaderSource(this._shaderHandle, 1, /* ref */ new JSIL.MemberReference(this, "_glslCode"), /* ref */ len);
      this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glCompileShader(this._shaderHandle);
      compiled.set(0);
      this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetShaderiv(this._shaderHandle, $T11().GL_COMPILE_STATUS, /* ref */ compiled);
      if ((compiled.get() | 0) === 0) {
        $T13().WriteLine(this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetShaderInfoLog(this._shaderHandle));
        if (this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glIsShader(this._shaderHandle)) {
          this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glDeleteShader(this._shaderHandle);
        }
        this._shaderHandle = 0;
        throw $S01().Construct("Shader Compilation Failed");
      }
      shaderHandle = (this._shaderHandle >>> 0);
    }
    return shaderHandle;
  };

  function Shader_GetVertexAttributeLocations (program) {

    for (var i = 0; i < (this._attributes.length | 0); i = ((i + 1) | 0)) {
      this._attributes[i].location = (this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetAttribLocation(program, this._attributes[i].$name) | 0);
    }
  };

  function Shader_GraphicsDeviceResetting () {
    this.PlatformGraphicsDeviceResetting();
  };

  function Shader_PlatformConstruct (reader, isVertexShader, shaderBytecode) {
    this._glslCode = $T15().get_ASCII().GetString(shaderBytecode);
    this.Shader$HashKey$value = ($S02().CallStatic($T16(), "ComputeHash", null, shaderBytecode) | 0);
    var attributeCount = (reader.ReadByte() | 0);
    this._attributes = JSIL.Array.New($T17(), attributeCount);

    for (var a = 0; a < attributeCount; a = ((a + 1) | 0)) {
      this._attributes[a].$name = reader.ReadString();
      this._attributes[a].usage = $T0F().$Cast(reader.ReadByte());
      this._attributes[a].index = (reader.ReadByte() | 0);
      reader.ReadInt16();
    }
  };

  function Shader_PlatformGraphicsDeviceResetting () {
    if ((this._shaderHandle >>> 0) !== 0) {
      if (this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glIsShader(this._shaderHandle)) {
        this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glDeleteShader(this._shaderHandle);
      }
      this._shaderHandle = 0;
    }
  };

  function Shader_set_CBuffers (value) {
    this.Shader$CBuffers$value = value;
  };

  function Shader_set_HashKey (value) {
    this.Shader$HashKey$value = (value | 0);
  };

  function Shader_set_Samplers (value) {
    this.Shader$Samplers$value = value;
  };

  function Shader_set_Stage (value) {
    this.Shader$Stage$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.Shader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.IO.BinaryReader")]), 
      Shader__ctor
    );

    $.Method({Static:false, Public:false}, "$lDispose$gb__0", 
      JSIL.MethodSignature.Void, 
      Shader_$lDispose$gb__0
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "ApplySamplerTextureUnits", 
      JSIL.MethodSignature.Action($.UInt32), 
      Shader_ApplySamplerTextureUnits
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      Shader_Dispose$00
    );

    $.Method({Static:false, Public:true }, "get_CBuffers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32])), 
      Shader_get_CBuffers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_HashKey", 
      JSIL.MethodSignature.Return($.Int32), 
      Shader_get_HashKey
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Samplers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerInfo")])), 
      Shader_get_Samplers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Stage", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderStage")), 
      Shader_get_Stage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "GetAttribLocation", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementUsage"), $.Int32]), 
      Shader_GetAttribLocation
    );

    $.Method({Static:false, Public:false}, "GetShaderHandle", 
      JSIL.MethodSignature.Return($.UInt32), 
      Shader_GetShaderHandle
    );

    $.Method({Static:false, Public:false}, "GetVertexAttributeLocations", 
      JSIL.MethodSignature.Action($.UInt32), 
      Shader_GetVertexAttributeLocations
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GraphicsDeviceResetting", 
      JSIL.MethodSignature.Void, 
      Shader_GraphicsDeviceResetting
    );

    $.Method({Static:false, Public:false}, "PlatformConstruct", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.BinaryReader"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      Shader_PlatformConstruct
    );

    $.Method({Static:false, Public:false}, "PlatformGraphicsDeviceResetting", 
      JSIL.MethodSignature.Void, 
      Shader_PlatformGraphicsDeviceResetting
    );

    $.Method({Static:false, Public:false}, "set_CBuffers", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32])), 
      Shader_set_CBuffers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HashKey", 
      JSIL.MethodSignature.Action($.Int32), 
      Shader_set_HashKey
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Samplers", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerInfo")])), 
      Shader_set_Samplers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Stage", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderStage")), 
      Shader_set_Stage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "_shaderHandle", $.UInt32); 
    $.Field({Static:false, Public:false}, "_glslCode", $.String); 
    $.Field({Static:false, Public:false}, "_attributes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader+Attribute")])); 
    $.Field({Static:false, Public:false}, "Shader$HashKey$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Shader$Samplers$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerInfo")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Shader$CBuffers$value", $jsilcore.TypeRef("System.Array", [$.Int32]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Shader$Stage$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderStage"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:false}, "HashKey", $.Int32);

    $.Property({Static:false, Public:true }, "Samplers", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerInfo")]));

    $.Property({Static:false, Public:true }, "CBuffers", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:true }, "Stage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderStage"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.Shader+Attribute */ 

(function Attribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.Shader+Attribute", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "usage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementUsage")); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "$name", $.String); 
    $.Field({Static:false, Public:true }, "location", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.ShaderStage */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.ShaderStage", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Vertex: 0, 
    Pixel: 1, 
  }
);

/* class Microsoft.Xna.Framework.Graphics.EffectAnnotation */ 

(function EffectAnnotation$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterClass)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };

  function EffectAnnotation__ctor$00 (class_, type, name, rowCount, columnCount, semantic, data) {
    this.EffectAnnotation$ParameterClass$value = class_;
    this.EffectAnnotation$ParameterType$value = type;
    this.EffectAnnotation$Name$value = name;
    this.EffectAnnotation$RowCount$value = (rowCount | 0);
    this.EffectAnnotation$ColumnCount$value = (columnCount | 0);
    this.EffectAnnotation$Semantic$value = semantic;
  };

  function EffectAnnotation__ctor$01 (parameter) {
    this.EffectAnnotation$ParameterClass$value = parameter.EffectParameter$ParameterClass$value;
    this.EffectAnnotation$ParameterType$value = parameter.EffectParameter$ParameterType$value;
    this.EffectAnnotation$Name$value = parameter.EffectParameter$Name$value;
    this.EffectAnnotation$RowCount$value = (parameter.EffectParameter$RowCount$value | 0);
    this.EffectAnnotation$ColumnCount$value = (parameter.EffectParameter$ColumnCount$value | 0);
    this.EffectAnnotation$Semantic$value = parameter.EffectParameter$Semantic$value;
  };

  function EffectAnnotation_get_ColumnCount () {
    return this.EffectAnnotation$ColumnCount$value;
  };

  function EffectAnnotation_get_Name () {
    return this.EffectAnnotation$Name$value;
  };

  function EffectAnnotation_get_ParameterClass () {
    return this.EffectAnnotation$ParameterClass$value;
  };

  function EffectAnnotation_get_ParameterType () {
    return this.EffectAnnotation$ParameterType$value;
  };

  function EffectAnnotation_get_RowCount () {
    return this.EffectAnnotation$RowCount$value;
  };

  function EffectAnnotation_get_Semantic () {
    return this.EffectAnnotation$Semantic$value;
  };

  function EffectAnnotation_set_ColumnCount (value) {
    this.EffectAnnotation$ColumnCount$value = (value | 0);
  };

  function EffectAnnotation_set_Name (value) {
    this.EffectAnnotation$Name$value = value;
  };

  function EffectAnnotation_set_ParameterClass (value) {
    this.EffectAnnotation$ParameterClass$value = value;
  };

  function EffectAnnotation_set_ParameterType (value) {
    this.EffectAnnotation$ParameterType$value = value;
  };

  function EffectAnnotation_set_RowCount (value) {
    this.EffectAnnotation$RowCount$value = (value | 0);
  };

  function EffectAnnotation_set_Semantic (value) {
    this.EffectAnnotation$Semantic$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.EffectAnnotation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterClass"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterType"), 
          $.String, $.Int32, 
          $.Int32, $.String, 
          $.Object
        ]), 
      EffectAnnotation__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")), 
      EffectAnnotation__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_ColumnCount", 
      JSIL.MethodSignature.Return($.Int32), 
      EffectAnnotation_get_ColumnCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      EffectAnnotation_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ParameterClass", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterClass")), 
      EffectAnnotation_get_ParameterClass
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ParameterType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterType")), 
      EffectAnnotation_get_ParameterType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RowCount", 
      JSIL.MethodSignature.Return($.Int32), 
      EffectAnnotation_get_RowCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Semantic", 
      JSIL.MethodSignature.Return($.String), 
      EffectAnnotation_get_Semantic
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ColumnCount", 
      JSIL.MethodSignature.Action($.Int32), 
      EffectAnnotation_set_ColumnCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      EffectAnnotation_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ParameterClass", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterClass")), 
      EffectAnnotation_set_ParameterClass
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ParameterType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterType")), 
      EffectAnnotation_set_ParameterType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RowCount", 
      JSIL.MethodSignature.Action($.Int32), 
      EffectAnnotation_set_RowCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Semantic", 
      JSIL.MethodSignature.Action($.String), 
      EffectAnnotation_set_Semantic
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "EffectAnnotation$ParameterClass$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterClass"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectAnnotation$ParameterType$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterType"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectAnnotation$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectAnnotation$RowCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectAnnotation$ColumnCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectAnnotation$Semantic$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "ParameterClass", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterClass"));

    $.Property({Static:false, Public:true }, "ParameterType", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterType"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "RowCount", $.Int32);

    $.Property({Static:false, Public:true }, "ColumnCount", $.Int32);

    $.Property({Static:false, Public:true }, "Semantic", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection */ 

(function EffectAnnotationCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectAnnotation)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectAnnotation))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectAnnotation))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectAnnotation).GetEnumerator)) ();
  };

  function EffectAnnotationCollection__ctor (annotations) {
    this._annotations = annotations;
  };

  function EffectAnnotationCollection_get_Count () {
    return this._annotations.length;
  };

  function EffectAnnotationCollection_get_Item$00 (index) {
    return this._annotations[index];
  };

  function EffectAnnotationCollection_get_Item$01 (name) {
    var annotations = this._annotations;

    for (var i = 0; i < (annotations.length | 0); i = ((i + 1) | 0)) {
      var annotation = annotations[i];
      if (annotation.EffectAnnotation$Name$value == name) {
        var result = annotation;
        return result;
      }
    }
    result = null;
    return result;
  };

  function EffectAnnotationCollection_GetEnumerator () {
    return $IM00().Call($T04().$Cast(this._annotations), null);
  };

  function EffectAnnotationCollection_System_Collections_IEnumerable_GetEnumerator () {
    return JSIL.GetEnumerator(this._annotations);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotation")])), 
      EffectAnnotationCollection__ctor
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      EffectAnnotationCollection_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotation"), [$.Int32]), 
      EffectAnnotationCollection_get_Item$00
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotation"), [$.String]), 
      EffectAnnotationCollection_get_Item$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotation")])), 
      EffectAnnotationCollection_GetEnumerator
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      EffectAnnotationCollection_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Empty", $.Type); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_annotations", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotation")])); 
    function EffectAnnotationCollection__cctor () {
      $thisType.Empty = new $thisType(JSIL.Array.New($T00(), 0));
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EffectAnnotationCollection__cctor
    );

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotation"));

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotation"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotation")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum Microsoft.Xna.Framework.Graphics.EffectDirtyFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.EffectDirtyFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    All: -1, 
    WorldViewProj: 1, 
    World: 2, 
    EyePosition: 4, 
    MaterialColor: 8, 
    Fog: 16, 
    FogEnable: 32, 
    AlphaTest: 64, 
    ShaderIndex: 128, 
  }
);

/* class Microsoft.Xna.Framework.Graphics.EffectHelpers */ 

(function EffectHelpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DirectionalLight)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectDirtyFlags)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])
      ]))) ();
  };

  function EffectHelpers_EnableDefaultLighting (light0, light1, light2) {
    (light0.Direction = $S00().Construct(-0.5265408, -0.5735765, -0.6275069));
    (light0.DiffuseColor = $S00().Construct(1, 0.9607844, 0.8078432));
    (light0.SpecularColor = $S00().Construct(1, 0.9607844, 0.8078432));
    light0.set_Enabled(true);
    (light1.Direction = $S00().Construct(0.7198464, 0.3420201, 0.6040227));
    (light1.DiffuseColor = $S00().Construct(0.9647059, 0.7607844, 0.4078432));
    (light1.SpecularColor = $T01().get_Zero().MemberwiseClone());
    light1.set_Enabled(true);
    (light2.Direction = $S00().Construct(0.4545195, -0.7660444, 0.4545195));
    (light2.DiffuseColor = $S00().Construct(0.3231373, 0.3607844, 0.3937255));
    (light2.SpecularColor = $S00().Construct(0.3231373, 0.3607844, 0.3937255));
    light2.set_Enabled(true);
    return $S00().Construct(0.05333332, 0.09882354, 0.1819608);
  };

  function EffectHelpers_SetFogVector (/* ref */ worldView, fogStart, fogEnd, fogVectorParam) {
    if (+fogStart === +fogEnd) {
      $S01().CallVirtual("SetValue", null, fogVectorParam, $S02().Construct(0, 0, 0, 1));
    } else {
      var scale = +((1 / (+fogStart - +fogEnd)));
      var fogVector = new ($T05())();
      fogVector.X = +worldView.get().M13 * scale;
      fogVector.Y = +worldView.get().M23 * scale;
      fogVector.Z = +worldView.get().M33 * scale;
      fogVector.W = (+worldView.get().M43 + +fogStart) * scale;
      $S01().CallVirtual("SetValue", null, fogVectorParam, fogVector);
    }
  };

  function EffectHelpers_SetLightingMatrices (dirtyFlags, /* ref */ world, /* ref */ view, worldParam, worldInverseTransposeParam, eyePositionParam) {
    var worldTranspose = new JSIL.BoxedVariable(new ($T02())());
    var worldInverseTranspose = new JSIL.BoxedVariable(new ($T02())());
    var viewInverse = new JSIL.BoxedVariable(new ($T02())());
    if ($T06().$Cast(dirtyFlags & $T06().World) !== $T06().$Cast(0)) {
      $T02().Invert(/* ref */ world, /* ref */ worldTranspose);
      $T02().Transpose(/* ref */ worldTranspose, /* ref */ worldInverseTranspose);
      $S03().CallVirtual("SetValue", null, worldParam, world.get());
      $S03().CallVirtual("SetValue", null, worldInverseTransposeParam, worldInverseTranspose.get());
      dirtyFlags = $T06().$Cast(dirtyFlags & $T06().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "MaterialColor", "ShaderIndex", "WorldViewProj"
        ));
    }
    if ($T06().$Cast(dirtyFlags & $T06().EyePosition) !== $T06().$Cast(0)) {
      $T02().Invert(/* ref */ view, /* ref */ viewInverse);
      $S04().CallVirtual("SetValue", null, eyePositionParam, (viewInverse.get()).get_Translation());
      dirtyFlags = $T06().$Cast(dirtyFlags & $T06().$Flags(
            "AlphaTest", "Fog", "FogEnable", "MaterialColor", 
            "ShaderIndex", "World", "WorldViewProj"
        ));
    }
    return dirtyFlags;
  };

  function EffectHelpers_SetMaterialColor (lightingEnabled, alpha, /* ref */ diffuseColor, /* ref */ emissiveColor, /* ref */ ambientLightColor, diffuseColorParam, emissiveColorParam) {
    if (lightingEnabled) {
      var diffuse = new ($T05())();
      var emissive = new ($T01())();
      diffuse.X = +diffuseColor.get().X * +alpha;
      diffuse.Y = +diffuseColor.get().Y * +alpha;
      diffuse.Z = +diffuseColor.get().Z * +alpha;
      diffuse.W = +alpha;
      emissive.X = (+emissiveColor.get().X + (+ambientLightColor.get().X * +diffuseColor.get().X)) * +alpha;
      emissive.Y = (+emissiveColor.get().Y + (+ambientLightColor.get().Y * +diffuseColor.get().Y)) * +alpha;
      emissive.Z = (+emissiveColor.get().Z + (+ambientLightColor.get().Z * +diffuseColor.get().Z)) * +alpha;
      $S01().CallVirtual("SetValue", null, diffuseColorParam, diffuse);
      $S04().CallVirtual("SetValue", null, emissiveColorParam, emissive);
    } else {
      diffuse = new ($T05())();
      diffuse.X = (+diffuseColor.get().X + +emissiveColor.get().X) * +alpha;
      diffuse.Y = (+diffuseColor.get().Y + +emissiveColor.get().Y) * +alpha;
      diffuse.Z = (+diffuseColor.get().Z + +emissiveColor.get().Z) * +alpha;
      diffuse.W = +alpha;
      $S01().CallVirtual("SetValue", null, diffuseColorParam, diffuse);
    }
  };

  function EffectHelpers_SetWorldViewProjAndFog (dirtyFlags, /* ref */ world, /* ref */ view, /* ref */ projection, /* ref */ worldView, fogEnabled, fogStart, fogEnd, worldViewProjParam, fogVectorParam) {
    var worldViewProj = new JSIL.BoxedVariable(new ($T02())());
    if ($T06().$Cast(dirtyFlags & $T06().WorldViewProj) !== $T06().$Cast(0)) {
      $S05().CallStatic($T02(), "Multiply", null, /* ref */ world, /* ref */ view, /* ref */ worldView);
      $S05().CallStatic($T02(), "Multiply", null, /* ref */ worldView, /* ref */ projection, /* ref */ worldViewProj);
      $S03().CallVirtual("SetValue", null, worldViewProjParam, worldViewProj.get());
      dirtyFlags = $T06().$Cast(dirtyFlags & $T06().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "MaterialColor", "ShaderIndex", "World"
        ));
    }
    if (fogEnabled) {
      if ($T06().$Cast(dirtyFlags & $T06().$Flags("Fog", "FogEnable")) !== $T06().$Cast(0)) {
        $thisType.SetFogVector(/* ref */ worldView, fogStart, fogEnd, fogVectorParam);
        dirtyFlags = $T06().$Cast(dirtyFlags & $T06().$Flags(
              "AlphaTest", "EyePosition", "MaterialColor", "ShaderIndex", 
              "World", "WorldViewProj"
          ));
      }
    } else if ($T06().$Cast(dirtyFlags & $T06().FogEnable) !== $T06().$Cast(0)) {
      $S01().CallVirtual("SetValue", null, fogVectorParam, $T05().get_Zero());
      dirtyFlags = $T06().$Cast(dirtyFlags & $T06().$Flags(
            "AlphaTest", "EyePosition", "Fog", "MaterialColor", 
            "ShaderIndex", "World", "WorldViewProj"
        ));
    }
    return dirtyFlags;
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Graphics.EffectHelpers", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "EnableDefaultLighting", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")
        ]), 
      EffectHelpers_EnableDefaultLighting
    );

    $.Method({Static:true , Public:false}, "SetFogVector", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $.Single, 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")
        ]), 
      EffectHelpers_SetFogVector
    );

    $.Method({Static:true , Public:false}, "SetLightingMatrices", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectDirtyFlags"), [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectDirtyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")
        ]), 
      EffectHelpers_SetLightingMatrices
    );

    $.Method({Static:true , Public:false}, "SetMaterialColor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")
        ]), 
      EffectHelpers_SetMaterialColor
    );

    $.Method({Static:true , Public:false}, "SetWorldViewProjAndFog", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectDirtyFlags"), [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectDirtyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $.Boolean, 
          $.Single, $.Single, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")
        ]), 
      EffectHelpers_SetWorldViewProjAndFog
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.EffectParameter */ 

(function EffectParameter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterClass)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterCollection)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.InvalidCastException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Matrix))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Quaternion)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture3D)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureCube)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector4))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidCastException"), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Quaternion"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Single")))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerator.get_Current)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function EffectParameter__ctor$00 (class_, type, name, rowCount, columnCount, semantic, annotations, elements, structMembers, data) {
    this.EffectParameter$ParameterClass$value = class_;
    this.EffectParameter$ParameterType$value = type;
    this.EffectParameter$Name$value = name;
    this.EffectParameter$Semantic$value = semantic;
    this.EffectParameter$Annotations$value = annotations;
    this.EffectParameter$RowCount$value = (rowCount | 0);
    this.EffectParameter$ColumnCount$value = (columnCount | 0);
    this.EffectParameter$Elements$value = elements;
    this.EffectParameter$StructureMembers$value = structMembers;
    this.EffectParameter$Data$value = data;
    var expr_65 = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_65, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_65;
  };

  function EffectParameter__ctor$01 (cloneSource) {
    this.EffectParameter$ParameterClass$value = cloneSource.EffectParameter$ParameterClass$value;
    this.EffectParameter$ParameterType$value = cloneSource.EffectParameter$ParameterType$value;
    this.EffectParameter$Name$value = cloneSource.EffectParameter$Name$value;
    this.EffectParameter$Semantic$value = cloneSource.EffectParameter$Semantic$value;
    this.EffectParameter$Annotations$value = cloneSource.EffectParameter$Annotations$value;
    this.EffectParameter$RowCount$value = (cloneSource.EffectParameter$RowCount$value | 0);
    this.EffectParameter$ColumnCount$value = (cloneSource.EffectParameter$ColumnCount$value | 0);
    this.EffectParameter$Elements$value = (cloneSource.EffectParameter$Elements$value).Clone();
    this.EffectParameter$StructureMembers$value = (cloneSource.EffectParameter$StructureMembers$value).Clone();
    var array = $T08().$As(cloneSource.EffectParameter$Data$value);
    if (array !== null) {
      this.EffectParameter$Data$value = (JSIL.Array.Clone(array));
    }
    var expr_AE = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_AE, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_AE;
  };

  function EffectParameter_get_Annotations () {
    return this.EffectParameter$Annotations$value;
  };

  function EffectParameter_get_ColumnCount () {
    return this.EffectParameter$ColumnCount$value;
  };

  function EffectParameter_get_Data () {
    return this.EffectParameter$Data$value;
  };

  function EffectParameter_get_DebugDisplayString () {
    var semanticStr = $T02().Empty;
    if (!$T02().IsNullOrEmpty(this.EffectParameter$Semantic$value)) {
      semanticStr = ((" <" + this.EffectParameter$Semantic$value + ">"));
    }
    if (this.EffectParameter$Data$value === null) {
      var valueStr = "(null)";
    } else {
      switch ((this.EffectParameter$ParameterClass$value).valueOf()) {
        case 0: 
          valueStr = ($S00().CallVirtual("GetValue", null, $T08().$As(this.EffectParameter$Data$value), 0)).toString();
          break;

        case 1: 
          var array = $T08().$As(this.EffectParameter$Data$value);
          var arrayStr = JSIL.Array.New($T02(), array.length);
          var idx = 0;
          var enumerator = (JSIL.GetEnumerator(array));
          try {

            while ($IM00().Call(enumerator, null)) {
              var e = $IM01().Call(enumerator, null);
              arrayStr[idx] = ($S00().CallVirtual("GetValue", null, array, idx)).toString();
              idx = ((idx + 1) | 0);
            }
          } finally {
            var disposable = $T0B().$As(enumerator);
            if (disposable !== null) {
              $IM02().Call(disposable, null);
            }
          }
          valueStr = (JSIL.JoinStrings(" ", arrayStr));
          break;

        case 2: 
          valueStr = "...";
          break;

        case 3: 
          valueStr = (this.EffectParameter$Data$value).toString();
          break;

        default: 
          valueStr = (this.EffectParameter$Data$value).toString();
          break;

      }
    }
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T06(), ["[", this.EffectParameter$ParameterClass$value, " ", this.EffectParameter$ParameterType$value, "]", semanticStr, " ", this.EffectParameter$Name$value, " : ", valueStr]));
  };

  function EffectParameter_get_Elements () {
    return this.EffectParameter$Elements$value;
  };

  function EffectParameter_get_Name () {
    return this.EffectParameter$Name$value;
  };

  function EffectParameter_get_NextStateKey () {
    return $thisType.EffectParameter$NextStateKey$value;
  };

  function EffectParameter_get_ParameterClass () {
    return this.EffectParameter$ParameterClass$value;
  };

  function EffectParameter_get_ParameterType () {
    return this.EffectParameter$ParameterType$value;
  };

  function EffectParameter_get_RowCount () {
    return this.EffectParameter$RowCount$value;
  };

  function EffectParameter_get_Semantic () {
    return this.EffectParameter$Semantic$value;
  };

  function EffectParameter_get_StateKey () {
    return this.EffectParameter$StateKey$value;
  };

  function EffectParameter_get_StructureMembers () {
    return this.EffectParameter$StructureMembers$value;
  };

  function EffectParameter_GetValueBoolean () {
    if (!((((this.EffectParameter$ParameterClass$value).valueOf() | 0) === 0) && (this.EffectParameter$ParameterType$value === $T01().Bool))) {
      throw $S01().Construct();
    }
    return (+$T0E().$Cast(this.EffectParameter$Data$value)[0] !== 0);
  };

  function EffectParameter_GetValueInt32 () {
    if (!((((this.EffectParameter$ParameterClass$value).valueOf() | 0) === 0) && (this.EffectParameter$ParameterType$value === $T01().Int32))) {
      throw $S01().Construct();
    }
    return (($T0E().$Cast(this.EffectParameter$Data$value)[0]) | 0);
  };

  function EffectParameter_GetValueMatrix () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Matrix) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    if (!(((this.EffectParameter$RowCount$value | 0) === 4) && ((this.EffectParameter$ColumnCount$value | 0) === 4))) {
      throw $S01().Construct();
    }
    var floatData = $T0E().$Cast(this.EffectParameter$Data$value);
    return new ($T0F())(floatData[0], floatData[4], floatData[8], floatData[12], floatData[1], floatData[5], floatData[9], floatData[13], floatData[2], floatData[6], floatData[10], floatData[14], floatData[3], floatData[7], floatData[11], floatData[15]);
  };

  function EffectParameter_GetValueMatrixArray (count) {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Matrix) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    var ret = JSIL.Array.New($T0F(), count);

    for (var i = 0; i < (count | 0); i = ((i + 1) | 0)) {
      ret[i] = ($S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i)).GetValueMatrix();
    }
    return ret;
  };

  function EffectParameter_GetValueQuaternion () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Vector) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    var vecInfo = $T0E().$Cast(this.EffectParameter$Data$value);
    return $S03().Construct(vecInfo[0], vecInfo[1], vecInfo[2], vecInfo[3]);
  };

  function EffectParameter_GetValueSingle () {
    if (!((((this.EffectParameter$ParameterClass$value).valueOf() | 0) === 0) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    return $T0E().$Cast(this.EffectParameter$Data$value)[0];
  };

  function EffectParameter_GetValueSingleArray () {
    if (!((this.EffectParameter$Elements$value === null) || (((this.EffectParameter$Elements$value).get_Count() | 0) <= 0))) {
      var ret = JSIL.Array.New($T12(), Math.imul(Math.imul(this.EffectParameter$RowCount$value, this.EffectParameter$ColumnCount$value), (this.EffectParameter$Elements$value).get_Count()));

      for (var i = 0; i < ((this.EffectParameter$Elements$value).get_Count() | 0); i = ((i + 1) | 0)) {
        var elmArray = ($S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i)).GetValueSingleArray();

        for (var j = 0; j < (elmArray.length | 0); j = ((j + 1) | 0)) {
          ret[((Math.imul(Math.imul(this.EffectParameter$RowCount$value, this.EffectParameter$ColumnCount$value), i) + j) | 0)] = +elmArray[j];
        }
      }
      var result = ret;
    } else {
      switch ((this.EffectParameter$ParameterClass$value).valueOf()) {
        case 0: 
          result = JSIL.Array.New($T12(), [this.GetValueSingle()]);
          break;

        case 1: 
        case 2: 
          if ($T0F().$Is(this.EffectParameter$Data$value)) {
            result = $T0F().ToFloatArray($T0F().$Cast(this.EffectParameter$Data$value));
          } else {
            result = $T0E().$Cast(this.EffectParameter$Data$value);
          }
          break;

        default: 
          throw $S04().Construct();

      }
    }
    return result;
  };

  function EffectParameter_GetValueString () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Object) && (this.EffectParameter$ParameterType$value === $T01().String))) {
      throw $S01().Construct();
    }
    return $T09().$Cast(this.EffectParameter$Data$value)[0];
  };

  function EffectParameter_GetValueTexture2D () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Object) && (this.EffectParameter$ParameterType$value === $T01().Texture2D))) {
      throw $S01().Construct();
    }
    return $T14().$Cast(this.EffectParameter$Data$value);
  };

  function EffectParameter_GetValueTexture3D () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Object) && (this.EffectParameter$ParameterType$value === $T01().Texture3D))) {
      throw $S01().Construct();
    }
    return $T15().$Cast(this.EffectParameter$Data$value);
  };

  function EffectParameter_GetValueTextureCube () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Object) && (this.EffectParameter$ParameterType$value === $T01().TextureCube))) {
      throw $S01().Construct();
    }
    return $T16().$Cast(this.EffectParameter$Data$value);
  };

  function EffectParameter_GetValueVector2 () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Vector) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    var vecInfo = $T0E().$Cast(this.EffectParameter$Data$value);
    return $S05().Construct(vecInfo[0], vecInfo[1]);
  };

  function EffectParameter_GetValueVector2Array () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Vector) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    if (!((this.EffectParameter$Elements$value === null) || (((this.EffectParameter$Elements$value).get_Count() | 0) <= 0))) {
      var result = JSIL.Array.New($T17(), (this.EffectParameter$Elements$value).get_Count());

      for (var i = 0; i < ((this.EffectParameter$Elements$value).get_Count() | 0); i = ((i + 1) | 0)) {
        var v = ($S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i)).GetValueSingleArray();
        result[i] = $S05().Construct(v[0], v[1]);
      }
      var result2 = result;
    } else {
      result2 = null;
    }
    return result2;
  };

  function EffectParameter_GetValueVector3 () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Vector) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    var vecInfo = $T0E().$Cast(this.EffectParameter$Data$value);
    return $S06().Construct(vecInfo[0], vecInfo[1], vecInfo[2]);
  };

  function EffectParameter_GetValueVector3Array () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Vector) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    if (!((this.EffectParameter$Elements$value === null) || (((this.EffectParameter$Elements$value).get_Count() | 0) <= 0))) {
      var result = JSIL.Array.New($T19(), (this.EffectParameter$Elements$value).get_Count());

      for (var i = 0; i < ((this.EffectParameter$Elements$value).get_Count() | 0); i = ((i + 1) | 0)) {
        var v = ($S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i)).GetValueSingleArray();
        result[i] = $S06().Construct(v[0], v[1], v[2]);
      }
      var result2 = result;
    } else {
      result2 = null;
    }
    return result2;
  };

  function EffectParameter_GetValueVector4 () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Vector) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    var vecInfo = $T0E().$Cast(this.EffectParameter$Data$value);
    return $S07().Construct(vecInfo[0], vecInfo[1], vecInfo[2], vecInfo[3]);
  };

  function EffectParameter_GetValueVector4Array () {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Vector) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    if (!((this.EffectParameter$Elements$value === null) || (((this.EffectParameter$Elements$value).get_Count() | 0) <= 0))) {
      var result = JSIL.Array.New($T1B(), (this.EffectParameter$Elements$value).get_Count());

      for (var i = 0; i < ((this.EffectParameter$Elements$value).get_Count() | 0); i = ((i + 1) | 0)) {
        var v = ($S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i)).GetValueSingleArray();
        result[i] = $S07().Construct(v[0], v[1], v[2], v[3]);
      }
      var result2 = result;
    } else {
      result2 = null;
    }
    return result2;
  };

  function EffectParameter_set_Annotations (value) {
    this.EffectParameter$Annotations$value = value;
  };

  function EffectParameter_set_ColumnCount (value) {
    this.EffectParameter$ColumnCount$value = (value | 0);
  };

  function EffectParameter_set_Data (value) {
    this.EffectParameter$Data$value = value;
  };

  function EffectParameter_set_Elements (value) {
    this.EffectParameter$Elements$value = value;
  };

  function EffectParameter_set_Name (value) {
    this.EffectParameter$Name$value = value;
  };

  function EffectParameter_set_NextStateKey (value) {
    $thisType.EffectParameter$NextStateKey$value = value;
  };

  function EffectParameter_set_ParameterClass (value) {
    this.EffectParameter$ParameterClass$value = value;
  };

  function EffectParameter_set_ParameterType (value) {
    this.EffectParameter$ParameterType$value = value;
  };

  function EffectParameter_set_RowCount (value) {
    this.EffectParameter$RowCount$value = (value | 0);
  };

  function EffectParameter_set_Semantic (value) {
    this.EffectParameter$Semantic$value = value;
  };

  function EffectParameter_set_StateKey (value) {
    this.EffectParameter$StateKey$value = value;
  };

  function EffectParameter_set_StructureMembers (value) {
    this.EffectParameter$StructureMembers$value = value;
  };

  function EffectParameter_SetValue$02 (value) {
    if (!((((this.EffectParameter$ParameterClass$value).valueOf() | 0) === 0) && (this.EffectParameter$ParameterType$value === $T01().Bool))) {
      throw $S01().Construct();
    }
    $T0E().$Cast(this.EffectParameter$Data$value)[0] = +((
        value
           ? 1
           : 0)
    );
    var expr_3C = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_3C, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_3C;
  };

  function EffectParameter_SetValue$03 (value) {
    if (!((((this.EffectParameter$ParameterClass$value).valueOf() | 0) === 0) && (this.EffectParameter$ParameterType$value === $T01().Int32))) {
      throw $S01().Construct();
    }
    $T0E().$Cast(this.EffectParameter$Data$value)[0] = +value;
    var expr_35 = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_35, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_35;
  };

  function EffectParameter_SetValue$04 (value) {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Matrix) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    if (!(((this.EffectParameter$RowCount$value | 0) !== 4) || ((this.EffectParameter$ColumnCount$value | 0) !== 4))) {
      var fData = $T0E().$Cast(this.EffectParameter$Data$value);
      fData[0] = +value.M11;
      fData[1] = +value.M21;
      fData[2] = +value.M31;
      fData[3] = +value.M41;
      fData[4] = +value.M12;
      fData[5] = +value.M22;
      fData[6] = +value.M32;
      fData[7] = +value.M42;
      fData[8] = +value.M13;
      fData[9] = +value.M23;
      fData[10] = +value.M33;
      fData[11] = +value.M43;
      fData[12] = +value.M14;
      fData[13] = +value.M24;
      fData[14] = +value.M34;
      fData[15] = +value.M44;
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 4) || ((this.EffectParameter$ColumnCount$value | 0) !== 3))) {
      fData = $T0E().$Cast(this.EffectParameter$Data$value);
      fData[0] = +value.M11;
      fData[1] = +value.M21;
      fData[2] = +value.M31;
      fData[3] = +value.M41;
      fData[4] = +value.M12;
      fData[5] = +value.M22;
      fData[6] = +value.M32;
      fData[7] = +value.M42;
      fData[8] = +value.M13;
      fData[9] = +value.M23;
      fData[10] = +value.M33;
      fData[11] = +value.M43;
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 3) || ((this.EffectParameter$ColumnCount$value | 0) !== 4))) {
      fData = $T0E().$Cast(this.EffectParameter$Data$value);
      fData[0] = +value.M11;
      fData[1] = +value.M21;
      fData[2] = +value.M31;
      fData[3] = +value.M12;
      fData[4] = +value.M22;
      fData[5] = +value.M32;
      fData[6] = +value.M13;
      fData[7] = +value.M23;
      fData[8] = +value.M33;
      fData[9] = +value.M14;
      fData[10] = +value.M24;
      fData[11] = +value.M34;
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 3) || ((this.EffectParameter$ColumnCount$value | 0) !== 3))) {
      fData = $T0E().$Cast(this.EffectParameter$Data$value);
      fData[0] = +value.M11;
      fData[1] = +value.M21;
      fData[2] = +value.M31;
      fData[3] = +value.M12;
      fData[4] = +value.M22;
      fData[5] = +value.M32;
      fData[6] = +value.M13;
      fData[7] = +value.M23;
      fData[8] = +value.M33;
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 3) || ((this.EffectParameter$ColumnCount$value | 0) !== 2))) {
      fData = $T0E().$Cast(this.EffectParameter$Data$value);
      fData[0] = +value.M11;
      fData[1] = +value.M21;
      fData[2] = +value.M31;
      fData[3] = +value.M12;
      fData[4] = +value.M22;
      fData[5] = +value.M32;
    }
    var expr_34B = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_34B, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_34B;
  };

  function EffectParameter_SetValue$05 (value) {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Matrix) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    if (!(((this.EffectParameter$RowCount$value | 0) !== 4) || ((this.EffectParameter$ColumnCount$value | 0) !== 4))) {

      for (var i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
        var fData = $T0E().$Cast($S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i).EffectParameter$Data$value);
        fData[0] = +value[i].M11;
        fData[1] = +value[i].M21;
        fData[2] = +value[i].M31;
        fData[3] = +value[i].M41;
        fData[4] = +value[i].M12;
        fData[5] = +value[i].M22;
        fData[6] = +value[i].M32;
        fData[7] = +value[i].M42;
        fData[8] = +value[i].M13;
        fData[9] = +value[i].M23;
        fData[10] = +value[i].M33;
        fData[11] = +value[i].M43;
        fData[12] = +value[i].M14;
        fData[13] = +value[i].M24;
        fData[14] = +value[i].M34;
        fData[15] = +value[i].M44;
      }
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 4) || ((this.EffectParameter$ColumnCount$value | 0) !== 3))) {

      for (i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
        fData = $T0E().$Cast($S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i).EffectParameter$Data$value);
        fData[0] = +value[i].M11;
        fData[1] = +value[i].M21;
        fData[2] = +value[i].M31;
        fData[3] = +value[i].M41;
        fData[4] = +value[i].M12;
        fData[5] = +value[i].M22;
        fData[6] = +value[i].M32;
        fData[7] = +value[i].M42;
        fData[8] = +value[i].M13;
        fData[9] = +value[i].M23;
        fData[10] = +value[i].M33;
        fData[11] = +value[i].M43;
      }
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 3) || ((this.EffectParameter$ColumnCount$value | 0) !== 4))) {

      for (i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
        fData = $T0E().$Cast($S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i).EffectParameter$Data$value);
        fData[0] = +value[i].M11;
        fData[1] = +value[i].M21;
        fData[2] = +value[i].M31;
        fData[3] = +value[i].M12;
        fData[4] = +value[i].M22;
        fData[5] = +value[i].M32;
        fData[6] = +value[i].M13;
        fData[7] = +value[i].M23;
        fData[8] = +value[i].M33;
        fData[9] = +value[i].M14;
        fData[10] = +value[i].M24;
        fData[11] = +value[i].M34;
      }
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 3) || ((this.EffectParameter$ColumnCount$value | 0) !== 3))) {

      for (i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
        fData = $T0E().$Cast($S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i).EffectParameter$Data$value);
        fData[0] = +value[i].M11;
        fData[1] = +value[i].M21;
        fData[2] = +value[i].M31;
        fData[3] = +value[i].M12;
        fData[4] = +value[i].M22;
        fData[5] = +value[i].M32;
        fData[6] = +value[i].M13;
        fData[7] = +value[i].M23;
        fData[8] = +value[i].M33;
      }
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 3) || ((this.EffectParameter$ColumnCount$value | 0) !== 2))) {

      for (i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
        fData = $T0E().$Cast($S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i).EffectParameter$Data$value);
        fData[0] = +value[i].M11;
        fData[1] = +value[i].M21;
        fData[2] = +value[i].M31;
        fData[3] = +value[i].M12;
        fData[4] = +value[i].M22;
        fData[5] = +value[i].M32;
      }
    }
    var expr_51D = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_51D, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_51D;
  };

  function EffectParameter_SetValue$06 (value) {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Vector) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    var fData = $T0E().$Cast(this.EffectParameter$Data$value);
    fData[0] = +value.X;
    fData[1] = +value.Y;
    fData[2] = +value.Z;
    fData[3] = +value.W;
    var expr_5B = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_5B, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_5B;
  };

  function EffectParameter_SetValue$07 (value) {
    if (this.EffectParameter$ParameterType$value !== $T01().Single) {
      throw $S01().Construct();
    }
    $T0E().$Cast(this.EffectParameter$Data$value)[0] = +value;
    var expr_28 = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_28, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_28;
  };

  function EffectParameter_SetValue$08 (value) {

    for (var i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
      $S08().CallVirtual("SetValue", null, $S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i), value[i]);
    }
    var expr_2E = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_2E, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_2E;
  };

  function EffectParameter_SetValue$09 (value) {
    if (!((this.EffectParameter$ParameterType$value === $T01().Texture) || 
        (this.EffectParameter$ParameterType$value === $T01().Texture1D) || 
        (this.EffectParameter$ParameterType$value === $T01().Texture2D) || 
        (this.EffectParameter$ParameterType$value === $T01().Texture3D) || (this.EffectParameter$ParameterType$value === $T01().TextureCube))) {
      throw $S01().Construct();
    }
    this.EffectParameter$Data$value = value;
    var expr_4C = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_4C, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_4C;
  };

  function EffectParameter_SetValue$0A (value) {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Vector) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    var fData = $T0E().$Cast(this.EffectParameter$Data$value);
    fData[0] = +value.X;
    fData[1] = +value.Y;
    var expr_47 = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_47, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_47;
  };

  function EffectParameter_SetValue$0B (value) {

    for (var i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
      $S09().CallVirtual("SetValue", null, $S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i), value[i]);
    }
    var expr_37 = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_37, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_37;
  };

  function EffectParameter_SetValue$0C (value) {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Vector) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    var fData = $T0E().$Cast(this.EffectParameter$Data$value);
    fData[0] = +value.X;
    fData[1] = +value.Y;
    fData[2] = +value.Z;
    var expr_51 = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_51, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_51;
  };

  function EffectParameter_SetValue$0D (value) {

    for (var i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
      $S0A().CallVirtual("SetValue", null, $S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i), value[i]);
    }
    var expr_37 = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_37, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_37;
  };

  function EffectParameter_SetValue$0E (value) {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Vector) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    var fData = $T0E().$Cast(this.EffectParameter$Data$value);
    fData[0] = +value.X;
    fData[1] = +value.Y;
    fData[2] = +value.Z;
    fData[3] = +value.W;
    var expr_5B = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_5B, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_5B;
  };

  function EffectParameter_SetValue$0F (value) {

    for (var i = 0; i < (value.length | 0); i = ((i + 1) | 0)) {
      $S0B().CallVirtual("SetValue", null, $S02().CallVirtual("get_Item", null, this.EffectParameter$Elements$value, i), value[i]);
    }
    var expr_37 = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_37, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_37;
  };

  function EffectParameter_SetValueTranspose (value) {
    if (!((this.EffectParameter$ParameterClass$value === $T00().Matrix) && (this.EffectParameter$ParameterType$value === $T01().Single))) {
      throw $S01().Construct();
    }
    if (!(((this.EffectParameter$RowCount$value | 0) !== 4) || ((this.EffectParameter$ColumnCount$value | 0) !== 4))) {
      var fData = $T0E().$Cast(this.EffectParameter$Data$value);
      fData[0] = +value.M11;
      fData[1] = +value.M12;
      fData[2] = +value.M13;
      fData[3] = +value.M14;
      fData[4] = +value.M21;
      fData[5] = +value.M22;
      fData[6] = +value.M23;
      fData[7] = +value.M24;
      fData[8] = +value.M31;
      fData[9] = +value.M32;
      fData[10] = +value.M33;
      fData[11] = +value.M34;
      fData[12] = +value.M41;
      fData[13] = +value.M42;
      fData[14] = +value.M43;
      fData[15] = +value.M44;
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 4) || ((this.EffectParameter$ColumnCount$value | 0) !== 3))) {
      fData = $T0E().$Cast(this.EffectParameter$Data$value);
      fData[0] = +value.M11;
      fData[1] = +value.M12;
      fData[2] = +value.M13;
      fData[3] = +value.M21;
      fData[4] = +value.M22;
      fData[5] = +value.M23;
      fData[6] = +value.M31;
      fData[7] = +value.M32;
      fData[8] = +value.M33;
      fData[9] = +value.M41;
      fData[10] = +value.M42;
      fData[11] = +value.M43;
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 3) || ((this.EffectParameter$ColumnCount$value | 0) !== 4))) {
      fData = $T0E().$Cast(this.EffectParameter$Data$value);
      fData[0] = +value.M11;
      fData[1] = +value.M12;
      fData[2] = +value.M13;
      fData[3] = +value.M14;
      fData[4] = +value.M21;
      fData[5] = +value.M22;
      fData[6] = +value.M23;
      fData[7] = +value.M24;
      fData[8] = +value.M31;
      fData[9] = +value.M32;
      fData[10] = +value.M33;
      fData[11] = +value.M34;
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 3) || ((this.EffectParameter$ColumnCount$value | 0) !== 3))) {
      fData = $T0E().$Cast(this.EffectParameter$Data$value);
      fData[0] = +value.M11;
      fData[1] = +value.M12;
      fData[2] = +value.M13;
      fData[3] = +value.M21;
      fData[4] = +value.M22;
      fData[5] = +value.M23;
      fData[6] = +value.M31;
      fData[7] = +value.M32;
      fData[8] = +value.M33;
    } else if (!(((this.EffectParameter$RowCount$value | 0) !== 3) || ((this.EffectParameter$ColumnCount$value | 0) !== 2))) {
      fData = $T0E().$Cast(this.EffectParameter$Data$value);
      fData[0] = +value.M11;
      fData[1] = +value.M12;
      fData[2] = +value.M13;
      fData[3] = +value.M21;
      fData[4] = +value.M22;
      fData[5] = +value.M23;
    }
    var expr_34B = $thisType.EffectParameter$NextStateKey$value;
    $thisType.EffectParameter$NextStateKey$value = $T07().op_Addition(expr_34B, $T07().Create(1, 0, 0));
    this.EffectParameter$StateKey$value = expr_34B;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.EffectParameter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterClass"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterType"), 
          $.String, $.Int32, 
          $.Int32, $.String, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection"), $.Object
        ]), 
      EffectParameter__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      EffectParameter__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_Annotations", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection")), 
      EffectParameter_get_Annotations
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ColumnCount", 
      JSIL.MethodSignature.Return($.Int32), 
      EffectParameter_get_ColumnCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Data", 
      JSIL.MethodSignature.Return($.Object), 
      EffectParameter_get_Data
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_DebugDisplayString", 
      JSIL.MethodSignature.Return($.String), 
      EffectParameter_get_DebugDisplayString
    );

    $.Method({Static:false, Public:true }, "get_Elements", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection")), 
      EffectParameter_get_Elements
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      EffectParameter_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "get_NextStateKey", 
      JSIL.MethodSignature.Return($.UInt64), 
      EffectParameter_get_NextStateKey
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ParameterClass", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterClass")), 
      EffectParameter_get_ParameterClass
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ParameterType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterType")), 
      EffectParameter_get_ParameterType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RowCount", 
      JSIL.MethodSignature.Return($.Int32), 
      EffectParameter_get_RowCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Semantic", 
      JSIL.MethodSignature.Return($.String), 
      EffectParameter_get_Semantic
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_StateKey", 
      JSIL.MethodSignature.Return($.UInt64), 
      EffectParameter_get_StateKey
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_StructureMembers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection")), 
      EffectParameter_get_StructureMembers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetValueBoolean", 
      JSIL.MethodSignature.Return($.Boolean), 
      EffectParameter_GetValueBoolean
    );

    $.Method({Static:false, Public:true }, "GetValueInt32", 
      JSIL.MethodSignature.Return($.Int32), 
      EffectParameter_GetValueInt32
    );

    $.Method({Static:false, Public:true }, "GetValueMatrix", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      EffectParameter_GetValueMatrix
    );

    $.Method({Static:false, Public:true }, "GetValueMatrixArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), [$.Int32]), 
      EffectParameter_GetValueMatrixArray
    );

    $.Method({Static:false, Public:true }, "GetValueQuaternion", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")), 
      EffectParameter_GetValueQuaternion
    );

    $.Method({Static:false, Public:true }, "GetValueSingle", 
      JSIL.MethodSignature.Return($.Single), 
      EffectParameter_GetValueSingle
    );

    $.Method({Static:false, Public:true }, "GetValueSingleArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Single])), 
      EffectParameter_GetValueSingleArray
    );

    $.Method({Static:false, Public:true }, "GetValueString", 
      JSIL.MethodSignature.Return($.String), 
      EffectParameter_GetValueString
    );

    $.Method({Static:false, Public:true }, "GetValueTexture2D", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      EffectParameter_GetValueTexture2D
    );

    $.Method({Static:false, Public:true }, "GetValueTexture3D", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture3D")), 
      EffectParameter_GetValueTexture3D
    );

    $.Method({Static:false, Public:true }, "GetValueTextureCube", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCube")), 
      EffectParameter_GetValueTextureCube
    );

    $.Method({Static:false, Public:true }, "GetValueVector2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      EffectParameter_GetValueVector2
    );

    $.Method({Static:false, Public:true }, "GetValueVector2Array", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")])), 
      EffectParameter_GetValueVector2Array
    );

    $.Method({Static:false, Public:true }, "GetValueVector3", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EffectParameter_GetValueVector3
    );

    $.Method({Static:false, Public:true }, "GetValueVector3Array", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])), 
      EffectParameter_GetValueVector3Array
    );

    $.Method({Static:false, Public:true }, "GetValueVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      EffectParameter_GetValueVector4
    );

    $.Method({Static:false, Public:true }, "GetValueVector4Array", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")])), 
      EffectParameter_GetValueVector4Array
    );

    $.Method({Static:false, Public:false}, "set_Annotations", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection")), 
      EffectParameter_set_Annotations
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ColumnCount", 
      JSIL.MethodSignature.Action($.Int32), 
      EffectParameter_set_ColumnCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Data", 
      JSIL.MethodSignature.Action($.Object), 
      EffectParameter_set_Data
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Elements", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection")), 
      EffectParameter_set_Elements
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      EffectParameter_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_NextStateKey", 
      JSIL.MethodSignature.Action($.UInt64), 
      EffectParameter_set_NextStateKey
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ParameterClass", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterClass")), 
      EffectParameter_set_ParameterClass
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ParameterType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterType")), 
      EffectParameter_set_ParameterType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RowCount", 
      JSIL.MethodSignature.Action($.Int32), 
      EffectParameter_set_RowCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Semantic", 
      JSIL.MethodSignature.Action($.String), 
      EffectParameter_set_Semantic
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_StateKey", 
      JSIL.MethodSignature.Action($.UInt64), 
      EffectParameter_set_StateKey
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_StructureMembers", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection")), 
      EffectParameter_set_StructureMembers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Boolean), 
      EffectParameter_SetValue$02
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Int32), 
      EffectParameter_SetValue$03
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      EffectParameter_SetValue$04
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])), 
      EffectParameter_SetValue$05
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")), 
      EffectParameter_SetValue$06
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Single), 
      EffectParameter_SetValue$07
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single])), 
      EffectParameter_SetValue$08
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")), 
      EffectParameter_SetValue$09
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      EffectParameter_SetValue$0A
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")])), 
      EffectParameter_SetValue$0B
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EffectParameter_SetValue$0C
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])), 
      EffectParameter_SetValue$0D
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      EffectParameter_SetValue$0E
    );

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")])), 
      EffectParameter_SetValue$0F
    );

    $.Method({Static:false, Public:true }, "SetValueTranspose", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      EffectParameter_SetValueTranspose
    );

    $.Field({Static:true , Public:false}, "EffectParameter$NextStateKey$value", $.UInt64)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectParameter$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectParameter$Semantic$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectParameter$ParameterClass$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterClass"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectParameter$ParameterType$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterType"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectParameter$RowCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectParameter$ColumnCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectParameter$Elements$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectParameter$StructureMembers$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectParameter$Annotations$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectParameter$Data$value", $.Object)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectParameter$StateKey$value", $.UInt64)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:true , Public:false}, "NextStateKey", $.UInt64);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Semantic", $.String);

    $.Property({Static:false, Public:true }, "ParameterClass", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterClass"));

    $.Property({Static:false, Public:true }, "ParameterType", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterType"));

    $.Property({Static:false, Public:true }, "RowCount", $.Int32);

    $.Property({Static:false, Public:true }, "ColumnCount", $.Int32);

    $.Property({Static:false, Public:true }, "Elements", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection"));

    $.Property({Static:false, Public:true }, "StructureMembers", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameterCollection"));

    $.Property({Static:false, Public:true }, "Annotations", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection"));

    $.Property({Static:false, Public:false}, "Data", $.Object);

    $.Property({Static:false, Public:false}, "StateKey", $.UInt64);

    $.Property({Static:false, Public:false}, "DebugDisplayString", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugDisplayString}"]; });

})();

/* class Microsoft.Xna.Framework.Graphics.EffectPass */ 

(function EffectPass$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Shader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthStencilState)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm03.System.Diagnostics.Debug)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectPassCollection)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectTechnique)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ConstantBuffer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ShaderStage)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.SamplerInfo))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SamplerInfo)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterCollection)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureCollection)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SamplerStateCollection)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$asm01.TypeRef("System.Int32")]))) ();
  };

  function EffectPass__ctor$00 (effect, name, vertexShader, pixelShader, blendState, depthStencilState, rasterizerState, annotations) {
    $T07().Assert(effect !== null, "Got a null effect!");
    $T07().Assert(annotations !== null, "Got a null annotation collection!");
    this._effect = effect;
    this.EffectPass$Name$value = name;
    this._vertexShader = vertexShader;
    this._pixelShader = pixelShader;
    this._blendState = blendState;
    this._depthStencilState = depthStencilState;
    this._rasterizerState = rasterizerState;
    this.EffectPass$Annotations$value = annotations;
  };

  function EffectPass__ctor$01 (effect, cloneSource) {
    $T07().Assert(effect !== null, "Got a null effect!");
    $T07().Assert(cloneSource !== null, "Got a null cloneSource!");
    this._effect = effect;
    this.EffectPass$Name$value = cloneSource.EffectPass$Name$value;
    this._blendState = cloneSource._blendState;
    this._depthStencilState = cloneSource._depthStencilState;
    this._rasterizerState = cloneSource._rasterizerState;
    this.EffectPass$Annotations$value = cloneSource.EffectPass$Annotations$value;
    this._vertexShader = cloneSource._vertexShader;
    this._pixelShader = cloneSource._pixelShader;
  };

  function EffectPass_Apply () {
    if ((this._effect).OnApply()) {
      ($S00().CallVirtual("get_Item", null, this._effect.Effect$CurrentTechnique$value.EffectTechnique$Passes$value, 0)).Apply();
    } else {
      var device = this._effect.GraphicsResource$GraphicsDevice$value;
      if (this._vertexShader !== null) {
        device.set_VertexShader(this._vertexShader);

        for (var c = 0; c < (this._vertexShader.Shader$CBuffers$value.length | 0); c = ((c + 1) | 0)) {
          var cb = this._effect.Effect$ConstantBuffers$value[this._vertexShader.Shader$CBuffers$value[c]];
          cb.Update(this._effect.Effect$Parameters$value);
          device.SetConstantBuffer($T0F().Vertex, c, cb);
        }
      }
      if (this._pixelShader !== null) {
        device.set_PixelShader(this._pixelShader);
        var samplers = this._pixelShader.Shader$Samplers$value;

        for (var i = 0; i < (samplers.length | 0); i = ((i + 1) | 0)) {
          var sampler = samplers[i].MemberwiseClone();
          var param = $S01().CallVirtual("get_Item", null, this._effect.Effect$Parameters$value, sampler.parameter);
          var texture = $T14().$As(param.EffectParameter$Data$value);
          if (texture !== null) {
            (device.GraphicsDevice$Textures$value).set_Item(sampler.textureSlot, texture);
          }
          if (sampler.state !== null) {
            (device.GraphicsDevice$SamplerStates$value).set_Item(sampler.samplerSlot, sampler.state);
          }
        }

        for (c = 0; c < (this._pixelShader.Shader$CBuffers$value.length | 0); c = ((c + 1) | 0)) {
          cb = this._effect.Effect$ConstantBuffers$value[this._pixelShader.Shader$CBuffers$value[c]];
          cb.Update(this._effect.Effect$Parameters$value);
          device.SetConstantBuffer($T0F().Pixel, c, cb);
        }
      }
      if (this._rasterizerState !== null) {
        device.GraphicsDevice$RasterizerState$value = this._rasterizerState;
      }
      if (this._blendState !== null) {
        device.set_BlendState(this._blendState);
      }
      if (this._depthStencilState !== null) {
        device.set_DepthStencilState(this._depthStencilState);
      }
    }
  };

  function EffectPass_get_Annotations () {
    return this.EffectPass$Annotations$value;
  };

  function EffectPass_get_Name () {
    return this.EffectPass$Name$value;
  };

  function EffectPass_set_Annotations (value) {
    this.EffectPass$Annotations$value = value;
  };

  function EffectPass_set_Name (value) {
    this.EffectPass$Name$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.EffectPass", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), $.String, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection")
        ]), 
      EffectPass__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), $.Type]), 
      EffectPass__ctor$01
    );

    $.Method({Static:false, Public:true }, "Apply", 
      JSIL.MethodSignature.Void, 
      EffectPass_Apply
    );

    $.Method({Static:false, Public:true }, "get_Annotations", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection")), 
      EffectPass_get_Annotations
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      EffectPass_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Annotations", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection")), 
      EffectPass_set_Annotations
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      EffectPass_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_effect", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_pixelShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_vertexShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_blendState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_depthStencilState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_rasterizerState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState")); 
    $.Field({Static:false, Public:false}, "EffectPass$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EffectPass$Annotations$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Annotations", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect */ 

(function EnvironmentMapEffect$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectDirtyFlags)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DirectionalLight)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterCollection)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectHelpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureCube)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Single")))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")))) ();
  };

  function EnvironmentMapEffect__ctor$00 (device) {
    this._shaderIndex = -1;
    this.world = $T02().get_Identity().MemberwiseClone();
    this.view = $T02().get_Identity().MemberwiseClone();
    this.projection = $T02().get_Identity().MemberwiseClone();
    this.diffuseColor = $T03().get_One().MemberwiseClone();
    this.emissiveColor = $T03().get_Zero().MemberwiseClone();
    this.ambientLightColor = $T03().get_Zero().MemberwiseClone();
    this.alpha = 1;
    this.fogStart = 0;
    this.fogEnd = 1;
    this.dirtyFlags = $T04().$Flags(
        "AlphaTest", "EyePosition", "Fog", "FogEnable", 
        "MaterialColor", "ShaderIndex", "World", "WorldViewProj"
    );
    $T00().prototype._ctor.call(this, device, $thisType.Bytecode);
    this.CacheEffectParameters(null);
    (this.get_DirectionalLight0()).set_Enabled(true);
    this.set_EnvironmentMapAmount(1);
    (this.EnvironmentMapSpecular = $T03().get_Zero().MemberwiseClone());
    this.set_FresnelFactor(1);
  };

  function EnvironmentMapEffect__ctor$01 (cloneSource) {
    this._shaderIndex = -1;
    this.world = $T02().get_Identity().MemberwiseClone();
    this.view = $T02().get_Identity().MemberwiseClone();
    this.projection = $T02().get_Identity().MemberwiseClone();
    this.diffuseColor = $T03().get_One().MemberwiseClone();
    this.emissiveColor = $T03().get_Zero().MemberwiseClone();
    this.ambientLightColor = $T03().get_Zero().MemberwiseClone();
    this.alpha = 1;
    this.fogStart = 0;
    this.fogEnd = 1;
    this.dirtyFlags = $T04().$Flags(
        "AlphaTest", "EyePosition", "Fog", "FogEnable", 
        "MaterialColor", "ShaderIndex", "World", "WorldViewProj"
    );
    $S00().Call($T00().prototype, "_ctor", null, this, cloneSource);
    this.CacheEffectParameters(cloneSource);
    this.fogEnabled = cloneSource.fogEnabled;
    this.fresnelEnabled = cloneSource.fresnelEnabled;
    this.specularEnabled = cloneSource.specularEnabled;
    this.world = cloneSource.world.MemberwiseClone();
    this.view = cloneSource.view.MemberwiseClone();
    this.projection = cloneSource.projection.MemberwiseClone();
    this.diffuseColor = cloneSource.diffuseColor.MemberwiseClone();
    this.emissiveColor = cloneSource.emissiveColor.MemberwiseClone();
    this.ambientLightColor = cloneSource.ambientLightColor.MemberwiseClone();
    this.alpha = +cloneSource.alpha;
    this.fogStart = +cloneSource.fogStart;
    this.fogEnd = +cloneSource.fogEnd;
  };

  function EnvironmentMapEffect_CacheEffectParameters (cloneSource) {
    this.textureParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "Texture");
    this.environmentMapParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "EnvironmentMap");
    this.environmentMapAmountParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "EnvironmentMapAmount");
    this.environmentMapSpecularParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "EnvironmentMapSpecular");
    this.fresnelFactorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "FresnelFactor");
    this.diffuseColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DiffuseColor");
    this.emissiveColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "EmissiveColor");
    this.eyePositionParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "EyePosition");
    this.fogColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "FogColor");
    this.fogVectorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "FogVector");
    this.worldParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "World");
    this.worldInverseTransposeParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "WorldInverseTranspose");
    this.worldViewProjParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "WorldViewProj");
    this.light0 = new ($T05())($S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight0Direction"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight0DiffuseColor"), null, (
        (cloneSource !== null)
           ? cloneSource.light0
           : null)
    );
    this.light1 = new ($T05())($S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight1Direction"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight1DiffuseColor"), null, (
        (cloneSource !== null)
           ? cloneSource.light1
           : null)
    );
    this.light2 = new ($T05())($S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight2Direction"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight2DiffuseColor"), null, (
        (cloneSource !== null)
           ? cloneSource.light2
           : null)
    );
  };

  function EnvironmentMapEffect_Clone$02 () {
    return $S02().Construct(this);
  };

  function EnvironmentMapEffect_EnableDefaultLighting () {
    (this.AmbientLightColor = $T07().EnableDefaultLighting(this.light0, this.light1, this.light2));
  };

  function EnvironmentMapEffect_get_Alpha () {
    return this.alpha;
  };

  function EnvironmentMapEffect_get_AmbientLightColor () {
    return this.ambientLightColor;
  };

  function EnvironmentMapEffect_get_DiffuseColor () {
    return this.diffuseColor;
  };

  function EnvironmentMapEffect_get_DirectionalLight0 () {
    return this.light0;
  };

  function EnvironmentMapEffect_get_DirectionalLight1 () {
    return this.light1;
  };

  function EnvironmentMapEffect_get_DirectionalLight2 () {
    return this.light2;
  };

  function EnvironmentMapEffect_get_EmissiveColor () {
    return this.emissiveColor;
  };

  function EnvironmentMapEffect_get_EnvironmentMap () {
    return (this.environmentMapParam).GetValueTextureCube();
  };

  function EnvironmentMapEffect_get_EnvironmentMapAmount () {
    return (this.environmentMapAmountParam).GetValueSingle();
  };

  function EnvironmentMapEffect_get_EnvironmentMapSpecular () {
    return (this.environmentMapSpecularParam).GetValueVector3();
  };

  function EnvironmentMapEffect_get_FogColor () {
    return (this.fogColorParam).GetValueVector3();
  };

  function EnvironmentMapEffect_get_FogEnabled () {
    return this.fogEnabled;
  };

  function EnvironmentMapEffect_get_FogEnd () {
    return this.fogEnd;
  };

  function EnvironmentMapEffect_get_FogStart () {
    return this.fogStart;
  };

  function EnvironmentMapEffect_get_FresnelFactor () {
    return (this.fresnelFactorParam).GetValueSingle();
  };

  function EnvironmentMapEffect_get_Projection () {
    return this.projection;
  };

  function EnvironmentMapEffect_get_Texture () {
    return (this.textureParam).GetValueTexture2D();
  };

  function EnvironmentMapEffect_get_View () {
    return this.view;
  };

  function EnvironmentMapEffect_get_World () {
    return this.world;
  };

  function EnvironmentMapEffect_Microsoft_Xna_Framework_Graphics_IEffectLights_get_LightingEnabled () {
    return true;
  };

  function EnvironmentMapEffect_Microsoft_Xna_Framework_Graphics_IEffectLights_set_LightingEnabled (value) {
    if (!value) {
      throw $S03().Construct("EnvironmentMapEffect does not support setting LightingEnabled to false.");
    }
  };

  function EnvironmentMapEffect_OnApply () {
    this.dirtyFlags = $T07().SetWorldViewProjAndFog(
      this.dirtyFlags, 
      /* ref */ new JSIL.MemberReference(this, "world"), 
      /* ref */ new JSIL.MemberReference(this, "view"), 
      /* ref */ new JSIL.MemberReference(this, "projection"), 
      /* ref */ new JSIL.MemberReference(this, "worldView"), 
      this.fogEnabled, 
      this.fogStart, 
      this.fogEnd, 
      this.worldViewProjParam, 
      this.fogVectorParam
    );
    this.dirtyFlags = $T07().SetLightingMatrices(
      this.dirtyFlags, 
      /* ref */ new JSIL.MemberReference(this, "world"), 
      /* ref */ new JSIL.MemberReference(this, "view"), 
      this.worldParam, 
      this.worldInverseTransposeParam, 
      this.eyePositionParam
    );
    if ($T04().$Cast(this.dirtyFlags & $T04().MaterialColor) !== $T04().$Cast(0)) {
      $T07().SetMaterialColor(
        true, 
        this.alpha, 
        /* ref */ new JSIL.MemberReference(this, "diffuseColor"), 
        /* ref */ new JSIL.MemberReference(this, "emissiveColor"), 
        /* ref */ new JSIL.MemberReference(this, "ambientLightColor"), 
        this.diffuseColorParam, 
        this.emissiveColorParam
      );
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags & $T04().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "ShaderIndex", "World", "WorldViewProj"
        ));
    }
    var newOneLight = !(this.light1).get_Enabled() && 
    !(this.light2).get_Enabled();
    if (this.oneLight !== newOneLight) {
      this.oneLight = newOneLight;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().ShaderIndex);
    }
    if ($T04().$Cast(this.dirtyFlags & $T04().ShaderIndex) !== $T04().$Cast(0)) {
      var shaderIndex = 0;
      if (!this.fogEnabled) {
        shaderIndex = ((shaderIndex + 1) | 0);
      }
      if (this.fresnelEnabled) {
        shaderIndex = ((shaderIndex + 2) | 0);
      }
      if (this.specularEnabled) {
        shaderIndex = ((shaderIndex + 4) | 0);
      }
      if (this.oneLight) {
        shaderIndex = ((shaderIndex + 8) | 0);
      }
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags & $T04().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "MaterialColor", "World", "WorldViewProj"
        ));
      if ((this._shaderIndex | 0) !== shaderIndex) {
        this._shaderIndex = shaderIndex;
        this.Effect$CurrentTechnique$value = $S04().CallVirtual("get_Item", null, this.Effect$Techniques$value, this._shaderIndex);
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function EnvironmentMapEffect_set_Alpha (value) {
    this.alpha = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function EnvironmentMapEffect_set_AmbientLightColor (value) {
    this.ambientLightColor = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function EnvironmentMapEffect_set_DiffuseColor (value) {
    this.diffuseColor = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function EnvironmentMapEffect_set_EmissiveColor (value) {
    this.emissiveColor = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function EnvironmentMapEffect_set_EnvironmentMap (value) {
    $S05().CallVirtual("SetValue", null, this.environmentMapParam, value);
  };

  function EnvironmentMapEffect_set_EnvironmentMapAmount (value) {
    $S06().CallVirtual("SetValue", null, this.environmentMapAmountParam, value);
  };

  function EnvironmentMapEffect_set_EnvironmentMapSpecular (value) {
    $S07().CallVirtual("SetValue", null, this.environmentMapSpecularParam, value);
    var enabled = $T03().op_Inequality(value.MemberwiseClone(), $T03().get_Zero().MemberwiseClone());
    if (this.specularEnabled !== enabled) {
      this.specularEnabled = enabled;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().ShaderIndex);
    }
  };

  function EnvironmentMapEffect_set_FogColor (value) {
    $S07().CallVirtual("SetValue", null, this.fogColorParam, value);
  };

  function EnvironmentMapEffect_set_FogEnabled (value) {
    if (this.fogEnabled !== value) {
      this.fogEnabled = value;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("FogEnable", "ShaderIndex"));
    }
  };

  function EnvironmentMapEffect_set_FogEnd (value) {
    this.fogEnd = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().Fog);
  };

  function EnvironmentMapEffect_set_FogStart (value) {
    this.fogStart = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().Fog);
  };

  function EnvironmentMapEffect_set_FresnelFactor (value) {
    $S06().CallVirtual("SetValue", null, this.fresnelFactorParam, value);
    var enabled = +value !== 0;
    if (this.fresnelEnabled !== enabled) {
      this.fresnelEnabled = enabled;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().ShaderIndex);
    }
  };

  function EnvironmentMapEffect_set_Projection (value) {
    this.projection = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().WorldViewProj);
  };

  function EnvironmentMapEffect_set_Texture (value) {
    $S05().CallVirtual("SetValue", null, this.textureParam, value);
  };

  function EnvironmentMapEffect_set_View (value) {
    this.view = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("EyePosition", "Fog", "WorldViewProj"));
  };

  function EnvironmentMapEffect_set_World (value) {
    this.world = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("Fog", "World", "WorldViewProj"));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), 
      Name: "Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      EnvironmentMapEffect__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      EnvironmentMapEffect__ctor$01
    );

    $.Method({Static:false, Public:false}, "CacheEffectParameters", 
      JSIL.MethodSignature.Action($.Type), 
      EnvironmentMapEffect_CacheEffectParameters
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      EnvironmentMapEffect_Clone$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EnableDefaultLighting", 
      JSIL.MethodSignature.Void, 
      EnvironmentMapEffect_EnableDefaultLighting
    );

    $.Method({Static:false, Public:true }, "get_Alpha", 
      JSIL.MethodSignature.Return($.Single), 
      EnvironmentMapEffect_get_Alpha
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AmbientLightColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EnvironmentMapEffect_get_AmbientLightColor
    );

    $.Method({Static:false, Public:true }, "get_DiffuseColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EnvironmentMapEffect_get_DiffuseColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DirectionalLight0", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")), 
      EnvironmentMapEffect_get_DirectionalLight0
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DirectionalLight1", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")), 
      EnvironmentMapEffect_get_DirectionalLight1
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DirectionalLight2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")), 
      EnvironmentMapEffect_get_DirectionalLight2
    );

    $.Method({Static:false, Public:true }, "get_EmissiveColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EnvironmentMapEffect_get_EmissiveColor
    );

    $.Method({Static:false, Public:true }, "get_EnvironmentMap", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCube")), 
      EnvironmentMapEffect_get_EnvironmentMap
    );

    $.Method({Static:false, Public:true }, "get_EnvironmentMapAmount", 
      JSIL.MethodSignature.Return($.Single), 
      EnvironmentMapEffect_get_EnvironmentMapAmount
    );

    $.Method({Static:false, Public:true }, "get_EnvironmentMapSpecular", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EnvironmentMapEffect_get_EnvironmentMapSpecular
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EnvironmentMapEffect_get_FogColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      EnvironmentMapEffect_get_FogEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogEnd", 
      JSIL.MethodSignature.Return($.Single), 
      EnvironmentMapEffect_get_FogEnd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogStart", 
      JSIL.MethodSignature.Return($.Single), 
      EnvironmentMapEffect_get_FogStart
    );

    $.Method({Static:false, Public:true }, "get_FresnelFactor", 
      JSIL.MethodSignature.Return($.Single), 
      EnvironmentMapEffect_get_FresnelFactor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Projection", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      EnvironmentMapEffect_get_Projection
    );

    $.Method({Static:false, Public:true }, "get_Texture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      EnvironmentMapEffect_get_Texture
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_View", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      EnvironmentMapEffect_get_View
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_World", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      EnvironmentMapEffect_get_World
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IEffectLights.get_LightingEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      EnvironmentMapEffect_Microsoft_Xna_Framework_Graphics_IEffectLights_get_LightingEnabled
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectLights"), "get_LightingEnabled");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IEffectLights.set_LightingEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      EnvironmentMapEffect_Microsoft_Xna_Framework_Graphics_IEffectLights_set_LightingEnabled
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectLights"), "set_LightingEnabled");

    $.Method({Static:false, Public:false, Virtual:true }, "OnApply", 
      JSIL.MethodSignature.Return($.Boolean), 
      EnvironmentMapEffect_OnApply
    );

    $.Method({Static:false, Public:true }, "set_Alpha", 
      JSIL.MethodSignature.Action($.Single), 
      EnvironmentMapEffect_set_Alpha
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_AmbientLightColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EnvironmentMapEffect_set_AmbientLightColor
    );

    $.Method({Static:false, Public:true }, "set_DiffuseColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EnvironmentMapEffect_set_DiffuseColor
    );

    $.Method({Static:false, Public:true }, "set_EmissiveColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EnvironmentMapEffect_set_EmissiveColor
    );

    $.Method({Static:false, Public:true }, "set_EnvironmentMap", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCube")), 
      EnvironmentMapEffect_set_EnvironmentMap
    );

    $.Method({Static:false, Public:true }, "set_EnvironmentMapAmount", 
      JSIL.MethodSignature.Action($.Single), 
      EnvironmentMapEffect_set_EnvironmentMapAmount
    );

    $.Method({Static:false, Public:true }, "set_EnvironmentMapSpecular", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EnvironmentMapEffect_set_EnvironmentMapSpecular
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      EnvironmentMapEffect_set_FogColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      EnvironmentMapEffect_set_FogEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogEnd", 
      JSIL.MethodSignature.Action($.Single), 
      EnvironmentMapEffect_set_FogEnd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogStart", 
      JSIL.MethodSignature.Action($.Single), 
      EnvironmentMapEffect_set_FogStart
    );

    $.Method({Static:false, Public:true }, "set_FresnelFactor", 
      JSIL.MethodSignature.Action($.Single), 
      EnvironmentMapEffect_set_FresnelFactor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Projection", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      EnvironmentMapEffect_set_Projection
    );

    $.Method({Static:false, Public:true }, "set_Texture", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      EnvironmentMapEffect_set_Texture
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_View", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      EnvironmentMapEffect_set_View
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_World", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      EnvironmentMapEffect_set_World
    );

    $.Field({Static:false, Public:false}, "textureParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "environmentMapParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "environmentMapAmountParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "environmentMapSpecularParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "fresnelFactorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "diffuseColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "emissiveColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "eyePositionParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "fogColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "fogVectorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "worldParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "worldInverseTransposeParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "worldViewProjParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "_shaderIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "oneLight", $.Boolean); 
    $.Field({Static:false, Public:false}, "fogEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "fresnelEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "specularEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "world", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "view", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "projection", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "worldView", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "diffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "emissiveColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "ambientLightColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "alpha", $.Single); 
    $.Field({Static:false, Public:false}, "light0", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")); 
    $.Field({Static:false, Public:false}, "light1", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")); 
    $.Field({Static:false, Public:false}, "light2", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")); 
    $.Field({Static:false, Public:false}, "fogStart", $.Single); 
    $.Field({Static:false, Public:false}, "fogEnd", $.Single); 
    $.Field({Static:false, Public:false}, "dirtyFlags", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectDirtyFlags")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Bytecode", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    function EnvironmentMapEffect__cctor () {
      $thisType.Bytecode = $T00().LoadEffectResource("Microsoft.Xna.Framework.Graphics.Effect.Resources.EnvironmentMapEffect.ogl.mgfxo");
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EnvironmentMapEffect__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "World", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true , Virtual:true }, "View", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true , Virtual:true }, "Projection", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true }, "DiffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "EmissiveColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Alpha", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "AmbientLightColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true , Virtual:true }, "DirectionalLight0", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight"));

    $.Property({Static:false, Public:true , Virtual:true }, "DirectionalLight1", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight"));

    $.Property({Static:false, Public:true , Virtual:true }, "DirectionalLight2", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight"));

    $.Property({Static:false, Public:true , Virtual:true }, "FogEnabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "FogStart", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogEnd", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Property({Static:false, Public:true }, "EnvironmentMap", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCube"));

    $.Property({Static:false, Public:true }, "EnvironmentMapAmount", $.Single);

    $.Property({Static:false, Public:true }, "EnvironmentMapSpecular", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "FresnelFactor", $.Single);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IEffectLights.LightingEnabled", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectMatrices"), 
      /* 2 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectLights"), 
      /* 3 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectFog")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.SkinnedEffect */ 

(function SkinnedEffect$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectDirtyFlags)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DirectionalLight)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Matrix))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterCollection)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectHelpers)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SkinnedEffect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SkinnedEffect")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectTechnique"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Single")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), null))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])))) ();
  };

  function SkinnedEffect__ctor$00 (device) {
    this._shaderIndex = -1;
    this.world = $T02().get_Identity().MemberwiseClone();
    this.view = $T02().get_Identity().MemberwiseClone();
    this.projection = $T02().get_Identity().MemberwiseClone();
    this.diffuseColor = $T03().get_One().MemberwiseClone();
    this.emissiveColor = $T03().get_Zero().MemberwiseClone();
    this.ambientLightColor = $T03().get_Zero().MemberwiseClone();
    this.alpha = 1;
    this.fogStart = 0;
    this.fogEnd = 1;
    this.weightsPerVertex = 4;
    this.dirtyFlags = $T04().$Flags(
        "AlphaTest", "EyePosition", "Fog", "FogEnable", 
        "MaterialColor", "ShaderIndex", "World", "WorldViewProj"
    );
    $T00().prototype._ctor.call(this, device, $thisType.Bytecode);
    this.CacheEffectParameters(null);
    (this.get_DirectionalLight0()).set_Enabled(true);
    (this.SpecularColor = $T03().get_One().MemberwiseClone());
    this.set_SpecularPower(16);
    var identityBones = JSIL.Array.New($T02(), 72);

    for (var i = 0; i < 72; i = ((i + 1) | 0)) {
      identityBones[i] = $T02().get_Identity().MemberwiseClone();
    }
    this.SetBoneTransforms(identityBones);
  };

  function SkinnedEffect__ctor$01 (cloneSource) {
    this._shaderIndex = -1;
    this.world = $T02().get_Identity().MemberwiseClone();
    this.view = $T02().get_Identity().MemberwiseClone();
    this.projection = $T02().get_Identity().MemberwiseClone();
    this.diffuseColor = $T03().get_One().MemberwiseClone();
    this.emissiveColor = $T03().get_Zero().MemberwiseClone();
    this.ambientLightColor = $T03().get_Zero().MemberwiseClone();
    this.alpha = 1;
    this.fogStart = 0;
    this.fogEnd = 1;
    this.weightsPerVertex = 4;
    this.dirtyFlags = $T04().$Flags(
        "AlphaTest", "EyePosition", "Fog", "FogEnable", 
        "MaterialColor", "ShaderIndex", "World", "WorldViewProj"
    );
    $S00().Call($T00().prototype, "_ctor", null, this, cloneSource);
    this.CacheEffectParameters(cloneSource);
    this.preferPerPixelLighting = cloneSource.preferPerPixelLighting;
    this.fogEnabled = cloneSource.fogEnabled;
    this.world = cloneSource.world.MemberwiseClone();
    this.view = cloneSource.view.MemberwiseClone();
    this.projection = cloneSource.projection.MemberwiseClone();
    this.diffuseColor = cloneSource.diffuseColor.MemberwiseClone();
    this.emissiveColor = cloneSource.emissiveColor.MemberwiseClone();
    this.ambientLightColor = cloneSource.ambientLightColor.MemberwiseClone();
    this.alpha = +cloneSource.alpha;
    this.fogStart = +cloneSource.fogStart;
    this.fogEnd = +cloneSource.fogEnd;
    this.weightsPerVertex = (cloneSource.weightsPerVertex | 0);
  };

  function SkinnedEffect_CacheEffectParameters (cloneSource) {
    this.textureParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "Texture");
    this.diffuseColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DiffuseColor");
    this.emissiveColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "EmissiveColor");
    this.specularColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "SpecularColor");
    this.specularPowerParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "SpecularPower");
    this.eyePositionParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "EyePosition");
    this.fogColorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "FogColor");
    this.fogVectorParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "FogVector");
    this.worldParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "World");
    this.worldInverseTransposeParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "WorldInverseTranspose");
    this.worldViewProjParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "WorldViewProj");
    this.bonesParam = $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "Bones");
    this.light0 = new ($T05())($S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight0Direction"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight0DiffuseColor"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight0SpecularColor"), (
        (cloneSource !== null)
           ? cloneSource.light0
           : null)
    );
    this.light1 = new ($T05())($S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight1Direction"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight1DiffuseColor"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight1SpecularColor"), (
        (cloneSource !== null)
           ? cloneSource.light1
           : null)
    );
    this.light2 = new ($T05())($S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight2Direction"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight2DiffuseColor"), $S01().CallVirtual("get_Item", null, this.Effect$Parameters$value, "DirLight2SpecularColor"), (
        (cloneSource !== null)
           ? cloneSource.light2
           : null)
    );
  };

  function SkinnedEffect_Clone$02 () {
    return $S02().Construct(this);
  };

  function SkinnedEffect_EnableDefaultLighting () {
    (this.AmbientLightColor = $T09().EnableDefaultLighting(this.light0, this.light1, this.light2));
  };

  function SkinnedEffect_get_Alpha () {
    return this.alpha;
  };

  function SkinnedEffect_get_AmbientLightColor () {
    return this.ambientLightColor;
  };

  function SkinnedEffect_get_DiffuseColor () {
    return this.diffuseColor;
  };

  function SkinnedEffect_get_DirectionalLight0 () {
    return this.light0;
  };

  function SkinnedEffect_get_DirectionalLight1 () {
    return this.light1;
  };

  function SkinnedEffect_get_DirectionalLight2 () {
    return this.light2;
  };

  function SkinnedEffect_get_EmissiveColor () {
    return this.emissiveColor;
  };

  function SkinnedEffect_get_FogColor () {
    return (this.fogColorParam).GetValueVector3();
  };

  function SkinnedEffect_get_FogEnabled () {
    return this.fogEnabled;
  };

  function SkinnedEffect_get_FogEnd () {
    return this.fogEnd;
  };

  function SkinnedEffect_get_FogStart () {
    return this.fogStart;
  };

  function SkinnedEffect_get_PreferPerPixelLighting () {
    return this.preferPerPixelLighting;
  };

  function SkinnedEffect_get_Projection () {
    return this.projection;
  };

  function SkinnedEffect_get_SpecularColor () {
    return (this.specularColorParam).GetValueVector3();
  };

  function SkinnedEffect_get_SpecularPower () {
    return (this.specularPowerParam).GetValueSingle();
  };

  function SkinnedEffect_get_Texture () {
    return (this.textureParam).GetValueTexture2D();
  };

  function SkinnedEffect_get_View () {
    return this.view;
  };

  function SkinnedEffect_get_WeightsPerVertex () {
    return this.weightsPerVertex;
  };

  function SkinnedEffect_get_World () {
    return this.world;
  };

  function SkinnedEffect_GetBoneTransforms (count) {
    if (!(((count | 0) > 0) && ((count | 0) <= 72))) {
      throw $S03().Construct("count");
    }
    var bones = (this.bonesParam).GetValueMatrixArray(count);

    for (var i = 0; i < (bones.length | 0); i = ((i + 1) | 0)) {
      bones[i].M44 = 1;
    }
    return bones;
  };

  function SkinnedEffect_Microsoft_Xna_Framework_Graphics_IEffectLights_get_LightingEnabled () {
    return true;
  };

  function SkinnedEffect_Microsoft_Xna_Framework_Graphics_IEffectLights_set_LightingEnabled (value) {
    if (!value) {
      throw $S04().Construct("SkinnedEffect does not support setting LightingEnabled to false.");
    }
  };

  function SkinnedEffect_OnApply () {
    this.dirtyFlags = $T09().SetWorldViewProjAndFog(
      this.dirtyFlags, 
      /* ref */ new JSIL.MemberReference(this, "world"), 
      /* ref */ new JSIL.MemberReference(this, "view"), 
      /* ref */ new JSIL.MemberReference(this, "projection"), 
      /* ref */ new JSIL.MemberReference(this, "worldView"), 
      this.fogEnabled, 
      this.fogStart, 
      this.fogEnd, 
      this.worldViewProjParam, 
      this.fogVectorParam
    );
    this.dirtyFlags = $T09().SetLightingMatrices(
      this.dirtyFlags, 
      /* ref */ new JSIL.MemberReference(this, "world"), 
      /* ref */ new JSIL.MemberReference(this, "view"), 
      this.worldParam, 
      this.worldInverseTransposeParam, 
      this.eyePositionParam
    );
    if ($T04().$Cast(this.dirtyFlags & $T04().MaterialColor) !== $T04().$Cast(0)) {
      $T09().SetMaterialColor(
        true, 
        this.alpha, 
        /* ref */ new JSIL.MemberReference(this, "diffuseColor"), 
        /* ref */ new JSIL.MemberReference(this, "emissiveColor"), 
        /* ref */ new JSIL.MemberReference(this, "ambientLightColor"), 
        this.diffuseColorParam, 
        this.emissiveColorParam
      );
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags & $T04().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "ShaderIndex", "World", "WorldViewProj"
        ));
    }
    var newOneLight = !(this.light1).get_Enabled() && 
    !(this.light2).get_Enabled();
    if (this.oneLight !== newOneLight) {
      this.oneLight = newOneLight;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().ShaderIndex);
    }
    if ($T04().$Cast(this.dirtyFlags & $T04().ShaderIndex) !== $T04().$Cast(0)) {
      var shaderIndex = 0;
      if (!this.fogEnabled) {
        shaderIndex = ((shaderIndex + 1) | 0);
      }
      if ((this.weightsPerVertex | 0) === 2) {
        shaderIndex = ((shaderIndex + 2) | 0);
      } else if ((this.weightsPerVertex | 0) === 4) {
        shaderIndex = ((shaderIndex + 4) | 0);
      }
      if (this.preferPerPixelLighting) {
        shaderIndex = ((shaderIndex + 12) | 0);
      } else if (this.oneLight) {
        shaderIndex = ((shaderIndex + 6) | 0);
      }
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags & $T04().$Flags(
            "AlphaTest", "EyePosition", "Fog", "FogEnable", 
            "MaterialColor", "World", "WorldViewProj"
        ));
      if ((this._shaderIndex | 0) !== shaderIndex) {
        this._shaderIndex = shaderIndex;
        this.Effect$CurrentTechnique$value = $S05().CallVirtual("get_Item", null, this.Effect$Techniques$value, this._shaderIndex);
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function SkinnedEffect_set_Alpha (value) {
    this.alpha = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function SkinnedEffect_set_AmbientLightColor (value) {
    this.ambientLightColor = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function SkinnedEffect_set_DiffuseColor (value) {
    this.diffuseColor = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function SkinnedEffect_set_EmissiveColor (value) {
    this.emissiveColor = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().MaterialColor);
  };

  function SkinnedEffect_set_FogColor (value) {
    $S06().CallVirtual("SetValue", null, this.fogColorParam, value);
  };

  function SkinnedEffect_set_FogEnabled (value) {
    if (this.fogEnabled !== value) {
      this.fogEnabled = value;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("FogEnable", "ShaderIndex"));
    }
  };

  function SkinnedEffect_set_FogEnd (value) {
    this.fogEnd = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().Fog);
  };

  function SkinnedEffect_set_FogStart (value) {
    this.fogStart = +value;
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().Fog);
  };

  function SkinnedEffect_set_PreferPerPixelLighting (value) {
    if (this.preferPerPixelLighting !== value) {
      this.preferPerPixelLighting = value;
      this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().ShaderIndex);
    }
  };

  function SkinnedEffect_set_Projection (value) {
    this.projection = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().WorldViewProj);
  };

  function SkinnedEffect_set_SpecularColor (value) {
    $S06().CallVirtual("SetValue", null, this.specularColorParam, value);
  };

  function SkinnedEffect_set_SpecularPower (value) {
    $S07().CallVirtual("SetValue", null, this.specularPowerParam, value);
  };

  function SkinnedEffect_set_Texture (value) {
    $S08().CallVirtual("SetValue", null, this.textureParam, value);
  };

  function SkinnedEffect_set_View (value) {
    this.view = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("EyePosition", "Fog", "WorldViewProj"));
  };

  function SkinnedEffect_set_WeightsPerVertex (value) {
    if (!(((value | 0) === 1) || 
        ((value | 0) === 2) || ((value | 0) === 4))) {
      throw $S03().Construct("value");
    }
    this.weightsPerVertex = (value | 0);
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().ShaderIndex);
  };

  function SkinnedEffect_set_World (value) {
    this.world = value.MemberwiseClone();
    this.dirtyFlags = $T04().$Cast(this.dirtyFlags | $T04().$Flags("Fog", "World", "WorldViewProj"));
  };

  function SkinnedEffect_SetBoneTransforms (boneTransforms) {
    if (!((boneTransforms !== null) && ((boneTransforms.length | 0) !== 0))) {
      throw $S09().Construct("boneTransforms");
    }
    if ((boneTransforms.length | 0) > 72) {
      throw $S0A().Construct();
    }
    $S0B().CallVirtual("SetValue", null, this.bonesParam, boneTransforms);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), 
      Name: "Microsoft.Xna.Framework.Graphics.SkinnedEffect", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      SkinnedEffect__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      SkinnedEffect__ctor$01
    );

    $.Method({Static:false, Public:false}, "CacheEffectParameters", 
      JSIL.MethodSignature.Action($.Type), 
      SkinnedEffect_CacheEffectParameters
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      SkinnedEffect_Clone$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EnableDefaultLighting", 
      JSIL.MethodSignature.Void, 
      SkinnedEffect_EnableDefaultLighting
    );

    $.Method({Static:false, Public:true }, "get_Alpha", 
      JSIL.MethodSignature.Return($.Single), 
      SkinnedEffect_get_Alpha
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AmbientLightColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      SkinnedEffect_get_AmbientLightColor
    );

    $.Method({Static:false, Public:true }, "get_DiffuseColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      SkinnedEffect_get_DiffuseColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DirectionalLight0", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")), 
      SkinnedEffect_get_DirectionalLight0
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DirectionalLight1", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")), 
      SkinnedEffect_get_DirectionalLight1
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DirectionalLight2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")), 
      SkinnedEffect_get_DirectionalLight2
    );

    $.Method({Static:false, Public:true }, "get_EmissiveColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      SkinnedEffect_get_EmissiveColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      SkinnedEffect_get_FogColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      SkinnedEffect_get_FogEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogEnd", 
      JSIL.MethodSignature.Return($.Single), 
      SkinnedEffect_get_FogEnd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FogStart", 
      JSIL.MethodSignature.Return($.Single), 
      SkinnedEffect_get_FogStart
    );

    $.Method({Static:false, Public:true }, "get_PreferPerPixelLighting", 
      JSIL.MethodSignature.Return($.Boolean), 
      SkinnedEffect_get_PreferPerPixelLighting
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Projection", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      SkinnedEffect_get_Projection
    );

    $.Method({Static:false, Public:true }, "get_SpecularColor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      SkinnedEffect_get_SpecularColor
    );

    $.Method({Static:false, Public:true }, "get_SpecularPower", 
      JSIL.MethodSignature.Return($.Single), 
      SkinnedEffect_get_SpecularPower
    );

    $.Method({Static:false, Public:true }, "get_Texture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      SkinnedEffect_get_Texture
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_View", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      SkinnedEffect_get_View
    );

    $.Method({Static:false, Public:true }, "get_WeightsPerVertex", 
      JSIL.MethodSignature.Return($.Int32), 
      SkinnedEffect_get_WeightsPerVertex
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_World", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      SkinnedEffect_get_World
    );

    $.Method({Static:false, Public:true }, "GetBoneTransforms", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), [$.Int32]), 
      SkinnedEffect_GetBoneTransforms
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IEffectLights.get_LightingEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      SkinnedEffect_Microsoft_Xna_Framework_Graphics_IEffectLights_get_LightingEnabled
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectLights"), "get_LightingEnabled");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IEffectLights.set_LightingEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      SkinnedEffect_Microsoft_Xna_Framework_Graphics_IEffectLights_set_LightingEnabled
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectLights"), "set_LightingEnabled");

    $.Method({Static:false, Public:false, Virtual:true }, "OnApply", 
      JSIL.MethodSignature.Return($.Boolean), 
      SkinnedEffect_OnApply
    );

    $.Method({Static:false, Public:true }, "set_Alpha", 
      JSIL.MethodSignature.Action($.Single), 
      SkinnedEffect_set_Alpha
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_AmbientLightColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      SkinnedEffect_set_AmbientLightColor
    );

    $.Method({Static:false, Public:true }, "set_DiffuseColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      SkinnedEffect_set_DiffuseColor
    );

    $.Method({Static:false, Public:true }, "set_EmissiveColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      SkinnedEffect_set_EmissiveColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      SkinnedEffect_set_FogColor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      SkinnedEffect_set_FogEnabled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogEnd", 
      JSIL.MethodSignature.Action($.Single), 
      SkinnedEffect_set_FogEnd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FogStart", 
      JSIL.MethodSignature.Action($.Single), 
      SkinnedEffect_set_FogStart
    );

    $.Method({Static:false, Public:true }, "set_PreferPerPixelLighting", 
      JSIL.MethodSignature.Action($.Boolean), 
      SkinnedEffect_set_PreferPerPixelLighting
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Projection", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      SkinnedEffect_set_Projection
    );

    $.Method({Static:false, Public:true }, "set_SpecularColor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      SkinnedEffect_set_SpecularColor
    );

    $.Method({Static:false, Public:true }, "set_SpecularPower", 
      JSIL.MethodSignature.Action($.Single), 
      SkinnedEffect_set_SpecularPower
    );

    $.Method({Static:false, Public:true }, "set_Texture", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      SkinnedEffect_set_Texture
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_View", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      SkinnedEffect_set_View
    );

    $.Method({Static:false, Public:true }, "set_WeightsPerVertex", 
      JSIL.MethodSignature.Action($.Int32), 
      SkinnedEffect_set_WeightsPerVertex
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_World", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      SkinnedEffect_set_World
    );

    $.Method({Static:false, Public:true }, "SetBoneTransforms", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])), 
      SkinnedEffect_SetBoneTransforms
    );

    $.Constant({Static:true , Public:true }, "MaxBones", 72); 
    $.Field({Static:false, Public:false}, "textureParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "diffuseColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "emissiveColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "specularColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "specularPowerParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "eyePositionParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "fogColorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "fogVectorParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "worldParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "worldInverseTransposeParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "worldViewProjParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "bonesParam", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "_shaderIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "preferPerPixelLighting", $.Boolean); 
    $.Field({Static:false, Public:false}, "oneLight", $.Boolean); 
    $.Field({Static:false, Public:false}, "fogEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "world", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "view", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "projection", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "worldView", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "diffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "emissiveColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "ambientLightColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "alpha", $.Single); 
    $.Field({Static:false, Public:false}, "light0", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")); 
    $.Field({Static:false, Public:false}, "light1", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")); 
    $.Field({Static:false, Public:false}, "light2", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight")); 
    $.Field({Static:false, Public:false}, "fogStart", $.Single); 
    $.Field({Static:false, Public:false}, "fogEnd", $.Single); 
    $.Field({Static:false, Public:false}, "weightsPerVertex", $.Int32); 
    $.Field({Static:false, Public:false}, "dirtyFlags", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectDirtyFlags")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Bytecode", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    function SkinnedEffect__cctor () {
      $thisType.Bytecode = $T00().LoadEffectResource("Microsoft.Xna.Framework.Graphics.Effect.Resources.SkinnedEffect.ogl.mgfxo");
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SkinnedEffect__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "World", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true , Virtual:true }, "View", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true , Virtual:true }, "Projection", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:true }, "DiffuseColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "EmissiveColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "SpecularColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "SpecularPower", $.Single);

    $.Property({Static:false, Public:true }, "Alpha", $.Single);

    $.Property({Static:false, Public:true }, "PreferPerPixelLighting", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AmbientLightColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true , Virtual:true }, "DirectionalLight0", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight"));

    $.Property({Static:false, Public:true , Virtual:true }, "DirectionalLight1", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight"));

    $.Property({Static:false, Public:true , Virtual:true }, "DirectionalLight2", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DirectionalLight"));

    $.Property({Static:false, Public:true , Virtual:true }, "FogEnabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "FogStart", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogEnd", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "FogColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Property({Static:false, Public:true }, "WeightsPerVertex", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IEffectLights.LightingEnabled", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectMatrices"), 
      /* 2 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectLights"), 
      /* 3 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IEffectFog")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565 */ 

(function Bgr565$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function Bgr565__ctor$00 (x, y, z) {
    this.packedValue = ($thisType.Pack(x, y, z) | 0);
  };

  function Bgr565__ctor$01 (vector) {
    this.packedValue = ($thisType.Pack(vector.X, vector.Y, vector.Z) | 0);
  };

  function Bgr565_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  };

  function Bgr565_Equals$02 (other) {
    return ((this.packedValue | 0) === (other.packedValue | 0));
  };

  function Bgr565_get_PackedValue () {
    return this.packedValue;
  };

  function Bgr565_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function Bgr565_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 (vector) {
    this.packedValue = ((((((+vector.X * 31) | 0) & 31) << 11) | ((((+vector.Y * 63) | 0) & 63) << 5)) | (((+vector.Z * 31) | 0) & 31) & 0xFFFF);
  };

  function Bgr565_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4 () {
    return $S00().Construct(this.ToVector3(), 1);
  };

  function Bgr565_op_Equality (lhs, rhs) {
    return ((lhs.packedValue | 0) === (rhs.packedValue | 0));
  };

  function Bgr565_op_Inequality (lhs, rhs) {
    return ((lhs.packedValue | 0) !== (rhs.packedValue | 0));
  };

  function Bgr565_Pack (x, y, z) {
    return ((((((+$S01().CallStatic($T05(), "Clamp", null, x, 0, 1) * 31) | 0) & 31) << 11) | ((((+$S01().CallStatic($T05(), "Clamp", null, y, 0, 1) * 63) | 0) & 63) << 5)) | (((+$S01().CallStatic($T05(), "Clamp", null, z, 0, 1) * 31) | 0) & 31) & 0xFFFF);
  };

  function Bgr565_set_PackedValue (value) {
    this.packedValue = (value | 0);
  };

  function Bgr565_toString () {
    return (this.ToVector3().MemberwiseClone()).toString();
  };

  function Bgr565_ToVector3 () {
    return $S02().Construct((+(((this.packedValue | 0) >> 11) & 31) * 0.0322580636), (+(((this.packedValue | 0) >> 5) & 63) * 0.0158730168), (+((this.packedValue | 0) & 31) * 0.0322580636));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Bgr565__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Bgr565__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Bgr565_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Bgr565_Equals$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt16), 
      Bgr565_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Bgr565_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Bgr565_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Bgr565_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "ToVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Bgr565_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Bgr565_op_Inequality
    );

    $.Method({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature($.UInt16, [
          $.Single, $.Single, 
          $.Single
        ]), 
      Bgr565_Pack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt16), 
      Bgr565_set_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Bgr565_toString
    );

    $.Method({Static:false, Public:true }, "ToVector3", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      Bgr565_ToVector3
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), 
      /* 1 */ $asm01.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 2 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444 */ 

(function Bgra4444$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function Bgra4444__ctor$00 (x, y, z, w) {
    this.packedValue = ($thisType.Pack(x, y, z, w) | 0);
  };

  function Bgra4444__ctor$01 (vector) {
    this.packedValue = ($thisType.Pack(vector.X, vector.Y, vector.Z, vector.W) | 0);
  };

  function Bgra4444_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  };

  function Bgra4444_Equals$02 (other) {
    return ((this.packedValue | 0) === (other.packedValue | 0));
  };

  function Bgra4444_get_PackedValue () {
    return this.packedValue;
  };

  function Bgra4444_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function Bgra4444_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 (vector) {
    this.packedValue = ($thisType.Pack(vector.X, vector.Y, vector.Z, vector.W) | 0);
  };

  function Bgra4444_op_Equality (lhs, rhs) {
    return ((lhs.packedValue | 0) === (rhs.packedValue | 0));
  };

  function Bgra4444_op_Inequality (lhs, rhs) {
    return ((lhs.packedValue | 0) !== (rhs.packedValue | 0));
  };

  function Bgra4444_Pack (x, y, z, w) {
    return (((((((+$S00().CallStatic($T04(), "Clamp", null, w, 0, 1) * 15) | 0) & 15) << 12) | ((((+$S00().CallStatic($T04(), "Clamp", null, x, 0, 1) * 15) | 0) & 15) << 8)) | ((((+$S00().CallStatic($T04(), "Clamp", null, y, 0, 1) * 15) | 0) & 15) << 4)) | (((+$S00().CallStatic($T04(), "Clamp", null, z, 0, 1) * 15) | 0) & 15) & 0xFFFF);
  };

  function Bgra4444_set_PackedValue (value) {
    this.packedValue = (value | 0);
  };

  function Bgra4444_toString () {
    return (this.ToVector4().MemberwiseClone()).toString();
  };

  function Bgra4444_ToVector4 () {
    return $S01().Construct((+(((this.packedValue | 0) >> 8) & 15) * 0.06666667), (+(((this.packedValue | 0) >> 4) & 15) * 0.06666667), (+((this.packedValue | 0) & 15) * 0.06666667), (+(((this.packedValue | 0) >> 12) & 15) * 0.06666667));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Bgra4444__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Bgra4444__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Bgra4444_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Bgra4444_Equals$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt16), 
      Bgra4444_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Bgra4444_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Bgra4444_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Bgra4444_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Bgra4444_op_Inequality
    );

    $.Method({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature($.UInt16, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Bgra4444_Pack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt16), 
      Bgra4444_set_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Bgra4444_toString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Bgra4444_ToVector4
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), 
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Byte4 */ 

(function Byte4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function Byte4__ctor$00 ($vector) {
    var vector = new JSIL.BoxedVariable($vector.MemberwiseClone());
    this.packedValue = ($thisType.Pack(/* ref */ vector) >>> 0);
  };

  function Byte4__ctor$01 (x, y, z, w) {
    var vector = new JSIL.BoxedVariable($S00().Construct(x, y, z, w));
    this.packedValue = ($thisType.Pack(/* ref */ vector) >>> 0);
  };

  function Byte4_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  };

  function Byte4_Equals$02 (other) {
    return $thisType.op_Equality(this, other);
  };

  function Byte4_get_PackedValue () {
    return this.packedValue;
  };

  function Byte4_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function Byte4_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 ($vector) {
    var vector = new JSIL.BoxedVariable($vector.MemberwiseClone());
    this.packedValue = ($thisType.Pack(/* ref */ vector) >>> 0);
  };

  function Byte4_op_Equality (a, b) {
    return ((a.packedValue >>> 0) === (b.packedValue >>> 0));
  };

  function Byte4_op_Inequality (a, b) {
    return ((a.packedValue >>> 0) !== (b.packedValue >>> 0));
  };

  function Byte4_Pack (/* ref */ vector) {
    return (((((($S01().CallStatic($T04(), "Clamp", null, vector.get().X, 0, 255)) | 0) & 255) | (((($S01().CallStatic($T04(), "Clamp", null, vector.get().Y, 0, 255)) | 0) & 255) << 8)) | (((($S01().CallStatic($T04(), "Clamp", null, vector.get().Z, 0, 255)) | 0) & 255) << 16)) | (((($S01().CallStatic($T04(), "Clamp", null, vector.get().W, 0, 255)) | 0) & 255) << 24));
  };

  function Byte4_set_PackedValue (value) {
    this.packedValue = (value >>> 0);
  };

  function Byte4_toString () {
    return JSIL.NumberToFormattedString(this.packedValue, null, "x8");
  };

  function Byte4_ToVector4 () {
    return $S00().Construct(Math.fround(+((this.packedValue >>> 0) & 255)), Math.fround(+(((this.packedValue >>> 0) >>> 8) & 255)), Math.fround(+(((this.packedValue >>> 0) >>> 16) & 255)), Math.fround(+(((this.packedValue >>> 0) >>> 24) & 255)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Byte4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Byte4__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Byte4__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Byte4_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Byte4_Equals$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt32), 
      Byte4_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Byte4_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Byte4_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Byte4_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Byte4_op_Inequality
    );

    $.Method({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")])]), 
      Byte4_Pack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt32), 
      Byte4_set_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Byte4_toString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Byte4_ToVector4
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm01.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 2 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Short2 */ 

(function Short2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };

  function Short2__ctor$00 (vector) {
    this.packedValue = ($thisType.Pack(vector.X, vector.Y) >>> 0);
  };

  function Short2__ctor$01 (x, y) {
    this.packedValue = ($thisType.Pack(x, y) >>> 0);
  };

  function Short2_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  };

  function Short2_Equals$02 (other) {
    return $thisType.op_Equality(this, other);
  };

  function Short2_get_PackedValue () {
    return this.packedValue;
  };

  function Short2_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function Short2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 (vector) {
    this.packedValue = ($thisType.Pack(vector.X, vector.Y) >>> 0);
  };

  function Short2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4 () {
    return $S00().Construct(+((((this.packedValue >>> 0) & 65535 + 0x8000 & 0xFFFF) - 0x8000)), +((((this.packedValue >>> 0) >>> 16 + 0x8000 & 0xFFFF) - 0x8000)), 0, 1);
  };

  function Short2_op_Equality (a, b) {
    return ((a.packedValue >>> 0) === (b.packedValue >>> 0));
  };

  function Short2_op_Inequality (a, b) {
    return ((a.packedValue >>> 0) !== (b.packedValue >>> 0));
  };

  function Short2_Pack (vectorX, vectorY) {
    return (((($T06().Max($T06().Min(vectorX, 32767), -32768)) | 0) & 65535) | (((($T06().Max($T06().Min(vectorY, 32767), -32768)) | 0) & 65535) << 16) >>> 0);
  };

  function Short2_set_PackedValue (value) {
    this.packedValue = (value >>> 0);
  };

  function Short2_toString () {
    return JSIL.NumberToFormattedString(this.packedValue, null, "x8");
  };

  function Short2_ToVector2 () {
    return $S01().Construct(+((((this.packedValue >>> 0) & 65535 + 0x8000 & 0xFFFF) - 0x8000)), +((((this.packedValue >>> 0) >>> 16 + 0x8000 & 0xFFFF) - 0x8000)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Short2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Short2__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single]), 
      Short2__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Short2_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Short2_Equals$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt32), 
      Short2_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Short2_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Short2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Short2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "ToVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Short2_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Short2_op_Inequality
    );

    $.Method({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature($.UInt32, [$.Single, $.Single]), 
      Short2_Pack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt32), 
      Short2_set_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Short2_toString
    );

    $.Method({Static:false, Public:true }, "ToVector2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Short2_ToVector2
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Short4 */ 

(function Short4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function Short4__ctor$00 ($vector) {
    var vector = new JSIL.BoxedVariable($vector.MemberwiseClone());
    this.packedValue = $thisType.Pack(/* ref */ vector);
  };

  function Short4__ctor$01 (x, y, z, w) {
    var vector = new JSIL.BoxedVariable($S00().Construct(x, y, z, w));
    this.packedValue = $thisType.Pack(/* ref */ vector);
  };

  function Short4_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  };

  function Short4_Equals$02 (other) {
    return $thisType.op_Equality(this, other);
  };

  function Short4_get_PackedValue () {
    return this.packedValue;
  };

  function Short4_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function Short4_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 ($vector) {
    var vector = new JSIL.BoxedVariable($vector.MemberwiseClone());
    this.packedValue = $thisType.Pack(/* ref */ vector);
  };

  function Short4_op_Equality (a, b) {
    return $T03().op_Equality(
      a.get_PackedValue(), 
      b.get_PackedValue()
    );
  };

  function Short4_op_Inequality (a, b) {
    return $T03().op_Inequality(
      a.get_PackedValue(), 
      b.get_PackedValue()
    );
  };

  function Short4_Pack (/* ref */ vector) {
    return $T03().op_BitwiseOr(
      $T03().op_BitwiseOr(
        $T03().op_BitwiseOr(
          $T03().op_BitwiseAnd(
            $T03().FromNumber($S01().CallStatic($T04(), "Clamp", null, vector.get().X, -32768, 32767)), 
            $T03().Create(65535, 0, 0)
          ), 
          $T03().op_LeftShift($T03().op_BitwiseAnd(
              $T03().FromNumber($S01().CallStatic($T04(), "Clamp", null, vector.get().Y, -32768, 32767)), 
              $T03().Create(65535, 0, 0)
            ), 16)
        ), 
        $T03().op_LeftShift($T03().op_BitwiseAnd(
            $T03().FromNumber($S01().CallStatic($T04(), "Clamp", null, vector.get().Z, -32768, 32767)), 
            $T03().Create(65535, 0, 0)
          ), 32)
      ), 
      $T03().op_LeftShift($T03().op_BitwiseAnd(
          $T03().FromNumber($S01().CallStatic($T04(), "Clamp", null, vector.get().W, -32768, 32767)), 
          $T03().Create(65535, 0, 0)
        ), 48)
    );
  };

  function Short4_set_PackedValue (value) {
    this.packedValue = value;
  };

  function Short4_toString () {
    return (this.packedValue).toString();
  };

  function Short4_ToVector4 () {
    return $S00().Construct(+(($T03().op_BitwiseAnd(this.packedValue, $T03().Create(65535, 0, 0))).ToNumber(65535, true)), +(($T03().op_BitwiseAnd(
            $T03().op_RightShift(this.packedValue, 16), 
            $T03().Create(65535, 0, 0)
          )).ToNumber(65535, true)), +(($T03().op_BitwiseAnd(
            $T03().op_RightShift(this.packedValue, 32), 
            $T03().Create(65535, 0, 0)
          )).ToNumber(65535, true)), +(($T03().op_BitwiseAnd(
            $T03().op_RightShift(this.packedValue, 48), 
            $T03().Create(65535, 0, 0)
          )).ToNumber(65535, true)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Short4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Short4__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      Short4__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Short4_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Short4_Equals$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt64), 
      Short4_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Short4_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Short4_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Short4_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Short4_op_Inequality
    );

    $.Method({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature($.UInt64, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")])]), 
      Short4_Pack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt64), 
      Short4_set_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Short4_toString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      Short4_ToVector4
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt64); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt64)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt64]), 
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle */ 

(function HalfSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PackedVector.HalfTypeHelper)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt16"), [$asm01.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.UInt16")]))) ();
  };

  function HalfSingle__ctor (single) {
    this.packedValue = ($S00().CallStatic($T01(), "Convert", null, single) | 0);
  };

  function HalfSingle_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  };

  function HalfSingle_Equals$00 (other) {
    return ((this.packedValue | 0) === (other.packedValue | 0));
  };

  function HalfSingle_get_PackedValue () {
    return this.packedValue;
  };

  function HalfSingle_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function HalfSingle_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 (vector) {
    this.packedValue = ($S00().CallStatic($T01(), "Convert", null, vector.X) | 0);
  };

  function HalfSingle_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4 () {
    return $S01().Construct(this.ToSingle(), 0, 0, 1);
  };

  function HalfSingle_op_Equality (lhs, rhs) {
    return ((lhs.packedValue | 0) === (rhs.packedValue | 0));
  };

  function HalfSingle_op_Inequality (lhs, rhs) {
    return ((lhs.packedValue | 0) !== (rhs.packedValue | 0));
  };

  function HalfSingle_set_PackedValue (value) {
    this.packedValue = (value | 0);
  };

  function HalfSingle_ToSingle () {
    return $S02().CallStatic($T01(), "Convert", null, this.packedValue);
  };

  function HalfSingle_toString () {
    return (this.ToSingle()).toString();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single), 
      HalfSingle__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      HalfSingle_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      HalfSingle_Equals$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt16), 
      HalfSingle_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      HalfSingle_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      HalfSingle_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      HalfSingle_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "ToVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      HalfSingle_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      HalfSingle_op_Inequality
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt16), 
      HalfSingle_set_PackedValue
    );

    $.Method({Static:false, Public:true }, "ToSingle", 
      JSIL.MethodSignature.Return($.Single), 
      HalfSingle_ToSingle
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      HalfSingle_toString
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), 
      /* 1 */ $asm01.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 2 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.PackedVector.HalfTypeHelper */ 

(function HalfTypeHelper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PackedVector.HalfTypeHelper_uif)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt16"), [$asm01.TypeRef("System.Int32")]))) ();
  };

  function HalfTypeHelper_Convert$00 (f) {
    var uif = new ($T01())();
    uif.f = +f;
    return $S00().CallStatic($thisType, "Convert", null, uif.i);
  };

  function HalfTypeHelper_Convert$01 (i) {
    var s = ((i | 0) >> 16) & 32768;
    var e = (((((i | 0) >> 23) & 255) - 112) | 0);
    var j = (i | 0) & 8388607;
    if (e <= 0) {
      if (e < -10) {
        var result = (s & 0xFFFF);
      } else {
        j = j | 8388608;
        var t = ((14 - e) | 0);
        var b = (j >> t) & 1;
        j = ((((j + (((1 << ((t - 1) | 0)) - 1) | 0)) | 0) + b) | 0) >> t;
        result = (s | j & 0xFFFF);
      }
    } else if (e === 143) {
      if (j === 0) {
        result = (s | 31744 & 0xFFFF);
      } else {
        j = j >> 13;
        result = (((s | 31744) | j) | ((
          (j === 0)
             ? 1
             : 0)
         | 0) & 0xFFFF);
      }
    } else {
      j = ((((j + 4095) | 0) + ((j >> 13) & 1)) | 0);
      if ((j & 8388608) !== 0) {
        j = 0;
        e = ((e + 1) | 0);
      }
      if (e > 30) {
        result = (s | 31744 & 0xFFFF);
      } else {
        result = ((s | (e << 10)) | (j >> 13) & 0xFFFF);
      }
    }
    return result;
  };

  function HalfTypeHelper_Convert$02 (value) {
    var mantissa = (value | 0) & 1023;
    var exp = 4294967282;
    if (((value | 0) & -33792) === 0) {
      if (mantissa !== 0) {

        for (; (mantissa & 1024) === 0; mantissa = mantissa << 1) {
          exp = ((exp - 1) >>> 0);
        }
        mantissa = mantissa & 4294966271;
        var rst = (((((value | 0) & 32768) << 16) | ((((exp + 127) >>> 0) | 0) << 23 | 0)) | ((mantissa | 0) << 13 | 0) >>> 0);
      } else {
        rst = (((value | 0) & 32768) << 16 >>> 0);
      }
    } else {
      rst = (((((value | 0) & 32768) << 16) | (((((((((value | 0) >>> 10) & 31) - 15) >>> 0) + 127) >>> 0) | 0) << 23 | 0)) | ((mantissa | 0) << 13 | 0) >>> 0);
    }
    var uif = new ($T01())();
    uif.u = rst;
    return uif.f;
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Graphics.PackedVector.HalfTypeHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "Convert", 
      new JSIL.MethodSignature($.UInt16, [$.Single]), 
      HalfTypeHelper_Convert$00
    );

    $.Method({Static:true , Public:false}, "Convert", 
      new JSIL.MethodSignature($.UInt16, [$.Int32]), 
      HalfTypeHelper_Convert$01
    );

    $.Method({Static:true , Public:false}, "Convert", 
      new JSIL.MethodSignature($.Single, [$.UInt16]), 
      HalfTypeHelper_Convert$02
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.HalfTypeHelper+uif */ 

(function uif$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.HalfTypeHelper+uif", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "f", $.Single); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Field({Static:false, Public:true }, "u", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2 */ 

(function HalfVector2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PackedVector.HalfTypeHelper)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt16"), [$asm01.TypeRef("System.Single")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.UInt16")]))) ();
  };

  function HalfVector2__ctor$00 (x, y) {
    this.packedValue = ($thisType.PackHelper(x, y) >>> 0);
  };

  function HalfVector2__ctor$01 (vector) {
    this.packedValue = ($thisType.PackHelper(vector.X, vector.Y) >>> 0);
  };

  function HalfVector2_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function HalfVector2_Equals$02 (other) {
    return (this.packedValue === other.packedValue);
  };

  function HalfVector2_get_PackedValue () {
    return this.packedValue;
  };

  function HalfVector2_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function HalfVector2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 (vector) {
    this.packedValue = ($thisType.PackHelper(vector.X, vector.Y) >>> 0);
  };

  function HalfVector2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4 () {
    var vector = this.ToVector2();
    return $S00().Construct(vector.X, vector.Y, 0, 1);
  };

  function HalfVector2_op_Equality (a, b) {
    return a.Equals(b.MemberwiseClone());
  };

  function HalfVector2_op_Inequality (a, b) {
    return !a.Equals(b.MemberwiseClone());
  };

  function HalfVector2_PackHelper (vectorX, vectorY) {
    return (($S01().CallStatic($T05(), "Convert", null, vectorX) | 0) | (($S01().CallStatic($T05(), "Convert", null, vectorY) | 0) << 16) >>> 0);
  };

  function HalfVector2_set_PackedValue (value) {
    this.packedValue = (value >>> 0);
  };

  function HalfVector2_toString () {
    return (this.ToVector2().MemberwiseClone()).toString();
  };

  function HalfVector2_ToVector2 () {
    var vector = new ($T01())();
    vector.X = +$S02().CallStatic($T05(), "Convert", null, (this.packedValue & 0xFFFF));
    vector.Y = +$S02().CallStatic($T05(), "Convert", null, ((this.packedValue >>> 0) >>> 16 & 0xFFFF));
    return vector;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single]), 
      HalfVector2__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      HalfVector2__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      HalfVector2_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      HalfVector2_Equals$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt32), 
      HalfVector2_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      HalfVector2_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      HalfVector2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      HalfVector2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "ToVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      HalfVector2_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      HalfVector2_op_Inequality
    );

    $.Method({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt32, [$.Single, $.Single]), 
      HalfVector2_PackHelper
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt32), 
      HalfVector2_set_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      HalfVector2_toString
    );

    $.Method({Static:false, Public:true }, "ToVector2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      HalfVector2_ToVector2
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4 */ 

(function HalfVector4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PackedVector.HalfTypeHelper)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt16"), [$asm01.TypeRef("System.Single")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.UInt16")]))) ();
  };

  function HalfVector4__ctor$00 (x, y, z, w) {
    var vector = new JSIL.BoxedVariable($S00().Construct(x, y, z, w));
    this.packedValue = $thisType.Pack(/* ref */ vector);
  };

  function HalfVector4__ctor$01 ($vector) {
    var vector = new JSIL.BoxedVariable($vector.MemberwiseClone());
    this.packedValue = $thisType.Pack(/* ref */ vector);
  };

  function HalfVector4_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function HalfVector4_Equals$02 (other) {
    return (this.packedValue).Equals(other.packedValue);
  };

  function HalfVector4_get_PackedValue () {
    return this.packedValue;
  };

  function HalfVector4_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function HalfVector4_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 ($vector) {
    var vector = new JSIL.BoxedVariable($vector.MemberwiseClone());
    this.packedValue = $thisType.Pack(/* ref */ vector);
  };

  function HalfVector4_op_Equality (a, b) {
    return a.Equals(b.MemberwiseClone());
  };

  function HalfVector4_op_Inequality (a, b) {
    return !a.Equals(b.MemberwiseClone());
  };

  function HalfVector4_Pack (/* ref */ vector) {
    return $T03().op_BitwiseOr(
      $T03().op_BitwiseOr(
        $T03().op_BitwiseOr(
          $T03().FromNumber($S01().CallStatic($T04(), "Convert", null, vector.get().X)), 
          $T03().op_LeftShift($T03().FromNumber($S01().CallStatic($T04(), "Convert", null, vector.get().Y)), 16)
        ), 
        $T03().op_LeftShift($T03().FromNumber($S01().CallStatic($T04(), "Convert", null, vector.get().Z)), 32)
      ), 
      $T03().op_LeftShift($T03().FromNumber($S01().CallStatic($T04(), "Convert", null, vector.get().W)), 48)
    );
  };

  function HalfVector4_set_PackedValue (value) {
    this.packedValue = value;
  };

  function HalfVector4_toString () {
    return (this.ToVector4().MemberwiseClone()).toString();
  };

  function HalfVector4_ToVector4 () {
    return $S00().Construct($S02().CallStatic($T04(), "Convert", null, (this.packedValue).ToNumber(65535, false)), $S02().CallStatic($T04(), "Convert", null, ($T03().op_RightShift(this.packedValue, 16)).ToNumber(65535, false)), $S02().CallStatic($T04(), "Convert", null, ($T03().op_RightShift(this.packedValue, 32)).ToNumber(65535, false)), $S02().CallStatic($T04(), "Convert", null, ($T03().op_RightShift(this.packedValue, 48)).ToNumber(65535, false)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      HalfVector4__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      HalfVector4__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      HalfVector4_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      HalfVector4_Equals$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt64), 
      HalfVector4_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      HalfVector4_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      HalfVector4_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      HalfVector4_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      HalfVector4_op_Inequality
    );

    $.Method({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature($.UInt64, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")])]), 
      HalfVector4_Pack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt64), 
      HalfVector4_set_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      HalfVector4_toString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      HalfVector4_ToVector4
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt64); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt64)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt64]), 
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2 */ 

(function NormalizedShort2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };

  function NormalizedShort2__ctor$00 (vector) {
    this.packedValue = ($thisType.Pack(vector.X, vector.Y) >>> 0);
  };

  function NormalizedShort2__ctor$01 (x, y) {
    this.packedValue = ($thisType.Pack(x, y) >>> 0);
  };

  function NormalizedShort2_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function NormalizedShort2_Equals$02 (other) {
    return (this.packedValue === other.packedValue);
  };

  function NormalizedShort2_get_PackedValue () {
    return this.packedValue;
  };

  function NormalizedShort2_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function NormalizedShort2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 (vector) {
    this.packedValue = ($thisType.Pack(vector.X, vector.Y) >>> 0);
  };

  function NormalizedShort2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4 () {
    return $S00().Construct(+((+((((this.packedValue >>> 0) & 65535 + 0x8000 & 0xFFFF) - 0x8000)) / 32767)), +((+(((((this.packedValue >>> 0) >>> 16) & 65535 + 0x8000 & 0xFFFF) - 0x8000)) / 32767)), 0, 1);
  };

  function NormalizedShort2_op_Equality (a, b) {
    return a.Equals(b.MemberwiseClone());
  };

  function NormalizedShort2_op_Inequality (a, b) {
    return !a.Equals(b.MemberwiseClone());
  };

  function NormalizedShort2_Pack (vectorX, vectorY) {
    return (((($S01().CallStatic($T06(), "Clamp", null, Math.fround(Math.round((+vectorX * 32767))), -32767, 32767)) | 0) & 65535) | (((($S01().CallStatic($T06(), "Clamp", null, Math.fround(Math.round((+vectorY * 32767))), -32767, 32767)) | 0) & 65535) << 16) >>> 0);
  };

  function NormalizedShort2_set_PackedValue (value) {
    this.packedValue = (value >>> 0);
  };

  function NormalizedShort2_toString () {
    return JSIL.NumberToFormattedString(this.packedValue, null, "X");
  };

  function NormalizedShort2_ToVector2 () {
    return $S02().Construct(+((+((((this.packedValue >>> 0) & 65535 + 0x8000 & 0xFFFF) - 0x8000)) / 32767)), +((+((((this.packedValue >>> 0) >>> 16 + 0x8000 & 0xFFFF) - 0x8000)) / 32767)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      NormalizedShort2__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single]), 
      NormalizedShort2__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      NormalizedShort2_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      NormalizedShort2_Equals$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt32), 
      NormalizedShort2_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      NormalizedShort2_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      NormalizedShort2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      NormalizedShort2_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_ToVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "ToVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      NormalizedShort2_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      NormalizedShort2_op_Inequality
    );

    $.Method({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature($.UInt32, [$.Single, $.Single]), 
      NormalizedShort2_Pack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt32), 
      NormalizedShort2_set_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      NormalizedShort2_toString
    );

    $.Method({Static:false, Public:true }, "ToVector2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      NormalizedShort2_ToVector2
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4 */ 

(function NormalizedShort4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function NormalizedShort4__ctor$00 (vector) {
    this.packedValue = $thisType.Pack(vector.X, vector.Y, vector.Z, vector.W);
  };

  function NormalizedShort4__ctor$01 (x, y, z, w) {
    this.packedValue = $thisType.Pack(x, y, z, w);
  };

  function NormalizedShort4_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj).MemberwiseClone()));
  };

  function NormalizedShort4_Equals$02 (other) {
    return (this.packedValue).Equals(other.packedValue);
  };

  function NormalizedShort4_get_PackedValue () {
    return this.packedValue;
  };

  function NormalizedShort4_GetHashCode () {
    return (this.packedValue).GetHashCode();
  };

  function NormalizedShort4_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4 (vector) {
    this.packedValue = $thisType.Pack(vector.X, vector.Y, vector.Z, vector.W);
  };

  function NormalizedShort4_op_Equality (a, b) {
    return a.Equals(b.MemberwiseClone());
  };

  function NormalizedShort4_op_Inequality (a, b) {
    return !a.Equals(b.MemberwiseClone());
  };

  function NormalizedShort4_Pack (vectorX, vectorY, vectorZ, vectorW) {
    return $T03().op_BitwiseOr(
      $T03().op_BitwiseOr(
        $T03().op_BitwiseOr(
          $T03().op_BitwiseAnd(
            $T03().FromNumber($S00().CallStatic($T04(), "Clamp", null, Math.fround(Math.round((+vectorX * 32767))), -32767, 32767)), 
            $T03().Create(65535, 0, 0)
          ), 
          $T03().op_LeftShift($T03().op_BitwiseAnd(
              $T03().FromNumber($S00().CallStatic($T04(), "Clamp", null, Math.fround(Math.round((+vectorY * 32767))), -32767, 32767)), 
              $T03().Create(65535, 0, 0)
            ), 16)
        ), 
        $T03().op_LeftShift($T03().op_BitwiseAnd(
            $T03().FromNumber($S00().CallStatic($T04(), "Clamp", null, Math.fround(Math.round((+vectorZ * 32767))), -32767, 32767)), 
            $T03().Create(65535, 0, 0)
          ), 32)
      ), 
      $T03().op_LeftShift($T03().op_BitwiseAnd(
          $T03().FromNumber($S00().CallStatic($T04(), "Clamp", null, Math.fround(Math.round((+vectorW * 32767))), -32767, 32767)), 
          $T03().Create(65535, 0, 0)
        ), 48)
    );
  };

  function NormalizedShort4_set_PackedValue (value) {
    this.packedValue = value;
  };

  function NormalizedShort4_toString () {
    return (this.packedValue).toString();
  };

  function NormalizedShort4_ToVector4 () {
    return $S01().Construct(+((+(($T03().op_BitwiseAnd(this.packedValue, $T03().Create(65535, 0, 0))).ToNumber(65535, true)) / 32767)), +((+(($T03().op_BitwiseAnd(
              $T03().op_RightShift(this.packedValue, 16), 
              $T03().Create(65535, 0, 0)
            )).ToNumber(65535, true)) / 32767)), +((+(($T03().op_BitwiseAnd(
              $T03().op_RightShift(this.packedValue, 32), 
              $T03().Create(65535, 0, 0)
            )).ToNumber(65535, true)) / 32767)), +((+(($T03().op_BitwiseAnd(
              $T03().op_RightShift(this.packedValue, 48), 
              $T03().Create(65535, 0, 0)
            )).ToNumber(65535, true)) / 32767)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      NormalizedShort4__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      NormalizedShort4__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      NormalizedShort4_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      NormalizedShort4_Equals$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      JSIL.MethodSignature.Return($.UInt64), 
      NormalizedShort4_get_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      NormalizedShort4_GetHashCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      NormalizedShort4_Microsoft_Xna_Framework_Graphics_PackedVector_IPackedVector_PackFromVector4
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), "PackFromVector4");

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      NormalizedShort4_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      NormalizedShort4_op_Inequality
    );

    $.Method({Static:true , Public:false}, "Pack", 
      new JSIL.MethodSignature($.UInt64, [
          $.Single, $.Single, 
          $.Single, $.Single
        ]), 
      NormalizedShort4_Pack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      JSIL.MethodSignature.Action($.UInt64), 
      NormalizedShort4_set_PackedValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      NormalizedShort4_toString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToVector4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")), 
      NormalizedShort4_ToVector4
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt64); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt64)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt64]), 
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.IndexBuffer */ 

(function IndexBuffer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexElementSize)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BufferUsage)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer_$l$gc__DisplayClass2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Threading)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLIndexBuffer)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SetDataOptions)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsProfile)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize"), 
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage"), 
        $asm01.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };

  function IndexBuffer__ctor$00 (graphicsDevice, indexElementSize, indexCount, bufferUsage) {
    $S00().Call($thisType.prototype, "_ctor", null, this, 
      graphicsDevice, 
      indexElementSize, 
      indexCount, 
      bufferUsage, 
      false
    );
  };

  function IndexBuffer__ctor$01 (graphicsDevice, indexType, indexCount, usage) {
    $S00().Call($thisType.prototype, "_ctor", null, this, 
      graphicsDevice, 
      $thisType.SizeForType(graphicsDevice, indexType), 
      indexCount, 
      usage, 
      false
    );
  };

  function IndexBuffer__ctor$02 (graphicsDevice, indexType, indexCount, usage, dynamic) {
    $S00().Call($thisType.prototype, "_ctor", null, this, 
      graphicsDevice, 
      $thisType.SizeForType(graphicsDevice, indexType), 
      indexCount, 
      usage, 
      dynamic
    );
  };

  function IndexBuffer__ctor$03 (graphicsDevice, indexElementSize, indexCount, usage, dynamic) {
    var $closure0 = new ($T06())();
    $closure0.dynamic = dynamic;
    $T07().prototype._ctor.call(this);
    $closure0.$l$g4__this = this;
    if (graphicsDevice === null) {
      throw $S01().Construct("graphicsDevice");
    }
    this.GraphicsResource$GraphicsDevice$value = graphicsDevice;
    this.IndexBuffer$IndexElementSize$value = indexElementSize;
    this.IndexBuffer$IndexCount$value = (indexCount | 0);
    this.IndexBuffer$BufferUsage$value = usage;
    $T09().ForceToMainThread($T0A().New($closure0, $T06().prototype.$l_ctor$gb__0, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer_$l$gc__DisplayClass2, "$l_ctor$gb__0", JSIL.MethodSignature.Void, false); }));
  };

  function IndexBuffer_$lDispose$gb__4 () {
    $T0C().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.DeleteIndexBuffer(this.IndexBuffer$Handle$value);
    this.IndexBuffer$Handle$value = null;
  };

  function IndexBuffer_Dispose$04 (disposing) {
    if (!this.GraphicsResource$IsDisposed$value) {
      $T00().AddDisposeAction($T0A().New(this, $thisType.prototype.$lDispose$gb__4, function () { return JSIL.GetMethodInfo($thisType, "$lDispose$gb__4", JSIL.MethodSignature.Void, false); }));
    }
    $T07().prototype.Dispose.call(this, disposing);
  };

  function IndexBuffer_get_BufferUsage () {
    return this.IndexBuffer$BufferUsage$value;
  };

  function IndexBuffer_get_Handle () {
    return this.IndexBuffer$Handle$value;
  };

  function IndexBuffer_get_IndexCount () {
    return this.IndexBuffer$IndexCount$value;
  };

  function IndexBuffer_get_IndexElementSize () {
    return this.IndexBuffer$IndexElementSize$value;
  };

  function IndexBuffer_GetData$b1$05 (T, data) {
    $S02().CallVirtual("GetData$b1", [T], this, 0, data, 0, data.length);
  };

  function IndexBuffer_GetData$b1$06 (T, data, startIndex, elementCount) {
    $S02().CallVirtual("GetData$b1", [T], this, 0, data, startIndex, elementCount);
  };

  function IndexBuffer_GetData$b1$07 (T, offsetInBytes, data, startIndex, elementCount) {
    var $closure0 = new ($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer_$l$gc__DisplayClass7$b1.Of(T)) ();
    $closure0.offsetInBytes = (offsetInBytes | 0);
    $closure0.data = data;
    $closure0.startIndex = (startIndex | 0);
    $closure0.elementCount = (elementCount | 0);
    $closure0.$l$g4__this = this;
    if ($closure0.data === null) {
      throw $S01().Construct("data");
    }
    if (($closure0.data.length | 0) < ((($closure0.startIndex | 0) + ($closure0.elementCount | 0)) | 0)) {
      throw $S03().Construct("The array specified in the data parameter is not the correct size for the amount of data requested.");
    }
    if (this.IndexBuffer$BufferUsage$value === $T03().WriteOnly) {
      throw $S04().Construct("This IndexBuffer was created with a usage type of BufferUsage.WriteOnly. Calling GetData on a resource that was created with BufferUsage.WriteOnly is not supported.");
    }
    $T09().ForceToMainThread($T0A().New($closure0, $asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer_$l$gc__DisplayClass7$b1.Of(T).prototype.$lGetData$gb__6, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer_$l$gc__DisplayClass7$b1.Of(T), "$lGetData$gb__6", JSIL.MethodSignature.Void, false); }));
  };

  function IndexBuffer_GraphicsDeviceResetting () {
  };

  function IndexBuffer_set_BufferUsage (value) {
    this.IndexBuffer$BufferUsage$value = value;
  };

  function IndexBuffer_set_Handle (value) {
    this.IndexBuffer$Handle$value = value;
  };

  function IndexBuffer_set_IndexCount (value) {
    this.IndexBuffer$IndexCount$value = (value | 0);
  };

  function IndexBuffer_set_IndexElementSize (value) {
    this.IndexBuffer$IndexElementSize$value = value;
  };

  function IndexBuffer_SetData$b1$08 (T, data) {
    this.SetDataInternal$b1(T)(
      0, 
      data, 
      0, 
      data.length, 
      $T10().None
    );
  };

  function IndexBuffer_SetData$b1$09 (T, data, startIndex, elementCount) {
    this.SetDataInternal$b1(T)(
      0, 
      data, 
      startIndex, 
      elementCount, 
      $T10().None
    );
  };

  function IndexBuffer_SetData$b1$0A (T, offsetInBytes, data, startIndex, elementCount) {
    this.SetDataInternal$b1(T)(
      offsetInBytes, 
      data, 
      startIndex, 
      elementCount, 
      $T10().None
    );
  };

  function IndexBuffer_SetDataInternal$b1 (T, offsetInBytes, data, startIndex, elementCount, options) {
    var $closure0 = new ($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer_$l$gc__DisplayClassa$b1.Of(T)) ();
    $closure0.offsetInBytes = (offsetInBytes | 0);
    $closure0.data = data;
    $closure0.startIndex = (startIndex | 0);
    $closure0.elementCount = (elementCount | 0);
    $closure0.options = options;
    $closure0.$l$g4__this = this;
    if ($closure0.data === null) {
      throw $S01().Construct("data");
    }
    if (($closure0.data.length | 0) < ((($closure0.startIndex | 0) + ($closure0.elementCount | 0)) | 0)) {
      throw $S03().Construct("The array specified in the data parameter is not the correct size for the amount of data requested.");
    }
    $T09().ForceToMainThread($T0A().New($closure0, $asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer_$l$gc__DisplayClassa$b1.Of(T).prototype.$lSetDataInternal$gb__9, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer_$l$gc__DisplayClassa$b1.Of(T), "$lSetDataInternal$gb__9", JSIL.MethodSignature.Void, false); }));
  };

  function IndexBuffer_SizeForType (graphicsDevice, type) {
    var sizeInBytes = ($S05().CallStatic($T11(), "SizeOf", null, type) | 0);
    if (sizeInBytes === 2) {
      var result = $T01().SixteenBits;
    } else {
      if (sizeInBytes !== 4) {
        throw $S06().Construct("type", "Index buffers can only be created for types that are sixteen or thirty two bits in length");
      }
      if (graphicsDevice.GraphicsDevice$GraphicsProfile$value === $T13().Reach) {
        throw $S04().Construct("The profile does not support an elementSize of IndexElementSize.ThirtyTwoBits; use IndexElementSize.SixteenBits or a type that has a size of two bytes.");
      }
      result = $T01().ThirtyTwoBits;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.IndexBuffer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
        ]), 
      IndexBuffer__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Type"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
        ]), 
      IndexBuffer__ctor$01
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Type"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage"), 
          $.Boolean
        ]), 
      IndexBuffer__ctor$02
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage"), 
          $.Boolean
        ]), 
      IndexBuffer__ctor$03
    );

    $.Method({Static:false, Public:false}, "$lDispose$gb__4", 
      JSIL.MethodSignature.Void, 
      IndexBuffer_$lDispose$gb__4
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      IndexBuffer_Dispose$04
    );

    $.Method({Static:false, Public:true }, "get_BufferUsage", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")), 
      IndexBuffer_get_BufferUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer")), 
      IndexBuffer_get_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IndexCount", 
      JSIL.MethodSignature.Return($.Int32), 
      IndexBuffer_get_IndexCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IndexElementSize", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize")), 
      IndexBuffer_get_IndexElementSize
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      IndexBuffer_GetData$b1$05
    );

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      IndexBuffer_GetData$b1$06
    );

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32
        ], ["T"]), 
      IndexBuffer_GetData$b1$07
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GraphicsDeviceResetting", 
      JSIL.MethodSignature.Void, 
      IndexBuffer_GraphicsDeviceResetting
    );

    $.Method({Static:false, Public:false}, "set_BufferUsage", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")), 
      IndexBuffer_set_BufferUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Handle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer")), 
      IndexBuffer_set_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IndexCount", 
      JSIL.MethodSignature.Action($.Int32), 
      IndexBuffer_set_IndexCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IndexElementSize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize")), 
      IndexBuffer_set_IndexElementSize
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      IndexBuffer_SetData$b1$08
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      IndexBuffer_SetData$b1$09
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32
        ], ["T"]), 
      IndexBuffer_SetData$b1$0A
    );

    $.Method({Static:false, Public:false}, "SetDataInternal", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SetDataOptions")
        ], ["T"]), 
      IndexBuffer_SetDataInternal$b1
    );

    $.Method({Static:true , Public:false}, "SizeForType", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Type")]), 
      IndexBuffer_SizeForType
    );

    $.Field({Static:false, Public:false}, "IndexBuffer$BufferUsage$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "IndexBuffer$IndexCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "IndexBuffer$IndexElementSize$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "IndexBuffer$Handle$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "BufferUsage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage"));

    $.Property({Static:false, Public:true }, "IndexCount", $.Int32);

    $.Property({Static:false, Public:true }, "IndexElementSize", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize"));

    $.Property({Static:false, Public:false}, "Handle", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.IndexBuffer+<>c__DisplayClass2 */ 

(function $l$gc__DisplayClass2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLIndexBuffer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Boolean"), 
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize")
      ]))) ();
  };

  function $l$gc__DisplayClass2__ctor () {
  };

  function $l$gc__DisplayClass2_$l_ctor$gb__0 () {
    this.$l$g4__this.IndexBuffer$Handle$value = $S00().Construct(this.$l$g4__this.GraphicsResource$GraphicsDevice$value, this.dynamic, this.$l$g4__this.IndexBuffer$IndexCount$value, this.$l$g4__this.IndexBuffer$IndexElementSize$value);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.IndexBuffer+<>c__DisplayClass2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2__ctor
    );

    $.Method({Static:false, Public:true }, "$l.ctor$gb__0", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2_$l_ctor$gb__0
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer")); 
    $.Field({Static:false, Public:true }, "dynamic", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.IndexBuffer+<>c__DisplayClass7`1 */ 

(function $l$gc__DisplayClass7$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer)) ();
  };

  function $l$gc__DisplayClass7$b1__ctor () {
  };

  function $l$gc__DisplayClass7$b1_$lGetData$gb__6 () {
    (this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).GetIndexBufferData$b1($thisType.T.get(this))(
      this.$l$g4__this.IndexBuffer$Handle$value, 
      this.offsetInBytes, 
      this.data, 
      this.startIndex, 
      this.elementCount
    );
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.IndexBuffer+<>c__DisplayClass7`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass7$b1__ctor
    );

    $.Method({Static:false, Public:true }, "$lGetData$gb__6", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass7$b1_$lGetData$gb__6
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer")); 
    $.Field({Static:false, Public:true }, "offsetInBytes", $.Int32); 
    $.Field({Static:false, Public:true }, "data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "startIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "elementCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.IndexBuffer+<>c__DisplayClassa`1 */ 

(function $l$gc__DisplayClassa$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer)) ();
  };

  function $l$gc__DisplayClassa$b1__ctor () {
  };

  function $l$gc__DisplayClassa$b1_$lSetDataInternal$gb__9 () {
    (this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).SetIndexBufferData$b1($thisType.T.get(this))(
      this.$l$g4__this.IndexBuffer$Handle$value, 
      this.offsetInBytes, 
      this.data, 
      this.startIndex, 
      this.elementCount, 
      this.options
    );
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.IndexBuffer+<>c__DisplayClassa`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassa$b1__ctor
    );

    $.Method({Static:false, Public:true }, "$lSetDataInternal$gb__9", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassa$b1_$lSetDataInternal$gb__9
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer")); 
    $.Field({Static:false, Public:true }, "offsetInBytes", $.Int32); 
    $.Field({Static:false, Public:true }, "data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "startIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "elementCount", $.Int32); 
    $.Field({Static:false, Public:true }, "options", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SetDataOptions")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer */ 

(function DynamicIndexBuffer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexElementSize)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BufferUsage)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SetDataOptions)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize"), 
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage"), 
        $asm01.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Type"), 
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage"), 
        $asm01.TypeRef("System.Boolean")
      ]))) ();
  };

  function DynamicIndexBuffer__ctor$00 (graphicsDevice, indexElementSize, indexCount, usage) {
    $S00().Call($T04().prototype, "_ctor", null, this, 
      graphicsDevice, 
      indexElementSize, 
      indexCount, 
      usage, 
      true
    );
  };

  function DynamicIndexBuffer__ctor$01 (graphicsDevice, indexType, indexCount, usage) {
    $S01().Call($T04().prototype, "_ctor", null, this, 
      graphicsDevice, 
      indexType, 
      indexCount, 
      usage, 
      true
    );
  };

  function DynamicIndexBuffer_add_ContentLost (value) {
    var eventHandler = this.ContentLost;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T07().Combine(eventHandler2, value);
      eventHandler = $T08().CompareExchange$b1($T06())(/* ref */ new JSIL.MemberReference(this, "ContentLost"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function DynamicIndexBuffer_get_IsContentLost () {
    return false;
  };

  function DynamicIndexBuffer_remove_ContentLost (value) {
    var eventHandler = this.ContentLost;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T07().Remove(eventHandler2, value);
      eventHandler = $T08().CompareExchange$b1($T06())(/* ref */ new JSIL.MemberReference(this, "ContentLost"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function DynamicIndexBuffer_SetData$b1$02 (T, offsetInBytes, data, startIndex, elementCount, options) {
    this.SetDataInternal$b1(T)(
      offsetInBytes, 
      data, 
      startIndex, 
      elementCount, 
      options
    );
  };

  function DynamicIndexBuffer_SetData$b1$03 (T, data, startIndex, elementCount, options) {
    this.SetDataInternal$b1(T)(
      0, 
      data, 
      startIndex, 
      elementCount, 
      options
    );
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer"), 
      Name: "Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
        ]), 
      DynamicIndexBuffer__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Type"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
        ]), 
      DynamicIndexBuffer__ctor$01
    );

    $.Method({Static:false, Public:true }, "add_ContentLost", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      DynamicIndexBuffer_add_ContentLost
    );

    $.Method({Static:false, Public:true }, "get_IsContentLost", 
      JSIL.MethodSignature.Return($.Boolean), 
      DynamicIndexBuffer_get_IsContentLost
    );

    $.Method({Static:false, Public:true }, "remove_ContentLost", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      DynamicIndexBuffer_remove_ContentLost
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SetDataOptions")
        ], ["T"]), 
      DynamicIndexBuffer_SetData$b1$02
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SetDataOptions")
        ], ["T"]), 
      DynamicIndexBuffer_SetData$b1$03
    );

    $.Field({Static:false, Public:false}, "ContentLost", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true }, "IsContentLost", $.Boolean);

    $.Event({Static:false, Public:true }, "ContentLost", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.VertexBuffer */ 

(function VertexBuffer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BufferUsage)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer_$l$gc__DisplayClass2)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Threading)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLVertexBuffer)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SetDataOptions)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function VertexBuffer__ctor$00 (graphicsDevice, vertexDeclaration, vertexCount, bufferUsage) {
    $thisType.prototype._ctor.call(this, 
      graphicsDevice, 
      vertexDeclaration, 
      vertexCount, 
      bufferUsage, 
      false
    );
  };

  function VertexBuffer__ctor$01 (graphicsDevice, type, vertexCount, bufferUsage) {
    $thisType.prototype._ctor.call(this, 
      graphicsDevice, 
      $T01().FromType(type), 
      vertexCount, 
      bufferUsage, 
      false
    );
  };

  function VertexBuffer__ctor$02 (graphicsDevice, vertexDeclaration, vertexCount, bufferUsage, dynamic) {
    var $closure0 = new ($T06())();
    $closure0.dynamic = dynamic;
    $T07().prototype._ctor.call(this);
    $closure0.$l$g4__this = this;
    if (graphicsDevice === null) {
      throw $S00().Construct("graphicsDevice");
    }
    this.GraphicsResource$GraphicsDevice$value = graphicsDevice;
    this.VertexBuffer$VertexDeclaration$value = vertexDeclaration;
    this.VertexBuffer$VertexCount$value = (vertexCount | 0);
    this.VertexBuffer$BufferUsage$value = bufferUsage;
    if (vertexDeclaration.GraphicsResource$GraphicsDevice$value !== graphicsDevice) {
      vertexDeclaration.GraphicsResource$GraphicsDevice$value = graphicsDevice;
    }
    $T09().ForceToMainThread($T0A().New($closure0, $T06().prototype.$l_ctor$gb__0, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer_$l$gc__DisplayClass2, "$l_ctor$gb__0", JSIL.MethodSignature.Void, false); }));
  };

  function VertexBuffer_$lDispose$gb__4 () {
    $T0C().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.DeleteVertexBuffer(this.VertexBuffer$Handle$value);
    this.VertexBuffer$Handle$value = null;
  };

  function VertexBuffer_Dispose$03 (disposing) {
    if (!this.GraphicsResource$IsDisposed$value) {
      $T00().AddDisposeAction($T0A().New(this, $thisType.prototype.$lDispose$gb__4, function () { return JSIL.GetMethodInfo($thisType, "$lDispose$gb__4", JSIL.MethodSignature.Void, false); }));
    }
    $T07().prototype.Dispose.call(this, disposing);
  };

  function VertexBuffer_get_BufferUsage () {
    return this.VertexBuffer$BufferUsage$value;
  };

  function VertexBuffer_get_Handle () {
    return this.VertexBuffer$Handle$value;
  };

  function VertexBuffer_get_VertexCount () {
    return this.VertexBuffer$VertexCount$value;
  };

  function VertexBuffer_get_VertexDeclaration () {
    return this.VertexBuffer$VertexDeclaration$value;
  };

  function VertexBuffer_GetData$b1$04 (T, data) {
    $S01().CallVirtual("GetData$b1", [T], this, 
      0, 
      data, 
      0, 
      data.length, 
      $S02().CallStatic($T0D(), "SizeOf", null, T)
    );
  };

  function VertexBuffer_GetData$b1$05 (T, data, startIndex, elementCount) {
    $S01().CallVirtual("GetData$b1", [T], this, 
      0, 
      data, 
      startIndex, 
      elementCount, 
      $S02().CallStatic($T0D(), "SizeOf", null, T)
    );
  };

  function VertexBuffer_GetData$b1$06 (T, offsetInBytes, data, startIndex, elementCount, vertexStride) {
    var $closure0 = new ($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer_$l$gc__DisplayClass7$b1.Of(T)) ();
    $closure0.offsetInBytes = (offsetInBytes | 0);
    $closure0.data = data;
    $closure0.startIndex = (startIndex | 0);
    $closure0.elementCount = (elementCount | 0);
    $closure0.vertexStride = (vertexStride | 0);
    $closure0.$l$g4__this = this;
    if ($closure0.data === null) {
      throw $S00().Construct("data");
    }
    if (($closure0.data.length | 0) < ((($closure0.startIndex | 0) + ($closure0.elementCount | 0)) | 0)) {
      throw $S03().Construct("elementCount", "This parameter must be a valid index within the array.");
    }
    if (this.VertexBuffer$BufferUsage$value === $T03().WriteOnly) {
      throw $S04().Construct("Calling GetData on a resource that was created with BufferUsage.WriteOnly is not supported.");
    }
    if (($closure0.vertexStride | 0) === 0) {
      $closure0.vertexStride = ($S02().CallStatic($T0D(), "SizeOf", null, T) | 0);
    }
    if (!((($closure0.elementCount | 0) <= 1) || (Math.imul($closure0.elementCount, $closure0.vertexStride) <= Math.imul(this.VertexBuffer$VertexCount$value, this.VertexBuffer$VertexDeclaration$value.VertexDeclaration$VertexStride$value)))) {
      throw $S05().Construct("The array is not the correct size for the amount of data requested.");
    }
    $T09().ForceToMainThread($T0A().New($closure0, $asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer_$l$gc__DisplayClass7$b1.Of(T).prototype.$lGetData$gb__6, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer_$l$gc__DisplayClass7$b1.Of(T), "$lGetData$gb__6", JSIL.MethodSignature.Void, false); }));
  };

  function VertexBuffer_GraphicsDeviceResetting () {
  };

  function VertexBuffer_set_BufferUsage (value) {
    this.VertexBuffer$BufferUsage$value = value;
  };

  function VertexBuffer_set_Handle (value) {
    this.VertexBuffer$Handle$value = value;
  };

  function VertexBuffer_set_VertexCount (value) {
    this.VertexBuffer$VertexCount$value = (value | 0);
  };

  function VertexBuffer_set_VertexDeclaration (value) {
    this.VertexBuffer$VertexDeclaration$value = value;
  };

  function VertexBuffer_SetData$b1$07 (T, data) {
    this.SetDataInternal$b1(T)(
      0, 
      data, 
      0, 
      data.length, 
      $S02().CallStatic($T0D(), "SizeOf", null, T), 
      $T12().None
    );
  };

  function VertexBuffer_SetData$b1$08 (T, data, startIndex, elementCount) {
    this.SetDataInternal$b1(T)(
      0, 
      data, 
      startIndex, 
      elementCount, 
      $S02().CallStatic($T0D(), "SizeOf", null, T), 
      $T12().None
    );
  };

  function VertexBuffer_SetData$b1$09 (T, offsetInBytes, data, startIndex, elementCount, vertexStride) {
    this.SetDataInternal$b1(T)(
      offsetInBytes, 
      data, 
      startIndex, 
      elementCount, 
      vertexStride, 
      $T12().None
    );
  };

  function VertexBuffer_SetDataInternal$b1 (T, offsetInBytes, data, startIndex, elementCount, vertexStride, options) {
    var $closure0 = new ($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer_$l$gc__DisplayClassa$b1.Of(T)) ();
    $closure0.offsetInBytes = (offsetInBytes | 0);
    $closure0.data = data;
    $closure0.startIndex = (startIndex | 0);
    $closure0.elementCount = (elementCount | 0);
    $closure0.options = options;
    $closure0.$l$g4__this = this;
    if ($closure0.data === null) {
      throw $S00().Construct("data");
    }
    if (!((((($closure0.startIndex | 0) + ($closure0.elementCount | 0)) | 0) <= ($closure0.data.length | 0)) && (($closure0.elementCount | 0) > 0))) {
      throw $S05().Construct("The array specified in the data parameter is not the correct size for the amount of data requested.");
    }
    if (!((($closure0.elementCount | 0) <= 1) || (Math.imul($closure0.elementCount, vertexStride) <= (this.VertexBuffer$Handle$value.OpenGLVertexBuffer$BufferSize$value | 0)))) {
      throw $S05().Construct("The vertex stride is larger than the vertex buffer.");
    }
    $closure0.elementSizeInBytes = ($S02().CallStatic($T0D(), "SizeOf", null, T) | 0);
    if ((vertexStride | 0) === 0) {
      vertexStride = ($closure0.elementSizeInBytes | 0);
    }
    if ((vertexStride | 0) < ($closure0.elementSizeInBytes | 0)) {
      throw $S06().Construct(("The vertex stride must be greater than or equal to the size of the specified data (" + ($closure0.elementSizeInBytes).toString() + ")."));
    }
    $T09().ForceToMainThread($T0A().New($closure0, $asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer_$l$gc__DisplayClassa$b1.Of(T).prototype.$lSetDataInternal$gb__9, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer_$l$gc__DisplayClassa$b1.Of(T), "$lSetDataInternal$gb__9", JSIL.MethodSignature.Void, false); }));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexBuffer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
        ]), 
      VertexBuffer__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Type"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
        ]), 
      VertexBuffer__ctor$01
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage"), 
          $.Boolean
        ]), 
      VertexBuffer__ctor$02
    );

    $.Method({Static:false, Public:false}, "$lDispose$gb__4", 
      JSIL.MethodSignature.Void, 
      VertexBuffer_$lDispose$gb__4
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      VertexBuffer_Dispose$03
    );

    $.Method({Static:false, Public:true }, "get_BufferUsage", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")), 
      VertexBuffer_get_BufferUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer")), 
      VertexBuffer_get_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_VertexCount", 
      JSIL.MethodSignature.Return($.Int32), 
      VertexBuffer_get_VertexCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_VertexDeclaration", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")), 
      VertexBuffer_get_VertexDeclaration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      VertexBuffer_GetData$b1$04
    );

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      VertexBuffer_GetData$b1$05
    );

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $.Int32
        ], ["T"]), 
      VertexBuffer_GetData$b1$06
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GraphicsDeviceResetting", 
      JSIL.MethodSignature.Void, 
      VertexBuffer_GraphicsDeviceResetting
    );

    $.Method({Static:false, Public:false}, "set_BufferUsage", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")), 
      VertexBuffer_set_BufferUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Handle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer")), 
      VertexBuffer_set_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_VertexCount", 
      JSIL.MethodSignature.Action($.Int32), 
      VertexBuffer_set_VertexCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_VertexDeclaration", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")), 
      VertexBuffer_set_VertexDeclaration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      VertexBuffer_SetData$b1$07
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      VertexBuffer_SetData$b1$08
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $.Int32
        ], ["T"]), 
      VertexBuffer_SetData$b1$09
    );

    $.Method({Static:false, Public:false}, "SetDataInternal", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SetDataOptions")
        ], ["T"]), 
      VertexBuffer_SetDataInternal$b1
    );

    $.Field({Static:false, Public:false}, "VertexBuffer$BufferUsage$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "VertexBuffer$VertexCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "VertexBuffer$VertexDeclaration$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "VertexBuffer$Handle$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "BufferUsage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage"));

    $.Property({Static:false, Public:true }, "VertexCount", $.Int32);

    $.Property({Static:false, Public:true }, "VertexDeclaration", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"));

    $.Property({Static:false, Public:false}, "Handle", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.VertexBuffer+<>c__DisplayClass2 */ 

(function $l$gc__DisplayClass2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLVertexBuffer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Boolean"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };

  function $l$gc__DisplayClass2__ctor () {
  };

  function $l$gc__DisplayClass2_$l_ctor$gb__0 () {
    this.$l$g4__this.VertexBuffer$Handle$value = $S00().Construct(this.$l$g4__this.GraphicsResource$GraphicsDevice$value, this.dynamic, this.$l$g4__this.VertexBuffer$VertexCount$value, this.$l$g4__this.VertexBuffer$VertexDeclaration$value.VertexDeclaration$VertexStride$value);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexBuffer+<>c__DisplayClass2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2__ctor
    );

    $.Method({Static:false, Public:true }, "$l.ctor$gb__0", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2_$l_ctor$gb__0
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")); 
    $.Field({Static:false, Public:true }, "dynamic", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.VertexBuffer+<>c__DisplayClass7`1 */ 

(function $l$gc__DisplayClass7$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer)) ();
  };

  function $l$gc__DisplayClass7$b1__ctor () {
  };

  function $l$gc__DisplayClass7$b1_$lGetData$gb__6 () {
    (this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).GetVertexBufferData$b1($thisType.T.get(this))(
      this.$l$g4__this.VertexBuffer$Handle$value, 
      this.offsetInBytes, 
      this.data, 
      this.startIndex, 
      this.elementCount, 
      this.vertexStride
    );
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexBuffer+<>c__DisplayClass7`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass7$b1__ctor
    );

    $.Method({Static:false, Public:true }, "$lGetData$gb__6", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass7$b1_$lGetData$gb__6
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")); 
    $.Field({Static:false, Public:true }, "offsetInBytes", $.Int32); 
    $.Field({Static:false, Public:true }, "data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "startIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "elementCount", $.Int32); 
    $.Field({Static:false, Public:true }, "vertexStride", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.VertexBuffer+<>c__DisplayClassa`1 */ 

(function $l$gc__DisplayClassa$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer)) ();
  };

  function $l$gc__DisplayClassa$b1__ctor () {
  };

  function $l$gc__DisplayClassa$b1_$lSetDataInternal$gb__9 () {
    (this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).SetVertexBufferData$b1($thisType.T.get(this))(
      this.$l$g4__this.VertexBuffer$Handle$value, 
      this.elementSizeInBytes, 
      this.offsetInBytes, 
      this.data, 
      this.startIndex, 
      this.elementCount, 
      this.options
    );
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexBuffer+<>c__DisplayClassa`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassa$b1__ctor
    );

    $.Method({Static:false, Public:true }, "$lSetDataInternal$gb__9", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassa$b1_$lSetDataInternal$gb__9
    );

    $.Field({Static:false, Public:true }, "elementSizeInBytes", $.Int32); 
    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")); 
    $.Field({Static:false, Public:true }, "offsetInBytes", $.Int32); 
    $.Field({Static:false, Public:true }, "data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "startIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "elementCount", $.Int32); 
    $.Field({Static:false, Public:true }, "options", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SetDataOptions")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer */ 

(function DynamicVertexBuffer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BufferUsage)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SetDataOptions)) ();
  };

  function DynamicVertexBuffer__ctor$00 (graphicsDevice, vertexDeclaration, vertexCount, bufferUsage) {
    $T04().prototype._ctor.call(this, 
      graphicsDevice, 
      vertexDeclaration, 
      vertexCount, 
      bufferUsage, 
      true
    );
  };

  function DynamicVertexBuffer__ctor$01 (graphicsDevice, type, vertexCount, bufferUsage) {
    $T04().prototype._ctor.call(this, 
      graphicsDevice, 
      $T01().FromType(type), 
      vertexCount, 
      bufferUsage, 
      true
    );
  };

  function DynamicVertexBuffer_add_ContentLost (value) {
    var eventHandler = this.ContentLost;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T07().Combine(eventHandler2, value);
      eventHandler = $T08().CompareExchange$b1($T06())(/* ref */ new JSIL.MemberReference(this, "ContentLost"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function DynamicVertexBuffer_get_IsContentLost () {
    return false;
  };

  function DynamicVertexBuffer_remove_ContentLost (value) {
    var eventHandler = this.ContentLost;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T07().Remove(eventHandler2, value);
      eventHandler = $T08().CompareExchange$b1($T06())(/* ref */ new JSIL.MemberReference(this, "ContentLost"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function DynamicVertexBuffer_SetData$b1$02 (T, offsetInBytes, data, startIndex, elementCount, vertexStride, options) {
    this.SetDataInternal$b1(T)(
      offsetInBytes, 
      data, 
      startIndex, 
      elementCount, 
      vertexStride, 
      options
    );
  };

  function DynamicVertexBuffer_SetData$b1$03 (T, data, startIndex, elementCount, options) {
    this.SetDataInternal$b1(T)(
      0, 
      data, 
      startIndex, 
      elementCount, 
      this.VertexBuffer$VertexDeclaration$value.VertexDeclaration$VertexStride$value, 
      options
    );
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer"), 
      Name: "Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
        ]), 
      DynamicVertexBuffer__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Type"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
        ]), 
      DynamicVertexBuffer__ctor$01
    );

    $.Method({Static:false, Public:true }, "add_ContentLost", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      DynamicVertexBuffer_add_ContentLost
    );

    $.Method({Static:false, Public:true }, "get_IsContentLost", 
      JSIL.MethodSignature.Return($.Boolean), 
      DynamicVertexBuffer_get_IsContentLost
    );

    $.Method({Static:false, Public:true }, "remove_ContentLost", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      DynamicVertexBuffer_remove_ContentLost
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SetDataOptions")
        ], ["T"]), 
      DynamicVertexBuffer_SetData$b1$02
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SetDataOptions")
        ], ["T"]), 
      DynamicVertexBuffer_SetData$b1$03
    );

    $.Field({Static:false, Public:false}, "ContentLost", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true }, "IsContentLost", $.Boolean);

    $.Event({Static:false, Public:true }, "ContentLost", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.IndexElementSize */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.IndexElementSize", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SixteenBits: 0, 
    ThirtyTwoBits: 1, 
  }
);

/* class Microsoft.Xna.Framework.Graphics.VertexDeclaration */ 

(function VertexDeclaration$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.VertexElement))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration_Element)))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElement)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Shader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration_Element))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration_Element)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IVertexType)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Activator)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementUsage)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration+Element")])]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration+Element")]), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int64")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IVertexType.get_VertexDeclaration)) ();
  };

  function VertexDeclaration__ctor$00 (elements) {
    $thisType.prototype._ctor.call(this, $thisType.GetVertexStride(elements), elements);
  };

  function VertexDeclaration__ctor$01 (vertexStride, elements) {
    this.shaderAttributeInfo = $S00().Construct();
    $T03().prototype._ctor.call(this);
    if (!((elements !== null) && ((elements.length | 0) !== 0))) {
      throw $S01().Construct("elements", "Elements cannot be empty");
    }
    this.elements = $T00().$Cast(JSIL.Array.Clone(elements));
    this.VertexDeclaration$VertexStride$value = (vertexStride | 0);
  };

  function VertexDeclaration_Apply (shader, offset, divisor) {
    var $temp00;
    var attrInfo = new JSIL.BoxedVariable(null);
    var shaderHash = (shader.GetHashCode() | 0);
    if (!(this.shaderAttributeInfo).TryGetValue(shaderHash, /* ref */ attrInfo)) {
      attrInfo.set($S02().Construct(16));
      var array = this.elements;

      for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
        var ve = array[i].MemberwiseClone();
        var attributeLocation = (shader.GetAttribLocation(ve.VertexElement$VertexElementUsage$value, ve.VertexElement$UsageIndex$value) | 0);
        if (attributeLocation >= 0) {
          var element2 = new ($T0A())();
          element2.Offset = (ve.VertexElement$Offset$value | 0);
          element2.AttributeLocation = attributeLocation;
          element2.NumberOfElements = ($thisType.GetNumberOfElements(ve.VertexElement$VertexElementFormat$value) | 0);
          element2.VertexAttribPointerType = ve.VertexElement$VertexElementFormat$value;
          element2.Normalized = $thisType.GetVertexAttribNormalized(ve);
          (attrInfo).Add(element2);
        }
      }
      (this.shaderAttributeInfo).Add(shaderHash, attrInfo.get());
    }

    for (var a$0 = attrInfo.get()._items, i$0 = 0, l$0 = (attrInfo.get()._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var element = a$0[i$0];
      this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.OpenGLDevice$AttributeEnabled$value[element.AttributeLocation] = true;
      this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.OpenGLDevice$Attributes$value[element.AttributeLocation].Divisor = (divisor | 0);
      (this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).VertexAttribPointer(
        element.AttributeLocation, 
        element.NumberOfElements, 
        element.VertexAttribPointerType, 
        element.Normalized, 
        this.VertexDeclaration$VertexStride$value, 
        $S03().CallStatic($T07(), "op_Explicit", null, $T0D().op_Addition(
            offset.ToInt64(), 
            $T0D().FromNumber(element.Offset)
          )).MemberwiseClone()
      );
    }
  };

  function VertexDeclaration_FromType (vertexType) {
    if ($T0E().op_Equality(vertexType, null)) {
      throw $S01().Construct("vertexType", "Cannot be null");
    }
    if (!vertexType.get_IsValueType()) {
      throw $S04().Construct("vertexType", "Must be value type");
    }
    var type = $T10().$As($S05().CallStatic($T11(), "CreateInstance", null, vertexType));
    if (type === null) {
      throw $S06().Construct("vertexData does not inherit IVertexType");
    }
    var vertexDeclaration = $IM00().Call(type, null);
    if (vertexDeclaration === null) {
      throw $S07().Construct("VertexDeclaration cannot be null");
    }
    return vertexDeclaration;
  };

  function VertexDeclaration_get_VertexStride () {
    return this.VertexDeclaration$VertexStride$value;
  };

  function VertexDeclaration_GetNumberOfElements (elementFormat) {
    switch (elementFormat.valueOf()) {
      case 0: 
        var result = 1;
        break;

      case 1: 
        result = 2;
        break;

      case 2: 
        result = 3;
        break;

      case 3: 
        result = 4;
        break;

      case 4: 
        result = 4;
        break;

      case 5: 
        result = 4;
        break;

      case 6: 
        result = 2;
        break;

      case 7: 
        result = 2;
        break;

      case 8: 
        result = 2;
        break;

      case 9: 
        result = 4;
        break;

      case 10: 
        result = 2;
        break;

      case 11: 
        result = 4;
        break;

      default: 
        throw $S04().Construct("Should be a value defined in VertexElementFormat", "elementFormat");

    }
    return result;
  };

  function VertexDeclaration_GetTypeSize (elementFormat) {
    switch (elementFormat.valueOf()) {
      case 0: 
        var result = 4;
        break;

      case 1: 
        result = 8;
        break;

      case 2: 
        result = 12;
        break;

      case 3: 
        result = 16;
        break;

      case 4: 
        result = 4;
        break;

      case 5: 
        result = 4;
        break;

      case 6: 
        result = 4;
        break;

      case 7: 
        result = 8;
        break;

      case 8: 
        result = 4;
        break;

      case 9: 
        result = 8;
        break;

      case 10: 
        result = 4;
        break;

      case 11: 
        result = 8;
        break;

      default: 
        result = 0;
        break;

    }
    return result;
  };

  function VertexDeclaration_GetVertexAttribNormalized (element) {
    if (element.VertexElement$VertexElementUsage$value === $T14().Color) {
      var result = true;
    } else {
      switch ((element.VertexElement$VertexElementFormat$value).valueOf()) {
        case 8: 
        case 9: 
          result = true;
          break;

        default: 
          result = false;
          break;

      }
    }
    return result;
  };

  function VertexDeclaration_GetVertexElements () {
    return $T00().$Cast(JSIL.Array.Clone(this.elements));
  };

  function VertexDeclaration_GetVertexStride (elements) {
    var max = 0;

    for (var i = 0; i < (elements.length | 0); i = ((i + 1) | 0)) {
      var start = (((elements[i].VertexElement$Offset$value | 0) + ($thisType.GetTypeSize(elements[i].VertexElement$VertexElementFormat$value) | 0)) | 0);
      if (max < start) {
        max = start;
      }
    }
    return max;
  };

  function VertexDeclaration_set_VertexStride (value) {
    this.VertexDeclaration$VertexStride$value = (value | 0);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexDeclaration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElement")])), 
      VertexDeclaration__ctor$00
    )
      .Parameter(0, "elements", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElement")])]), 
      VertexDeclaration__ctor$01
    )
      .Parameter(1, "elements", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:false}, "Apply", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader"), $asm01.TypeRef("System.IntPtr"), 
          $.Int32
        ]), 
      VertexDeclaration_Apply
    );

    $.Method({Static:true , Public:false}, "FromType", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Type")]), 
      VertexDeclaration_FromType
    );

    $.Method({Static:false, Public:true }, "get_VertexStride", 
      JSIL.MethodSignature.Return($.Int32), 
      VertexDeclaration_get_VertexStride
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "GetNumberOfElements", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat")]), 
      VertexDeclaration_GetNumberOfElements
    );

    $.Method({Static:true , Public:false}, "GetTypeSize", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat")]), 
      VertexDeclaration_GetTypeSize
    );

    $.Method({Static:true , Public:false}, "GetVertexAttribNormalized", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElement")]), 
      VertexDeclaration_GetVertexAttribNormalized
    );

    $.Method({Static:false, Public:true }, "GetVertexElements", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElement")])), 
      VertexDeclaration_GetVertexElements
    );

    $.Method({Static:true , Public:false}, "GetVertexStride", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElement")])]), 
      VertexDeclaration_GetVertexStride
    );

    $.Method({Static:false, Public:false}, "set_VertexStride", 
      JSIL.MethodSignature.Action($.Int32), 
      VertexDeclaration_set_VertexStride
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElement")])); 
    $.Field({Static:false, Public:false}, "shaderAttributeInfo", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration+Element")])])); 
    $.Field({Static:false, Public:false}, "VertexDeclaration$VertexStride$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "VertexStride", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.VertexDeclaration+Element */ 

(function Element$Members () {
  var $, $thisType;
  function Element__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexDeclaration+Element", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Element__ctor
    );

    $.Field({Static:false, Public:true }, "Offset", $.Int32); 
    $.Field({Static:false, Public:true }, "AttributeLocation", $.Int32); 
    $.Field({Static:false, Public:true }, "NumberOfElements", $.Int32); 
    $.Field({Static:false, Public:true }, "VertexAttribPointerType", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat")); 
    $.Field({Static:false, Public:true }, "Normalized", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.VertexDeclarationCache`1 */ 

(function VertexDeclarationCache$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration)) ();
  };

  function VertexDeclarationCache$b1_get_VertexDeclaration () {
    if ($thisType.Of($thisType.T.get(this)).cached === null) {
      $thisType.Of($thisType.T.get(this)).cached = $T00().FromType($thisType.T.get(this));
    }
    return $thisType.Of($thisType.T.get(this)).cached;
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Graphics.VertexDeclarationCache`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "get_VertexDeclaration", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")), 
      VertexDeclarationCache$b1_get_VertexDeclaration
    );

    $.Field({Static:true , Public:false}, "cached", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")); 
    $.GenericProperty({Static:true , Public:true }, "VertexDeclaration", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.CubeMapFace */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.CubeMapFace", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    PositiveX: 0, 
    NegativeX: 1, 
    PositiveY: 2, 
    NegativeY: 3, 
    PositiveZ: 4, 
    NegativeZ: 5, 
  }
);

/* class Microsoft.Xna.Framework.Graphics.GraphicsAdapter */ 

(function GraphicsAdapter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.GraphicsAdapter))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.GraphicsAdapter))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GamePlatform)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DisplayMode)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsProfile)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthFormat)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };

  function GraphicsAdapter__ctor () {
    this.GraphicsAdapter$UseNullDevice$value = false;
    this.GraphicsAdapter$UseReferenceDevice$value = false;
  };

  function GraphicsAdapter_get_Adapters () {
    if ($thisType.adapters === null) {
      $thisType.adapters = new ($T00())($T01().$Cast(JSIL.Array.New($thisType, [new $thisType()])));
    }
    return $thisType.adapters;
  };

  function GraphicsAdapter_get_CurrentDisplayMode () {
    return $T03().get_Instance().Platform.GetCurrentDisplayMode();
  };

  function GraphicsAdapter_get_DefaultAdapter () {
    return $S00().CallVirtual("get_Item", null, $thisType.get_Adapters(), 0);
  };

  function GraphicsAdapter_get_Description () {
    throw $S01().Construct();
  };

  function GraphicsAdapter_get_DeviceId () {
    throw $S01().Construct();
  };

  function GraphicsAdapter_get_DeviceName () {
    throw $S01().Construct();
  };

  function GraphicsAdapter_get_IsDefaultAdapter () {
    throw $S01().Construct();
  };

  function GraphicsAdapter_get_IsWideScreen () {
    var aspect = +(this.get_CurrentDisplayMode()).get_AspectRatio();
    return (aspect > 1.33333337);
  };

  function GraphicsAdapter_get_MonitorHandle () {
    throw $S01().Construct();
  };

  function GraphicsAdapter_get_Revision () {
    throw $S01().Construct();
  };

  function GraphicsAdapter_get_SubSystemId () {
    throw $S01().Construct();
  };

  function GraphicsAdapter_get_SupportedDisplayModes () {
    return $T03().get_Instance().Platform.GetDisplayModes();
  };

  function GraphicsAdapter_get_UseNullDevice () {
    return this.GraphicsAdapter$UseNullDevice$value;
  };

  function GraphicsAdapter_get_UseReferenceDevice () {
    return this.GraphicsAdapter$UseReferenceDevice$value;
  };

  function GraphicsAdapter_get_VendorId () {
    throw $S01().Construct();
  };

  function GraphicsAdapter_IsProfileSupported (graphicsProfile) {
    return true;
  };

  function GraphicsAdapter_QueryBackBufferFormat (graphicsProfile, format, depthFormat, multiSampleCount, /* ref */ selectedFormat, /* ref */ selectedDepthFormat, /* ref */ selectedMultiSampleCount) {
    selectedFormat.set($T08().Color);
    selectedDepthFormat.set(depthFormat);
    selectedMultiSampleCount.set(0);
    return (!((format !== selectedFormat.get()) || 
        (depthFormat !== selectedDepthFormat.get())) && ((multiSampleCount | 0) === (selectedMultiSampleCount.get() | 0)));
  };

  function GraphicsAdapter_QueryRenderTargetFormat (graphicsProfile, format, depthFormat, multiSampleCount, /* ref */ selectedFormat, /* ref */ selectedDepthFormat, /* ref */ selectedMultiSampleCount) {
    throw $S01().Construct();
  };

  function GraphicsAdapter_set_UseNullDevice (value) {
    this.GraphicsAdapter$UseNullDevice$value = value;
  };

  function GraphicsAdapter_set_UseReferenceDevice (value) {
    this.GraphicsAdapter$UseReferenceDevice$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.GraphicsAdapter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      GraphicsAdapter__ctor
    );

    $.Method({Static:true , Public:true }, "get_Adapters", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])), 
      GraphicsAdapter_get_Adapters
    );

    $.Method({Static:false, Public:true }, "get_CurrentDisplayMode", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode")), 
      GraphicsAdapter_get_CurrentDisplayMode
    );

    $.Method({Static:true , Public:true }, "get_DefaultAdapter", 
      JSIL.MethodSignature.Return($.Type), 
      GraphicsAdapter_get_DefaultAdapter
    );

    $.Method({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String), 
      GraphicsAdapter_get_Description
    );

    $.Method({Static:false, Public:true }, "get_DeviceId", 
      JSIL.MethodSignature.Return($.Int32), 
      GraphicsAdapter_get_DeviceId
    );

    $.Method({Static:false, Public:true }, "get_DeviceName", 
      JSIL.MethodSignature.Return($.String), 
      GraphicsAdapter_get_DeviceName
    );

    $.Method({Static:false, Public:true }, "get_IsDefaultAdapter", 
      JSIL.MethodSignature.Return($.Boolean), 
      GraphicsAdapter_get_IsDefaultAdapter
    );

    $.Method({Static:false, Public:true }, "get_IsWideScreen", 
      JSIL.MethodSignature.Return($.Boolean), 
      GraphicsAdapter_get_IsWideScreen
    );

    $.Method({Static:false, Public:true }, "get_MonitorHandle", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      GraphicsAdapter_get_MonitorHandle
    );

    $.Method({Static:false, Public:true }, "get_Revision", 
      JSIL.MethodSignature.Return($.Int32), 
      GraphicsAdapter_get_Revision
    );

    $.Method({Static:false, Public:true }, "get_SubSystemId", 
      JSIL.MethodSignature.Return($.Int32), 
      GraphicsAdapter_get_SubSystemId
    );

    $.Method({Static:false, Public:true }, "get_SupportedDisplayModes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayModeCollection")), 
      GraphicsAdapter_get_SupportedDisplayModes
    );

    $.Method({Static:false, Public:true }, "get_UseNullDevice", 
      JSIL.MethodSignature.Return($.Boolean), 
      GraphicsAdapter_get_UseNullDevice
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_UseReferenceDevice", 
      JSIL.MethodSignature.Return($.Boolean), 
      GraphicsAdapter_get_UseReferenceDevice
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_VendorId", 
      JSIL.MethodSignature.Return($.Int32), 
      GraphicsAdapter_get_VendorId
    );

    $.Method({Static:false, Public:true }, "IsProfileSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile")]), 
      GraphicsAdapter_IsProfileSupported
    );

    $.Method({Static:false, Public:true }, "QueryBackBufferFormat", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      GraphicsAdapter_QueryBackBufferFormat
    );

    $.Method({Static:false, Public:true }, "QueryRenderTargetFormat", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      GraphicsAdapter_QueryRenderTargetFormat
    );

    $.Method({Static:false, Public:true }, "set_UseNullDevice", 
      JSIL.MethodSignature.Action($.Boolean), 
      GraphicsAdapter_set_UseNullDevice
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_UseReferenceDevice", 
      JSIL.MethodSignature.Action($.Boolean), 
      GraphicsAdapter_set_UseReferenceDevice
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "adapters", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])); 
    $.Field({Static:false, Public:false}, "GraphicsAdapter$UseNullDevice$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsAdapter$UseReferenceDevice$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "CurrentDisplayMode", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode"));

    $.Property({Static:false, Public:true }, "SupportedDisplayModes", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayModeCollection"));

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "DeviceId", $.Int32);

    $.Property({Static:false, Public:true }, "DeviceName", $.String);

    $.Property({Static:false, Public:true }, "IsDefaultAdapter", $.Boolean);

    $.Property({Static:false, Public:true }, "IsWideScreen", $.Boolean);

    $.Property({Static:false, Public:true }, "MonitorHandle", $asm01.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "Revision", $.Int32);

    $.Property({Static:false, Public:true }, "SubSystemId", $.Int32);

    $.Property({Static:false, Public:true }, "UseNullDevice", $.Boolean);

    $.Property({Static:false, Public:true }, "UseReferenceDevice", $.Boolean);

    $.Property({Static:false, Public:true }, "VendorId", $.Int32);

    $.Property({Static:true , Public:true }, "DefaultAdapter", $.Type);

    $.Property({Static:true , Public:true }, "Adapters", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.GraphicsDevice */ 

(function GraphicsDevice$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Action))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandle)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandleType)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsAdapter)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsProfile)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PresentationParameters)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm03.System.Collections.Generic.Queue$b1.Of($asm01.System.Int32))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RenderTargetBinding)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBufferBinding)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ShaderProgramCache)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ConstantBufferCollection)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ShaderStage)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthStencilState)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureCollection)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SamplerStateCollection)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ShaderProgram)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Threading)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ClearOptions)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm01.System.GC)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PrimitiveType)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexElementSize)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexDeclaration)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize(System.Array.Of($asm01.System.Int16))) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLVertexBuffer)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLIndexBuffer)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DisplayMode)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_FauxBackbuffer)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.RenderTargetBinding))) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.VertexBufferBinding))) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Shader)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ConstantBuffer)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RenderTarget2D)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RenderTargetCube)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CubeMapFace)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthFormat)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RenderTargetUsage)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize(System.Array.Of($asm01.System.UInt32))) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLTexture)) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IRenderTarget)) ();
  };
  var $T50 = function () {
    return ($T50 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T51 = function () {
    return ($T51 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Action")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Color"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm03.TypeRef("System.Collections.Generic.Queue`1", [$asm01.TypeRef("System.Int32")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport"), [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ClearOptions"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int16")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")
      ], ["T"]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int64")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Int32")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")
      ], ["T"]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")
      ], ["T"]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Array"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetBinding"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTarget2D")]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetBinding"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetCube"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace")]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBufferBinding"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer"), $asm01.TypeRef("System.Int32")]))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IRenderTarget.get_DepthStencilBuffer)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IRenderTarget.get_DepthStencilFormat)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IRenderTarget.get_Width)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IRenderTarget.get_Height)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IRenderTarget.get_RenderTargetUsage)) ();
  };

  function GraphicsDevice__ctor (adapter, graphicsProfile, presentationParameters) {
    this.ModifiedSamplers = $S02().Construct();
    this.renderTargetBindings = JSIL.Array.New($T0A(), 4);
    this.vertexBufferBindings = JSIL.Array.New($T0B(), 16);
    this.vertexBufferCount = 0;
    this.programCache = new ($T0C())();
    this.vertexConstantBuffers = new ($T0D())($T0E().Vertex, 16);
    this.pixelConstantBuffers = new ($T0D())($T0E().Pixel, 16);
    if (presentationParameters === null) {
      throw $S03().Construct("presentationParameters");
    }
    this.GraphicsDevice$Adapter$value = adapter;
    this.GraphicsDevice$PresentationParameters$value = presentationParameters;
    this.GraphicsDevice$GraphicsProfile$value = graphicsProfile;
    this.GraphicsDevice$GLDevice$value = new ($T10())(this.GraphicsDevice$PresentationParameters$value);
    this.set_BlendState($T11().Opaque);
    this.set_DepthStencilState($T12().Default);
    this.GraphicsDevice$RasterizerState$value = $T13().CullCounterClockwise;
    this.GraphicsDevice$Textures$value = new ($T14())(this);
    this.GraphicsDevice$SamplerStates$value = new ($T15())(this);
    (this.vertexConstantBuffers).Clear();
    (this.pixelConstantBuffers).Clear();
    this.vertexShaderDirty = true;
    this.pixelShaderDirty = true;
    (this.Viewport = $S04().Construct((this.GraphicsDevice$PresentationParameters$value).get_Bounds()));
    (this.ScissorRectangle = (this.get_Viewport()).get_Bounds().MemberwiseClone());
    (this.programCache).Clear();
    this.shaderProgram = null;
  };

  function GraphicsDevice_ActivateShaderProgram () {
    var program = (this.programCache).GetProgram(
      this.get_VertexShader(), 
      this.get_PixelShader()
    );
    if ((program.Program >>> 0) !== 0) {
      if (this.shaderProgram !== program) {
        this.GraphicsDevice$GLDevice$value.glUseProgram(program.Program);
        this.shaderProgram = program;
      }
      var posFixupLoc = ((this.shaderProgram).GetUniformLocation("posFixup") | 0);
      if (posFixupLoc !== -1) {
        $thisType.posFixup[0] = 1;
        $thisType.posFixup[1] = 1;
        $thisType.posFixup[2] = +((0.984375 / +((this.get_Viewport()).get_Width())));
        $thisType.posFixup[3] = +((-0.984375 / +((this.get_Viewport()).get_Height())));
        if ((this.GraphicsDevice$RenderTargetCount$value | 0) > 0) {
          $thisType.posFixup[1] *= -1;
          $thisType.posFixup[3] *= -1;
        }
        this.GraphicsDevice$GLDevice$value.glUniform4fv(posFixupLoc, 1, $thisType.posFixupPtr.MemberwiseClone());
      }
    }
  };

  function GraphicsDevice_add_DeviceLost (value) {
    var eventHandler = this.DeviceLost;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Combine(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T19())(/* ref */ new JSIL.MemberReference(this, "DeviceLost"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_add_DeviceReset (value) {
    var eventHandler = this.DeviceReset;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Combine(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T19())(/* ref */ new JSIL.MemberReference(this, "DeviceReset"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_add_DeviceResetting (value) {
    var eventHandler = this.DeviceResetting;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Combine(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T19())(/* ref */ new JSIL.MemberReference(this, "DeviceResetting"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_add_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Combine(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T19())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_add_ResourceCreated (value) {
    var eventHandler = this.ResourceCreated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Combine(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T1C())(/* ref */ new JSIL.MemberReference(this, "ResourceCreated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_add_ResourceDestroyed (value) {
    var eventHandler = this.ResourceDestroyed;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Combine(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T1D())(/* ref */ new JSIL.MemberReference(this, "ResourceDestroyed"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_AddDisposeAction (disposeAction) {
    var obj = null;
    if (disposeAction === null) {
      throw $S03().Construct("disposeAction");
    }
    var flag = new JSIL.BoxedVariable(false);
    if ($T20().IsOnMainThread()) {
      disposeAction();
    } else {
      flag.set(false);
      try {
        $T21().Enter(obj = $thisType.disposeActionsLock, /* ref */ flag);
        $thisType.disposeActions.Add(disposeAction);
      } finally {
        if (flag.get()) {
          $T21().Exit(obj);
        }
      }
    }
  };

  function GraphicsDevice_ApplyState () {
    (this.GraphicsDevice$GLDevice$value).ApplyRasterizerState(this.GraphicsDevice$RasterizerState$value, (this.GraphicsDevice$RenderTargetCount$value | 0) > 0);

    while (((this.ModifiedSamplers).get_Count() | 0) > 0) {
      var sampler = ($T09().prototype.Dequeue.call(this.ModifiedSamplers) | 0);
      (this.GraphicsDevice$GLDevice$value).VerifySampler(
        sampler, 
        (this.GraphicsDevice$Textures$value).get_Item(sampler), 
        (this.GraphicsDevice$SamplerStates$value).get_Item(sampler)
      );
    }
    if (this.get_VertexShader() === null) {
      throw $S05().Construct("A vertex shader must be set!");
    }
    if (this.get_PixelShader() === null) {
      throw $S05().Construct("A pixel shader must be set!");
    }
    if (!(!this.vertexShaderDirty && !this.pixelShaderDirty)) {
      this.ActivateShaderProgram();
      this.vertexShaderDirty = this.pixelShaderDirty = false;
    }
    (this.vertexConstantBuffers).SetConstantBuffers(this, this.shaderProgram);
    (this.pixelConstantBuffers).SetConstantBuffers(this, this.shaderProgram);
  };

  function GraphicsDevice_Clear$00 (color) {
    $S06().CallVirtual("Clear", null, this, 
      $T23().$Flags("DepthBuffer", "Stencil", "Target"), 
      color.ToVector4().MemberwiseClone(), 
      (this.get_Viewport()).get_MaxDepth(), 
      0
    );
  };

  function GraphicsDevice_Clear$01 (options, color, depth, stencil) {
    $S06().CallVirtual("Clear", null, this, options, color.ToVector4().MemberwiseClone(), depth, stencil);
  };

  function GraphicsDevice_Clear$02 (options, color, depth, stencil) {
    (this.GraphicsDevice$GLDevice$value).Clear(options, color.MemberwiseClone(), depth, stencil);
  };

  function GraphicsDevice_Dispose$03 () {
    this.Dispose(true);
    $T25().SuppressFinalize(this);
  };

  function GraphicsDevice_Dispose$04 (disposing) {
    if (!this.GraphicsDevice$IsDisposed$value) {
      if (disposing) {
        if (this.Disposing !== null) {
          this.Disposing(this, $T26().Empty);
        }
        $T27().DisposeAll();
        (this.programCache).Dispose();
        (this.GraphicsDevice$GLDevice$value).Dispose();
      }
      this.GraphicsDevice$IsDisposed$value = true;
    }
  };

  function GraphicsDevice_DrawIndexedPrimitives (primitiveType, baseVertex, minVertexIndex, numVertices, startIndex, primitiveCount) {
    this.ApplyState();
    var shortIndices = this.GraphicsDevice$Indices$value.IndexBuffer$IndexElementSize$value === $T2A().SixteenBits;

    for (var i = 0; i < (this.vertexBufferCount | 0); i = ((i + 1) | 0)) {
      (this.GraphicsDevice$GLDevice$value).BindVertexBuffer((this.vertexBufferBindings[i]).get_VertexBuffer().VertexBuffer$Handle$value);
      ((this.vertexBufferBindings[i]).get_VertexBuffer().VertexBuffer$VertexDeclaration$value).Apply(
        this.get_VertexShader(), 
        $S07().CallStatic($T2D(), "op_Explicit", null, Math.imul((this.vertexBufferBindings[i]).get_VertexBuffer().VertexBuffer$VertexDeclaration$value.VertexDeclaration$VertexStride$value, ((((this.vertexBufferBindings[i]).get_VertexOffset() | 0) + (baseVertex | 0)) | 0))).MemberwiseClone(), 
        0
      );
    }
    (this.GraphicsDevice$GLDevice$value).FlushGLVertexAttributes();
    (this.GraphicsDevice$GLDevice$value).BindIndexBuffer(this.GraphicsDevice$Indices$value.IndexBuffer$Handle$value);
    this.GraphicsDevice$GLDevice$value.glDrawRangeElements(
      $thisType.PrimitiveTypeGL(primitiveType), 
      minVertexIndex, 
      (((((minVertexIndex | 0) + (numVertices | 0)) | 0) - 1) | 0), 
      $thisType.GetElementCountArray(primitiveType, primitiveCount), 
      (
        shortIndices
           ? $T2E().GL_UNSIGNED_SHORT
           : $T2E().GL_UNSIGNED_INT)
      , 
      $S07().CallStatic($T2D(), "op_Explicit", null, Math.imul(startIndex, (
            shortIndices
               ? 2
               : 4)
        )).MemberwiseClone()
    );
  };

  function GraphicsDevice_DrawInstancedPrimitives (primitiveType, baseVertex, minVertexIndex, numVertices, startIndex, primitiveCount, instanceCount) {
    if (!this.GraphicsDevice$GLDevice$value.OpenGLDevice$SupportsHardwareInstancing$value) {
      throw $S08().Construct("Your hardware does not support hardware instancing!");
    }
    this.ApplyState();
    var shortIndices = this.GraphicsDevice$Indices$value.IndexBuffer$IndexElementSize$value === $T2A().SixteenBits;

    for (var i = 0; i < (this.vertexBufferCount | 0); i = ((i + 1) | 0)) {
      (this.GraphicsDevice$GLDevice$value).BindVertexBuffer((this.vertexBufferBindings[i]).get_VertexBuffer().VertexBuffer$Handle$value);
      ((this.vertexBufferBindings[i]).get_VertexBuffer().VertexBuffer$VertexDeclaration$value).Apply(
        this.get_VertexShader(), 
        $S07().CallStatic($T2D(), "op_Explicit", null, Math.imul((this.vertexBufferBindings[i]).get_VertexBuffer().VertexBuffer$VertexDeclaration$value.VertexDeclaration$VertexStride$value, ((((this.vertexBufferBindings[i]).get_VertexOffset() | 0) + (baseVertex | 0)) | 0))).MemberwiseClone(), 
        (this.vertexBufferBindings[i]).get_InstanceFrequency()
      );
    }
    (this.GraphicsDevice$GLDevice$value).FlushGLVertexAttributes();
    (this.GraphicsDevice$GLDevice$value).BindIndexBuffer(this.GraphicsDevice$Indices$value.IndexBuffer$Handle$value);
    this.GraphicsDevice$GLDevice$value.glDrawElementsInstanced(
      $thisType.PrimitiveTypeGL(primitiveType), 
      $thisType.GetElementCountArray(primitiveType, primitiveCount), 
      (
        shortIndices
           ? $T2E().GL_UNSIGNED_SHORT
           : $T2E().GL_UNSIGNED_INT)
      , 
      $S07().CallStatic($T2D(), "op_Explicit", null, Math.imul(startIndex, (
            shortIndices
               ? 2
               : 4)
        )).MemberwiseClone(), 
      instanceCount
    );
  };

  function GraphicsDevice_DrawPrimitives (primitiveType, vertexStart, primitiveCount) {
    this.ApplyState();

    for (var i = 0; i < (this.vertexBufferCount | 0); i = ((i + 1) | 0)) {
      (this.GraphicsDevice$GLDevice$value).BindVertexBuffer((this.vertexBufferBindings[i]).get_VertexBuffer().VertexBuffer$Handle$value);
      ((this.vertexBufferBindings[i]).get_VertexBuffer().VertexBuffer$VertexDeclaration$value).Apply(
        this.get_VertexShader(), 
        $S07().CallStatic($T2D(), "op_Explicit", null, Math.imul((this.vertexBufferBindings[i]).get_VertexBuffer().VertexBuffer$VertexDeclaration$value.VertexDeclaration$VertexStride$value, (this.vertexBufferBindings[i]).get_VertexOffset())).MemberwiseClone(), 
        0
      );
    }
    (this.GraphicsDevice$GLDevice$value).FlushGLVertexAttributes();
    this.GraphicsDevice$GLDevice$value.glDrawArrays(
      $thisType.PrimitiveTypeGL(primitiveType), 
      vertexStart, 
      $thisType.GetElementCountArray(primitiveType, primitiveCount)
    );
  };

  function GraphicsDevice_DrawUserIndexedPrimitives$b1$05 (T, primitiveType, vertexData, vertexOffset, numVertices, indexData, indexOffset, primitiveCount) {
    $S09().CallVirtual("DrawUserIndexedPrimitives$b1", [T], this, 
      primitiveType, 
      vertexData, 
      vertexOffset, 
      numVertices, 
      indexData, 
      indexOffset, 
      primitiveCount, 
      $asm00.Microsoft.Xna.Framework.Graphics.VertexDeclarationCache$b1.Of(T).get_VertexDeclaration()
    );
  };

  function GraphicsDevice_DrawUserIndexedPrimitives$b1$06 (T, primitiveType, vertexData, vertexOffset, numVertices, indexData, indexOffset, primitiveCount, vertexDeclaration) {
    this.ApplyState();
    (this.GraphicsDevice$GLDevice$value).BindVertexBuffer($T32().NullBuffer);
    (this.GraphicsDevice$GLDevice$value).BindIndexBuffer($T33().NullBuffer);
    var vbHandle = $T04().Alloc(vertexData, $T05().Pinned).MemberwiseClone();
    var ibHandle = $T04().Alloc(indexData, $T05().Pinned).MemberwiseClone();
    vertexDeclaration.GraphicsResource$GraphicsDevice$value = this;
    vertexDeclaration.Apply(
      this.get_VertexShader(), 
      $S0A().CallStatic($T2D(), "op_Explicit", null, $T34().op_Addition(
          (vbHandle.AddrOfPinnedObject().MemberwiseClone()).ToInt64(), 
          $T34().FromNumber(Math.imul(vertexDeclaration.VertexDeclaration$VertexStride$value, vertexOffset))
        )).MemberwiseClone(), 
      0
    );
    (this.GraphicsDevice$GLDevice$value).FlushGLVertexAttributes();
    this.GraphicsDevice$GLDevice$value.glDrawRangeElements(
      $thisType.PrimitiveTypeGL(primitiveType), 
      0, 
      (((numVertices | 0) - 1) | 0), 
      $thisType.GetElementCountArray(primitiveType, primitiveCount), 
      $T2E().GL_UNSIGNED_SHORT, 
      $S0A().CallStatic($T2D(), "op_Explicit", null, $T34().op_Addition(
          (ibHandle.AddrOfPinnedObject().MemberwiseClone()).ToInt64(), 
          $T34().FromNumber(Math.imul(indexOffset, 2))
        )).MemberwiseClone()
    );
    ibHandle.Free();
    vbHandle.Free();
  };

  function GraphicsDevice_DrawUserIndexedPrimitives$b1$07 (T, primitiveType, vertexData, vertexOffset, numVertices, indexData, indexOffset, primitiveCount) {
    $S0B().CallVirtual("DrawUserIndexedPrimitives$b1", [T], this, 
      primitiveType, 
      vertexData, 
      vertexOffset, 
      numVertices, 
      indexData, 
      indexOffset, 
      primitiveCount, 
      $asm00.Microsoft.Xna.Framework.Graphics.VertexDeclarationCache$b1.Of(T).get_VertexDeclaration()
    );
  };

  function GraphicsDevice_DrawUserIndexedPrimitives$b1$08 (T, primitiveType, vertexData, vertexOffset, numVertices, indexData, indexOffset, primitiveCount, vertexDeclaration) {
    this.ApplyState();
    (this.GraphicsDevice$GLDevice$value).BindVertexBuffer($T32().NullBuffer);
    (this.GraphicsDevice$GLDevice$value).BindIndexBuffer($T33().NullBuffer);
    var vbHandle = $T04().Alloc(vertexData, $T05().Pinned).MemberwiseClone();
    var ibHandle = $T04().Alloc(indexData, $T05().Pinned).MemberwiseClone();
    vertexDeclaration.GraphicsResource$GraphicsDevice$value = this;
    vertexDeclaration.Apply(
      this.get_VertexShader(), 
      $S0A().CallStatic($T2D(), "op_Explicit", null, $T34().op_Addition(
          (vbHandle.AddrOfPinnedObject().MemberwiseClone()).ToInt64(), 
          $T34().FromNumber(Math.imul(vertexDeclaration.VertexDeclaration$VertexStride$value, vertexOffset))
        )).MemberwiseClone(), 
      0
    );
    (this.GraphicsDevice$GLDevice$value).FlushGLVertexAttributes();
    this.GraphicsDevice$GLDevice$value.glDrawRangeElements(
      $thisType.PrimitiveTypeGL(primitiveType), 
      0, 
      (((numVertices | 0) - 1) | 0), 
      $thisType.GetElementCountArray(primitiveType, primitiveCount), 
      $T2E().GL_UNSIGNED_INT, 
      $S0A().CallStatic($T2D(), "op_Explicit", null, $T34().op_Addition(
          (ibHandle.AddrOfPinnedObject().MemberwiseClone()).ToInt64(), 
          $T34().FromNumber(Math.imul(indexOffset, 4))
        )).MemberwiseClone()
    );
    ibHandle.Free();
    vbHandle.Free();
  };

  function GraphicsDevice_DrawUserPrimitives$b1$09 (T, primitiveType, vertexData, vertexOffset, primitiveCount) {
    $S0C().CallVirtual("DrawUserPrimitives$b1", [T], this, 
      primitiveType, 
      vertexData, 
      vertexOffset, 
      primitiveCount, 
      $asm00.Microsoft.Xna.Framework.Graphics.VertexDeclarationCache$b1.Of(T).get_VertexDeclaration()
    );
  };

  function GraphicsDevice_DrawUserPrimitives$b1$0A (T, primitiveType, vertexData, vertexOffset, primitiveCount, vertexDeclaration) {
    this.ApplyState();
    (this.GraphicsDevice$GLDevice$value).BindVertexBuffer($T32().NullBuffer);
    var vbHandle = $T04().Alloc(vertexData, $T05().Pinned).MemberwiseClone();
    vertexDeclaration.GraphicsResource$GraphicsDevice$value = this;
    vertexDeclaration.Apply(
      this.get_VertexShader(), 
      vbHandle.AddrOfPinnedObject().MemberwiseClone(), 
      0
    );
    (this.GraphicsDevice$GLDevice$value).FlushGLVertexAttributes();
    this.GraphicsDevice$GLDevice$value.glDrawArrays(
      $thisType.PrimitiveTypeGL(primitiveType), 
      vertexOffset, 
      $thisType.GetElementCountArray(primitiveType, primitiveCount)
    );
    vbHandle.Free();
  };

  function GraphicsDevice_Finalize () {
    try {
      this.Dispose(false);
    } finally {
      $T01().prototype.Finalize.call(this);
    }
  };

  function GraphicsDevice_get_Adapter () {
    return this.GraphicsDevice$Adapter$value;
  };

  function GraphicsDevice_get_BlendState () {
    return this.INTERNAL_blendState;
  };

  function GraphicsDevice_get_DepthStencilState () {
    return this.INTERNAL_depthStencilState;
  };

  function GraphicsDevice_get_DisplayMode () {
    if (this.GraphicsDevice$PresentationParameters$value.PresentationParameters$IsFullScreen$value) {
      var result = new ($T36())(this.GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Width$value, this.GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Height$value, $T38().Color);
    } else {
      result = (this.GraphicsDevice$Adapter$value).get_CurrentDisplayMode();
    }
    return result;
  };

  function GraphicsDevice_get_GLDevice () {
    return this.GraphicsDevice$GLDevice$value;
  };

  function GraphicsDevice_get_GraphicsDeviceStatus () {
    return $T39().Normal;
  };

  function GraphicsDevice_get_GraphicsProfile () {
    return this.GraphicsDevice$GraphicsProfile$value;
  };

  function GraphicsDevice_get_Indices () {
    return this.GraphicsDevice$Indices$value;
  };

  function GraphicsDevice_get_IsDisposed () {
    return this.GraphicsDevice$IsDisposed$value;
  };

  function GraphicsDevice_get_PixelShader () {
    return this.INTERNAL_pixelShader;
  };

  function GraphicsDevice_get_PresentationParameters () {
    return this.GraphicsDevice$PresentationParameters$value;
  };

  function GraphicsDevice_get_RasterizerState () {
    return this.GraphicsDevice$RasterizerState$value;
  };

  function GraphicsDevice_get_ReferenceStencil () {
    return (this.GraphicsDevice$GLDevice$value).get_ReferenceStencil();
  };

  function GraphicsDevice_get_RenderTargetCount () {
    return this.GraphicsDevice$RenderTargetCount$value;
  };

  function GraphicsDevice_get_SamplerStates () {
    return this.GraphicsDevice$SamplerStates$value;
  };

  function GraphicsDevice_get_ScissorRectangle () {
    return this.INTERNAL_scissorRectangle;
  };

  function GraphicsDevice_get_Textures () {
    return this.GraphicsDevice$Textures$value;
  };

  function GraphicsDevice_get_VertexShader () {
    return this.INTERNAL_vertexShader;
  };

  function GraphicsDevice_get_Viewport () {
    return this.INTERNAL_viewport;
  };

  function GraphicsDevice_GetBackBufferData$b1 (T, data) {
    var prevReadBuffer = ((this.GraphicsDevice$GLDevice$value).get_CurrentReadFramebuffer() >>> 0);
    (this.GraphicsDevice$GLDevice$value).BindReadFramebuffer(this.GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Handle$value);
    var ptr = $T04().Alloc(data, $T05().Pinned).MemberwiseClone();
    try {
      this.GraphicsDevice$GLDevice$value.glReadPixels(
        0, 
        0, 
        this.GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Width$value, 
        this.GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Height$value, 
        $T2E().GL_RGBA, 
        $T2E().GL_UNSIGNED_BYTE, 
        ptr.AddrOfPinnedObject().MemberwiseClone()
      );
    } finally {
      ptr.Free();
    }
    (this.GraphicsDevice$GLDevice$value).BindReadFramebuffer(prevReadBuffer);
    var width = (this.GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Width$value | 0);
    var height = (this.GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Height$value | 0);
    var pitch = ((Math.imul(width, 4) / ($S0D().CallStatic($T3B(), "SizeOf", null, T) | 0)) | 0);
    var tempRow = JSIL.Array.New(T, pitch);

    for (var row = 0; row < ((height / 2) | 0); row = ((row + 1) | 0)) {
      $S0E().CallStatic($T3C(), "Copy", null, 
        data, 
        Math.imul(row, pitch), 
        tempRow, 
        0, 
        pitch
      );
      $S0E().CallStatic($T3C(), "Copy", null, 
        data, 
        Math.imul(((((height - row) | 0) - 1) | 0), pitch), 
        data, 
        Math.imul(row, pitch), 
        pitch
      );
      $S0E().CallStatic($T3C(), "Copy", null, 
        tempRow, 
        0, 
        data, 
        Math.imul(((((height - row) | 0) - 1) | 0), pitch), 
        pitch
      );
    }
  };

  function GraphicsDevice_GetElementCountArray (primitiveType, primitiveCount) {
    switch (primitiveType.valueOf()) {
      case 0: 
        var result = Math.imul(primitiveCount, 3);
        break;

      case 1: 
        result = ((3 + (((primitiveCount | 0) - 1) | 0)) | 0);
        break;

      case 2: 
        result = Math.imul(primitiveCount, 2);
        break;

      case 3: 
        result = (((primitiveCount | 0) + 1) | 0);
        break;

      default: 
        throw $S0F().Construct();

    }
    return result;
  };

  function GraphicsDevice_GetRenderTargets () {
    var bindings = JSIL.Array.New($T0A(), this.GraphicsDevice$RenderTargetCount$value);
    $S10().CallStatic($T3C(), "Copy", null, this.renderTargetBindings, bindings, this.GraphicsDevice$RenderTargetCount$value);
    return bindings;
  };

  function GraphicsDevice_GetVertexBuffers () {
    var result = JSIL.Array.New($T0B(), this.vertexBufferCount);
    $S10().CallStatic($T3C(), "Copy", null, this.vertexBufferBindings, result, this.vertexBufferCount);
    return result;
  };

  function GraphicsDevice_OnResourceCreated () {
    if (this.ResourceCreated !== null) {
      this.ResourceCreated(this, $T40().$Cast($T26().Empty));
    }
  };

  function GraphicsDevice_OnResourceDestroyed () {
    if (this.ResourceDestroyed !== null) {
      this.ResourceDestroyed(this, $T41().$Cast($T26().Empty));
    }
  };

  function GraphicsDevice_Present () {
    var $temp00;
    var obj = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T21().Enter(obj = $thisType.disposeActionsLock, /* ref */ flag);
      if (($thisType.disposeActions.get_Count() | 0) > 0) {

        for (var a$0 = $thisType.disposeActions._items, i$0 = 0, l$0 = ($thisType.disposeActions._size | 0); i$0 < l$0; ($temp00 = i$0, 
            i$0 = ((i$0 + 1) | 0), 
            $temp00)) {
          var action = a$0[i$0];
          action();
        }
        $thisType.disposeActions.Clear();
      }
    } finally {
      if (flag.get()) {
        $T21().Exit(obj);
      }
    }
    (this.GraphicsDevice$GLDevice$value).SwapBuffers(this.GraphicsDevice$PresentationParameters$value.PresentationParameters$DeviceWindowHandle$value.MemberwiseClone());
  };

  function GraphicsDevice_PrimitiveTypeGL (primitiveType) {
    switch (primitiveType.valueOf()) {
      case 0: 
        var result = $T2E().GL_TRIANGLES;
        break;

      case 1: 
        result = $T2E().GL_TRIANGLE_STRIP;
        break;

      case 2: 
        result = $T2E().GL_LINES;
        break;

      case 3: 
        result = $T2E().GL_LINE_STRIP;
        break;

      default: 
        throw $S11().Construct("Should be a value defined in PrimitiveType", "primitiveType");

    }
    return result;
  };

  function GraphicsDevice_remove_DeviceLost (value) {
    var eventHandler = this.DeviceLost;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Remove(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T19())(/* ref */ new JSIL.MemberReference(this, "DeviceLost"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_remove_DeviceReset (value) {
    var eventHandler = this.DeviceReset;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Remove(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T19())(/* ref */ new JSIL.MemberReference(this, "DeviceReset"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_remove_DeviceResetting (value) {
    var eventHandler = this.DeviceResetting;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Remove(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T19())(/* ref */ new JSIL.MemberReference(this, "DeviceResetting"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_remove_Disposing (value) {
    var eventHandler = this.Disposing;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Remove(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T19())(/* ref */ new JSIL.MemberReference(this, "Disposing"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_remove_ResourceCreated (value) {
    var eventHandler = this.ResourceCreated;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Remove(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T1C())(/* ref */ new JSIL.MemberReference(this, "ResourceCreated"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_remove_ResourceDestroyed (value) {
    var eventHandler = this.ResourceDestroyed;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T1A().Remove(eventHandler2, value);
      eventHandler = $T1B().CompareExchange$b1($T1D())(/* ref */ new JSIL.MemberReference(this, "ResourceDestroyed"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GraphicsDevice_Reset$0B () {
    this.Reset(this.GraphicsDevice$PresentationParameters$value, this.GraphicsDevice$Adapter$value);
  };

  function GraphicsDevice_Reset$0C (presentationParameters) {
    this.Reset(presentationParameters, this.GraphicsDevice$Adapter$value);
  };

  function GraphicsDevice_Reset$0D (presentationParameters, graphicsAdapter) {
    if (presentationParameters === null) {
      throw $S03().Construct("presentationParameters");
    }
    if (this.DeviceResetting !== null) {
      this.DeviceResetting(this, $T26().Empty);
    }
    this.GraphicsDevice$PresentationParameters$value = presentationParameters;
    (this.GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value).ResetFramebuffer(this, this.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferWidth$value, this.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferHeight$value, this.GraphicsDevice$PresentationParameters$value.PresentationParameters$DepthStencilFormat$value);
    (this.Viewport = $S12().Construct(0, 0, this.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferWidth$value, this.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferHeight$value));
    (this.ScissorRectangle = new ($T43())(0, 0, this.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferWidth$value, this.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferHeight$value));
    this.GraphicsDevice$Adapter$value = graphicsAdapter;
    if (this.DeviceReset !== null) {
      this.DeviceReset(this, $T26().Empty);
    }
  };

  function GraphicsDevice_set_Adapter (value) {
    this.GraphicsDevice$Adapter$value = value;
  };

  function GraphicsDevice_set_BlendState (value) {
    if (value !== this.INTERNAL_blendState) {
      (this.GraphicsDevice$GLDevice$value).SetBlendState(value);
      this.INTERNAL_blendState = value;
    }
  };

  function GraphicsDevice_set_DepthStencilState (value) {
    if (value !== this.INTERNAL_depthStencilState) {
      (this.GraphicsDevice$GLDevice$value).SetDepthStencilState(value);
      this.INTERNAL_depthStencilState = value;
    }
  };

  function GraphicsDevice_set_GLDevice (value) {
    this.GraphicsDevice$GLDevice$value = value;
  };

  function GraphicsDevice_set_GraphicsProfile (value) {
    this.GraphicsDevice$GraphicsProfile$value = value;
  };

  function GraphicsDevice_set_Indices (value) {
    this.GraphicsDevice$Indices$value = value;
  };

  function GraphicsDevice_set_IsDisposed (value) {
    this.GraphicsDevice$IsDisposed$value = value;
  };

  function GraphicsDevice_set_PixelShader (value) {
    if (value !== this.INTERNAL_pixelShader) {
      this.INTERNAL_pixelShader = value;
      this.pixelShaderDirty = true;
    }
  };

  function GraphicsDevice_set_PresentationParameters (value) {
    this.GraphicsDevice$PresentationParameters$value = value;
  };

  function GraphicsDevice_set_RasterizerState (value) {
    this.GraphicsDevice$RasterizerState$value = value;
  };

  function GraphicsDevice_set_ReferenceStencil (value) {
    (this.GraphicsDevice$GLDevice$value).set_ReferenceStencil(value);
  };

  function GraphicsDevice_set_RenderTargetCount (value) {
    this.GraphicsDevice$RenderTargetCount$value = (value | 0);
  };

  function GraphicsDevice_set_SamplerStates (value) {
    this.GraphicsDevice$SamplerStates$value = value;
  };

  function GraphicsDevice_set_ScissorRectangle (value) {
    this.INTERNAL_scissorRectangle = value.MemberwiseClone();
    (this.GraphicsDevice$GLDevice$value).SetScissorRect(value.MemberwiseClone(), (this.GraphicsDevice$RenderTargetCount$value | 0) > 0);
  };

  function GraphicsDevice_set_Textures (value) {
    this.GraphicsDevice$Textures$value = value;
  };

  function GraphicsDevice_set_VertexShader (value) {
    if (value !== this.INTERNAL_vertexShader) {
      this.INTERNAL_vertexShader = value;
      this.vertexShaderDirty = true;
    }
  };

  function GraphicsDevice_set_Viewport (value) {
    this.INTERNAL_viewport = value.MemberwiseClone();
    (this.GraphicsDevice$GLDevice$value).SetViewport(value.MemberwiseClone(), (this.GraphicsDevice$RenderTargetCount$value | 0) > 0);
    this.vertexShaderDirty = true;
  };

  function GraphicsDevice_SetConstantBuffer (stage, slot, buffer) {
    if (stage === $T0E().Vertex) {
      (this.vertexConstantBuffers).set_Item(slot, buffer);
    } else {
      (this.pixelConstantBuffers).set_Item(slot, buffer);
    }
  };

  function GraphicsDevice_SetRenderTarget$0E (renderTarget) {
    if (renderTarget === null) {
      this.SetRenderTargets(null);
    } else {
      this.SetRenderTargets(JSIL.Array.New($T0A(), [$S13().Construct(renderTarget)]));
    }
  };

  function GraphicsDevice_SetRenderTarget$0F (renderTarget, cubeMapFace) {
    if (renderTarget === null) {
      this.SetRenderTargets(null);
    } else {
      this.SetRenderTargets(JSIL.Array.New($T0A(), [$S14().Construct(renderTarget, cubeMapFace)]));
    }
  };

  function GraphicsDevice_SetRenderTargets (renderTargets) {
    if ((renderTargets !== null) || ((this.GraphicsDevice$RenderTargetCount$value | 0) !== 0)) {
      if (!((renderTargets === null) || ((renderTargets.length | 0) !== (this.GraphicsDevice$RenderTargetCount$value | 0)))) {
        var isRedundant = true;

        for (var i = 0; i < (renderTargets.length | 0); i = ((i + 1) | 0)) {
          if (!(((renderTargets[i]).get_RenderTarget() === (this.renderTargetBindings[i]).get_RenderTarget()) && ((renderTargets[i]).get_CubeMapFace() === (this.renderTargetBindings[i]).get_CubeMapFace()))) {
            isRedundant = false;
          }
        }
        if (isRedundant) {
          return;
        }
      }
      if (!((renderTargets !== null) && ((renderTargets.length | 0) !== 0))) {
        (this.GraphicsDevice$GLDevice$value).SetRenderTargets(null, null, 0, $T49().None);
        (this.Viewport = $S12().Construct(0, 0, this.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferWidth$value, this.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferHeight$value));
        (this.ScissorRectangle = new ($T43())(0, 0, this.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferWidth$value, this.GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferHeight$value));
        if (this.GraphicsDevice$PresentationParameters$value.PresentationParameters$RenderTargetUsage$value === $T4A().DiscardContents) {
          this.Clear($thisType.DiscardColor.MemberwiseClone());
        }

        for (i = 0; i < (this.GraphicsDevice$RenderTargetCount$value | 0); i = ((i + 1) | 0)) {
          if (((this.renderTargetBindings[i]).get_RenderTarget().Texture$LevelCount$value | 0) > 1) {
            (this.GraphicsDevice$GLDevice$value).GenerateTargetMipmaps((this.renderTargetBindings[i]).get_RenderTarget().texture);
          }
        }
        JSIL.Array.Erase(this.renderTargetBindings, $T0A().__Type__, 0, this.renderTargetBindings.length);
        this.GraphicsDevice$RenderTargetCount$value = 0;
      } else {
        var glTarget = JSIL.Array.New($T3A(), renderTargets.length);
        var glTargetFace = JSIL.Array.New($T2E(), renderTargets.length);

        for (i = 0; i < (renderTargets.length | 0); i = ((i + 1) | 0)) {
          glTarget[i] = ((renderTargets[i]).get_RenderTarget().texture.OpenGLTexture$Handle$value >>> 0);
          if ($T46().$Is((renderTargets[i]).get_RenderTarget())) {
            glTargetFace[i] = $T2E().GL_TEXTURE_2D;
          } else {
            glTargetFace[i] = $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T2E().GL_TEXTURE_CUBE_MAP_POSITIVE_X + (((renderTargets[i]).get_CubeMapFace()).valueOf() | 0));
          }
        }
        var target = $T4F().$As((renderTargets[0]).get_RenderTarget());
        (this.GraphicsDevice$GLDevice$value).SetRenderTargets(
          glTarget, 
          glTargetFace, 
          $IM00().Call(target, null), 
          $IM01().Call(target, null)
        );

        for (i = 0; i < (this.GraphicsDevice$RenderTargetCount$value | 0); i = ((i + 1) | 0)) {
          if (((this.renderTargetBindings[i]).get_RenderTarget().Texture$LevelCount$value | 0) > 1) {
            var stillBound = false;

          $loop3: 
            for (var j = 0; j < (renderTargets.length | 0); j = ((j + 1) | 0)) {
              if ((this.renderTargetBindings[i]).get_RenderTarget() === (renderTargets[j]).get_RenderTarget()) {
                stillBound = true;
                break $loop3;
              }
            }
            if (!stillBound) {
              (this.GraphicsDevice$GLDevice$value).GenerateTargetMipmaps((this.renderTargetBindings[i]).get_RenderTarget().texture);
            }
          }
        }
        JSIL.Array.Erase(this.renderTargetBindings, $T0A().__Type__, 0, this.renderTargetBindings.length);
        $S10().CallStatic($T3C(), "Copy", null, renderTargets, this.renderTargetBindings, renderTargets.length);
        this.GraphicsDevice$RenderTargetCount$value = (renderTargets.length | 0);
        (this.Viewport = $S12().Construct(0, 0, $IM02().Call(target, null), $IM03().Call(target, null)));
        (this.ScissorRectangle = new ($T43())(0, 0, $IM02().Call(target, null), $IM03().Call(target, null)));
        if ($IM04().Call(target, null) === $T4A().DiscardContents) {
          this.Clear($thisType.DiscardColor.MemberwiseClone());
        }
      }
    }
  };

  function GraphicsDevice_SetStringMarkerEXT (text) {
    (this.GraphicsDevice$GLDevice$value).SetStringMarker(text);
  };

  function GraphicsDevice_SetVertexBuffer$10 (vertexBuffer) {
    this.SetVertexBuffer(vertexBuffer, 0);
  };

  function GraphicsDevice_SetVertexBuffer$11 (vertexBuffer, vertexOffset) {
    if (vertexBuffer === null) {

      for (var i = 0; i < (this.vertexBufferCount | 0); i = ((i + 1) | 0)) {
        this.vertexBufferBindings[i] = $T0B().get_None().MemberwiseClone();
      }
      this.vertexBufferCount = 0;
    } else {
      if (!(((this.vertexBufferBindings[0]).get_VertexBuffer() === vertexBuffer) && (((this.vertexBufferBindings[0]).get_VertexOffset() | 0) === (vertexOffset | 0)))) {
        this.vertexBufferBindings[0] = $S15().Construct(vertexBuffer, vertexOffset);
      }

      for (i = 1; i < (this.vertexBufferCount | 0); i = ((i + 1) | 0)) {
        this.vertexBufferBindings[i] = $T0B().get_None().MemberwiseClone();
      }
      this.vertexBufferCount = 1;
    }
  };

  function GraphicsDevice_SetVertexBuffers (vertexBuffers) {
    if (vertexBuffers === null) {

      for (var i = 0; i < (this.vertexBufferCount | 0); i = ((i + 1) | 0)) {
        this.vertexBufferBindings[i] = $T0B().get_None().MemberwiseClone();
      }
      this.vertexBufferCount = 0;
    } else {
      if ((vertexBuffers.length | 0) > (this.vertexBufferBindings.length | 0)) {
        throw $S16().Construct("vertexBuffers", $T50().Format("Max Vertex Buffers supported is {0}", this.vertexBufferBindings.length));
      }

      for (var j = 0; j < (vertexBuffers.length | 0); j = ((j + 1) | 0)) {
        if (!(!(((this.vertexBufferBindings[j]).get_VertexBuffer() !== (vertexBuffers[j]).get_VertexBuffer()) || 
              (((this.vertexBufferBindings[j]).get_VertexOffset() | 0) !== ((vertexBuffers[j]).get_VertexOffset() | 0))) && (((this.vertexBufferBindings[j]).get_InstanceFrequency() | 0) === ((vertexBuffers[j]).get_InstanceFrequency() | 0)))) {
          this.vertexBufferBindings[j] = vertexBuffers[j].MemberwiseClone();
        }
      }

      for (; j < (this.vertexBufferCount | 0); j = ((j + 1) | 0)) {
        this.vertexBufferBindings[j] = $T0B().get_None().MemberwiseClone();
      }
      this.vertexBufferCount = (vertexBuffers.length | 0);
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.GraphicsDevice", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters")
        ]), 
      GraphicsDevice__ctor
    );

    $.Method({Static:false, Public:false}, "ActivateShaderProgram", 
      JSIL.MethodSignature.Void, 
      GraphicsDevice_ActivateShaderProgram
    );

    $.Method({Static:false, Public:true }, "add_DeviceLost", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDevice_add_DeviceLost
    );

    $.Method({Static:false, Public:true }, "add_DeviceReset", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDevice_add_DeviceReset
    );

    $.Method({Static:false, Public:true }, "add_DeviceResetting", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDevice_add_DeviceResetting
    );

    $.Method({Static:false, Public:true }, "add_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDevice_add_Disposing
    );

    $.Method({Static:false, Public:true }, "add_ResourceCreated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs")])), 
      GraphicsDevice_add_ResourceCreated
    );

    $.Method({Static:false, Public:true }, "add_ResourceDestroyed", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs")])), 
      GraphicsDevice_add_ResourceDestroyed
    );

    $.Method({Static:true , Public:false}, "AddDisposeAction", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Action")), 
      GraphicsDevice_AddDisposeAction
    );

    $.Method({Static:false, Public:false}, "ApplyState", 
      JSIL.MethodSignature.Void, 
      GraphicsDevice_ApplyState
    );

    $.Method({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Color")), 
      GraphicsDevice_Clear$00
    );

    $.Method({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ClearOptions"), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single, $.Int32
        ]), 
      GraphicsDevice_Clear$01
    );

    $.Method({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ClearOptions"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), 
          $.Single, $.Int32
        ]), 
      GraphicsDevice_Clear$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      GraphicsDevice_Dispose$03
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      GraphicsDevice_Dispose$04
    );

    $.Method({Static:false, Public:true }, "DrawIndexedPrimitives", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      GraphicsDevice_DrawIndexedPrimitives
    );

    $.Method({Static:false, Public:true }, "DrawInstancedPrimitives", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      GraphicsDevice_DrawInstancedPrimitives
    );

    $.Method({Static:false, Public:true }, "DrawPrimitives", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $.Int32, 
          $.Int32
        ]), 
      GraphicsDevice_DrawPrimitives
    );

    $.Method({Static:false, Public:true }, "DrawUserIndexedPrimitives", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ], ["T"]), 
      GraphicsDevice_DrawUserIndexedPrimitives$b1$05
    );

    $.Method({Static:false, Public:true }, "DrawUserIndexedPrimitives", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")
        ], ["T"]), 
      GraphicsDevice_DrawUserIndexedPrimitives$b1$06
    );

    $.Method({Static:false, Public:true }, "DrawUserIndexedPrimitives", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ], ["T"]), 
      GraphicsDevice_DrawUserIndexedPrimitives$b1$07
    );

    $.Method({Static:false, Public:true }, "DrawUserIndexedPrimitives", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")
        ], ["T"]), 
      GraphicsDevice_DrawUserIndexedPrimitives$b1$08
    );

    $.Method({Static:false, Public:true }, "DrawUserPrimitives", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32
        ], ["T"]), 
      GraphicsDevice_DrawUserPrimitives$b1$09
    );

    $.Method({Static:false, Public:true }, "DrawUserPrimitives", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexDeclaration")
        ], ["T"]), 
      GraphicsDevice_DrawUserPrimitives$b1$0A
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      GraphicsDevice_Finalize
    );

    $.Method({Static:false, Public:true }, "get_Adapter", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter")), 
      GraphicsDevice_get_Adapter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_BlendState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState")), 
      GraphicsDevice_get_BlendState
    );

    $.Method({Static:false, Public:true }, "get_DepthStencilState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState")), 
      GraphicsDevice_get_DepthStencilState
    );

    $.Method({Static:false, Public:true }, "get_DisplayMode", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode")), 
      GraphicsDevice_get_DisplayMode
    );

    $.Method({Static:false, Public:false}, "get_GLDevice", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice")), 
      GraphicsDevice_get_GLDevice
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_GraphicsDeviceStatus", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus")), 
      GraphicsDevice_get_GraphicsDeviceStatus
    );

    $.Method({Static:false, Public:true }, "get_GraphicsProfile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile")), 
      GraphicsDevice_get_GraphicsProfile
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Indices", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer")), 
      GraphicsDevice_get_Indices
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      GraphicsDevice_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_PixelShader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")), 
      GraphicsDevice_get_PixelShader
    );

    $.Method({Static:false, Public:true }, "get_PresentationParameters", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters")), 
      GraphicsDevice_get_PresentationParameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RasterizerState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState")), 
      GraphicsDevice_get_RasterizerState
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ReferenceStencil", 
      JSIL.MethodSignature.Return($.Int32), 
      GraphicsDevice_get_ReferenceStencil
    );

    $.Method({Static:false, Public:false}, "get_RenderTargetCount", 
      JSIL.MethodSignature.Return($.Int32), 
      GraphicsDevice_get_RenderTargetCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SamplerStates", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerStateCollection")), 
      GraphicsDevice_get_SamplerStates
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ScissorRectangle", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      GraphicsDevice_get_ScissorRectangle
    );

    $.Method({Static:false, Public:true }, "get_Textures", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCollection")), 
      GraphicsDevice_get_Textures
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_VertexShader", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")), 
      GraphicsDevice_get_VertexShader
    );

    $.Method({Static:false, Public:true }, "get_Viewport", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport")), 
      GraphicsDevice_get_Viewport
    );

    $.Method({Static:false, Public:true }, "GetBackBufferData", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      GraphicsDevice_GetBackBufferData$b1
    );

    $.Method({Static:true , Public:false}, "GetElementCountArray", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $.Int32]), 
      GraphicsDevice_GetElementCountArray
    );

    $.Method({Static:false, Public:true }, "GetRenderTargets", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetBinding")])), 
      GraphicsDevice_GetRenderTargets
    );

    $.Method({Static:false, Public:true }, "GetVertexBuffers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBufferBinding")])), 
      GraphicsDevice_GetVertexBuffers
    );

    $.Method({Static:false, Public:false}, "OnResourceCreated", 
      JSIL.MethodSignature.Void, 
      GraphicsDevice_OnResourceCreated
    );

    $.Method({Static:false, Public:false}, "OnResourceDestroyed", 
      JSIL.MethodSignature.Void, 
      GraphicsDevice_OnResourceDestroyed
    );

    $.Method({Static:false, Public:true }, "Present", 
      JSIL.MethodSignature.Void, 
      GraphicsDevice_Present
    );

    $.Method({Static:true , Public:false}, "PrimitiveTypeGL", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType")]), 
      GraphicsDevice_PrimitiveTypeGL
    );

    $.Method({Static:false, Public:true }, "remove_DeviceLost", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDevice_remove_DeviceLost
    );

    $.Method({Static:false, Public:true }, "remove_DeviceReset", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDevice_remove_DeviceReset
    );

    $.Method({Static:false, Public:true }, "remove_DeviceResetting", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDevice_remove_DeviceResetting
    );

    $.Method({Static:false, Public:true }, "remove_Disposing", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GraphicsDevice_remove_Disposing
    );

    $.Method({Static:false, Public:true }, "remove_ResourceCreated", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs")])), 
      GraphicsDevice_remove_ResourceCreated
    );

    $.Method({Static:false, Public:true }, "remove_ResourceDestroyed", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs")])), 
      GraphicsDevice_remove_ResourceDestroyed
    );

    $.Method({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void, 
      GraphicsDevice_Reset$0B
    );

    $.Method({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters")), 
      GraphicsDevice_Reset$0C
    );

    $.Method({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter")]), 
      GraphicsDevice_Reset$0D
    );

    $.Method({Static:false, Public:false}, "set_Adapter", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter")), 
      GraphicsDevice_set_Adapter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_BlendState", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState")), 
      GraphicsDevice_set_BlendState
    );

    $.Method({Static:false, Public:true }, "set_DepthStencilState", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState")), 
      GraphicsDevice_set_DepthStencilState
    );

    $.Method({Static:false, Public:false}, "set_GLDevice", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice")), 
      GraphicsDevice_set_GLDevice
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_GraphicsProfile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile")), 
      GraphicsDevice_set_GraphicsProfile
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Indices", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer")), 
      GraphicsDevice_set_Indices
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      GraphicsDevice_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_PixelShader", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")), 
      GraphicsDevice_set_PixelShader
    );

    $.Method({Static:false, Public:false}, "set_PresentationParameters", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters")), 
      GraphicsDevice_set_PresentationParameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_RasterizerState", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState")), 
      GraphicsDevice_set_RasterizerState
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ReferenceStencil", 
      JSIL.MethodSignature.Action($.Int32), 
      GraphicsDevice_set_ReferenceStencil
    );

    $.Method({Static:false, Public:false}, "set_RenderTargetCount", 
      JSIL.MethodSignature.Action($.Int32), 
      GraphicsDevice_set_RenderTargetCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SamplerStates", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerStateCollection")), 
      GraphicsDevice_set_SamplerStates
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ScissorRectangle", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      GraphicsDevice_set_ScissorRectangle
    );

    $.Method({Static:false, Public:false}, "set_Textures", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCollection")), 
      GraphicsDevice_set_Textures
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_VertexShader", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")), 
      GraphicsDevice_set_VertexShader
    );

    $.Method({Static:false, Public:true }, "set_Viewport", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport")), 
      GraphicsDevice_set_Viewport
    );

    $.Method({Static:false, Public:false}, "SetConstantBuffer", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderStage"), $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBuffer")
        ]), 
      GraphicsDevice_SetConstantBuffer
    );

    $.Method({Static:false, Public:true }, "SetRenderTarget", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTarget2D")), 
      GraphicsDevice_SetRenderTarget$0E
    );

    $.Method({Static:false, Public:true }, "SetRenderTarget", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetCube"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CubeMapFace")]), 
      GraphicsDevice_SetRenderTarget$0F
    );

    $.Method({Static:false, Public:true }, "SetRenderTargets", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetBinding")])), 
      GraphicsDevice_SetRenderTargets
    )
      .Parameter(0, "renderTargets", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true }, "SetStringMarkerEXT", 
      JSIL.MethodSignature.Action($.String), 
      GraphicsDevice_SetStringMarkerEXT
    );

    $.Method({Static:false, Public:true }, "SetVertexBuffer", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")), 
      GraphicsDevice_SetVertexBuffer$10
    );

    $.Method({Static:false, Public:true }, "SetVertexBuffer", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer"), $.Int32]), 
      GraphicsDevice_SetVertexBuffer$11
    );

    $.Method({Static:false, Public:true }, "SetVertexBuffers", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBufferBinding")])), 
      GraphicsDevice_SetVertexBuffers
    )
      .Parameter(0, "vertexBuffers", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:false, Public:false}, "INTERNAL_blendState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState")); 
    $.Field({Static:false, Public:false}, "INTERNAL_depthStencilState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState")); 
    $.Field({Static:false, Public:false}, "INTERNAL_scissorRectangle", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:false, Public:false}, "INTERNAL_viewport", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "ModifiedSamplers", $asm03.TypeRef("System.Collections.Generic.Queue`1", [$.Int32])); 
    $.Field({Static:true , Public:false}, "disposeActions", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Action")])); 
    $.Field({Static:true , Public:false}, "disposeActionsLock", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DiscardColor", $asm00.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "renderTargetBindings", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetBinding")])); 
    $.Field({Static:false, Public:false}, "vertexBufferBindings", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBufferBinding")])); 
    $.Field({Static:false, Public:false}, "vertexBufferCount", $.Int32); 
    $.Field({Static:false, Public:false}, "vertexShaderDirty", $.Boolean); 
    $.Field({Static:false, Public:false}, "pixelShaderDirty", $.Boolean); 
    $.Field({Static:false, Public:false}, "shaderProgram", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderProgram")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "programCache", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderProgramCache")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "vertexConstantBuffers", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBufferCollection")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "pixelConstantBuffers", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ConstantBufferCollection")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "posFixup", $jsilcore.TypeRef("System.Array", [$.Single]), function ($pi) {
        return JSIL.Array.New($asm01.System.Single, 4);
      }); 
    $.Field({Static:true , Public:false}, "posFixupHandle", $asm01.TypeRef("System.Runtime.InteropServices.GCHandle")); 
    $.Field({Static:true , Public:false}, "posFixupPtr", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "INTERNAL_vertexShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")); 
    $.Field({Static:false, Public:false}, "INTERNAL_pixelShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")); 
    $.Field({Static:false, Public:false}, "DeviceLost", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "DeviceReset", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "DeviceResetting", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "ResourceCreated", $asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs")])); 
    $.Field({Static:false, Public:false}, "ResourceDestroyed", $asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs")])); 
    $.Field({Static:false, Public:false}, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "GraphicsDevice$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDevice$Adapter$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDevice$GraphicsProfile$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDevice$PresentationParameters$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDevice$Textures$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDevice$SamplerStates$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerStateCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDevice$RasterizerState$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDevice$Indices$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDevice$GLDevice$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GraphicsDevice$RenderTargetCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function GraphicsDevice__cctor () {
      $thisType.DiscardColor = new $asm00.Microsoft.Xna.Framework.Color();
      $thisType.posFixupHandle = new $asm01.System.Runtime.InteropServices.GCHandle();
      $thisType.posFixupPtr = new $asm01.System.IntPtr();
      $thisType.disposeActions = $S00().Construct();
      $thisType.disposeActionsLock = new ($T01())();
      $thisType.DiscardColor = $S01().Construct(68, 34, 136, 255);
      $thisType.posFixup = JSIL.Array.New($T03(), 4);
      $thisType.posFixupHandle = $T04().Alloc($thisType.posFixup, $T05().Pinned).MemberwiseClone();
      $thisType.posFixupPtr = $thisType.posFixupHandle.AddrOfPinnedObject().MemberwiseClone();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      GraphicsDevice__cctor
    );

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "GraphicsDeviceStatus", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus"));

    $.Property({Static:false, Public:true }, "Adapter", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsAdapter"));

    $.Property({Static:false, Public:true }, "GraphicsProfile", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsProfile"));

    $.Property({Static:false, Public:true }, "PresentationParameters", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters"));

    $.Property({Static:false, Public:true }, "DisplayMode", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode"));

    $.Property({Static:false, Public:true }, "Textures", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureCollection"));

    $.Property({Static:false, Public:true }, "SamplerStates", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerStateCollection"));

    $.Property({Static:false, Public:true }, "BlendState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState"));

    $.Property({Static:false, Public:true }, "DepthStencilState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState"));

    $.Property({Static:false, Public:true }, "RasterizerState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState"));

    $.Property({Static:false, Public:true }, "ScissorRectangle", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true }, "Viewport", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport"));

    $.Property({Static:false, Public:true }, "ReferenceStencil", $.Int32);

    $.Property({Static:false, Public:true }, "Indices", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer"));

    $.Property({Static:false, Public:false}, "GLDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice"));

    $.Property({Static:false, Public:false}, "RenderTargetCount", $.Int32);

    $.Property({Static:false, Public:false}, "VertexShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader"));

    $.Property({Static:false, Public:false}, "PixelShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader"));

    $.Event({Static:false, Public:true }, "DeviceLost", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "DeviceReset", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "DeviceResetting", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "ResourceCreated", $asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs")]));

    $.Event({Static:false, Public:true }, "ResourceDestroyed", $asm01.TypeRef("System.EventHandler`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs")]));

    $.Event({Static:false, Public:true }, "Disposing", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.Model */ 

(function Model$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelBone))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelBoneCollection)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshCollection)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelBoneCollection_Enumerator)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelBone)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Matrix))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelBone))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshCollection_Enumerator)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelEffectCollection_Enumerator)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelEffectCollection)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IEffectMatrices)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm01.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection+Enumerator")))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshCollection+Enumerator")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelEffectCollection+Enumerator")))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function Model__ctor$00 () {
  };

  function Model__ctor$01 (graphicsDevice, bones, meshes) {
    this.Model$Bones$value = new ($T03())(bones);
    this.Model$Meshes$value = new ($T04())(meshes);
  };

  function Model_BuildHierarchy$02 () {
    var globalScale = $S00().CallStatic($T05(), "CreateScale", null, 0.01);
    var enumerator = $S01().CallVirtual("GetEnumerator", null, this.Model$Root$value.ModelBone$Children$value);
    try {

      while (enumerator.MoveNext()) {
        var node = enumerator.get_Current();
        this.BuildHierarchy(node, $S02().CallStatic($T05(), "op_Multiply", null, this.Model$Root$value.ModelBone$Transform$value.MemberwiseClone(), globalScale).MemberwiseClone(), 0);
      }
    } finally {
      $IM00().Call(enumerator, null);
    }
  };

  function Model_BuildHierarchy$03 (node, parentTransform, level) {
    (node.ModelBone$ModelTransform$value = $S02().CallStatic($T05(), "op_Multiply", null, node.ModelBone$Transform$value.MemberwiseClone(), parentTransform).MemberwiseClone());
    var enumerator = $S01().CallVirtual("GetEnumerator", null, node.ModelBone$Children$value);
    try {

      while (enumerator.MoveNext()) {
        var child = enumerator.get_Current();
        this.BuildHierarchy(child, node.ModelBone$ModelTransform$value.MemberwiseClone(), (((level | 0) + 1) | 0));
      }
    } finally {
      $IM00().Call(enumerator, null);
    }
  };

  function Model_CopyAbsoluteBoneTransformsTo (destinationBoneTransforms) {
    var $temp00, $temp01;
    $temp00 = new JSIL.ArrayElementReference(null, -1);
    $temp01 = new JSIL.ArrayElementReference(null, -1);
    if (destinationBoneTransforms === null) {
      throw $S03().Construct("destinationBoneTransforms");
    }
    if ((destinationBoneTransforms.length | 0) < ((this.Model$Bones$value).get_Count() | 0)) {
      throw $S04().Construct("destinationBoneTransforms");
    }
    var count = ((this.Model$Bones$value).get_Count() | 0);
    var index = 0;
    var modelBoneTransform = new JSIL.BoxedVariable(null);

    while (index < count) {
      var modelBone = $S05().CallVirtual("get_Item", null, this.Model$Bones$value, index);
      if (modelBone.ModelBone$Parent$value === null) {
        destinationBoneTransforms[index] = modelBone.ModelBone$Transform$value.MemberwiseClone();
      } else {
        var index2 = (modelBone.ModelBone$Parent$value.ModelBone$Index$value | 0);
        modelBoneTransform.set(modelBone.ModelBone$Transform$value.MemberwiseClone());
        $S06().CallStatic($T05(), "Multiply", null, 
          /* ref */ modelBoneTransform, 
          /* ref */ $temp00.retarget(destinationBoneTransforms, index2), 
          /* ref */ $temp01.retarget(destinationBoneTransforms, index)
        );
      }
      index = ((index + 1) | 0);
    }
  };

  function Model_Draw (world, view, projection) {
    var boneCount = ((this.Model$Bones$value).get_Count() | 0);
    if (!(($thisType.sharedDrawBoneMatrices !== null) && (($thisType.sharedDrawBoneMatrices.length | 0) >= boneCount))) {
      $thisType.sharedDrawBoneMatrices = JSIL.Array.New($T05(), boneCount);
    }
    this.CopyAbsoluteBoneTransformsTo($thisType.sharedDrawBoneMatrices);
    var enumerator = $S07().CallVirtual("GetEnumerator", null, this.Model$Meshes$value);
    try {

      while (enumerator.MoveNext()) {
        var mesh = enumerator.get_Current();
        var enumerator2 = $S08().CallVirtual("GetEnumerator", null, mesh.ModelMesh$Effects$value);
        try {

          while (enumerator2.MoveNext()) {
            var effect = enumerator2.get_Current();
            var effectMatricies = $T13().$As(effect);
            if (effectMatricies === null) {
              throw $S09().Construct();
            }
            (effectMatricies.World = $S02().CallStatic($T05(), "op_Multiply", null, $thisType.sharedDrawBoneMatrices[mesh.ModelMesh$ParentBone$value.ModelBone$Index$value].MemberwiseClone(), world).MemberwiseClone());
            (effectMatricies.View = view.MemberwiseClone());
            (effectMatricies.Projection = projection.MemberwiseClone());
          }
        } finally {
          $IM00().Call(enumerator2, null);
        }
        mesh.Draw();
      }
    } finally {
      $IM00().Call(enumerator, null);
    }
  };

  function Model_get_Bones () {
    return this.Model$Bones$value;
  };

  function Model_get_Meshes () {
    return this.Model$Meshes$value;
  };

  function Model_get_Root () {
    return this.Model$Root$value;
  };

  function Model_get_Tag () {
    return this.Model$Tag$value;
  };

  function Model_set_Bones (value) {
    this.Model$Bones$value = value;
  };

  function Model_set_Meshes (value) {
    this.Model$Meshes$value = value;
  };

  function Model_set_Root (value) {
    this.Model$Root$value = value;
  };

  function Model_set_Tag (value) {
    this.Model$Tag$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.Model", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Model__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")]), 
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")])
        ]), 
      Model__ctor$01
    );

    $.Method({Static:false, Public:false}, "BuildHierarchy", 
      JSIL.MethodSignature.Void, 
      Model_BuildHierarchy$02
    );

    $.Method({Static:false, Public:false}, "BuildHierarchy", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), 
          $.Int32
        ]), 
      Model_BuildHierarchy$03
    );

    $.Method({Static:false, Public:true }, "CopyAbsoluteBoneTransformsTo", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])), 
      Model_CopyAbsoluteBoneTransformsTo
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")
        ]), 
      Model_Draw
    );

    $.Method({Static:false, Public:true }, "get_Bones", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection")), 
      Model_get_Bones
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Meshes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshCollection")), 
      Model_get_Meshes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Root", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")), 
      Model_get_Root
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Object), 
      Model_get_Tag
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Bones", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection")), 
      Model_set_Bones
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Meshes", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshCollection")), 
      Model_set_Meshes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Root", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")), 
      Model_set_Root
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Tag", 
      JSIL.MethodSignature.Action($.Object), 
      Model_set_Tag
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "sharedDrawBoneMatrices", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])); 
    $.Field({Static:false, Public:false}, "Model$Bones$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Model$Meshes$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Model$Root$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Model$Tag$value", $.Object)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Bones", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection"));

    $.Property({Static:false, Public:true }, "Meshes", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshCollection"));

    $.Property({Static:false, Public:true }, "Root", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone"));

    $.Property({Static:false, Public:true }, "Tag", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.ModelBone */ 

(function ModelBone$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelBone))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelBoneCollection)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")]), null))) ();
  };

  function ModelBone__ctor () {
    this.children = $S00().Construct();
    this.meshes = $S01().Construct();
    this.ModelBone$Children$value = new ($T02())($S00().Construct());
    this.meshes = $S01().Construct();
  };

  function ModelBone_AddChild (modelBone) {
    (this.children).Add(modelBone);
    this.ModelBone$Children$value = new ($T02())(this.children);
  };

  function ModelBone_AddMesh (mesh) {
    (this.meshes).Add(mesh);
  };

  function ModelBone_get_Children () {
    return this.ModelBone$Children$value;
  };

  function ModelBone_get_Index () {
    return this.ModelBone$Index$value;
  };

  function ModelBone_get_ModelTransform () {
    return this.ModelBone$ModelTransform$value;
  };

  function ModelBone_get_Name () {
    return this.ModelBone$Name$value;
  };

  function ModelBone_get_Parent () {
    return this.ModelBone$Parent$value;
  };

  function ModelBone_get_Transform () {
    return this.ModelBone$Transform$value;
  };

  function ModelBone_set_Children (value) {
    this.ModelBone$Children$value = value;
  };

  function ModelBone_set_Index (value) {
    this.ModelBone$Index$value = (value | 0);
  };

  function ModelBone_set_ModelTransform (value) {
    this.ModelBone$ModelTransform$value = value.MemberwiseClone();
  };

  function ModelBone_set_Name (value) {
    this.ModelBone$Name$value = value;
  };

  function ModelBone_set_Parent (value) {
    this.ModelBone$Parent$value = value;
  };

  function ModelBone_set_Transform (value) {
    this.ModelBone$Transform$value = value.MemberwiseClone();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.ModelBone", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModelBone__ctor
    );

    $.Method({Static:false, Public:false}, "AddChild", 
      JSIL.MethodSignature.Action($.Type), 
      ModelBone_AddChild
    );

    $.Method({Static:false, Public:false}, "AddMesh", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")), 
      ModelBone_AddMesh
    );

    $.Method({Static:false, Public:true }, "get_Children", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection")), 
      ModelBone_get_Children
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Index", 
      JSIL.MethodSignature.Return($.Int32), 
      ModelBone_get_Index
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_ModelTransform", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      ModelBone_get_ModelTransform
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ModelBone_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Parent", 
      JSIL.MethodSignature.Return($.Type), 
      ModelBone_get_Parent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Transform", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      ModelBone_get_Transform
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Children", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection")), 
      ModelBone_set_Children
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Index", 
      JSIL.MethodSignature.Action($.Int32), 
      ModelBone_set_Index
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ModelTransform", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      ModelBone_set_ModelTransform
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      ModelBone_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Parent", 
      JSIL.MethodSignature.Action($.Type), 
      ModelBone_set_Parent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Transform", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")), 
      ModelBone_set_Transform
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "children", $asm01.TypeRef("System.Collections.Generic.List`1", [$.Type])); 
    $.Field({Static:false, Public:false}, "meshes", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")])); 
    $.Field({Static:false, Public:false}, "ModelBone$Children$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelBone$Index$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelBone$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelBone$Parent$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelBone$Transform$value", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelBone$ModelTransform$value", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Children", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection"));

    $.Property({Static:false, Public:true }, "Index", $.Int32);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Parent", $.Type);

    $.Property({Static:false, Public:true }, "Transform", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.Property({Static:false, Public:false}, "ModelTransform", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.ModelBoneCollection */ 

(function ModelBoneCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelBone))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelBone))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelBone)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.KeyNotFoundException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelBoneCollection_Enumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelBone))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelBone))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.KeyNotFoundException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelBone).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelBone).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function ModelBoneCollection__ctor (list) {
    $T01().prototype._ctor.call(this, list);
  };

  function ModelBoneCollection_get_Item$00 (boneName) {
    var ret = new JSIL.BoxedVariable(null);
    if (this.TryGetValue(boneName, /* ref */ ret)) {
      return ret.get();
    }
    throw $S00().Construct();
  };

  function ModelBoneCollection_GetEnumerator$01 () {
    return new ($T05())(this);
  };

  function ModelBoneCollection_TryGetValue (boneName, /* ref */ value) {
    var enumerator = $IM00().Call($T01().prototype.get_Items.call(this), null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var bone = $IM02().Call(enumerator, null);
        if (bone.ModelBone$Name$value == boneName) {
          value.set(bone);
          var result = true;
          return result;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    value.set(null);
    result = false;
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")]), 
      Name: "Microsoft.Xna.Framework.Graphics.ModelBoneCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")])), 
      ModelBoneCollection__ctor
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone"), [$.String]), 
      ModelBoneCollection_get_Item$00
    );

    $.Method({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection+Enumerator")), 
      ModelBoneCollection_GetEnumerator$01
    );

    $.Method({Static:false, Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")])]), 
      ModelBoneCollection_TryGetValue
    );

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct Microsoft.Xna.Framework.Graphics.ModelBoneCollection+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelBoneCollection)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelBone))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone"), [$asm01.TypeRef("System.Int32")]))) ();
  };

  function Enumerator__ctor (collection) {
    this.collection = collection;
    this.position = -1;
  };

  function Enumerator_Dispose () {
  };

  function Enumerator_get_Current () {
    return $S00().CallVirtual("get_Item", null, this.collection, this.position);
  };

  function Enumerator_MoveNext () {
    this.position = (((this.position | 0) + 1) | 0);
    return ((this.position | 0) < ((this.collection).get_Count() | 0));
  };

  function Enumerator_System_Collections_IEnumerator_get_Current () {
    return $S00().CallVirtual("get_Item", null, this.collection, this.position);
  };

  function Enumerator_System_Collections_IEnumerator_Reset () {
    this.position = -1;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.ModelBoneCollection+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection")), 
      Enumerator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Enumerator_Dispose
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")), 
      Enumerator_get_Current
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      Enumerator_MoveNext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      Enumerator_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      Enumerator_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false, ReadOnly:true }, "collection", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBoneCollection")); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")]), 
      /* 1 */ $asm01.TypeRef("System.IDisposable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.ModelEffectCollection */ 

(function ModelEffectCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Effect))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Effect))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Effect))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Effect))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelEffectCollection_Enumerator)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")]), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Effect).Add)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Effect).Remove)) ();
  };

  function ModelEffectCollection__ctor$00 (list) {
    $T01().prototype._ctor.call(this, list);
  };

  function ModelEffectCollection__ctor$01 () {
    $T01().prototype._ctor.call(this, $S00().Construct());
  };

  function ModelEffectCollection_Add (item) {
    $IM00().Call($T01().prototype.get_Items.call(this), null, item);
  };

  function ModelEffectCollection_GetEnumerator$02 () {
    return new ($T05())($T02().$Cast($T01().prototype.get_Items.call(this)));
  };

  function ModelEffectCollection_Remove (item) {
    $IM01().Call($T01().prototype.get_Items.call(this), null, item);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")]), 
      Name: "Microsoft.Xna.Framework.Graphics.ModelEffectCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")])), 
      ModelEffectCollection__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModelEffectCollection__ctor$01
    );

    $.Method({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      ModelEffectCollection_Add
    );

    $.Method({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelEffectCollection+Enumerator")), 
      ModelEffectCollection_GetEnumerator$02
    );

    $.Method({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      ModelEffectCollection_Remove
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.ModelEffectCollection+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.Effect))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1_Enumerator.Of($asm00.Microsoft.Xna.Framework.Graphics.Effect))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.Reset)) ();
  };

  function Enumerator__ctor (list) {
    this.enumerator = $T00().prototype.GetEnumerator.call(list);
    this.disposed = false;
  };

  function Enumerator_Dispose () {
    if (!this.disposed) {
      $T01().prototype.Dispose.call(this.enumerator);
      this.disposed = true;
    }
  };

  function Enumerator_get_Current () {
    return $T01().prototype.get_Current.call(this.enumerator);
  };

  function Enumerator_MoveNext () {
    return $T01().prototype.MoveNext.call(this.enumerator);
  };

  function Enumerator_System_Collections_IEnumerator_get_Current () {
    return this.get_Current();
  };

  function Enumerator_System_Collections_IEnumerator_Reset () {
    var resetEnumerator = this.enumerator.MemberwiseClone();
    $IM00().Call(resetEnumerator, null);
    this.enumerator = $T01().$Cast(resetEnumerator).MemberwiseClone();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.ModelEffectCollection+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")])), 
      Enumerator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Enumerator_Dispose
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      Enumerator_get_Current
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      Enumerator_MoveNext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      Enumerator_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      Enumerator_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("System.Collections.Generic.List`1+Enumerator", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")])); 
    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")]), 
      /* 1 */ $asm01.TypeRef("System.IDisposable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.ModelMesh */ 

(function ModelMesh$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelEffectCollection)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectTechnique)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectPass)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PrimitiveType)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.BoundingSphere)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelBone)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelEffectCollection"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPart")]), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart).get_Current)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass).GetEnumerator)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function ModelMesh__ctor (graphicsDevice, parts) {
    var $temp00;
    this.graphicsDevice = graphicsDevice;
    this.ModelMesh$MeshParts$value = new ($T02())(parts);

    for (var a$0 = parts._items, i$0 = 0, l$0 = (parts._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var part = a$0[i$0];
      part.parent = this;
    }
    this.ModelMesh$Effects$value = $S00().Construct();
  };

  function ModelMesh_Draw () {
    var enumerator = $S01().CallVirtual("GetEnumerator", null, this.ModelMesh$MeshParts$value);
    try {

      while ($IM00().Call(enumerator, null)) {
        var part = $IM01().Call(enumerator, null);
        var effect = part.get_Effect();
        if ((part.ModelMeshPart$PrimitiveCount$value | 0) > 0) {
          (this.graphicsDevice).SetVertexBuffer(part.ModelMeshPart$VertexBuffer$value);
          this.graphicsDevice.GraphicsDevice$Indices$value = part.ModelMeshPart$IndexBuffer$value;
          var enumerator2 = $IM02().Call(effect.Effect$CurrentTechnique$value.EffectTechnique$Passes$value, null);
          try {

            while ($IM00().Call(enumerator2, null)) {
              var pass = $IM03().Call(enumerator2, null);
              pass.Apply();
              (this.graphicsDevice).DrawIndexedPrimitives(
                $T0D().TriangleList, 
                part.ModelMeshPart$VertexOffset$value, 
                0, 
                part.ModelMeshPart$NumVertices$value, 
                part.ModelMeshPart$StartIndex$value, 
                part.ModelMeshPart$PrimitiveCount$value
              );
            }
          } finally {
            if (enumerator2 !== null) {
              $IM04().Call(enumerator2, null);
            }
          }
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM04().Call(enumerator, null);
      }
    }
  };

  function ModelMesh_get_BoundingSphere () {
    return this.ModelMesh$BoundingSphere$value;
  };

  function ModelMesh_get_Effects () {
    return this.ModelMesh$Effects$value;
  };

  function ModelMesh_get_MeshParts () {
    return this.ModelMesh$MeshParts$value;
  };

  function ModelMesh_get_Name () {
    return this.ModelMesh$Name$value;
  };

  function ModelMesh_get_ParentBone () {
    return this.ModelMesh$ParentBone$value;
  };

  function ModelMesh_get_Tag () {
    return this.ModelMesh$Tag$value;
  };

  function ModelMesh_set_BoundingSphere (value) {
    this.ModelMesh$BoundingSphere$value = value.MemberwiseClone();
  };

  function ModelMesh_set_Effects (value) {
    this.ModelMesh$Effects$value = value;
  };

  function ModelMesh_set_MeshParts (value) {
    this.ModelMesh$MeshParts$value = value;
  };

  function ModelMesh_set_Name (value) {
    this.ModelMesh$Name$value = value;
  };

  function ModelMesh_set_ParentBone (value) {
    this.ModelMesh$ParentBone$value = value;
  };

  function ModelMesh_set_Tag (value) {
    this.ModelMesh$Tag$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.ModelMesh", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPart")])]), 
      ModelMesh__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Void, 
      ModelMesh_Draw
    );

    $.Method({Static:false, Public:true }, "get_BoundingSphere", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")), 
      ModelMesh_get_BoundingSphere
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Effects", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelEffectCollection")), 
      ModelMesh_get_Effects
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MeshParts", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection")), 
      ModelMesh_get_MeshParts
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ModelMesh_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ParentBone", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")), 
      ModelMesh_get_ParentBone
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Object), 
      ModelMesh_get_Tag
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_BoundingSphere", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere")), 
      ModelMesh_set_BoundingSphere
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Effects", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelEffectCollection")), 
      ModelMesh_set_Effects
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_MeshParts", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection")), 
      ModelMesh_set_MeshParts
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      ModelMesh_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ParentBone", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone")), 
      ModelMesh_set_ParentBone
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Tag", 
      JSIL.MethodSignature.Action($.Object), 
      ModelMesh_set_Tag
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "graphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Field({Static:false, Public:false}, "ModelMesh$BoundingSphere$value", $asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelMesh$Effects$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelEffectCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelMesh$MeshParts$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelMesh$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelMesh$ParentBone$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelMesh$Tag$value", $.Object)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "BoundingSphere", $asm00.TypeRef("Microsoft.Xna.Framework.BoundingSphere"));

    $.Property({Static:false, Public:true }, "Effects", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelEffectCollection"));

    $.Property({Static:false, Public:true }, "MeshParts", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "ParentBone", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelBone"));

    $.Property({Static:false, Public:true }, "Tag", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.ModelMeshCollection */ 

(function ModelMeshCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.KeyNotFoundException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshCollection_Enumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.StringComparison)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.KeyNotFoundException"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshCollection+Enumerator")))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.StringComparison")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function ModelMeshCollection__ctor (list) {
    $T01().prototype._ctor.call(this, list);
  };

  function ModelMeshCollection_get_Item$00 (meshName) {
    var ret = new JSIL.BoxedVariable(null);
    if (!this.TryGetValue(meshName, /* ref */ ret)) {
      throw $S00().Construct();
    }
    return ret.get();
  };

  function ModelMeshCollection_GetEnumerator$01 () {
    return new ($T05())(this);
  };

  function ModelMeshCollection_TryGetValue (meshName, /* ref */ value) {
    if ($T02().IsNullOrEmpty(meshName)) {
      throw $S01().Construct("meshName");
    }
    var enumerator = $S02().CallVirtual("GetEnumerator", null, this);
    try {

      while (enumerator.MoveNext()) {
        var mesh = enumerator.get_Current();
        if (($S03().CallStatic($T02(), "Compare", null, mesh.ModelMesh$Name$value, meshName, $T07().Ordinal) | 0) === 0) {
          value.set(mesh);
          var result = true;
          return result;
        }
      }
    } finally {
      $IM00().Call(enumerator, null);
    }
    value.set(null);
    result = false;
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")]), 
      Name: "Microsoft.Xna.Framework.Graphics.ModelMeshCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")])), 
      ModelMeshCollection__ctor
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh"), [$.String]), 
      ModelMeshCollection_get_Item$00
    );

    $.Method({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshCollection+Enumerator")), 
      ModelMeshCollection_GetEnumerator$01
    );

    $.Method({Static:false, Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")])]), 
      ModelMeshCollection_TryGetValue
    );

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct Microsoft.Xna.Framework.Graphics.ModelMeshCollection+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshCollection)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh"), [$asm01.TypeRef("System.Int32")]))) ();
  };

  function Enumerator__ctor (collection) {
    this.collection = collection;
    this.position = -1;
  };

  function Enumerator_Dispose () {
  };

  function Enumerator_get_Current () {
    return $S00().CallVirtual("get_Item", null, this.collection, this.position);
  };

  function Enumerator_MoveNext () {
    this.position = (((this.position | 0) + 1) | 0);
    return ((this.position | 0) < ((this.collection).get_Count() | 0));
  };

  function Enumerator_System_Collections_IEnumerator_get_Current () {
    return $S00().CallVirtual("get_Item", null, this.collection, this.position);
  };

  function Enumerator_System_Collections_IEnumerator_Reset () {
    this.position = -1;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.ModelMeshCollection+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshCollection")), 
      Enumerator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Enumerator_Dispose
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")), 
      Enumerator_get_Current
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      Enumerator_MoveNext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      Enumerator_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      Enumerator_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false, ReadOnly:true }, "collection", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshCollection")); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")]), 
      /* 1 */ $asm01.TypeRef("System.IDisposable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.ModelMeshPart */ 

(function ModelMeshPart$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelMesh)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ModelEffectCollection)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPart")]), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart).get_Current)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function ModelMeshPart__ctor () {
  };

  function ModelMeshPart_get_Effect () {
    return this.INTERNAL_effect;
  };

  function ModelMeshPart_get_IndexBuffer () {
    return this.ModelMeshPart$IndexBuffer$value;
  };

  function ModelMeshPart_get_NumVertices () {
    return this.ModelMeshPart$NumVertices$value;
  };

  function ModelMeshPart_get_PrimitiveCount () {
    return this.ModelMeshPart$PrimitiveCount$value;
  };

  function ModelMeshPart_get_StartIndex () {
    return this.ModelMeshPart$StartIndex$value;
  };

  function ModelMeshPart_get_Tag () {
    return this.ModelMeshPart$Tag$value;
  };

  function ModelMeshPart_get_VertexBuffer () {
    return this.ModelMeshPart$VertexBuffer$value;
  };

  function ModelMeshPart_get_VertexOffset () {
    return this.ModelMeshPart$VertexOffset$value;
  };

  function ModelMeshPart_set_Effect (value) {
    if (value !== this.INTERNAL_effect) {
      if (this.INTERNAL_effect !== null) {
        var removeEffect = true;
        var enumerator = $S00().CallVirtual("GetEnumerator", null, this.parent.ModelMesh$MeshParts$value);
        try {

        $loop0: 
          while ($IM00().Call(enumerator, null)) {
            var part = $IM01().Call(enumerator, null);
            if (!((part === this) || (part.INTERNAL_effect !== this.INTERNAL_effect))) {
              removeEffect = false;
              break $loop0;
            }
          }
        } finally {
          if (enumerator !== null) {
            $IM02().Call(enumerator, null);
          }
        }
        if (removeEffect) {
          (this.parent.ModelMesh$Effects$value).Remove(this.INTERNAL_effect);
        }
      }
      this.INTERNAL_effect = value;
      (this.parent.ModelMesh$Effects$value).Add(value);
    }
  };

  function ModelMeshPart_set_IndexBuffer (value) {
    this.ModelMeshPart$IndexBuffer$value = value;
  };

  function ModelMeshPart_set_NumVertices (value) {
    this.ModelMeshPart$NumVertices$value = (value | 0);
  };

  function ModelMeshPart_set_PrimitiveCount (value) {
    this.ModelMeshPart$PrimitiveCount$value = (value | 0);
  };

  function ModelMeshPart_set_StartIndex (value) {
    this.ModelMeshPart$StartIndex$value = (value | 0);
  };

  function ModelMeshPart_set_Tag (value) {
    this.ModelMeshPart$Tag$value = value;
  };

  function ModelMeshPart_set_VertexBuffer (value) {
    this.ModelMeshPart$VertexBuffer$value = value;
  };

  function ModelMeshPart_set_VertexOffset (value) {
    this.ModelMeshPart$VertexOffset$value = (value | 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.ModelMeshPart", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModelMeshPart__ctor
    );

    $.Method({Static:false, Public:true }, "get_Effect", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      ModelMeshPart_get_Effect
    );

    $.Method({Static:false, Public:true }, "get_IndexBuffer", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer")), 
      ModelMeshPart_get_IndexBuffer
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_NumVertices", 
      JSIL.MethodSignature.Return($.Int32), 
      ModelMeshPart_get_NumVertices
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PrimitiveCount", 
      JSIL.MethodSignature.Return($.Int32), 
      ModelMeshPart_get_PrimitiveCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_StartIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      ModelMeshPart_get_StartIndex
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Object), 
      ModelMeshPart_get_Tag
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_VertexBuffer", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")), 
      ModelMeshPart_get_VertexBuffer
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_VertexOffset", 
      JSIL.MethodSignature.Return($.Int32), 
      ModelMeshPart_get_VertexOffset
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Effect", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      ModelMeshPart_set_Effect
    );

    $.Method({Static:false, Public:false}, "set_IndexBuffer", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer")), 
      ModelMeshPart_set_IndexBuffer
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_NumVertices", 
      JSIL.MethodSignature.Action($.Int32), 
      ModelMeshPart_set_NumVertices
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_PrimitiveCount", 
      JSIL.MethodSignature.Action($.Int32), 
      ModelMeshPart_set_PrimitiveCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_StartIndex", 
      JSIL.MethodSignature.Action($.Int32), 
      ModelMeshPart_set_StartIndex
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Tag", 
      JSIL.MethodSignature.Action($.Object), 
      ModelMeshPart_set_Tag
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_VertexBuffer", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")), 
      ModelMeshPart_set_VertexBuffer
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_VertexOffset", 
      JSIL.MethodSignature.Action($.Int32), 
      ModelMeshPart_set_VertexOffset
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "parent", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMesh")); 
    $.Field({Static:false, Public:false}, "INTERNAL_effect", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")); 
    $.Field({Static:false, Public:false}, "ModelMeshPart$IndexBuffer$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelMeshPart$NumVertices$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelMeshPart$PrimitiveCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelMeshPart$StartIndex$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelMeshPart$Tag$value", $.Object)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelMeshPart$VertexBuffer$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ModelMeshPart$VertexOffset$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Effect", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"));

    $.Property({Static:false, Public:true }, "IndexBuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexBuffer"));

    $.Property({Static:false, Public:true }, "NumVertices", $.Int32);

    $.Property({Static:false, Public:true }, "PrimitiveCount", $.Int32);

    $.Property({Static:false, Public:true }, "StartIndex", $.Int32);

    $.Property({Static:false, Public:true }, "Tag", $.Object);

    $.Property({Static:false, Public:true }, "VertexBuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer"));

    $.Property({Static:false, Public:true }, "VertexOffset", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection */ 

(function ModelMeshPartCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.ModelMeshPart))) ();
  };

  function ModelMeshPartCollection__ctor (list) {
    $T01().prototype._ctor.call(this, list);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPart")]), 
      Name: "Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ModelMeshPart")])), 
      ModelMeshPartCollection__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.PresentationParameters */ 

(function PresentationParameters$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PresentInterval)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.DisplayOrientation)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RenderTargetUsage)) ();
  };

  function PresentationParameters__ctor () {
    this.PresentationParameters$BackBufferFormat$value = $T00().Color;
    this.PresentationParameters$BackBufferWidth$value = ($T01().DefaultBackBufferWidth | 0);
    this.PresentationParameters$BackBufferHeight$value = ($T01().DefaultBackBufferHeight | 0);
    (this.PresentationParameters$DeviceWindowHandle$value = $T02().Zero.MemberwiseClone());
    this.PresentationParameters$IsFullScreen$value = false;
    this.PresentationParameters$DepthStencilFormat$value = $T03().None;
    this.PresentationParameters$MultiSampleCount$value = 0;
    this.PresentationParameters$PresentationInterval$value = $T04().Default;
    this.PresentationParameters$DisplayOrientation$value = $T05().Default;
  };

  function PresentationParameters_Clone () {
    var clone = new $thisType();
    clone.PresentationParameters$BackBufferFormat$value = this.PresentationParameters$BackBufferFormat$value;
    clone.PresentationParameters$BackBufferHeight$value = (this.PresentationParameters$BackBufferHeight$value | 0);
    clone.PresentationParameters$BackBufferWidth$value = (this.PresentationParameters$BackBufferWidth$value | 0);
    (clone.PresentationParameters$DeviceWindowHandle$value = this.PresentationParameters$DeviceWindowHandle$value.MemberwiseClone());
    clone.PresentationParameters$IsFullScreen$value = this.PresentationParameters$IsFullScreen$value;
    clone.PresentationParameters$DepthStencilFormat$value = this.PresentationParameters$DepthStencilFormat$value;
    clone.PresentationParameters$MultiSampleCount$value = (this.PresentationParameters$MultiSampleCount$value | 0);
    clone.PresentationParameters$PresentationInterval$value = this.PresentationParameters$PresentationInterval$value;
    clone.PresentationParameters$DisplayOrientation$value = this.PresentationParameters$DisplayOrientation$value;
    return clone;
  };

  function PresentationParameters_get_BackBufferFormat () {
    return this.PresentationParameters$BackBufferFormat$value;
  };

  function PresentationParameters_get_BackBufferHeight () {
    return this.PresentationParameters$BackBufferHeight$value;
  };

  function PresentationParameters_get_BackBufferWidth () {
    return this.PresentationParameters$BackBufferWidth$value;
  };

  function PresentationParameters_get_Bounds () {
    return new ($T06())(0, 0, this.PresentationParameters$BackBufferWidth$value, this.PresentationParameters$BackBufferHeight$value);
  };

  function PresentationParameters_get_DepthStencilFormat () {
    return this.PresentationParameters$DepthStencilFormat$value;
  };

  function PresentationParameters_get_DeviceWindowHandle () {
    return this.PresentationParameters$DeviceWindowHandle$value;
  };

  function PresentationParameters_get_DisplayOrientation () {
    return this.PresentationParameters$DisplayOrientation$value;
  };

  function PresentationParameters_get_IsFullScreen () {
    return this.PresentationParameters$IsFullScreen$value;
  };

  function PresentationParameters_get_MultiSampleCount () {
    return this.PresentationParameters$MultiSampleCount$value;
  };

  function PresentationParameters_get_PresentationInterval () {
    return this.PresentationParameters$PresentationInterval$value;
  };

  function PresentationParameters_get_RenderTargetUsage () {
    return this.PresentationParameters$RenderTargetUsage$value;
  };

  function PresentationParameters_set_BackBufferFormat (value) {
    this.PresentationParameters$BackBufferFormat$value = value;
  };

  function PresentationParameters_set_BackBufferHeight (value) {
    this.PresentationParameters$BackBufferHeight$value = (value | 0);
  };

  function PresentationParameters_set_BackBufferWidth (value) {
    this.PresentationParameters$BackBufferWidth$value = (value | 0);
  };

  function PresentationParameters_set_DepthStencilFormat (value) {
    this.PresentationParameters$DepthStencilFormat$value = value;
  };

  function PresentationParameters_set_DeviceWindowHandle (value) {
    this.PresentationParameters$DeviceWindowHandle$value = value.MemberwiseClone();
  };

  function PresentationParameters_set_DisplayOrientation (value) {
    this.PresentationParameters$DisplayOrientation$value = value;
  };

  function PresentationParameters_set_IsFullScreen (value) {
    this.PresentationParameters$IsFullScreen$value = value;
  };

  function PresentationParameters_set_MultiSampleCount (value) {
    this.PresentationParameters$MultiSampleCount$value = (value | 0);
  };

  function PresentationParameters_set_PresentationInterval (value) {
    this.PresentationParameters$PresentationInterval$value = value;
  };

  function PresentationParameters_set_RenderTargetUsage (value) {
    this.PresentationParameters$RenderTargetUsage$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.PresentationParameters", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      PresentationParameters__ctor
    );

    $.Method({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      PresentationParameters_Clone
    );

    $.Method({Static:false, Public:true }, "get_BackBufferFormat", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")), 
      PresentationParameters_get_BackBufferFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_BackBufferHeight", 
      JSIL.MethodSignature.Return($.Int32), 
      PresentationParameters_get_BackBufferHeight
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_BackBufferWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      PresentationParameters_get_BackBufferWidth
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Bounds", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      PresentationParameters_get_Bounds
    );

    $.Method({Static:false, Public:true }, "get_DepthStencilFormat", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")), 
      PresentationParameters_get_DepthStencilFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DeviceWindowHandle", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      PresentationParameters_get_DeviceWindowHandle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DisplayOrientation", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")), 
      PresentationParameters_get_DisplayOrientation
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsFullScreen", 
      JSIL.MethodSignature.Return($.Boolean), 
      PresentationParameters_get_IsFullScreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MultiSampleCount", 
      JSIL.MethodSignature.Return($.Int32), 
      PresentationParameters_get_MultiSampleCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PresentationInterval", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentInterval")), 
      PresentationParameters_get_PresentationInterval
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RenderTargetUsage", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage")), 
      PresentationParameters_get_RenderTargetUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_BackBufferFormat", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")), 
      PresentationParameters_set_BackBufferFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_BackBufferHeight", 
      JSIL.MethodSignature.Action($.Int32), 
      PresentationParameters_set_BackBufferHeight
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_BackBufferWidth", 
      JSIL.MethodSignature.Action($.Int32), 
      PresentationParameters_set_BackBufferWidth
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DepthStencilFormat", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")), 
      PresentationParameters_set_DepthStencilFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DeviceWindowHandle", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      PresentationParameters_set_DeviceWindowHandle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DisplayOrientation", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")), 
      PresentationParameters_set_DisplayOrientation
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsFullScreen", 
      JSIL.MethodSignature.Action($.Boolean), 
      PresentationParameters_set_IsFullScreen
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_MultiSampleCount", 
      JSIL.MethodSignature.Action($.Int32), 
      PresentationParameters_set_MultiSampleCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_PresentationInterval", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentInterval")), 
      PresentationParameters_set_PresentationInterval
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_RenderTargetUsage", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage")), 
      PresentationParameters_set_RenderTargetUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PresentationParameters$BackBufferFormat$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "PresentationParameters$BackBufferHeight$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "PresentationParameters$BackBufferWidth$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "PresentationParameters$DeviceWindowHandle$value", $asm01.TypeRef("System.IntPtr"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "PresentationParameters$DepthStencilFormat$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "PresentationParameters$IsFullScreen$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "PresentationParameters$MultiSampleCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "PresentationParameters$PresentationInterval$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentInterval"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "PresentationParameters$DisplayOrientation$value", $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "PresentationParameters$RenderTargetUsage$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "BackBufferFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"));

    $.Property({Static:false, Public:true }, "BackBufferHeight", $.Int32);

    $.Property({Static:false, Public:true }, "BackBufferWidth", $.Int32);

    $.Property({Static:false, Public:true }, "Bounds", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true }, "DeviceWindowHandle", $asm01.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "DepthStencilFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"));

    $.Property({Static:false, Public:true }, "IsFullScreen", $.Boolean);

    $.Property({Static:false, Public:true }, "MultiSampleCount", $.Int32);

    $.Property({Static:false, Public:true }, "PresentationInterval", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentInterval"));

    $.Property({Static:false, Public:true }, "DisplayOrientation", $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"));

    $.Property({Static:false, Public:true }, "RenderTargetUsage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.Texture2D */ 

(function Texture2D$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D_$l$gc__DisplayClass2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Threading)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.SDL2.SDL)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.SDL2.SDL_image)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
        $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")]), [$asm01.TypeRef("System.IntPtr")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
        $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
        $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };

  function Texture2D__ctor$00 (graphicsDevice, width, height) {
    $thisType.prototype._ctor.call(this, 
      graphicsDevice, 
      width, 
      height, 
      false, 
      $T02().Color
    );
  };

  function Texture2D__ctor$01 (graphicsDevice, width, height, mipMap, format) {
    var $closure0 = new ($T04())();
    $closure0.graphicsDevice = graphicsDevice;
    $closure0.mipMap = mipMap;
    $T05().prototype._ctor.call(this);
    $closure0.$l$g4__this = this;
    if ($closure0.graphicsDevice === null) {
      throw $S00().Construct("graphicsDevice");
    }
    this.GraphicsResource$GraphicsDevice$value = $closure0.graphicsDevice;
    this.set_Width(width);
    this.set_Height(height);
    this.Texture$LevelCount$value = ((
      $closure0.mipMap
         ? $T05().CalculateMipLevels(width, height, 0)
         : 1)
     | 0);
    this.Texture$Format$value = format;
    this.GetGLSurfaceFormat();
    $T08().ForceToMainThread($T09().New($closure0, $T04().prototype.$l_ctor$gb__0, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.Texture2D_$l$gc__DisplayClass2, "$l_ctor$gb__0", JSIL.MethodSignature.Void, false); }));
  };

  function Texture2D_FromStream (graphicsDevice, stream) {
    var width = new JSIL.BoxedVariable(0);
    var height = new JSIL.BoxedVariable(0);
    var pixels = new JSIL.BoxedVariable(null);
    $thisType.TextureDataFromStreamEXT(stream, /* ref */ width, /* ref */ height, /* ref */ pixels);
    var result = $S01().Construct(graphicsDevice, width.get(), height.get());
    $S02().CallVirtual("SetData$b1", [$asm01.System.Byte], result, pixels.get());
    return result;
  };

  function Texture2D_get_Bounds () {
    return new ($T0D())(0, 0, this.get_Width(), this.get_Height());
  };

  function Texture2D_get_Height () {
    return this.Texture2D$Height$value;
  };

  function Texture2D_get_Width () {
    return this.Texture2D$Width$value;
  };

  function Texture2D_GetData$b1$02 (T, data) {
    $S03().CallVirtual("GetData$b1", [T], this, 
      0, 
      null, 
      data, 
      0, 
      data.length
    );
  };

  function Texture2D_GetData$b1$03 (T, data, startIndex, elementCount) {
    $S03().CallVirtual("GetData$b1", [T], this, 
      0, 
      null, 
      data, 
      startIndex, 
      elementCount
    );
  };

  function Texture2D_GetData$b1$04 (T, level, rect, data, startIndex, elementCount) {
    var $closure0 = new ($asm00.Microsoft.Xna.Framework.Graphics.Texture2D_$l$gc__DisplayClass8$b1.Of(T)) ();
    $closure0.level = (level | 0);
    $closure0.rect = rect;
    $closure0.data = data;
    $closure0.startIndex = (startIndex | 0);
    $closure0.elementCount = (elementCount | 0);
    $closure0.$l$g4__this = this;
    if (!(($closure0.data !== null) && (($closure0.data.length | 0) !== 0))) {
      throw $S04().Construct("data cannot be null");
    }
    if (($closure0.data.length | 0) < ((($closure0.startIndex | 0) + ($closure0.elementCount | 0)) | 0)) {
      throw $S04().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T10(), ["The data passed has a length of ", ($closure0.data.length).toString(), " but ", ($closure0.elementCount).toString(), " pixels have been requested."])));
    }
    $T08().ForceToMainThread($T09().New($closure0, $asm00.Microsoft.Xna.Framework.Graphics.Texture2D_$l$gc__DisplayClass8$b1.Of(T).prototype.$lGetData$gb__7, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.Texture2D_$l$gc__DisplayClass8$b1.Of(T), "$lGetData$gb__7", JSIL.MethodSignature.Void, false); }));
  };

  function Texture2D_INTERNAL_convertSurfaceFormat (surface) {
    var result = surface.MemberwiseClone();
    var surPtr = $S05().CallStatic($T12(), "op_Explicit", null, surface.MemberwiseClone()).cast(JSIL.Pointer.Of($asm00.Microsoft.Xna.Framework.Graphics.Texture2D_SDL_Surface));
    var pixelFormatPtr = $S05().CallStatic($T12(), "op_Explicit", null, surPtr.format.MemberwiseClone()).cast(JSIL.Pointer.Of($asm00.SDL2.SDL_SDL_PixelFormat));
    if ((pixelFormatPtr.format >>> 0) !== ($T13().SDL_PIXELFORMAT_ABGR8888 >>> 0)) {
      result = $T13().SDL_ConvertSurfaceFormat(surface.MemberwiseClone(), $T13().SDL_PIXELFORMAT_ABGR8888, 0).MemberwiseClone();
      $T13().SDL_FreeSurface(surface.MemberwiseClone());
    }
    return result;
  };

  function Texture2D_INTERNAL_getSurfaceHeight (surface) {
    var surPtr = $S05().CallStatic($T12(), "op_Explicit", null, surface.MemberwiseClone()).cast(JSIL.Pointer.Of($asm00.Microsoft.Xna.Framework.Graphics.Texture2D_SDL_Surface));
    return surPtr.h;
  };

  function Texture2D_INTERNAL_getSurfacePixels (surface) {
    var surPtr = $S05().CallStatic($T12(), "op_Explicit", null, surface.MemberwiseClone()).cast(JSIL.Pointer.Of($asm00.Microsoft.Xna.Framework.Graphics.Texture2D_SDL_Surface));
    return surPtr.pixels;
  };

  function Texture2D_INTERNAL_getSurfaceWidth (surface) {
    var surPtr = $S05().CallStatic($T12(), "op_Explicit", null, surface.MemberwiseClone()).cast(JSIL.Pointer.Of($asm00.Microsoft.Xna.Framework.Graphics.Texture2D_SDL_Surface));
    return surPtr.w;
  };

  function Texture2D_SaveAsJpeg (stream, width, height) {
    throw $S06().Construct("It's 2014. Time to move on.");
  };

  function Texture2D_SaveAsPng (stream, width, height) {
    var data = JSIL.Array.New($T0C(), Math.imul(Math.imul(this.get_Width(), this.get_Height()), 4));
    $S07().CallVirtual("GetData$b1", [$asm01.System.Byte], this, data);
    var surface = $T13().SDL_CreateRGBSurface(
      0, 
      this.get_Width(), 
      this.get_Height(), 
      32, 
      255, 
      65280, 
      16711680, 
      4278190080
    ).MemberwiseClone();
    $T13().SDL_LockSurface(surface.MemberwiseClone());
    $S08().CallStatic($T15(), "Copy", null, data, 0, $thisType.INTERNAL_getSurfacePixels(surface.MemberwiseClone()).MemberwiseClone(), data.length);
    $T13().SDL_UnlockSurface(surface.MemberwiseClone());
    if (!(((width | 0) === (this.get_Width() | 0)) && ((height | 0) === (this.get_Height() | 0)))) {
      var scaledSurface = $T13().SDL_CreateRGBSurface(
        0, 
        width, 
        height, 
        32, 
        255, 
        65280, 
        16711680, 
        4278190080
      ).MemberwiseClone();
      $S09().CallStatic($T13(), "SDL_BlitScaled", null, surface.MemberwiseClone(), $T12().Zero.MemberwiseClone(), scaledSurface.MemberwiseClone(), $T12().Zero.MemberwiseClone());
      $T13().SDL_FreeSurface(surface.MemberwiseClone());
      surface = scaledSurface;
    }
    var pngOut = JSIL.Array.New($T0C(), Math.imul(Math.imul(width, height), 4));
    var dst = $T13().SDL_RWFromMem(pngOut, pngOut.length).MemberwiseClone();
    $T16().IMG_SavePNG_RW(surface.MemberwiseClone(), dst.MemberwiseClone(), 1);
    $T13().SDL_FreeSurface(surface.MemberwiseClone());
    var size = (((((((((pngOut[33] | 0) << 24) | ((pngOut[34] | 0) << 16)) | ((pngOut[35] | 0) << 8)) | (pngOut[36] | 0)) + 41) | 0) + 57) | 0);
    stream.Write(pngOut, 0, size);
  };

  function Texture2D_set_Height (value) {
    this.Texture2D$Height$value = (value | 0);
  };

  function Texture2D_set_Width (value) {
    this.Texture2D$Width$value = (value | 0);
  };

  function Texture2D_SetData$b1$05 (T, data) {
    $S0A().CallVirtual("SetData$b1", [T], this, 
      0, 
      null, 
      data, 
      0, 
      data.length
    );
  };

  function Texture2D_SetData$b1$06 (T, data, startIndex, elementCount) {
    $S0A().CallVirtual("SetData$b1", [T], this, 
      0, 
      null, 
      data, 
      startIndex, 
      elementCount
    );
  };

  function Texture2D_SetData$b1$07 (T, level, rect, data, startIndex, elementCount) {
    var $closure0 = new ($asm00.Microsoft.Xna.Framework.Graphics.Texture2D_$l$gc__DisplayClass5$b1.Of(T)) ();
    $closure0.level = (level | 0);
    $closure0.data = data;
    $closure0.startIndex = (startIndex | 0);
    $closure0.elementCount = (elementCount | 0);
    $closure0.$l$g4__this = this;
    if ($closure0.data === null) {
      throw $S00().Construct("data");
    }
    if (rect !== null) {
      $closure0.x = (JSIL.Nullable_Value(rect).X | 0);
      $closure0.y = (JSIL.Nullable_Value(rect).Y | 0);
      $closure0.w = (JSIL.Nullable_Value(rect).Width | 0);
      $closure0.h = (JSIL.Nullable_Value(rect).Height | 0);
    } else {
      $closure0.x = 0;
      $closure0.y = 0;
      $closure0.w = ($T17().Max((this.get_Width() | 0) >> ($closure0.level | 0), 1) | 0);
      $closure0.h = ($T17().Max((this.get_Height() | 0) >> ($closure0.level | 0), 1) | 0);
    }
    $T08().ForceToMainThread($T09().New($closure0, $asm00.Microsoft.Xna.Framework.Graphics.Texture2D_$l$gc__DisplayClass5$b1.Of(T).prototype.$lSetData$gb__4, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.Texture2D_$l$gc__DisplayClass5$b1.Of(T), "$lSetData$gb__4", JSIL.MethodSignature.Void, false); }));
  };

  function Texture2D_TextureDataFromStreamEXT (stream, /* ref */ width, /* ref */ height, /* ref */ pixels) {
    var mem = JSIL.Array.New($T0C(), stream.get_Length());
    stream.Read(mem, 0, mem.length);
    var rwops = $T13().SDL_RWFromMem(mem, mem.length).MemberwiseClone();
    var surface = $T16().IMG_Load_RW(rwops.MemberwiseClone(), 1).MemberwiseClone();
    surface = $thisType.INTERNAL_convertSurfaceFormat(surface.MemberwiseClone()).MemberwiseClone();
    width.set($thisType.INTERNAL_getSurfaceWidth(surface.MemberwiseClone()));
    height.set($thisType.INTERNAL_getSurfaceHeight(surface.MemberwiseClone()));
    pixels.set(JSIL.Array.New($T0C(), Math.imul((((width.get() | 0) * (height.get() | 0)) | 0), 4)));
    $S0B().CallStatic($T15(), "Copy", null, $thisType.INTERNAL_getSurfacePixels(surface.MemberwiseClone()).MemberwiseClone(), pixels.get(), 0, pixels.get().length);

    for (var i = 0; i < (pixels.get().length | 0); i = ((i + 4) | 0)) {
      if ((pixels.get()[((i + 3) | 0)] | 0) === 0) {
        pixels.get()[i] = 0;
        pixels.get()[((i + 1) | 0)] = 0;
        pixels.get()[((i + 2) | 0)] = 0;
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture"), 
      Name: "Microsoft.Xna.Framework.Graphics.Texture2D", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Int32, 
          $.Int32
        ]), 
      Texture2D__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Int32, 
          $.Int32, $.Boolean, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
        ]), 
      Texture2D__ctor$01
    );

    $.Method({Static:true , Public:true }, "FromStream", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.IO.Stream")]), 
      Texture2D_FromStream
    );

    $.Method({Static:false, Public:true }, "get_Bounds", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Texture2D_get_Bounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      Texture2D_get_Height
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      Texture2D_get_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      Texture2D_GetData$b1$02
    );

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      Texture2D_GetData$b1$03
    );

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      Texture2D_GetData$b1$04
    );

    $.Method({Static:true , Public:false}, "INTERNAL_convertSurfaceFormat", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      Texture2D_INTERNAL_convertSurfaceFormat
    );

    $.Method({Static:true , Public:false}, "INTERNAL_getSurfaceHeight", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      Texture2D_INTERNAL_getSurfaceHeight
    );

    $.Method({Static:true , Public:false}, "INTERNAL_getSurfacePixels", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      Texture2D_INTERNAL_getSurfacePixels
    );

    $.Method({Static:true , Public:false}, "INTERNAL_getSurfaceWidth", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      Texture2D_INTERNAL_getSurfaceWidth
    );

    $.Method({Static:false, Public:true }, "SaveAsJpeg", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $.Int32, 
          $.Int32
        ]), 
      Texture2D_SaveAsJpeg
    );

    $.Method({Static:false, Public:true }, "SaveAsPng", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $.Int32, 
          $.Int32
        ]), 
      Texture2D_SaveAsPng
    );

    $.Method({Static:false, Public:false}, "set_Height", 
      JSIL.MethodSignature.Action($.Int32), 
      Texture2D_set_Height
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Width", 
      JSIL.MethodSignature.Action($.Int32), 
      Texture2D_set_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      Texture2D_SetData$b1$05
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      Texture2D_SetData$b1$06
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      Texture2D_SetData$b1$07
    );

    $.Method({Static:true , Public:true }, "TextureDataFromStreamEXT", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])
        ]), 
      Texture2D_TextureDataFromStreamEXT
    );

    $.Field({Static:false, Public:false}, "Texture2D$Width$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Texture2D$Height$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "Bounds", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.Texture2D+SDL_Surface */ 

(function SDL_Surface$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.Texture2D+SDL_Surface", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "flags", $.UInt32); 
    $.Field({Static:false, Public:true }, "format", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "w", $.Int32); 
    $.Field({Static:false, Public:true }, "h", $.Int32); 
    $.Field({Static:false, Public:false}, "pitch", $.Int32); 
    $.Field({Static:false, Public:true }, "pixels", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "userdata", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "locked", $.Int32); 
    $.Field({Static:false, Public:false}, "lock_data", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "clip_rect", $asm00.TypeRef("SDL2.SDL+SDL_Rect")); 
    $.Field({Static:false, Public:false}, "map", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "refcount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.Texture2D+<>c__DisplayClass2 */ 

(function $l$gc__DisplayClass2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };

  function $l$gc__DisplayClass2__ctor () {
  };

  function $l$gc__DisplayClass2_$l_ctor$gb__0 () {
    this.$l$g4__this.texture = (this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).CreateTexture($T03().__Type__, this.$l$g4__this.Texture$Format$value, this.mipMap);
    if (!(!((this.$l$g4__this.Texture$Format$value === $T05().Dxt1) || 
          (this.$l$g4__this.Texture$Format$value === $T05().Dxt3)) && (this.$l$g4__this.Texture$Format$value !== $T05().Dxt5))) {

      for (var i = 0; i < (this.$l$g4__this.Texture$LevelCount$value | 0); i = ((i + 1) | 0)) {
        var levelWidth = ($T07().Max(((this.$l$g4__this).get_Width() | 0) >> i, 1) | 0);
        var levelHeight = ($T07().Max(((this.$l$g4__this).get_Height() | 0) >> i, 1) | 0);
        this.graphicsDevice.GraphicsDevice$GLDevice$value.glCompressedTexImage2D(
          $T08().GL_TEXTURE_2D, 
          i, 
          (this.$l$g4__this.glInternalFormat).valueOf(), 
          levelWidth, 
          levelHeight, 
          0, 
          Math.imul(Math.imul(((((levelWidth + 3) | 0) / 4) | 0), ((((levelHeight + 3) | 0) / 4) | 0)), (this.$l$g4__this).GetFormatSize()), 
          $T09().Zero.MemberwiseClone()
        );
      }
    } else {

      for (i = 0; i < (this.$l$g4__this.Texture$LevelCount$value | 0); i = ((i + 1) | 0)) {
        this.graphicsDevice.GraphicsDevice$GLDevice$value.glTexImage2D(
          $T08().GL_TEXTURE_2D, 
          i, 
          (this.$l$g4__this.glInternalFormat).valueOf(), 
          $T07().Max(((this.$l$g4__this).get_Width() | 0) >> i, 1), 
          $T07().Max(((this.$l$g4__this).get_Height() | 0) >> i, 1), 
          0, 
          this.$l$g4__this.glFormat, 
          this.$l$g4__this.glType, 
          $T09().Zero.MemberwiseClone()
        );
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.Texture2D+<>c__DisplayClass2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2__ctor
    );

    $.Method({Static:false, Public:true }, "$l.ctor$gb__0", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2_$l_ctor$gb__0
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:true }, "graphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Field({Static:false, Public:true }, "mipMap", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.Texture2D+<>c__DisplayClass5`1 */ 

(function $l$gc__DisplayClass5$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandleType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int64")]))) ();
  };

  function $l$gc__DisplayClass5$b1__ctor () {
  };

  function $l$gc__DisplayClass5$b1_$lSetData$gb__4 () {
    var dataHandle = $T00().Alloc(this.data, $T01().Pinned).MemberwiseClone();
    var elementSizeInBytes = ($S00().CallStatic($T03(), "SizeOf", null, $thisType.T.get(this)) | 0);
    var startByte = Math.imul(this.startIndex, elementSizeInBytes);
    var dataPtr = $S01().CallStatic($T04(), "op_Explicit", null, $T05().op_Addition(
        (dataHandle.AddrOfPinnedObject().MemberwiseClone()).ToInt64(), 
        $T05().FromNumber(startByte)
      )).MemberwiseClone();
    try {
      (this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).BindTexture(this.$l$g4__this.texture);
      if (this.$l$g4__this.glFormat === $T09().GL_COMPRESSED_TEXTURE_FORMATS) {
        if ((this.elementCount | 0) > 0) {
          var dataLength = Math.imul(this.elementCount, elementSizeInBytes);
        } else {
          dataLength = (((this.data.length | 0) - startByte) | 0);
        }
        this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glCompressedTexSubImage2D(
          $T09().GL_TEXTURE_2D, 
          this.level, 
          this.x, 
          this.y, 
          this.w, 
          this.h, 
          this.$l$g4__this.glInternalFormat, 
          dataLength, 
          dataPtr.MemberwiseClone()
        );
      } else {
        var packSize = ((this.$l$g4__this).GetFormatSize() | 0);
        if (packSize !== 4) {
          this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glPixelStorei($T09().GL_UNPACK_ALIGNMENT, packSize);
        }
        this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glTexSubImage2D(
          $T09().GL_TEXTURE_2D, 
          this.level, 
          this.x, 
          this.y, 
          this.w, 
          this.h, 
          this.$l$g4__this.glFormat, 
          this.$l$g4__this.glType, 
          dataPtr.MemberwiseClone()
        );
        if (packSize !== 4) {
          this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glPixelStorei($T09().GL_UNPACK_ALIGNMENT, 4);
        }
      }
    } finally {
      dataHandle.Free();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.Texture2D+<>c__DisplayClass5`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass5$b1__ctor
    );

    $.Method({Static:false, Public:true }, "$lSetData$gb__4", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass5$b1_$lSetData$gb__4
    );

    $.Field({Static:false, Public:true }, "x", $.Int32); 
    $.Field({Static:false, Public:true }, "y", $.Int32); 
    $.Field({Static:false, Public:true }, "w", $.Int32); 
    $.Field({Static:false, Public:true }, "h", $.Int32); 
    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:true }, "level", $.Int32); 
    $.Field({Static:false, Public:true }, "data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "startIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "elementCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.Texture2D+<>c__DisplayClass8`1 */ 

(function $l$gc__DisplayClass8$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandleType)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function $l$gc__DisplayClass8$b1__ctor () {
  };

  function $l$gc__DisplayClass8$b1_$lGetData$gb__7 () {
    if (!(this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).ReadTargetIfApplicable$b1($thisType.T.get(this))(this.$l$g4__this.texture, this.level, this.data, this.rect)) {
      (this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).BindTexture(this.$l$g4__this.texture);
      if (this.$l$g4__this.glFormat === $T03().GL_COMPRESSED_TEXTURE_FORMATS) {
        throw $S00().Construct("GetData, CompressedTexture");
      }
      if (this.rect === null) {
        var ptr = $T05().Alloc(this.data, $T06().Pinned).MemberwiseClone();
        try {
          this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetTexImage(
            $T03().GL_TEXTURE_2D, 
            0, 
            this.$l$g4__this.glFormat, 
            this.$l$g4__this.glType, 
            ptr.AddrOfPinnedObject().MemberwiseClone()
          );
        } finally {
          ptr.Free();
        }
      } else {
        var texData = JSIL.Array.New($thisType.T.get(this), Math.imul((this.$l$g4__this).get_Width(), (this.$l$g4__this).get_Height()));
        ptr = $T05().Alloc(texData, $T06().Pinned).MemberwiseClone();
        try {
          this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetTexImage(
            $T03().GL_TEXTURE_2D, 
            0, 
            this.$l$g4__this.glFormat, 
            this.$l$g4__this.glType, 
            ptr.AddrOfPinnedObject().MemberwiseClone()
          );
        } finally {
          ptr.Free();
        }
        var region = JSIL.Nullable_Value(this.rect).MemberwiseClone();
        var curPixel = -1;

        for (var row = (region.Y | 0); row < (((region.Y | 0) + (region.Height | 0)) | 0); row = ((row + 1) | 0)) {

          for (var col = (region.X | 0); col < (((region.X | 0) + (region.Width | 0)) | 0); col = ((col + 1) | 0)) {
            curPixel = ((curPixel + 1) | 0);
            if (curPixel >= (this.startIndex | 0)) {
              if (curPixel > (this.elementCount | 0)) {
                return;
              }
              this.data[((curPixel - (this.startIndex | 0)) | 0)] = JSIL.CloneParameter($thisType.T.get(this), texData[((Math.imul(row, (this.$l$g4__this).get_Width()) + col) | 0)]);
            }
          }
        }
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.Texture2D+<>c__DisplayClass8`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass8$b1__ctor
    );

    $.Method({Static:false, Public:true }, "$lGetData$gb__7", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass8$b1_$lGetData$gb__7
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:true }, "level", $.Int32); 
    $.Field({Static:false, Public:true }, "rect", $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")])); 
    $.Field({Static:false, Public:true }, "data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "startIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "elementCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.RenderTarget2D */ 

(function RenderTarget2D$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RenderTargetUsage)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RenderTarget2D_$l$gc__DisplayClassc)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Threading)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };

  function RenderTarget2D__ctor$00 (graphicsDevice, width, height) {
    $thisType.prototype._ctor.call(this, 
      graphicsDevice, 
      width, 
      height, 
      false, 
      $T02().Color, 
      $T03().None, 
      0, 
      $T04().DiscardContents
    );
  };

  function RenderTarget2D__ctor$01 (graphicsDevice, width, height, mipMap, preferredFormat, preferredDepthFormat) {
    $thisType.prototype._ctor.call(this, 
      graphicsDevice, 
      width, 
      height, 
      mipMap, 
      preferredFormat, 
      preferredDepthFormat, 
      0, 
      $T04().DiscardContents
    );
  };

  function RenderTarget2D__ctor$02 (graphicsDevice, width, height, mipMap, preferredFormat, preferredDepthFormat, preferredMultiSampleCount, usage) {
    var $closure0 = new ($T06())();
    $closure0.graphicsDevice = graphicsDevice;
    $closure0.width = (width | 0);
    $closure0.height = (height | 0);
    $closure0.preferredDepthFormat = preferredDepthFormat;
    $T07().prototype._ctor.call(this, 
      $closure0.graphicsDevice, 
      $closure0.width, 
      $closure0.height, 
      mipMap, 
      preferredFormat
    );
    $closure0.$l$g4__this = this;
    this.set_DepthStencilFormat($closure0.preferredDepthFormat);
    this.RenderTarget2D$MultiSampleCount$value = (preferredMultiSampleCount | 0);
    this.set_RenderTargetUsage(usage);
    if ($closure0.preferredDepthFormat !== $T03().None) {
      $T08().ForceToMainThread($T09().New($closure0, $T06().prototype.$l_ctor$gb__a, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.RenderTarget2D_$l$gc__DisplayClassc, "$l_ctor$gb__a", JSIL.MethodSignature.Void, false); }));
    }
  };

  function RenderTarget2D_$lDispose$gb__e () {
    if ((this.glDepthStencilBuffer >>> 0) !== 0) {
      $T0B().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.DeleteRenderbuffer(this.glDepthStencilBuffer);
    }
  };

  function RenderTarget2D_add_ContentLost (value) {
    var eventHandler = this.ContentLost;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0D().Combine(eventHandler2, value);
      eventHandler = $T0E().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "ContentLost"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function RenderTarget2D_Dispose$03 (disposing) {
    if (!this.GraphicsResource$IsDisposed$value) {
      $T00().AddDisposeAction($T09().New(this, $thisType.prototype.$lDispose$gb__e, function () { return JSIL.GetMethodInfo($thisType, "$lDispose$gb__e", JSIL.MethodSignature.Void, false); }));
    }
    $T10().prototype.Dispose.call(this, disposing);
  };

  function RenderTarget2D_get_DepthStencilFormat () {
    return this.RenderTarget2D$DepthStencilFormat$value;
  };

  function RenderTarget2D_get_IsContentLost () {
    return false;
  };

  function RenderTarget2D_get_MultiSampleCount () {
    return this.RenderTarget2D$MultiSampleCount$value;
  };

  function RenderTarget2D_get_RenderTargetUsage () {
    return this.RenderTarget2D$RenderTargetUsage$value;
  };

  function RenderTarget2D_GraphicsDeviceResetting () {
    $T10().prototype.GraphicsDeviceResetting.call(this);
  };

  function RenderTarget2D_Microsoft_Xna_Framework_Graphics_IRenderTarget_get_DepthStencilBuffer () {
    return this.glDepthStencilBuffer;
  };

  function RenderTarget2D_remove_ContentLost (value) {
    var eventHandler = this.ContentLost;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T0D().Remove(eventHandler2, value);
      eventHandler = $T0E().CompareExchange$b1($T0C())(/* ref */ new JSIL.MemberReference(this, "ContentLost"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function RenderTarget2D_set_DepthStencilFormat (value) {
    this.RenderTarget2D$DepthStencilFormat$value = value;
  };

  function RenderTarget2D_set_MultiSampleCount (value) {
    this.RenderTarget2D$MultiSampleCount$value = (value | 0);
  };

  function RenderTarget2D_set_RenderTargetUsage (value) {
    this.RenderTarget2D$RenderTargetUsage$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
      Name: "Microsoft.Xna.Framework.Graphics.RenderTarget2D", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Int32, 
          $.Int32
        ]), 
      RenderTarget2D__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Int32, 
          $.Int32, $.Boolean, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")
        ]), 
      RenderTarget2D__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Int32, 
          $.Int32, $.Boolean, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"), 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage")
        ]), 
      RenderTarget2D__ctor$02
    );

    $.Method({Static:false, Public:false}, "$lDispose$gb__e", 
      JSIL.MethodSignature.Void, 
      RenderTarget2D_$lDispose$gb__e
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "add_ContentLost", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      RenderTarget2D_add_ContentLost
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      RenderTarget2D_Dispose$03
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_DepthStencilFormat", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")), 
      RenderTarget2D_get_DepthStencilFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsContentLost", 
      JSIL.MethodSignature.Return($.Boolean), 
      RenderTarget2D_get_IsContentLost
    );

    $.Method({Static:false, Public:true }, "get_MultiSampleCount", 
      JSIL.MethodSignature.Return($.Int32), 
      RenderTarget2D_get_MultiSampleCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_RenderTargetUsage", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage")), 
      RenderTarget2D_get_RenderTargetUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "GraphicsDeviceResetting", 
      JSIL.MethodSignature.Void, 
      RenderTarget2D_GraphicsDeviceResetting
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IRenderTarget.get_DepthStencilBuffer", 
      JSIL.MethodSignature.Return($.UInt32), 
      RenderTarget2D_Microsoft_Xna_Framework_Graphics_IRenderTarget_get_DepthStencilBuffer
    )
      .Overrides($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IRenderTarget"), "get_DepthStencilBuffer");

    $.Method({Static:false, Public:true }, "remove_ContentLost", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      RenderTarget2D_remove_ContentLost
    );

    $.Method({Static:false, Public:false}, "set_DepthStencilFormat", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")), 
      RenderTarget2D_set_DepthStencilFormat
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_MultiSampleCount", 
      JSIL.MethodSignature.Action($.Int32), 
      RenderTarget2D_set_MultiSampleCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RenderTargetUsage", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage")), 
      RenderTarget2D_set_RenderTargetUsage
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "glDepthStencilBuffer", $.UInt32); 
    $.Field({Static:false, Public:false}, "ContentLost", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "RenderTarget2D$DepthStencilFormat$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RenderTarget2D$MultiSampleCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RenderTarget2D$RenderTargetUsage$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "DepthStencilFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"));

    $.Property({Static:false, Public:true }, "MultiSampleCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "RenderTargetUsage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTargetUsage"));

    $.Property({Static:false, Public:true }, "IsContentLost", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.IRenderTarget.DepthStencilBuffer", $.UInt32);

    $.Event({Static:false, Public:true }, "ContentLost", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IRenderTarget")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.RenderTarget2D+<>c__DisplayClassc */ 

(function $l$gc__DisplayClassc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };

  function $l$gc__DisplayClassc__ctor () {
  };

  function $l$gc__DisplayClassc_$l_ctor$gb__a () {
    this.$l$g4__this.glDepthStencilBuffer = ((this.graphicsDevice.GraphicsDevice$GLDevice$value).GenRenderbuffer(this.width, this.height, this.preferredDepthFormat) >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.RenderTarget2D+<>c__DisplayClassc", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassc__ctor
    );

    $.Method({Static:false, Public:true }, "$l.ctor$gb__a", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassc_$l_ctor$gb__a
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RenderTarget2D")); 
    $.Field({Static:false, Public:true }, "graphicsDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Field({Static:false, Public:true }, "width", $.Int32); 
    $.Field({Static:false, Public:true }, "height", $.Int32); 
    $.Field({Static:false, Public:true }, "preferredDepthFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.SpriteBatch */ 

(function SpriteBatch$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch_TextureComparer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch_BackToFrontComparer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch_FrontToBackComparer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch_SpriteInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BufferUsage)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexElementSize)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexBuffer)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterCollection)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectPassCollection)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectTechnique)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthStencilState)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Char))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Rectangle))) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize(System.Array.Of($asm01.System.Int16))) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SamplerStateCollection)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectPass)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch_SpriteInfo))) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureCollection)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SetDataOptions)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass))) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass))) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PrimitiveType)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Type"), 
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize"), 
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BufferUsage")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $asm01.TypeRef("System.String"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
        $asm01.TypeRef("System.Single"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])
      ]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SetDataOptions")
      ], ["T"]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectPass).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function SpriteBatch__ctor (graphicsDevice) {
    $T06().prototype._ctor.call(this);
    if (graphicsDevice === null) {
      throw $S01().Construct("graphicsDevice");
    }
    this.GraphicsResource$GraphicsDevice$value = graphicsDevice;
    this.vertexInfo = JSIL.Array.New($T08(), 8192);
    this.spriteData = JSIL.Array.New($T09(), 2048);
    this.vertexBuffer = $S02().Construct(graphicsDevice, $T08().__Type__, 8192, $T0B().WriteOnly);
    this.indexBuffer = $S03().Construct(graphicsDevice, $T0D().SixteenBits, 12288, $T0B().WriteOnly);
    $S04().CallVirtual("SetData$b1", [$asm01.System.Int16], this.indexBuffer, $thisType.indexData);
    this.spriteEffect = $S05().Construct(graphicsDevice, $thisType.spriteEffectCode);
    this.spriteMatrixTransform = $S06().CallVirtual("get_Item", null, this.spriteEffect.Effect$Parameters$value, "MatrixTransform");
    this.spriteEffectPass = $S07().CallVirtual("get_Item", null, this.spriteEffect.Effect$CurrentTechnique$value.EffectTechnique$Passes$value, 0);
    this.beginCalled = false;
    this.numSprites = 0;
  };

  function SpriteBatch_Begin$00 () {
    this.Begin(
      $T13().Deferred, 
      $T14().AlphaBlend, 
      $T15().LinearClamp, 
      $T16().None, 
      $T17().CullCounterClockwise, 
      null, 
      $T18().get_Identity().MemberwiseClone()
    );
  };

  function SpriteBatch_Begin$01 (sortMode, blendState) {
    this.Begin(
      sortMode, 
      blendState, 
      $T15().LinearClamp, 
      $T16().None, 
      $T17().CullCounterClockwise, 
      null, 
      $T18().get_Identity().MemberwiseClone()
    );
  };

  function SpriteBatch_Begin$02 (sortMode, blendState, samplerState, depthStencilState, rasterizerState) {
    this.Begin(
      sortMode, 
      blendState, 
      samplerState, 
      depthStencilState, 
      rasterizerState, 
      null, 
      $T18().get_Identity().MemberwiseClone()
    );
  };

  function SpriteBatch_Begin$03 (sortMode, blendState, samplerState, depthStencilState, rasterizerState, effect) {
    this.Begin(
      sortMode, 
      blendState, 
      samplerState, 
      depthStencilState, 
      rasterizerState, 
      effect, 
      $T18().get_Identity().MemberwiseClone()
    );
  };

  function SpriteBatch_Begin$04 (sortMode, blendState, samplerState, depthStencilState, rasterizerState, effect, transformationMatrix) {
    if (this.beginCalled) {
      throw $S08().Construct("Begin has been called before calling End after the last call to Begin. Begin cannot be called again until End has been successfully called.");
    }
    this.beginCalled = true;
    this.sortMode = sortMode;
    this.blendState = JSIL.Coalesce(blendState, $T14().AlphaBlend);
    this.samplerState = JSIL.Coalesce(samplerState, $T15().LinearClamp);
    this.depthStencilState = JSIL.Coalesce(depthStencilState, $T16().None);
    this.rasterizerState = JSIL.Coalesce(rasterizerState, $T17().CullCounterClockwise);
    this.customEffect = effect;
    this.transformMatrix = transformationMatrix.MemberwiseClone();
    if (sortMode === $T13().Immediate) {
      this.PrepRenderState();
    }
  };

  function SpriteBatch_CheckBegin (method) {
    if (!this.beginCalled) {
      throw $S08().Construct((method + " was called, but Begin has not yet been called. Begin must be called successfully before you can call " + method + "."));
    }
  };

  function SpriteBatch_Dispose$05 (disposing) {
    if (!(this.GraphicsResource$IsDisposed$value || !disposing)) {
      (this.spriteEffect).Dispose();
      (this.indexBuffer).Dispose();
      (this.vertexBuffer).Dispose();
    }
    $T06().prototype.Dispose.call(this, disposing);
  };

  function SpriteBatch_Draw$06 (texture, position, color) {
    this.CheckBegin("Draw");
    this.PushSprite(
      texture, 
      null, 
      $S09().Construct(position.X, position.Y, 1, 1), 
      color.MemberwiseClone(), 
      $T00().get_Zero().MemberwiseClone(), 
      0, 
      0, 
      0
    );
  };

  function SpriteBatch_Draw$07 (texture, position, sourceRectangle, color) {
    this.CheckBegin("Draw");
    this.PushSprite(
      texture, 
      sourceRectangle, 
      $S09().Construct(position.X, position.Y, 1, 1), 
      color.MemberwiseClone(), 
      $T00().get_Zero().MemberwiseClone(), 
      0, 
      0, 
      0
    );
  };

  function SpriteBatch_Draw$08 (texture, position, sourceRectangle, color, rotation, origin, scale, effects, layerDepth) {
    this.CheckBegin("Draw");
    this.PushSprite(
      texture, 
      sourceRectangle, 
      $S09().Construct(position.X, position.Y, scale, scale), 
      color.MemberwiseClone(), 
      origin.MemberwiseClone(), 
      rotation, 
      layerDepth, 
      effects.valueOf()
    );
  };

  function SpriteBatch_Draw$09 (texture, position, sourceRectangle, color, rotation, origin, scale, effects, layerDepth) {
    this.CheckBegin("Draw");
    this.PushSprite(
      texture, 
      sourceRectangle, 
      $S09().Construct(position.X, position.Y, scale.X, scale.Y), 
      color.MemberwiseClone(), 
      origin.MemberwiseClone(), 
      rotation, 
      layerDepth, 
      effects.valueOf()
    );
  };

  function SpriteBatch_Draw$0A (texture, destinationRectangle, color) {
    this.CheckBegin("Draw");
    this.PushSprite(
      texture, 
      null, 
      $S09().Construct(+(destinationRectangle.X), +(destinationRectangle.Y), +(destinationRectangle.Width), +(destinationRectangle.Height)), 
      color.MemberwiseClone(), 
      $T00().get_Zero().MemberwiseClone(), 
      0, 
      0, 
      8
    );
  };

  function SpriteBatch_Draw$0B (texture, destinationRectangle, sourceRectangle, color) {
    this.CheckBegin("Draw");
    this.PushSprite(
      texture, 
      sourceRectangle, 
      $S09().Construct(+(destinationRectangle.X), +(destinationRectangle.Y), +(destinationRectangle.Width), +(destinationRectangle.Height)), 
      color.MemberwiseClone(), 
      $T00().get_Zero().MemberwiseClone(), 
      0, 
      0, 
      8
    );
  };

  function SpriteBatch_Draw$0C (texture, destinationRectangle, sourceRectangle, color, rotation, origin, effects, layerDepth) {
    this.CheckBegin("Draw");
    this.PushSprite(
      texture, 
      sourceRectangle, 
      $S09().Construct(+(destinationRectangle.X), +(destinationRectangle.Y), +(destinationRectangle.Width), +(destinationRectangle.Height)), 
      color.MemberwiseClone(), 
      origin.MemberwiseClone(), 
      rotation, 
      layerDepth, 
      ($T20().$Cast(effects | $T20().$Cast(8))).valueOf()
    );
  };

  function SpriteBatch_DrawString$0D (spriteFont, text, position, color) {
    if (text === null) {
      throw $S01().Construct("text");
    }
    $S0A().CallVirtual("DrawString", null, this, 
      spriteFont, 
      text.toString(), 
      position.MemberwiseClone(), 
      color.MemberwiseClone(), 
      0, 
      $T00().get_Zero(), 
      $S0B().Construct(1), 
      $T20().None, 
      0
    );
  };

  function SpriteBatch_DrawString$0E (spriteFont, text, position, color, rotation, origin, scale, effects, layerDepth) {
    if (text === null) {
      throw $S01().Construct("text");
    }
    $S0A().CallVirtual("DrawString", null, this, 
      spriteFont, 
      text.toString(), 
      position.MemberwiseClone(), 
      color.MemberwiseClone(), 
      rotation, 
      origin, 
      $S0B().Construct(scale), 
      effects, 
      layerDepth
    );
  };

  function SpriteBatch_DrawString$0F (spriteFont, text, position, color, rotation, origin, scale, effects, layerDepth) {
    if (text === null) {
      throw $S01().Construct("text");
    }
    $S0A().CallVirtual("DrawString", null, this, 
      spriteFont, 
      text.toString(), 
      position.MemberwiseClone(), 
      color.MemberwiseClone(), 
      rotation, 
      origin, 
      scale.MemberwiseClone(), 
      effects, 
      layerDepth
    );
  };

  function SpriteBatch_DrawString$10 (spriteFont, text, position, color) {
    $S0A().CallVirtual("DrawString", null, this, 
      spriteFont, 
      text, 
      position.MemberwiseClone(), 
      color.MemberwiseClone(), 
      0, 
      $T00().get_Zero(), 
      $S0B().Construct(1), 
      $T20().None, 
      0
    );
  };

  function SpriteBatch_DrawString$11 (spriteFont, text, position, color, rotation, origin, scale, effects, layerDepth) {
    $S0A().CallVirtual("DrawString", null, this, 
      spriteFont, 
      text, 
      position.MemberwiseClone(), 
      color.MemberwiseClone(), 
      rotation, 
      origin, 
      $S0B().Construct(scale), 
      effects, 
      layerDepth
    );
  };

  function SpriteBatch_DrawString$12 (spriteFont, text, position, color, rotation, origin, scale, effects, layerDepth) {
    var $temp00;
    $temp00 = new ($T00())();
    this.CheckBegin("DrawString");
    if (text === null) {
      throw $S01().Construct("text");
    }
    if ((text.length | 0) !== 0) {
      var baseOffset = origin.MemberwiseClone();
      if (effects !== $T20().None) {
        baseOffset = $T00().op_Subtraction(baseOffset.MemberwiseClone(), $S0C().CallStatic($T00(), "op_Multiply", null, 
            $S0D().CallVirtual("MeasureString", null, spriteFont, text).MemberwiseClone(), 
            $thisType.axisIsMirrored[effects.valueOf()]
          ));
      }
      var curOffset = $T00().get_Zero().MemberwiseClone();
      var firstInLine = true;

      for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
        var c = (text[i]);
        if ((c.charCodeAt(0) | 0) !== (("\r").charCodeAt(0) | 0)) {
          if ((c.charCodeAt(0) | 0) === (("\n").charCodeAt(0) | 0)) {
            curOffset.X = 0;
            curOffset.Y += +(spriteFont.SpriteFont$LineSpacing$value);
            firstInLine = true;
          } else {
            var index = ((spriteFont.characterMap).IndexOf(c) | 0);
            if (index === -1) {
              if (spriteFont.SpriteFont$DefaultCharacter$value === null) {
                throw $S0E().Construct("Text contains characters that cannot be resolved by this SpriteFont.", "text");
              }
              index = ((spriteFont.characterMap).IndexOf(JSIL.Nullable_Value(spriteFont.SpriteFont$DefaultCharacter$value)) | 0);
            }
            if (firstInLine) {
              curOffset.X += (Math.abs((spriteFont.kerning).get_Item(index).X));
              firstInLine = false;
            } else {
              curOffset.X += +spriteFont.SpriteFont$Spacing$value + +(spriteFont.kerning).get_Item(index).X;
            }
            var offset = baseOffset;
            offset.X += (+curOffset.X + +((spriteFont.croppingData).get_Item(index).X)) * +$thisType.axisDirection[effects.valueOf()].X;
            offset.Y += (+curOffset.Y + +((spriteFont.croppingData).get_Item(index).Y)) * +$thisType.axisDirection[effects.valueOf()].Y;
            if (effects !== $T20().None) {
              offset = $T00().op_Addition(offset.MemberwiseClone(), $S0C().CallStatic($T00(), "op_Multiply", null, 
                  ($temp00._ctor(
                      +((spriteFont.glyphData).get_Item(index).Width), 
                      +((spriteFont.glyphData).get_Item(index).Height)
                    ), 
                    $temp00), 
                  $thisType.axisIsMirrored[effects.valueOf()]
                ));
            }
            this.PushSprite(
              spriteFont.textureValue, 
              (spriteFont.glyphData).get_Item(index).MemberwiseClone(), 
              $S09().Construct(position.X, position.Y, scale.X, scale.Y), 
              color.MemberwiseClone(), 
              offset.MemberwiseClone(), 
              rotation, 
              layerDepth, 
              effects.valueOf()
            );
            curOffset.X += +(spriteFont.kerning).get_Item(index).Y + +(spriteFont.kerning).get_Item(index).Z;
          }
        }
      }
    }
  };

  function SpriteBatch_End () {
    if (!this.beginCalled) {
      throw $S08().Construct("End was called, but Begin has not yet been called. You must call Begin  successfully before you can call End.");
    }
    this.beginCalled = false;
    if (this.sortMode !== $T13().Immediate) {
      this.FlushBatch();
    }
    this.customEffect = null;
  };

  function SpriteBatch_FlushBatch () {
    var $s00 = new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.System.Int32, 
        $asm01.System.Int32, $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])
      ], ["T"]);
    var offset = 0;
    var curTexture = null;
    this.PrepRenderState();
    if ((this.numSprites | 0) !== 0) {
      if (this.sortMode === $T13().Texture) {
        $s00.CallStatic($T2C(), "Sort$b1", [$asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch_SpriteInfo], this.spriteData, 0, this.numSprites, $thisType.TextureCompare);
      } else if (this.sortMode === $T13().BackToFront) {
        $s00.CallStatic($T2C(), "Sort$b1", [$asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch_SpriteInfo], this.spriteData, 0, this.numSprites, $thisType.BackToFrontCompare);
      } else if (this.sortMode === $T13().FrontToBack) {
        $s00.CallStatic($T2C(), "Sort$b1", [$asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch_SpriteInfo], this.spriteData, 0, this.numSprites, $thisType.FrontToBackCompare);
      }

      for (var i = 0; i < (this.numSprites | 0); i = ((i + 1) | 0)) {
        if (this.spriteData[i].texture !== curTexture) {
          if (i > offset) {
            this.RenderBatch(offset, ((i - offset) | 0));
          }
          curTexture = this.spriteData[i].texture;
          offset = i;
        }
      }
      this.RenderBatch(offset, (((this.numSprites | 0) - offset) | 0));
      this.numSprites = 0;
    }
  };

  function SpriteBatch_GenerateIndexArray () {
    var result = JSIL.Array.New($T0E(), 12288);
    var i = 0;
    var j = 0;

    while (i < 12288) {
      result[i] = ((j + 0x8000 & 0xFFFF) - 0x8000);
      result[((i + 1) | 0)] = ((((j + 1) | 0) + 0x8000 & 0xFFFF) - 0x8000);
      result[((i + 2) | 0)] = ((((j + 2) | 0) + 0x8000 & 0xFFFF) - 0x8000);
      result[((i + 3) | 0)] = ((((j + 3) | 0) + 0x8000 & 0xFFFF) - 0x8000);
      result[((i + 4) | 0)] = ((((j + 2) | 0) + 0x8000 & 0xFFFF) - 0x8000);
      result[((i + 5) | 0)] = ((((j + 1) | 0) + 0x8000 & 0xFFFF) - 0x8000);
      i = ((i + 6) | 0);
      j = ((j + 4) | 0);
    }
    return result;
  };

  function SpriteBatch_PrepRenderState () {
    var projection = new JSIL.BoxedVariable(new ($T18())());
    (this.GraphicsResource$GraphicsDevice$value).set_BlendState(this.blendState);
    (this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$SamplerStates$value).set_Item(0, this.samplerState);
    (this.GraphicsResource$GraphicsDevice$value).set_DepthStencilState(this.depthStencilState);
    this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$RasterizerState$value = this.rasterizerState;
    (this.GraphicsResource$GraphicsDevice$value).SetVertexBuffer(this.vertexBuffer);
    this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$Indices$value = this.indexBuffer;
    var viewport = (this.GraphicsResource$GraphicsDevice$value).get_Viewport().MemberwiseClone();
    $T18().CreateOrthographicOffCenter(
      0, 
      +(viewport.get_Width()), 
      +(viewport.get_Height()), 
      0, 
      0, 
      1, 
      /* ref */ projection
    );
    projection.get().M41 += -0.5 * +projection.get().M11;
    projection.get().M42 += -0.5 * +projection.get().M22;
    $S0F().CallStatic($T18(), "Multiply", null, /* ref */ new JSIL.MemberReference(this, "transformMatrix"), /* ref */ projection, /* ref */ projection);
    $S10().CallVirtual("SetValue", null, this.spriteMatrixTransform, projection.get());
    (this.spriteEffectPass).Apply();
  };

  function SpriteBatch_PushSprite (texture, sourceRectangle, destination, color, origin, rotation, depth, effects) {
    if ((this.numSprites | 0) >= 2048) {
      this.FlushBatch();
    }
    this.spriteData[this.numSprites].destination = destination.MemberwiseClone();
    if (sourceRectangle !== null) {
      this.spriteData[this.numSprites].source = JSIL.Nullable_Value(sourceRectangle).MemberwiseClone();
      if (((effects | 0) & 8) !== 8) {
        var expr_83_cp_0_cp_0 = this.spriteData;
        var expr_83_cp_0_cp_1 = (this.numSprites | 0);
        expr_83_cp_0_cp_0[expr_83_cp_0_cp_1].destination.Z *= +(JSIL.Nullable_Value(sourceRectangle).Width);
        var expr_B2_cp_0_cp_0 = this.spriteData;
        var expr_B2_cp_0_cp_1 = (this.numSprites | 0);
        expr_B2_cp_0_cp_0[expr_B2_cp_0_cp_1].destination.W *= +(JSIL.Nullable_Value(sourceRectangle).Height);
      }
      effects = (effects | 0) | 12;
    } else {
      this.spriteData[this.numSprites].source.X = 0;
      this.spriteData[this.numSprites].source.Y = 0;
      this.spriteData[this.numSprites].source.Width = 1;
      this.spriteData[this.numSprites].source.Height = 1;
    }
    this.spriteData[this.numSprites].texture = texture;
    this.spriteData[this.numSprites].color = color.MemberwiseClone();
    this.spriteData[this.numSprites].origin = origin.MemberwiseClone();
    this.spriteData[this.numSprites].rotation = +rotation;
    this.spriteData[this.numSprites].depth = +depth;
    this.spriteData[this.numSprites].effects = (effects | 0);
    if (this.sortMode === $T13().Immediate) {
      this.RenderBatch(0, 1);
    } else {
      this.numSprites = (((this.numSprites | 0) + 1) | 0);
    }
  };

  function SpriteBatch_RenderBatch (offset, batchSize) {
    var source = new ($T00())(), destination = new ($T00())(), sourceSize = new ($T00())(), destinationSize = new ($T00())(), inverseTexSize = new ($T00())(), rotationMatrix = new ($T00())(), rotationMatrix2 = new ($T00())();
    (this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$Textures$value).set_Item(0, this.spriteData[offset].texture);

    for (var i = 0; i < (batchSize | 0); i = ((i + 1) | 0)) {
      var info = this.spriteData[((i + (offset | 0)) | 0)].MemberwiseClone();
      $T00().prototype._ctor.call(source, +(info.source.X), +(info.source.Y));
      $T00().prototype._ctor.call(destination, info.destination.X, info.destination.Y);
      $T00().prototype._ctor.call(sourceSize, 
        $T29().Max(+(info.source.Width), $T35().MachineEpsilonFloat), 
        $T29().Max(+(info.source.Height), $T35().MachineEpsilonFloat)
      );
      $T00().prototype._ctor.call(destinationSize, info.destination.Z, info.destination.W);
      var origin = $S11().CallStatic($T00(), "op_Division", null, info.origin.MemberwiseClone(), sourceSize);
      $T00().prototype._ctor.call(inverseTexSize, 
        +((1 / +((this.spriteData[offset].texture).get_Width()))), 
        +((1 / +((this.spriteData[offset].texture).get_Height())))
      );
      if (((info.effects | 0) & 4) === 4) {
        source = $S0C().CallStatic($T00(), "op_Multiply", null, source.MemberwiseClone(), inverseTexSize);
        sourceSize = $S0C().CallStatic($T00(), "op_Multiply", null, sourceSize.MemberwiseClone(), inverseTexSize);
      } else {
        origin = $S0C().CallStatic($T00(), "op_Multiply", null, origin.MemberwiseClone(), inverseTexSize);
      }
      if (((info.effects | 0) & 8) !== 8) {
        destinationSize.X *= +((this.spriteData[offset].texture).get_Width());
        destinationSize.Y *= +((this.spriteData[offset].texture).get_Height());
      }
      if (!$T35().WithinEpsilon(info.rotation, 0)) {
        var sin = Math.fround(Math.sin(info.rotation));
        var cos = Math.fround(Math.cos(info.rotation));
        rotationMatrix.X = cos;
        rotationMatrix.Y = sin;
        rotationMatrix2.X = -sin;
        rotationMatrix2.Y = cos;
      } else {
        rotationMatrix.X = 1;
        rotationMatrix.Y = 0;
        rotationMatrix2.X = 0;
        rotationMatrix2.Y = 1;
      }

      for (var j = 0; j < 4; j = ((j + 1) | 0)) {
        var cornerOffset = $S0C().CallStatic($T00(), "op_Multiply", null, $T00().op_Subtraction($T09().CornerOffsets[j].MemberwiseClone(), origin).MemberwiseClone(), destinationSize);
        var position = $T00().Add(
          $S12().CallStatic($T00(), "Multiply", null, rotationMatrix2.MemberwiseClone(), cornerOffset.Y).MemberwiseClone(), 
          $T00().Add($S12().CallStatic($T00(), "Multiply", null, rotationMatrix.MemberwiseClone(), cornerOffset.X).MemberwiseClone(), destination)
        );
        this.vertexInfo[((Math.imul(i, 4) + j) | 0)].Position.X = +position.X;
        this.vertexInfo[((Math.imul(i, 4) + j) | 0)].Position.Y = +position.Y;
        this.vertexInfo[((Math.imul(i, 4) + j) | 0)].Position.Z = +info.depth;
        this.vertexInfo[((Math.imul(i, 4) + j) | 0)].Color = info.color.MemberwiseClone();
        this.vertexInfo[((Math.imul(i, 4) + j) | 0)].TextureCoordinate = $T00().Add($S13().CallStatic($T00(), "Multiply", null, $T09().CornerOffsets[(j ^ ((info.effects | 0) & 3))].MemberwiseClone(), sourceSize).MemberwiseClone(), source);
      }
    }
    $S14().CallVirtual("SetData$b1", [$asm00.Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture], this.vertexBuffer, this.vertexInfo, 0, Math.imul(batchSize, 4), $T37().None);
    if (this.customEffect !== null) {
      var enumerator = $IM00().Call(this.customEffect.Effect$CurrentTechnique$value.EffectTechnique$Passes$value, null);
      try {

        while ($IM01().Call(enumerator, null)) {
          var pass = $IM02().Call(enumerator, null);
          pass.Apply();
          (this.GraphicsResource$GraphicsDevice$value).DrawIndexedPrimitives(
            $T3B().TriangleList, 
            0, 
            0, 
            Math.imul(batchSize, 4), 
            0, 
            Math.imul(batchSize, 2)
          );
        }
      } finally {
        if (enumerator !== null) {
          $IM03().Call(enumerator, null);
        }
      }
    } else {
      (this.GraphicsResource$GraphicsDevice$value).DrawIndexedPrimitives(
        $T3B().TriangleList, 
        0, 
        0, 
        Math.imul(batchSize, 4), 
        0, 
        Math.imul(batchSize, 2)
      );
    }
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.SpriteBatch", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      SpriteBatch__ctor
    );

    $.Method({Static:false, Public:true }, "Begin", 
      JSIL.MethodSignature.Void, 
      SpriteBatch_Begin$00
    );

    $.Method({Static:false, Public:true }, "Begin", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteSortMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState")]), 
      SpriteBatch_Begin$01
    );

    $.Method({Static:false, Public:true }, "Begin", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteSortMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState")
        ]), 
      SpriteBatch_Begin$02
    );

    $.Method({Static:false, Public:true }, "Begin", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteSortMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")
        ]), 
      SpriteBatch_Begin$03
    );

    $.Method({Static:false, Public:true }, "Begin", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteSortMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")
        ]), 
      SpriteBatch_Begin$04
    );

    $.Method({Static:false, Public:false}, "CheckBegin", 
      JSIL.MethodSignature.Action($.String), 
      SpriteBatch_CheckBegin
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      SpriteBatch_Dispose$05
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      SpriteBatch_Draw$06
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $asm00.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      SpriteBatch_Draw$07
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), 
          $.Single
        ]), 
      SpriteBatch_Draw$08
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), 
          $.Single
        ]), 
      SpriteBatch_Draw$09
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      SpriteBatch_Draw$0A
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"), 
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $asm00.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      SpriteBatch_Draw$0B
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"), 
          $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), $.Single
        ]), 
      SpriteBatch_Draw$0C
    );

    $.Method({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $asm01.TypeRef("System.Text.StringBuilder"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      SpriteBatch_DrawString$0D
    );

    $.Method({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $asm01.TypeRef("System.Text.StringBuilder"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), 
          $.Single
        ]), 
      SpriteBatch_DrawString$0E
    );

    $.Method({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $asm01.TypeRef("System.Text.StringBuilder"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), 
          $.Single
        ]), 
      SpriteBatch_DrawString$0F
    );

    $.Method({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      SpriteBatch_DrawString$10
    );

    $.Method({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), 
          $.Single
        ]), 
      SpriteBatch_DrawString$11
    );

    $.Method({Static:false, Public:true }, "DrawString", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), 
          $.Single
        ]), 
      SpriteBatch_DrawString$12
    );

    $.Method({Static:false, Public:true }, "End", 
      JSIL.MethodSignature.Void, 
      SpriteBatch_End
    );

    $.Method({Static:false, Public:false}, "FlushBatch", 
      JSIL.MethodSignature.Void, 
      SpriteBatch_FlushBatch
    );

    $.Method({Static:true , Public:false}, "GenerateIndexArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int16])), 
      SpriteBatch_GenerateIndexArray
    );

    $.Method({Static:false, Public:false}, "PrepRenderState", 
      JSIL.MethodSignature.Void, 
      SpriteBatch_PrepRenderState
    );

    $.Method({Static:false, Public:false}, "PushSprite", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Single, 
          $.Single, $.Byte
        ]), 
      SpriteBatch_PushSprite
    );

    $.Method({Static:false, Public:false}, "RenderBatch", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      SpriteBatch_RenderBatch
    );

    $.Constant({Static:true , Public:false}, "MAX_SPRITES", 2048); 
    $.Constant({Static:true , Public:false}, "MAX_VERTICES", 8192); 
    $.Constant({Static:true , Public:false}, "MAX_INDICES", 12288); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "axisDirection", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "axisIsMirrored", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")])); 
    $.Field({Static:false, Public:false}, "vertexBuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer")); 
    $.Field({Static:false, Public:false}, "indexBuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer")); 
    $.Field({Static:false, Public:false}, "vertexInfo", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture")])); 
    $.Field({Static:false, Public:false}, "spriteData", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo")])); 
    $.Field({Static:false, Public:false}, "spriteEffect", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")); 
    $.Field({Static:false, Public:false}, "spriteMatrixTransform", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter")); 
    $.Field({Static:false, Public:false}, "spriteEffectPass", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass")); 
    $.Field({Static:false, Public:false}, "beginCalled", $.Boolean); 
    $.Field({Static:false, Public:false}, "sortMode", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteSortMode")); 
    $.Field({Static:false, Public:false}, "blendState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState")); 
    $.Field({Static:false, Public:false}, "samplerState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState")); 
    $.Field({Static:false, Public:false}, "depthStencilState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState")); 
    $.Field({Static:false, Public:false}, "rasterizerState", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState")); 
    $.Field({Static:false, Public:false}, "numSprites", $.Int32); 
    $.Field({Static:false, Public:false}, "transformMatrix", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "customEffect", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "indexData", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "spriteEffectCode", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TextureCompare", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+TextureComparer")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BackToFrontCompare", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+BackToFrontComparer")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FrontToBackCompare", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+FrontToBackComparer")); 
    function SpriteBatch__cctor () {
      $thisType.axisDirection = JSIL.Array.New($T00(), [$S00().Construct(-1, -1), $S00().Construct(1, -1), $S00().Construct(-1, 1), $S00().Construct(1, 1)]);
      $thisType.axisIsMirrored = JSIL.Array.New($T00(), [$S00().Construct(0, 0), $S00().Construct(1, 0), $S00().Construct(0, 1), $S00().Construct(1, 1)]);
      $thisType.indexData = $thisType.GenerateIndexArray();
      $thisType.spriteEffectCode = $T01().LoadEffectResource("Microsoft.Xna.Framework.Graphics.Effect.Resources.SpriteEffect.ogl.mgfxo");
      $thisType.TextureCompare = new ($T02())();
      $thisType.BackToFrontCompare = new ($T03())();
      $thisType.FrontToBackCompare = new ($T04())();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SpriteBatch__cctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo */ 

(function SpriteInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "SourceInTexels", 4); 
    $.Constant({Static:true , Public:true }, "DestSizeInPixels", 8); 
    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:false, Public:true }, "destination", $asm00.TypeRef("Microsoft.Xna.Framework.Vector4")); 
    $.Field({Static:false, Public:true }, "color", $asm00.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "origin", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:true }, "rotation", $.Single); 
    $.Field({Static:false, Public:true }, "depth", $.Single); 
    $.Field({Static:false, Public:true }, "texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:true }, "effects", $.Byte); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "CornerOffsets", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")])); 
    function SpriteInfo__cctor () {
      $thisType.CornerOffsets = JSIL.Array.New($T00(), [$S00().Construct(0, 0), $S00().Construct(1, 0), $S00().Construct(0, 1), $S00().Construct(1, 1)]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SpriteInfo__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.SpriteBatch+TextureComparer */ 

(function TextureComparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch_SpriteInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function TextureComparer__ctor () {
  };

  function TextureComparer_Compare (x, y) {
    return JSIL.CompareValues((x.texture).GetHashCode(), (y.texture).GetHashCode());
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.SpriteBatch+TextureComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      TextureComparer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo")]), 
      TextureComparer_Compare
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IComparer`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.SpriteBatch+BackToFrontComparer */ 

(function BackToFrontComparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch_SpriteInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function BackToFrontComparer__ctor () {
  };

  function BackToFrontComparer_Compare (x, y) {
    return JSIL.CompareValues(y.depth, x.depth);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.SpriteBatch+BackToFrontComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BackToFrontComparer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo")]), 
      BackToFrontComparer_Compare
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IComparer`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.SpriteBatch+FrontToBackComparer */ 

(function FrontToBackComparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch_SpriteInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function FrontToBackComparer__ctor () {
  };

  function FrontToBackComparer_Compare (x, y) {
    return JSIL.CompareValues(x.depth, y.depth);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.SpriteBatch+FrontToBackComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      FrontToBackComparer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo")]), 
      FrontToBackComparer_Compare
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IComparer`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch+SpriteInfo")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.SpriteFont */ 

(function SpriteFont$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Rectangle))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Char))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm01.System.Char))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Char))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.String")]))) ();
  };

  function SpriteFont__ctor (texture, glyphBounds, cropping, characters, lineSpacing, spacing, kerningData, defaultCharacter) {
    this.SpriteFont$Characters$value = new ($T06())($T07().$Cast($T02().prototype.ToArray.call(characters)));
    (this.SpriteFont$DefaultCharacter$value = defaultCharacter);
    this.SpriteFont$LineSpacing$value = (lineSpacing | 0);
    this.SpriteFont$Spacing$value = +spacing;
    this.textureValue = texture;
    this.glyphData = glyphBounds;
    this.croppingData = cropping;
    this.kerning = kerningData;
    this.characterMap = characters;
  };

  function SpriteFont_get_Characters () {
    return this.SpriteFont$Characters$value;
  };

  function SpriteFont_get_DefaultCharacter () {
    return this.SpriteFont$DefaultCharacter$value;
  };

  function SpriteFont_get_LineSpacing () {
    return this.SpriteFont$LineSpacing$value;
  };

  function SpriteFont_get_Spacing () {
    return this.SpriteFont$Spacing$value;
  };

  function SpriteFont_MeasureString$00 (text) {
    if (text === null) {
      throw $S00().Construct("text");
    }
    if ((text.length | 0) === 0) {
      var result2 = $T0A().get_Zero().MemberwiseClone();
    } else {
      var result = $T0A().get_Zero().MemberwiseClone();
      var curLineWidth = 0;
      var finalLineHeight = +(this.SpriteFont$LineSpacing$value);
      var firstInLine = true;

      for (var i = 0; i < (text.length | 0); i = ((i + 1) | 0)) {
        var c = (text[i]);
        if ((c.charCodeAt(0) | 0) !== (("\r").charCodeAt(0) | 0)) {
          if ((c.charCodeAt(0) | 0) === (("\n").charCodeAt(0) | 0)) {
            result.X = +$T0D().Max(result.X, curLineWidth);
            result.Y += +(this.SpriteFont$LineSpacing$value);
            curLineWidth = 0;
            finalLineHeight = +(this.SpriteFont$LineSpacing$value);
            firstInLine = true;
          } else {
            var index = ((this.characterMap).IndexOf(c) | 0);
            if (index === -1) {
              if (this.SpriteFont$DefaultCharacter$value === null) {
                throw $S01().Construct("Text contains characters that cannot be resolved by this SpriteFont.", "text");
              }
              index = ((this.characterMap).IndexOf(JSIL.Nullable_Value(this.SpriteFont$DefaultCharacter$value)) | 0);
            }
            if (firstInLine) {
              curLineWidth += (Math.abs((this.kerning).get_Item(index).X));
              firstInLine = false;
            } else {
              curLineWidth += +this.SpriteFont$Spacing$value + +(this.kerning).get_Item(index).X;
            }
            curLineWidth += +(this.kerning).get_Item(index).Y + +(this.kerning).get_Item(index).Z;
            if (+((this.croppingData).get_Item(index).Height) > finalLineHeight) {
              finalLineHeight = +((this.croppingData).get_Item(index).Height);
            }
          }
        }
      }
      result.X = +$T0D().Max(result.X, curLineWidth);
      result.Y += finalLineHeight;
      result2 = result;
    }
    return result2;
  };

  function SpriteFont_MeasureString$01 (text) {
    if (text === null) {
      throw $S00().Construct("text");
    }
    return $S02().CallVirtual("MeasureString", null, this, text.toString());
  };

  function SpriteFont_set_Characters (value) {
    this.SpriteFont$Characters$value = value;
  };

  function SpriteFont_set_DefaultCharacter (value) {
    this.SpriteFont$DefaultCharacter$value = value;
  };

  function SpriteFont_set_LineSpacing (value) {
    this.SpriteFont$LineSpacing$value = (value | 0);
  };

  function SpriteFont_set_Spacing (value) {
    this.SpriteFont$Spacing$value = +value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.SpriteFont", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $asm01.TypeRef("System.Collections.Generic.List`1", [$.Char]), 
          $.Int32, $.Single, 
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]), $asm01.TypeRef("System.Nullable`1", [$.Char])
        ]), 
      SpriteFont__ctor
    );

    $.Method({Static:false, Public:true }, "get_Characters", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Char])), 
      SpriteFont_get_Characters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DefaultCharacter", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Nullable`1", [$.Char])), 
      SpriteFont_get_DefaultCharacter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LineSpacing", 
      JSIL.MethodSignature.Return($.Int32), 
      SpriteFont_get_LineSpacing
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Spacing", 
      JSIL.MethodSignature.Return($.Single), 
      SpriteFont_get_Spacing
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "MeasureString", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$.String]), 
      SpriteFont_MeasureString$00
    );

    $.Method({Static:false, Public:true }, "MeasureString", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Text.StringBuilder")]), 
      SpriteFont_MeasureString$01
    );

    $.Method({Static:false, Public:false}, "set_Characters", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Char])), 
      SpriteFont_set_Characters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DefaultCharacter", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Nullable`1", [$.Char])), 
      SpriteFont_set_DefaultCharacter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LineSpacing", 
      JSIL.MethodSignature.Action($.Int32), 
      SpriteFont_set_LineSpacing
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Spacing", 
      JSIL.MethodSignature.Action($.Single), 
      SpriteFont_set_Spacing
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "textureValue", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "glyphData", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")])); 
    $.Field({Static:false, Public:false}, "croppingData", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")])); 
    $.Field({Static:false, Public:false}, "kerning", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])); 
    $.Field({Static:false, Public:false}, "characterMap", $asm01.TypeRef("System.Collections.Generic.List`1", [$.Char])); 
    $.Field({Static:false, Public:false}, "SpriteFont$Characters$value", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Char]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SpriteFont$DefaultCharacter$value", $asm01.TypeRef("System.Nullable`1", [$.Char]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SpriteFont$LineSpacing$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SpriteFont$Spacing$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Characters", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Char]));

    $.Property({Static:false, Public:true }, "DefaultCharacter", $asm01.TypeRef("System.Nullable`1", [$.Char]));

    $.Property({Static:false, Public:true }, "LineSpacing", $.Int32);

    $.Property({Static:false, Public:true }, "Spacing", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.Texture3D */ 

(function Texture3D$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture3D_$l$gc__DisplayClass2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Threading)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };

  function Texture3D__ctor (graphicsDevice, width, height, depth, mipMap, format) {
    var $closure0 = new ($T04())();
    $closure0.width = (width | 0);
    $closure0.height = (height | 0);
    $closure0.depth = (depth | 0);
    $closure0.mipMap = mipMap;
    $T05().prototype._ctor.call(this);
    $closure0.$l$g4__this = this;
    if (graphicsDevice === null) {
      throw $S00().Construct("graphicsDevice");
    }
    this.GraphicsResource$GraphicsDevice$value = graphicsDevice;
    this.Texture3D$Width$value = ($closure0.width | 0);
    this.Texture3D$Height$value = ($closure0.height | 0);
    this.Texture3D$Depth$value = ($closure0.depth | 0);
    this.Texture$LevelCount$value = ((
      $closure0.mipMap
         ? $T05().CalculateMipLevels($closure0.width, $closure0.height, 0)
         : 1)
     | 0);
    this.Texture$Format$value = format;
    this.GetGLSurfaceFormat();
    $T08().ForceToMainThread($T09().New($closure0, $T04().prototype.$l_ctor$gb__0, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.Texture3D_$l$gc__DisplayClass2, "$l_ctor$gb__0", JSIL.MethodSignature.Void, false); }));
  };

  function Texture3D_get_Depth () {
    return this.Texture3D$Depth$value;
  };

  function Texture3D_get_Height () {
    return this.Texture3D$Height$value;
  };

  function Texture3D_get_Width () {
    return this.Texture3D$Width$value;
  };

  function Texture3D_GetData$b1$00 (T, data) {
    $S01().CallVirtual("GetData$b1", [T], this, data, 0, data.length);
  };

  function Texture3D_GetData$b1$01 (T, data, startIndex, elementCount) {
    $S02().CallVirtual("GetData$b1", [T], this, 
      0, 
      0, 
      0, 
      this.Texture3D$Width$value, 
      this.Texture3D$Height$value, 
      0, 
      this.Texture3D$Depth$value, 
      data, 
      startIndex, 
      elementCount
    );
  };

  function Texture3D_GetData$b1$02 (T, level, left, top, right, bottom, front, back, data, startIndex, elementCount) {
    if (!((data !== null) && ((data.length | 0) !== 0))) {
      throw $S03().Construct("data cannot be null");
    }
    if ((data.length | 0) < (((startIndex | 0) + (elementCount | 0)) | 0)) {
      throw $S03().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T0C(), ["The data passed has a length of ", (data.length).toString(), " but ", (elementCount).toString(), " pixels have been requested."])));
    }
    if (!(!(((left | 0) < 0) || 
          ((left | 0) >= (right | 0)) || 
          ((top | 0) < 0) || 
          ((top | 0) >= (bottom | 0))) && 
        ((front | 0) >= 0) && ((front | 0) < (back | 0)))) {
      throw $S03().Construct("Neither box size nor box position can be negative");
    }
    throw $S04().Construct();
  };

  function Texture3D_set_Depth (value) {
    this.Texture3D$Depth$value = (value | 0);
  };

  function Texture3D_set_Height (value) {
    this.Texture3D$Height$value = (value | 0);
  };

  function Texture3D_set_Width (value) {
    this.Texture3D$Width$value = (value | 0);
  };

  function Texture3D_SetData$b1$03 (T, data) {
    $S05().CallVirtual("SetData$b1", [T], this, data, 0, data.length);
  };

  function Texture3D_SetData$b1$04 (T, data, startIndex, elementCount) {
    $S06().CallVirtual("SetData$b1", [T], this, 
      0, 
      0, 
      0, 
      this.Texture3D$Width$value, 
      this.Texture3D$Height$value, 
      0, 
      this.Texture3D$Depth$value, 
      data, 
      startIndex, 
      elementCount
    );
  };

  function Texture3D_SetData$b1$05 (T, level, left, top, right, bottom, front, back, data, startIndex, elementCount) {
    var $closure0 = new ($asm00.Microsoft.Xna.Framework.Graphics.Texture3D_$l$gc__DisplayClass5$b1.Of(T)) ();
    $closure0.level = (level | 0);
    $closure0.left = (left | 0);
    $closure0.top = (top | 0);
    $closure0.right = (right | 0);
    $closure0.bottom = (bottom | 0);
    $closure0.front = (front | 0);
    $closure0.back = (back | 0);
    $closure0.data = data;
    $closure0.startIndex = (startIndex | 0);
    $closure0.$l$g4__this = this;
    if ($closure0.data === null) {
      throw $S00().Construct("data");
    }
    $T08().ForceToMainThread($T09().New($closure0, $asm00.Microsoft.Xna.Framework.Graphics.Texture3D_$l$gc__DisplayClass5$b1.Of(T).prototype.$lSetData$gb__4, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Xna.Framework.Graphics.Texture3D_$l$gc__DisplayClass5$b1.Of(T), "$lSetData$gb__4", JSIL.MethodSignature.Void, false); }));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture"), 
      Name: "Microsoft.Xna.Framework.Graphics.Texture3D", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Int32, 
          $.Int32, $.Int32, 
          $.Boolean, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
        ]), 
      Texture3D__ctor
    );

    $.Method({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32), 
      Texture3D_get_Depth
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      Texture3D_get_Height
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      Texture3D_get_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      Texture3D_GetData$b1$00
    );

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      Texture3D_GetData$b1$01
    );

    $.Method({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32
        ], ["T"]), 
      Texture3D_GetData$b1$02
    );

    $.Method({Static:false, Public:false}, "set_Depth", 
      JSIL.MethodSignature.Action($.Int32), 
      Texture3D_set_Depth
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Height", 
      JSIL.MethodSignature.Action($.Int32), 
      Texture3D_set_Height
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Width", 
      JSIL.MethodSignature.Action($.Int32), 
      Texture3D_set_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      Texture3D_SetData$b1$03
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      Texture3D_SetData$b1$04
    );

    $.Method({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32
        ], ["T"]), 
      Texture3D_SetData$b1$05
    );

    $.Field({Static:false, Public:false}, "Texture3D$Width$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Texture3D$Height$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Texture3D$Depth$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.Texture3D+<>c__DisplayClass2 */ 

(function $l$gc__DisplayClass2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture3D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };

  function $l$gc__DisplayClass2__ctor () {
  };

  function $l$gc__DisplayClass2_$l_ctor$gb__0 () {
    this.$l$g4__this.texture = (this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).CreateTexture($T03().__Type__, this.$l$g4__this.Texture$Format$value, this.mipMap);

    for (var i = 0; i < (this.$l$g4__this.Texture$LevelCount$value | 0); i = ((i + 1) | 0)) {
      this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glTexImage3D(
        $T06().GL_TEXTURE_3D, 
        i, 
        (this.$l$g4__this.glInternalFormat).valueOf(), 
        $T07().Max((this.width | 0) >> i, 1), 
        $T07().Max((this.height | 0) >> i, 1), 
        this.depth, 
        0, 
        this.$l$g4__this.glFormat, 
        this.$l$g4__this.glType, 
        $T08().Zero.MemberwiseClone()
      );
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.Texture3D+<>c__DisplayClass2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2__ctor
    );

    $.Method({Static:false, Public:true }, "$l.ctor$gb__0", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2_$l_ctor$gb__0
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture3D")); 
    $.Field({Static:false, Public:true }, "width", $.Int32); 
    $.Field({Static:false, Public:true }, "height", $.Int32); 
    $.Field({Static:false, Public:true }, "depth", $.Int32); 
    $.Field({Static:false, Public:true }, "mipMap", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Graphics.Texture3D+<>c__DisplayClass5`1 */ 

(function $l$gc__DisplayClass5$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandleType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int64")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Type")]))) ();
  };

  function $l$gc__DisplayClass5$b1__ctor () {
  };

  function $l$gc__DisplayClass5$b1_$lSetData$gb__4 () {
    var dataHandle = $T00().Alloc(this.data, $T01().Pinned).MemberwiseClone();
    try {
      (this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value).BindTexture(this.$l$g4__this.texture);
      this.$l$g4__this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glTexSubImage3D(
        $T05().GL_TEXTURE_3D, 
        this.level, 
        this.left, 
        this.top, 
        this.front, 
        (((this.right | 0) - (this.left | 0)) | 0), 
        (((this.bottom | 0) - (this.top | 0)) | 0), 
        (((this.back | 0) - (this.front | 0)) | 0), 
        this.$l$g4__this.glFormat, 
        this.$l$g4__this.glType, 
        $S00().CallStatic($T06(), "op_Explicit", null, $T07().op_Addition(
            (dataHandle.AddrOfPinnedObject().MemberwiseClone()).ToInt64(), 
            $T07().FromNumber(Math.imul(this.startIndex, $S01().CallStatic($T08(), "SizeOf", null, $thisType.T.get(this))))
          )).MemberwiseClone()
      );
    } finally {
      dataHandle.Free();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.Texture3D+<>c__DisplayClass5`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass5$b1__ctor
    );

    $.Method({Static:false, Public:true }, "$lSetData$gb__4", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass5$b1_$lSetData$gb__4
    );

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture3D")); 
    $.Field({Static:false, Public:true }, "level", $.Int32); 
    $.Field({Static:false, Public:true }, "left", $.Int32); 
    $.Field({Static:false, Public:true }, "top", $.Int32); 
    $.Field({Static:false, Public:true }, "right", $.Int32); 
    $.Field({Static:false, Public:true }, "bottom", $.Int32); 
    $.Field({Static:false, Public:true }, "front", $.Int32); 
    $.Field({Static:false, Public:true }, "back", $.Int32); 
    $.Field({Static:false, Public:true }, "data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "startIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.GameWindow */ 

(function GameWindow$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchPanelState)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };

  function GameWindow__ctor () {
    this.TouchPanelState = new ($T00())(this);
  };

  function GameWindow_add_ClientSizeChanged (value) {
    var eventHandler = this.ClientSizeChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "ClientSizeChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameWindow_add_OrientationChanged (value) {
    var eventHandler = this.OrientationChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OrientationChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameWindow_add_ScreenDeviceNameChanged (value) {
    var eventHandler = this.ScreenDeviceNameChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "ScreenDeviceNameChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameWindow_EndScreenDeviceChange$00 (screenDeviceName) {
    this.EndScreenDeviceChange(
      screenDeviceName, 
      this.get_ClientBounds().Width, 
      this.get_ClientBounds().Height
    );
  };

  function GameWindow_get_IsBorderlessEXT () {
    return false;
  };

  function GameWindow_get_Title () {
    return this._title;
  };

  function GameWindow_OnActivated () {
  };

  function GameWindow_OnClientSizeChanged () {
    if (this.ClientSizeChanged !== null) {
      this.ClientSizeChanged(this, $T05().Empty);
    }
  };

  function GameWindow_OnDeactivated () {
  };

  function GameWindow_OnOrientationChanged () {
    if (this.OrientationChanged !== null) {
      this.OrientationChanged(this, $T05().Empty);
    }
  };

  function GameWindow_OnPaint () {
  };

  function GameWindow_OnScreenDeviceNameChanged () {
    if (this.ScreenDeviceNameChanged !== null) {
      this.ScreenDeviceNameChanged(this, $T05().Empty);
    }
  };

  function GameWindow_remove_ClientSizeChanged (value) {
    var eventHandler = this.ClientSizeChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "ClientSizeChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameWindow_remove_OrientationChanged (value) {
    var eventHandler = this.OrientationChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OrientationChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameWindow_remove_ScreenDeviceNameChanged (value) {
    var eventHandler = this.ScreenDeviceNameChanged;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "ScreenDeviceNameChanged"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function GameWindow_set_IsBorderlessEXT (value) {
    throw $S00().Construct();
  };

  function GameWindow_set_Title (value) {
    if (this._title != value) {
      this.SetTitle(value);
      this._title = value;
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GameWindow", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      GameWindow__ctor
    );

    $.Method({Static:false, Public:true }, "add_ClientSizeChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameWindow_add_ClientSizeChanged
    );

    $.Method({Static:false, Public:true }, "add_OrientationChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameWindow_add_OrientationChanged
    );

    $.Method({Static:false, Public:true }, "add_ScreenDeviceNameChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameWindow_add_ScreenDeviceNameChanged
    );

    $.Method({Static:false, Public:true }, "EndScreenDeviceChange", 
      JSIL.MethodSignature.Action($.String), 
      GameWindow_EndScreenDeviceChange$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsBorderlessEXT", 
      JSIL.MethodSignature.Return($.Boolean), 
      GameWindow_get_IsBorderlessEXT
    );

    $.Method({Static:false, Public:true }, "get_Title", 
      JSIL.MethodSignature.Return($.String), 
      GameWindow_get_Title
    );

    $.Method({Static:false, Public:false}, "OnActivated", 
      JSIL.MethodSignature.Void, 
      GameWindow_OnActivated
    );

    $.Method({Static:false, Public:false}, "OnClientSizeChanged", 
      JSIL.MethodSignature.Void, 
      GameWindow_OnClientSizeChanged
    );

    $.Method({Static:false, Public:false}, "OnDeactivated", 
      JSIL.MethodSignature.Void, 
      GameWindow_OnDeactivated
    );

    $.Method({Static:false, Public:false}, "OnOrientationChanged", 
      JSIL.MethodSignature.Void, 
      GameWindow_OnOrientationChanged
    );

    $.Method({Static:false, Public:false}, "OnPaint", 
      JSIL.MethodSignature.Void, 
      GameWindow_OnPaint
    );

    $.Method({Static:false, Public:false}, "OnScreenDeviceNameChanged", 
      JSIL.MethodSignature.Void, 
      GameWindow_OnScreenDeviceNameChanged
    );

    $.Method({Static:false, Public:true }, "remove_ClientSizeChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameWindow_remove_ClientSizeChanged
    );

    $.Method({Static:false, Public:true }, "remove_OrientationChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameWindow_remove_OrientationChanged
    );

    $.Method({Static:false, Public:true }, "remove_ScreenDeviceNameChanged", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      GameWindow_remove_ScreenDeviceNameChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_IsBorderlessEXT", 
      JSIL.MethodSignature.Action($.Boolean), 
      GameWindow_set_IsBorderlessEXT
    );

    $.Method({Static:false, Public:true }, "set_Title", 
      JSIL.MethodSignature.Action($.String), 
      GameWindow_set_Title
    );

    $.Field({Static:false, Public:false}, "TouchPanelState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchPanelState")); 
    $.Field({Static:false, Public:false}, "_title", $.String); 
    $.Field({Static:false, Public:false}, "ClientSizeChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "OrientationChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "ScreenDeviceNameChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "AllowUserResizing", $.Boolean)
      .Attribute($asm03.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ClientBounds", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentOrientation", $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"));

    $.Property({Static:false, Public:true , Virtual:true }, "Handle", $asm01.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true , Virtual:true }, "ScreenDeviceName", $.String);

    $.Property({Static:false, Public:true }, "Title", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsBorderlessEXT", $.Boolean);

    $.Event({Static:false, Public:true }, "ClientSizeChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "OrientationChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.Event({Static:false, Public:true }, "ScreenDeviceNameChanged", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.MouseState */ 

(function MouseState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ValueType)) ();
  };

  function MouseState__ctor (x, y, scrollWheel, leftButton, middleButton, rightButton, xButton1, xButton2) {
    JSIL.CopyMembers(new $thisType(), this);
    this.MouseState$X$value = (x | 0);
    this.MouseState$Y$value = (y | 0);
    this.MouseState$ScrollWheelValue$value = (scrollWheel | 0);
    this.MouseState$LeftButton$value = leftButton;
    this.MouseState$MiddleButton$value = middleButton;
    this.MouseState$RightButton$value = rightButton;
    this.MouseState$XButton1$value = xButton1;
    this.MouseState$XButton2$value = xButton2;
  };

  function MouseState_Object_Equals (obj) {
    return ($thisType.$Is(obj) && $thisType.op_Equality(this, $thisType.$Cast(obj)));
  };

  function MouseState_get_LeftButton () {
    return this.MouseState$LeftButton$value;
  };

  function MouseState_get_MiddleButton () {
    return this.MouseState$MiddleButton$value;
  };

  function MouseState_get_RightButton () {
    return this.MouseState$RightButton$value;
  };

  function MouseState_get_ScrollWheelValue () {
    return this.MouseState$ScrollWheelValue$value;
  };

  function MouseState_get_X () {
    return this.MouseState$X$value;
  };

  function MouseState_get_XButton1 () {
    return this.MouseState$XButton1$value;
  };

  function MouseState_get_XButton2 () {
    return this.MouseState$XButton2$value;
  };

  function MouseState_get_Y () {
    return this.MouseState$Y$value;
  };

  function MouseState_GetHashCode () {
    return (this.MemberwiseClone()).GetHashCode();
  };

  function MouseState_op_Equality (left, right) {
    return (!(((left.MouseState$X$value | 0) !== (right.MouseState$X$value | 0)) || 
        ((left.MouseState$Y$value | 0) !== (right.MouseState$Y$value | 0)) || 
        (left.MouseState$LeftButton$value !== right.MouseState$LeftButton$value) || 
        (left.MouseState$MiddleButton$value !== right.MouseState$MiddleButton$value) || 
        (left.MouseState$RightButton$value !== right.MouseState$RightButton$value)) && ((left.MouseState$ScrollWheelValue$value | 0) === (right.MouseState$ScrollWheelValue$value | 0)));
  };

  function MouseState_op_Inequality (left, right) {
    return !$thisType.op_Equality(left, right);
  };

  function MouseState_set_LeftButton (value) {
    this.MouseState$LeftButton$value = value;
  };

  function MouseState_set_MiddleButton (value) {
    this.MouseState$MiddleButton$value = value;
  };

  function MouseState_set_RightButton (value) {
    this.MouseState$RightButton$value = value;
  };

  function MouseState_set_ScrollWheelValue (value) {
    this.MouseState$ScrollWheelValue$value = (value | 0);
  };

  function MouseState_set_X (value) {
    this.MouseState$X$value = (value | 0);
  };

  function MouseState_set_XButton1 (value) {
    this.MouseState$XButton1$value = value;
  };

  function MouseState_set_XButton2 (value) {
    this.MouseState$XButton2$value = value;
  };

  function MouseState_set_Y (value) {
    this.MouseState$Y$value = (value | 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.MouseState", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")
        ]), 
      MouseState__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      MouseState_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_LeftButton", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      MouseState_get_LeftButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MiddleButton", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      MouseState_get_MiddleButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RightButton", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      MouseState_get_RightButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ScrollWheelValue", 
      JSIL.MethodSignature.Return($.Int32), 
      MouseState_get_ScrollWheelValue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_X", 
      JSIL.MethodSignature.Return($.Int32), 
      MouseState_get_X
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XButton1", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      MouseState_get_XButton1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_XButton2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      MouseState_get_XButton2
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Y", 
      JSIL.MethodSignature.Return($.Int32), 
      MouseState_get_Y
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      MouseState_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      MouseState_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      MouseState_op_Inequality
    );

    $.Method({Static:false, Public:false}, "set_LeftButton", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      MouseState_set_LeftButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_MiddleButton", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      MouseState_set_MiddleButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RightButton", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      MouseState_set_RightButton
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ScrollWheelValue", 
      JSIL.MethodSignature.Action($.Int32), 
      MouseState_set_ScrollWheelValue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_X", 
      JSIL.MethodSignature.Action($.Int32), 
      MouseState_set_X
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_XButton1", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      MouseState_set_XButton1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_XButton2", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")), 
      MouseState_set_XButton2
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Y", 
      JSIL.MethodSignature.Action($.Int32), 
      MouseState_set_Y
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MouseState$X$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "MouseState$Y$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "MouseState$LeftButton$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "MouseState$MiddleButton$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "MouseState$RightButton$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "MouseState$ScrollWheelValue$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "MouseState$XButton1$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "MouseState$XButton2$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "X", $.Int32);

    $.Property({Static:false, Public:true }, "Y", $.Int32);

    $.Property({Static:false, Public:true }, "LeftButton", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "MiddleButton", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "RightButton", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "ScrollWheelValue", $.Int32);

    $.Property({Static:false, Public:true }, "XButton1", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "XButton2", $asm00.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.TitleContainer */ 

(function TitleContainer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.AppDomain)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Utilities.FileHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.File)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function TitleContainer_get_Location () {
    return $thisType.TitleContainer$Location$value;
  };

  function TitleContainer_OpenStream (name) {
    var safeName = $T02().NormalizeFilePathSeparators(name);
    if ($T03().IsPathRooted(safeName)) {
      throw $S00().Construct("Invalid filename. TitleContainer.OpenStream requires a relative path.");
    }
    var absolutePath = $T03().Combine($thisType.TitleContainer$Location$value, safeName);
    return $T05().OpenRead(absolutePath);
  };

  function TitleContainer_set_Location (value) {
    $thisType.TitleContainer$Location$value = value;
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.TitleContainer", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "get_Location", 
      JSIL.MethodSignature.Return($.String), 
      TitleContainer_get_Location
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "OpenStream", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String]), 
      TitleContainer_OpenStream
    );

    $.Method({Static:true , Public:false}, "set_Location", 
      JSIL.MethodSignature.Action($.String), 
      TitleContainer_set_Location
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "TitleContainer$Location$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function TitleContainer__cctor () {
      $thisType.TitleContainer$Location$value = $T00().get_CurrentDomain().get_BaseDirectory();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TitleContainer__cctor
    );

    $.Property({Static:true , Public:false}, "Location", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.Keyboard */ 

(function Keyboard$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")])]))) ();
  };

  function Keyboard_GetState$00 () {
    return $S00().Construct($thisType.keys);
  };

  function Keyboard_GetState$01 (playerIndex) {
    return $S00().Construct($thisType.keys);
  };

  function Keyboard_SetKeys (newKeys) {
    $thisType.keys = newKeys;
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.Keyboard", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "GetState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")), 
      Keyboard_GetState$00
    );

    $.Method({Static:true , Public:true }, "GetState", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), [$asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), 
      Keyboard_GetState$01
    )
      .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Use GetState() instead. In future versions this method can be removed."]; });

    $.Method({Static:true , Public:false}, "SetKeys", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")])), 
      Keyboard_SetKeys
    );

    $.Field({Static:true , Public:false}, "keys", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.MediaLibrary */ 

(function MediaLibrary$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.MediaSource)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };

  function MediaLibrary__ctor$00 () {
    this.MediaLibrary$IsDisposed$value = false;
  };

  function MediaLibrary__ctor$01 (mediaSource) {
    this.MediaLibrary$IsDisposed$value = false;
  };

  function MediaLibrary_Dispose () {
    this.MediaLibrary$IsDisposed$value = true;
  };

  function MediaLibrary_get_Albums () {
    throw $S00().Construct();
  };

  function MediaLibrary_get_IsDisposed () {
    return this.MediaLibrary$IsDisposed$value;
  };

  function MediaLibrary_get_MediaSource () {
    throw $S00().Construct();
  };

  function MediaLibrary_get_Playlists () {
    throw $S00().Construct();
  };

  function MediaLibrary_get_Songs () {
    throw $S00().Construct();
  };

  function MediaLibrary_SavePicture$02 (name, imageBuffer) {
    throw $S01().Construct();
  };

  function MediaLibrary_SavePicture$03 (name, source) {
    throw $S01().Construct();
  };

  function MediaLibrary_set_IsDisposed (value) {
    this.MediaLibrary$IsDisposed$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.MediaLibrary", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MediaLibrary__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaSource")), 
      MediaLibrary__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      MediaLibrary_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Albums", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection")), 
      MediaLibrary_get_Albums
    );

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      MediaLibrary_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MediaSource", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaSource")), 
      MediaLibrary_get_MediaSource
    );

    $.Method({Static:false, Public:true }, "get_Playlists", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.PlaylistCollection")), 
      MediaLibrary_get_Playlists
    );

    $.Method({Static:false, Public:true }, "get_Songs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")), 
      MediaLibrary_get_Songs
    );

    $.Method({Static:false, Public:true }, "SavePicture", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])]), 
      MediaLibrary_SavePicture$02
    );

    $.Method({Static:false, Public:true }, "SavePicture", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.IO.Stream")]), 
      MediaLibrary_SavePicture$03
    );

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      MediaLibrary_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MediaLibrary$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Albums", $asm00.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"));

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "MediaSource", $asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaSource"));

    $.Property({Static:false, Public:true }, "Playlists", $asm00.TypeRef("Microsoft.Xna.Framework.Media.PlaylistCollection"));

    $.Property({Static:false, Public:true }, "Songs", $asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.MediaSource */ 

(function MediaSource$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.MediaSourceType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm00.Microsoft.Xna.Framework.Media.MediaSource))) ();
  };

  function MediaSource__ctor (name, type) {
    this.MediaSource$Name$value = name;
    this.MediaSource$MediaSourceType$value = type;
  };

  function MediaSource_get_MediaSourceType () {
    return this.MediaSource$MediaSourceType$value;
  };

  function MediaSource_get_Name () {
    return this.MediaSource$Name$value;
  };

  function MediaSource_GetAvailableMediaSources () {
    return $T02().$Cast(JSIL.Array.New($thisType, [new $thisType("DummyMediaSource", $T01().LocalDevice)]));
  };

  function MediaSource_set_MediaSourceType (value) {
    this.MediaSource$MediaSourceType$value = value;
  };

  function MediaSource_set_Name (value) {
    this.MediaSource$Name$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.MediaSource", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaSourceType")]), 
      MediaSource__ctor
    );

    $.Method({Static:false, Public:true }, "get_MediaSourceType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaSourceType")), 
      MediaSource_get_MediaSourceType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      MediaSource_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "GetAvailableMediaSources", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$.Type])), 
      MediaSource_GetAvailableMediaSources
    );

    $.Method({Static:false, Public:false}, "set_MediaSourceType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaSourceType")), 
      MediaSource_set_MediaSourceType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      MediaSource_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MediaSource$MediaSourceType$value", $asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaSourceType"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "MediaSource$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "MediaSourceType", $asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaSourceType"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.MediaQueue */ 

(function MediaQueue$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Media.Song))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Random)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Song)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Random"), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };

  function MediaQueue__ctor () {
    this.songs = $S00().Construct();
    this.random = $S01().Construct();
    this.MediaQueue$ActiveSongIndex$value = -1;
  };

  function MediaQueue_Add (song) {
    (this.songs).Add(song);
  };

  function MediaQueue_Clear () {

    while (((this.songs).get_Count() | 0) > 0) {
      var song = (this.songs).get_Item(0);
      song.Stop();
      (this.songs).Remove(song);
    }
  };

  function MediaQueue_get_ActiveSong () {
    if (!((((this.songs).get_Count() | 0) !== 0) && ((this.MediaQueue$ActiveSongIndex$value | 0) >= 0))) {
      var result = null;
    } else {
      result = (this.songs).get_Item(this.MediaQueue$ActiveSongIndex$value);
    }
    return result;
  };

  function MediaQueue_get_ActiveSongIndex () {
    return this.MediaQueue$ActiveSongIndex$value;
  };

  function MediaQueue_get_Count () {
    return (this.songs).get_Count();
  };

  function MediaQueue_get_Item (index) {
    return (this.songs).get_Item(index);
  };

  function MediaQueue_get_Songs () {
    return this.songs;
  };

  function MediaQueue_GetNextSong (direction, shuffle) {
    if (shuffle) {
      this.MediaQueue$ActiveSongIndex$value = ((this.random).Next((this.songs).get_Count()) | 0);
    } else {
      this.MediaQueue$ActiveSongIndex$value = ($S02().CallStatic($T05(), "Clamp", null, (((this.MediaQueue$ActiveSongIndex$value | 0) + (direction | 0)) | 0), 0, ((((this.songs).get_Count() | 0) - 1) | 0)) | 0);
    }
    return (this.songs).get_Item(this.MediaQueue$ActiveSongIndex$value);
  };

  function MediaQueue_set_ActiveSongIndex (value) {
    this.MediaQueue$ActiveSongIndex$value = (value | 0);
  };

  function MediaQueue_SetVolume (volume) {
    var count = ((this.songs).get_Count() | 0);

    for (var i = 0; i < count; i = ((i + 1) | 0)) {
      ((this.songs).get_Item(i)).set_Volume(volume);
    }
  };

  function MediaQueue_Stop () {
    var count = ((this.songs).get_Count() | 0);

    for (var i = 0; i < count; i = ((i + 1) | 0)) {
      ((this.songs).get_Item(i)).Stop();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.MediaQueue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MediaQueue__ctor
    );

    $.Method({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")), 
      MediaQueue_Add
    );

    $.Method({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void, 
      MediaQueue_Clear
    );

    $.Method({Static:false, Public:true }, "get_ActiveSong", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")), 
      MediaQueue_get_ActiveSong
    );

    $.Method({Static:false, Public:true }, "get_ActiveSongIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      MediaQueue_get_ActiveSongIndex
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      MediaQueue_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$.Int32]), 
      MediaQueue_get_Item
    );

    $.Method({Static:false, Public:false}, "get_Songs", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")])), 
      MediaQueue_get_Songs
    );

    $.Method({Static:false, Public:false}, "GetNextSong", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$.Int32, $.Boolean]), 
      MediaQueue_GetNextSong
    );

    $.Method({Static:false, Public:true }, "set_ActiveSongIndex", 
      JSIL.MethodSignature.Action($.Int32), 
      MediaQueue_set_ActiveSongIndex
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "SetVolume", 
      JSIL.MethodSignature.Action($.Single), 
      MediaQueue_SetVolume
    );

    $.Method({Static:false, Public:false}, "Stop", 
      JSIL.MethodSignature.Void, 
      MediaQueue_Stop
    );

    $.Field({Static:false, Public:false}, "songs", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")])); 
    $.Field({Static:false, Public:false}, "random", $asm01.TypeRef("System.Random")); 
    $.Field({Static:false, Public:false}, "MediaQueue$ActiveSongIndex$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "ActiveSong", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Song"));

    $.Property({Static:false, Public:true }, "ActiveSongIndex", $.Int32);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Song"));

    $.Property({Static:false, Public:false}, "Songs", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")]));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Media.Playlist */ 

(function Playlist$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };

  function Playlist__ctor (duration, name) {
    (this.Playlist$Duration$value = duration.MemberwiseClone());
    this.Playlist$Name$value = name;
  };

  function Playlist_Dispose () {
  };

  function Playlist_get_Duration () {
    return this.Playlist$Duration$value;
  };

  function Playlist_get_Name () {
    return this.Playlist$Name$value;
  };

  function Playlist_set_Duration (value) {
    this.Playlist$Duration$value = value.MemberwiseClone();
  };

  function Playlist_set_Name (value) {
    this.Playlist$Name$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Playlist", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TimeSpan"), $.String]), 
      Playlist__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Playlist_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Duration", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      Playlist_get_Duration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      Playlist_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Duration", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.TimeSpan")), 
      Playlist_set_Duration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      Playlist_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Playlist$Duration$value", $asm01.TypeRef("System.TimeSpan"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Playlist$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Duration", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.PlaylistCollection */ 

(function PlaylistCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Media.Playlist))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Playlist)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Media.Playlist))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function PlaylistCollection__ctor () {
    this.set_IsReadOnly(false);
    this.innerlist = $S00().Construct();
  };

  function PlaylistCollection_Add (item) {
    if (item === null) {
      throw $S01().Construct("item");
    }
    if (((this.innerlist).get_Count() | 0) === 0) {
      (this.innerlist).Add(item);
    } else {

      for (var i = 0; i < ((this.innerlist).get_Count() | 0); i = ((i + 1) | 0)) {
        if ($T04().op_LessThan(item.Playlist$Duration$value.MemberwiseClone(), (this.innerlist).get_Item(i).Playlist$Duration$value.MemberwiseClone())) {
          (this.innerlist).Insert(i, item);
          return;
        }
      }
      (this.innerlist).Add(item);
    }
  };

  function PlaylistCollection_Clear () {
    (this.innerlist).Clear();
  };

  function PlaylistCollection_Clone () {
    var $temp00;
    var plc = new $thisType();

    for (var a$0 = this.innerlist._items, i$0 = 0, l$0 = (this.innerlist._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var playlist = a$0[i$0];
      plc.Add(playlist);
    }
    return plc;
  };

  function PlaylistCollection_Contains (item) {
    return (this.innerlist).Contains(item);
  };

  function PlaylistCollection_CopyTo (array, arrayIndex) {
    (this.innerlist).CopyTo(array, arrayIndex);
  };

  function PlaylistCollection_Dispose () {
    (this.innerlist).Clear();
  };

  function PlaylistCollection_get_Count () {
    return (this.innerlist).get_Count();
  };

  function PlaylistCollection_get_IsReadOnly () {
    return this.PlaylistCollection$IsReadOnly$value;
  };

  function PlaylistCollection_get_Item (index) {
    return (this.innerlist).get_Item(index);
  };

  function PlaylistCollection_GetEnumerator () {
    return $T00().prototype.GetEnumerator.call(this.innerlist);
  };

  function PlaylistCollection_IndexOf (item) {
    return (this.innerlist).IndexOf(item);
  };

  function PlaylistCollection_Remove (item) {
    return (this.innerlist).Remove(item);
  };

  function PlaylistCollection_set_IsReadOnly (value) {
    this.PlaylistCollection$IsReadOnly$value = value;
  };

  function PlaylistCollection_System_Collections_IEnumerable_GetEnumerator () {
    return $T00().prototype.GetEnumerator.call(this.innerlist);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.PlaylistCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      PlaylistCollection__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist")), 
      PlaylistCollection_Add
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      PlaylistCollection_Clear
    );

    $.Method({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      PlaylistCollection_Clone
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), 
      PlaylistCollection_Contains
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), $.Int32]), 
      PlaylistCollection_CopyTo
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      PlaylistCollection_Dispose
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      PlaylistCollection_get_Count
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      PlaylistCollection_get_IsReadOnly
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist"), [$.Int32]), 
      PlaylistCollection_get_Item
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist")])), 
      PlaylistCollection_GetEnumerator
    );

    $.Method({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), 
      PlaylistCollection_IndexOf
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), 
      PlaylistCollection_Remove
    );

    $.Method({Static:false, Public:false}, "set_IsReadOnly", 
      JSIL.MethodSignature.Action($.Boolean), 
      PlaylistCollection_set_IsReadOnly
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      PlaylistCollection_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "innerlist", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist")])); 
    $.Field({Static:false, Public:false}, "PlaylistCollection$IsReadOnly$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Media.SongCollection */ 

(function SongCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Media.Song))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Song)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Media.Song))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")])]))) ();
  };

  function SongCollection__ctor (songs) {
    this.set_IsReadOnly(false);
    this.innerlist = songs;
  };

  function SongCollection_Add (item) {
    if ($T01().op_Equality(item, null)) {
      throw $S00().Construct("item");
    }
    if (((this.innerlist).get_Count() | 0) === 0) {
      (this.innerlist).Add(item);
    } else {

      for (var i = 0; i < ((this.innerlist).get_Count() | 0); i = ((i + 1) | 0)) {
        if ((item.Song$TrackNumber$value | 0) < ((this.innerlist).get_Item(i).Song$TrackNumber$value | 0)) {
          (this.innerlist).Insert(i, item);
          return;
        }
      }
      (this.innerlist).Add(item);
    }
  };

  function SongCollection_Clear () {
    (this.innerlist).Clear();
  };

  function SongCollection_Clone () {
    return new $thisType($S01().Construct(this.innerlist));
  };

  function SongCollection_Contains (item) {
    return (this.innerlist).Contains(item);
  };

  function SongCollection_CopyTo (array, arrayIndex) {
    (this.innerlist).CopyTo(array, arrayIndex);
  };

  function SongCollection_Dispose () {
    (this.innerlist).Clear();
  };

  function SongCollection_get_Count () {
    return (this.innerlist).get_Count();
  };

  function SongCollection_get_IsReadOnly () {
    return this.SongCollection$IsReadOnly$value;
  };

  function SongCollection_get_Item (index) {
    return (this.innerlist).get_Item(index);
  };

  function SongCollection_GetEnumerator () {
    return $T00().prototype.GetEnumerator.call(this.innerlist);
  };

  function SongCollection_IndexOf (item) {
    return (this.innerlist).IndexOf(item);
  };

  function SongCollection_Remove (item) {
    return (this.innerlist).Remove(item);
  };

  function SongCollection_set_IsReadOnly (value) {
    this.SongCollection$IsReadOnly$value = value;
  };

  function SongCollection_System_Collections_IEnumerable_GetEnumerator () {
    return $T00().prototype.GetEnumerator.call(this.innerlist);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.SongCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")])), 
      SongCollection__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")), 
      SongCollection_Add
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      SongCollection_Clear
    );

    $.Method({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      SongCollection_Clone
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")]), 
      SongCollection_Contains
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")]), $.Int32]), 
      SongCollection_CopyTo
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      SongCollection_Dispose
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      SongCollection_get_Count
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      SongCollection_get_IsReadOnly
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$.Int32]), 
      SongCollection_get_Item
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")])), 
      SongCollection_GetEnumerator
    );

    $.Method({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")]), 
      SongCollection_IndexOf
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")]), 
      SongCollection_Remove
    );

    $.Method({Static:false, Public:false}, "set_IsReadOnly", 
      JSIL.MethodSignature.Action($.Boolean), 
      SongCollection_set_IsReadOnly
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      SongCollection_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "innerlist", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")])); 
    $.Field({Static:false, Public:false}, "SongCollection$IsReadOnly$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Song"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Song")]), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Content.EffectMaterialReader */ 

(function EffectMaterialReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.EffectMaterial))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectMaterial)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Object))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm01.System.String, $asm01.System.Object))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.String, $asm01.System.Object))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameter)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.EffectParameterCollection)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector2))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector3))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Vector4))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Matrix))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Quaternion)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm03.System.Diagnostics.Debug)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectParameter"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Int32")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Boolean")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Single")))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Single")])))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")])))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")])))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector4")))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector4")])))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Matrix")))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")])))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Quaternion")))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.String")))) ();
  };

  function EffectMaterialReader__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EffectMaterialReader_Read$00 (input, existingInstance) {
    var effect = input.ReadExternalReference$b1($T03())();
    var effectMaterial = new ($T02())(effect);
    var dict = $S00().CallVirtual("ReadObject$b1", [$asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Object)], input);
    var enumerator = $T04().prototype.GetEnumerator.call(dict);

    while ($T05().prototype.MoveNext.call(enumerator)) {
      var item = $T05().prototype.get_Current.call(enumerator).MemberwiseClone();
      var parameter = $S01().CallVirtual("get_Item", null, effectMaterial.Effect$Parameters$value, item.get_Key());
      if (parameter !== null) {
        var itemType = JSIL.GetType(item.get_Value());
        if ($S02().CallVirtual("IsAssignableFrom", null, $T0A().__Type__, itemType)) {
          $S03().CallVirtual("SetValue", null, parameter, $T0A().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T0B().__Type__, itemType)) {
          $S04().CallVirtual("SetValue", null, parameter, $T0B().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T0C().__Type__, itemType)) {
          $S05().CallVirtual("SetValue", null, parameter, $T0C().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T0D().__Type__, itemType)) {
          $S06().CallVirtual("SetValue", null, parameter, $T0D().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T0E().__Type__, itemType)) {
          $S07().CallVirtual("SetValue", null, parameter, $T0E().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T0F().__Type__, itemType)) {
          $S08().CallVirtual("SetValue", null, parameter, $T0F().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T10().__Type__, itemType)) {
          $S09().CallVirtual("SetValue", null, parameter, $T10().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T11().__Type__, itemType)) {
          $S0A().CallVirtual("SetValue", null, parameter, $T11().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T12().__Type__, itemType)) {
          $S0B().CallVirtual("SetValue", null, parameter, $T12().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T13().__Type__, itemType)) {
          $S0C().CallVirtual("SetValue", null, parameter, $T13().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T14().__Type__, itemType)) {
          $S0D().CallVirtual("SetValue", null, parameter, $T14().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T15().__Type__, itemType)) {
          $S0E().CallVirtual("SetValue", null, parameter, $T15().$Cast(item.get_Value()));
        } else if ($S02().CallVirtual("IsAssignableFrom", null, $T16().__Type__, itemType)) {
          $S0F().CallVirtual("SetValue", null, parameter, $T16().$Cast(item.get_Value()));
        } else {
          if (!$S02().CallVirtual("IsAssignableFrom", null, $T17().__Type__, itemType)) {
            throw $S10().Construct("Parameter type is not supported");
          }
          $S11().CallVirtual("SetValue", null, parameter, $T17().$Cast(item.get_Value()));
        }
      } else {
        $S12().CallStatic($T19(), "WriteLine", null, JSIL.ConcatString("No parameter ", item.get_Key()));
      }
    }
    return effectMaterial;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectMaterial")]), 
      Name: "Microsoft.Xna.Framework.Content.EffectMaterialReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EffectMaterialReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectMaterial"), [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.EffectMaterial")]), 
      EffectMaterialReader_Read$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ExternalReferenceReader */ 

(function ExternalReferenceReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentReader)) ();
  };

  function ExternalReferenceReader__ctor () {
    $T00().prototype._ctor.call(this, $T01().__Type__);
  };

  function ExternalReferenceReader_Read (input, existingInstance) {
    return input.ReadExternalReference$b1($T01())();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), 
      Name: "Microsoft.Xna.Framework.Content.ExternalReferenceReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ExternalReferenceReader__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object]), 
      ExternalReferenceReader_Read
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.EffectMaterial */ 

(function EffectMaterial$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")))) ();
  };

  function EffectMaterial__ctor (cloneSource) {
    $S00().Call($T00().prototype, "_ctor", null, this, cloneSource);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect"), 
      Name: "Microsoft.Xna.Framework.Graphics.EffectMaterial", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Effect")), 
      EffectMaterial__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.ShaderProgram */ 

(function ShaderProgram$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Int32))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32")]), null))) ();
  };

  function ShaderProgram__ctor (program) {
    this._uniformLocations = $S00().Construct();
    this.Program = (program >>> 0);
  };

  function ShaderProgram_GetUniformLocation (name) {
    if ((this._uniformLocations).ContainsKey(name)) {
      var result = ((this._uniformLocations).get_Item(name) | 0);
    } else {
      var location = ($T05().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.glGetUniformLocation(this.Program, name) | 0);
      (this._uniformLocations).set_Item(name, location);
      result = location;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.ShaderProgram", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.UInt32), 
      ShaderProgram__ctor
    );

    $.Method({Static:false, Public:true }, "GetUniformLocation", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      ShaderProgram_GetUniformLocation
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Program", $.UInt32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_uniformLocations", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.ShaderProgramCache */ 

(function ShaderProgramCache$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm00.Microsoft.Xna.Framework.Graphics.ShaderProgram))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm01.System.Int32, $asm00.Microsoft.Xna.Framework.Graphics.ShaderProgram))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm00.Microsoft.Xna.Framework.Graphics.ShaderProgram))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.GC)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Shader)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ShaderProgram)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderProgram")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function ShaderProgramCache__ctor () {
    this._programCache = $S00().Construct();
  };

  function ShaderProgramCache_Clear () {
    var enumerator = $T00().prototype.GetEnumerator.call(this._programCache);

    while ($T01().prototype.MoveNext.call(enumerator)) {
      var pair = $T01().prototype.get_Current.call(enumerator).MemberwiseClone();
      if ($T04().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.glIsProgram(pair.get_Value().Program)) {
        $T04().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.glDeleteProgram(pair.get_Value().Program);
      }
    }
    (this._programCache).Clear();
  };

  function ShaderProgramCache_Dispose$00 () {
    this.Dispose(true);
    $T05().SuppressFinalize(this);
  };

  function ShaderProgramCache_Dispose$01 (disposing) {
    if (!this.disposed) {
      if (disposing) {
        this.Clear();
      }
      this.disposed = true;
    }
  };

  function ShaderProgramCache_Finalize () {
    try {
      this.Dispose(false);
    } finally {
      $T07().prototype.Finalize.call(this);
    }
  };

  function ShaderProgramCache_GetProgram (vertexShader, pixelShader) {
    var key = (vertexShader.Shader$HashKey$value | 0) | (pixelShader.Shader$HashKey$value | 0);
    if (!(this._programCache).ContainsKey(key)) {
      this.Link(vertexShader, pixelShader);
    }
    return (this._programCache).get_Item(key);
  };

  function ShaderProgramCache_Link (vertexShader, pixelShader) {
    var program = (vertexShader.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glCreateProgram() >>> 0);
    vertexShader.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glAttachShader(program, vertexShader.GetShaderHandle());
    vertexShader.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glAttachShader(program, pixelShader.GetShaderHandle());
    vertexShader.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glLinkProgram(program);
    vertexShader.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glUseProgram(program);
    vertexShader.GetVertexAttributeLocations(program);
    pixelShader.ApplySamplerTextureUnits(program);
    var linked = new JSIL.BoxedVariable(0);
    vertexShader.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetProgramiv(program, $T0C().GL_LINK_STATUS, /* ref */ linked);
    if ((linked.get() | 0) === 0) {
      $T0D().WriteLine(vertexShader.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetProgramInfoLog(program));
      vertexShader.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glDetachShader(program, vertexShader.GetShaderHandle());
      vertexShader.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glDetachShader(program, pixelShader.GetShaderHandle());
      vertexShader.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glDeleteProgram(program);
      throw $S01().Construct("Unable to link effect program");
    }
    var shaderProgram = new ($T0F())(program);
    (this._programCache).Add((vertexShader.Shader$HashKey$value | 0) | (pixelShader.Shader$HashKey$value | 0), shaderProgram);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.ShaderProgramCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShaderProgramCache__ctor
    );

    $.Method({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      ShaderProgramCache_Clear
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      ShaderProgramCache_Dispose$00
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      ShaderProgramCache_Dispose$01
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      ShaderProgramCache_Finalize
    );

    $.Method({Static:false, Public:true }, "GetProgram", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderProgram"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")]), 
      ShaderProgramCache_GetProgram
    );

    $.Method({Static:false, Public:false}, "Link", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Shader")]), 
      ShaderProgramCache_Link
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_programCache", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ShaderProgram")])); 
    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("MonoGame");
JSIL.DeclareNamespace("MonoGame.Utilities");
/* class MonoGame.Utilities.Hash */ 

(function Hash$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.System.Diagnostics.Debug)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Byte)) ();
  };

  function Hash_ComputeHash$00 (data) {
    var hash = -2128831035;

    for (var i = 0; i < (data.length | 0); i = ((i + 1) | 0)) {
      hash = Math.imul((hash ^ (data[i] | 0)), 16777619);
    }
    hash = ((hash + (hash << 13)) | 0);
    hash = hash ^ (hash >> 7);
    hash = ((hash + (hash << 3)) | 0);
    hash = hash ^ (hash >> 17);
    return ((hash + (hash << 5)) | 0);
  };

  function Hash_ComputeHash$01 (stream) {
    var length = 0;
    $T03().Assert(stream.get_CanSeek());
    var hash = -2128831035;
    var prevPosition = stream.get_Position();
    stream.set_Position($T04().Create(0, 0, 0));

    for (var data = JSIL.Array.New($T05(), 1024); (length = (stream.Read(data, 0, data.length) | 0)) !== 0; ) {

      for (var i = 0; i < length; i = ((i + 1) | 0)) {
        hash = Math.imul((hash ^ (data[i] | 0)), 16777619);
      }
    }
    stream.set_Position(prevPosition);
    hash = ((hash + (hash << 13)) | 0);
    hash = hash ^ (hash >> 7);
    hash = ((hash + (hash << 3)) | 0);
    hash = hash ^ (hash >> 17);
    return ((hash + (hash << 5)) | 0);
  };

  JSIL.MakeStaticClass("MonoGame.Utilities.Hash", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "ComputeHash", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])]), 
      Hash_ComputeHash$00
    )
      .Parameter(0, "data", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:true , Public:false}, "ComputeHash", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IO.Stream")]), 
      Hash_ComputeHash$01
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ResourceContentManager */ 

(function ResourceContentManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.IServiceProvider)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Resources.ResourceManager)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentLoadException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IO.MemoryStream)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.MemoryStream"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])]))) ();
  };

  function ResourceContentManager__ctor (servicesProvider, resource) {
    $T02().prototype._ctor.call(this, servicesProvider);
    if (resource === null) {
      throw $S00().Construct("resource");
    }
    this.resource = resource;
  };

  function ResourceContentManager_OpenStream (assetName) {
    var obj = (this.resource).GetObject(assetName);
    if (obj === null) {
      throw $S01().Construct("Resource not found");
    }
    var byteArrayObject = $T07().$As(obj);
    if (byteArrayObject === null) {
      throw $S01().Construct("Resource is not in binary format");
    }
    return $S02().Construct(byteArrayObject);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), 
      Name: "Microsoft.Xna.Framework.Content.ResourceContentManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IServiceProvider"), $asm01.TypeRef("System.Resources.ResourceManager")]), 
      ResourceContentManager__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OpenStream", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String]), 
      ResourceContentManager_OpenStream
    );

    $.Field({Static:false, Public:false}, "resource", $asm01.TypeRef("System.Resources.ResourceManager")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Media.VideoSoundtrackType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Media.VideoSoundtrackType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Music: 0, 
    Dialog: 1, 
    MusicAndDialog: 2, 
  }
);

/* class Microsoft.Xna.Framework.Audio.OpenALDevice */ 

(function OpenALDevice$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.OpenAL.ALC10)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.OpenAL.AL10)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.DllNotFoundException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundState)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance")]), null))) ();
  };

  function OpenALDevice__ctor () {
    this.alDevice = $T00().alcOpenDevice($T01().Empty).MemberwiseClone();
    if (!(!this.CheckALCError("Could not open AL device") && !$T02().op_Equality(this.alDevice.MemberwiseClone(), $T02().Zero.MemberwiseClone()))) {
      throw $S00().Construct("Could not open audio device!");
    }
    var attribute = JSIL.Array.New($T05(), 0);
    this.alContext = $T00().alcCreateContext(this.alDevice.MemberwiseClone(), attribute).MemberwiseClone();
    if (!(!this.CheckALCError("Could not create OpenAL context") && !$T02().op_Equality(this.alContext.MemberwiseClone(), $T02().Zero.MemberwiseClone()))) {
      this.Dispose();
      throw $S00().Construct("Could not create OpenAL context");
    }
    $T00().alcMakeContextCurrent(this.alContext.MemberwiseClone());
    if (this.CheckALCError("Could not make OpenAL context current")) {
      this.Dispose();
      throw $S00().Construct("Could not make OpenAL context current");
    }
    var array = JSIL.Array.New($T07(), 6);
    array[2] = -1;
    array[4] = 1;
    $T08().alListenerfv(4111, array);
    $T08().alListener3f(4100, 0, 0, 0);
    $T08().alListener3f(4102, 0, 0, 0);
    $T08().alListenerf(4106, 1);
    $T08().alDistanceModel(0);
    this.instancePool = $S01().Construct();
    this.dynamicInstancePool = $S02().Construct();
  };

  function OpenALDevice_CheckALCError (message) {
    var retVal = false;
    var err = ($T00().alcGetError(this.alDevice.MemberwiseClone()) | 0);
    if (err !== 0) {
      $T0C().WriteLine(JSIL.ConcatString("OpenAL Error: ", (err).toString()));
      retVal = true;
    }
    return retVal;
  };

  function OpenALDevice_CheckALError () {
    var err = ($T08().alGetError() | 0);
    if (err !== 0) {
      $T0C().WriteLine(JSIL.ConcatString("OpenAL Error: ", (err).toString()));
    }
  };

  function OpenALDevice_Dispose () {
    $T00().alcMakeContextCurrent($T02().Zero.MemberwiseClone());
    if ($T02().op_Inequality(this.alContext.MemberwiseClone(), $T02().Zero.MemberwiseClone())) {
      $T00().alcDestroyContext(this.alContext.MemberwiseClone());
      this.alContext = $T02().Zero.MemberwiseClone();
    }
    if ($T02().op_Inequality(this.alDevice.MemberwiseClone(), $T02().Zero.MemberwiseClone())) {
      $T00().alcCloseDevice(this.alDevice.MemberwiseClone());
      this.alDevice = $T02().Zero.MemberwiseClone();
    }
    $thisType.OpenALDevice$Instance$value = null;
  };

  function OpenALDevice_get_Instance () {
    return $thisType.OpenALDevice$Instance$value;
  };

  function OpenALDevice_Initialize ($exception) {
    if ($thisType.OpenALDevice$Instance$value !== null) {
      throw $S00().Construct("OpenALDevice already created!");
    }
    try {
      $thisType.OpenALDevice$Instance$value = new $thisType();
    } catch ($exception) {
      if ($T0D().$Is($exception)) {
        $T0C().WriteLine("OpenAL not found! Need SDL2-CS.dll.config?");
        throw $exception;
      } else {
      }
    }
  };

  function OpenALDevice_set_Instance (value) {
    $thisType.OpenALDevice$Instance$value = value;
  };

  function OpenALDevice_Update () {
    this.CheckALError();

    for (var i = 0; i < ((this.instancePool).get_Count() | 0); i = ((i + 1) | 0)) {
      if (((this.instancePool).get_Item(i)).get_State() === $T0F().Stopped) {
        ((this.instancePool).get_Item(i)).Dispose();
        (this.instancePool).RemoveAt(i);
        i = ((i - 1) | 0);
      }
    }

    for (i = 0; i < ((this.dynamicInstancePool).get_Count() | 0); i = ((i + 1) | 0)) {
      if (!((this.dynamicInstancePool).get_Item(i)).Update()) {
        (this.dynamicInstancePool).Remove((this.dynamicInstancePool).get_Item(i));
        i = ((i - 1) | 0);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.OpenALDevice", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      OpenALDevice__ctor
    );

    $.Method({Static:false, Public:false}, "CheckALCError", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      OpenALDevice_CheckALCError
    );

    $.Method({Static:false, Public:false}, "CheckALError", 
      JSIL.MethodSignature.Void, 
      OpenALDevice_CheckALError
    );

    $.Method({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      OpenALDevice_Dispose
    );

    $.Method({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type), 
      OpenALDevice_get_Instance
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      OpenALDevice_Initialize
    );

    $.Method({Static:true , Public:false}, "set_Instance", 
      JSIL.MethodSignature.Action($.Type), 
      OpenALDevice_set_Instance
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Void, 
      OpenALDevice_Update
    );

    $.Field({Static:false, Public:false}, "alDevice", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "alContext", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "instancePool", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")])); 
    $.Field({Static:false, Public:false}, "dynamicInstancePool", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance")])); 
    $.Field({Static:true , Public:false}, "OpenALDevice$Instance$value", $.Type)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:true , Public:true }, "Instance", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.SoundEffect */ 

(function SoundEffect$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioChannels)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.IO.File)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.IO.IOException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentLoadException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.OpenAL.AL10)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.OpenALDevice)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.NoAudioHardwareException)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundState)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), [$asm01.TypeRef("System.IO.Stream")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.TimeSpan"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.NoAudioHardwareException"), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.IntPtr"), 
        $asm01.TypeRef("System.IntPtr")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int64")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.BinaryReader"), [$asm01.TypeRef("System.IO.Stream")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.String"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Char")])]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function SoundEffect__ctor$00 (buffer, sampleRate, channels) {
    this.INTERNAL_bufferData(
      buffer, 
      (sampleRate >>> 0), 
      channels.valueOf(), 
      0, 
      0, 
      false, 
      1
    );
  };

  function SoundEffect__ctor$01 (buffer, offset, count, sampleRate, channels, loopStart, loopLength) {
    if (!(((offset | 0) === 0) && ((count | 0) === (buffer.length | 0)))) {
      var sendBuf = JSIL.Array.New($T04(), count);
      $S00().CallStatic($T05(), "Copy", null, 
        buffer, 
        offset, 
        sendBuf, 
        0, 
        count
      );
    } else {
      sendBuf = buffer;
    }
    this.INTERNAL_bufferData(
      sendBuf, 
      (sampleRate >>> 0), 
      channels.valueOf(), 
      (loopStart >>> 0), 
      ((((loopStart | 0) + (loopLength | 0)) | 0) >>> 0), 
      false, 
      1
    );
  };

  function SoundEffect__ctor$02 (fileName, $exception) {
    if (fileName == $T06().Empty) {
      throw $S01().Construct("fileName");
    }
    this.SoundEffect$Name$value = $T09().GetFileNameWithoutExtension(fileName);
    try {
      var s = $T0B().OpenRead(fileName);
      try {
        this.INTERNAL_loadAudioStream(s);
      } finally {
        if (s !== null) {
          $IM00().Call(s, null);
        }
      }
    } catch ($exception) {
      if ($T0D().$Is($exception)) {
        throw $S02().Construct("Could not load audio data", $exception);
      } else {
        throw $exception;
      }
    }
  };

  function SoundEffect__ctor$03 (s) {
    this.INTERNAL_loadAudioStream(s);
  };

  function SoundEffect__ctor$04 (name, buffer, sampleRate, channels, loopStart, loopLength, isADPCM, formatParameter) {
    this.SoundEffect$Name$value = name;
    this.INTERNAL_bufferData(
      buffer, 
      sampleRate, 
      channels, 
      loopStart, 
      (((loopStart >>> 0) + (loopLength >>> 0)) >>> 0), 
      isADPCM, 
      formatParameter
    );
  };

  function SoundEffect_CreateInstance () {
    return new ($T10())(this);
  };

  function SoundEffect_Dispose () {
    if (!this.SoundEffect$IsDisposed$value) {
      $S03().CallStatic($T11(), "alDeleteBuffers", null, $S04().CallStatic($T12(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ new JSIL.MemberReference(this, "INTERNAL_buffer"));
      this.SoundEffect$IsDisposed$value = true;
    }
  };

  function SoundEffect_Finalize () {
    try {
      this.Dispose();
    } finally {
      $T13().prototype.Finalize.call(this);
    }
  };

  function SoundEffect_FromStream (stream) {
    return $S05().Construct(stream);
  };

  function SoundEffect_get_DistanceScale () {
    return $thisType.INTERNAL_distanceScale;
  };

  function SoundEffect_get_DopplerScale () {
    return $thisType.INTERNAL_dopplerScale;
  };

  function SoundEffect_get_Duration () {
    return this.SoundEffect$Duration$value;
  };

  function SoundEffect_get_IsDisposed () {
    return this.SoundEffect$IsDisposed$value;
  };

  function SoundEffect_get_MasterVolume () {
    return $thisType.INTERNAL_masterVolume;
  };

  function SoundEffect_get_Name () {
    return this.SoundEffect$Name$value;
  };

  function SoundEffect_get_SpeedOfSound () {
    return $thisType.INTERNAL_speedOfSound;
  };

  function SoundEffect_GetSampleDuration (sizeInBytes, sampleRate, channels) {
    var ms = ((+(+(((sizeInBytes | 0) / (channels.valueOf() | 0) | 0)) / +((+sampleRate / 1000)))) | 0);
    return $S06().Construct(0, 0, 0, 0, ms);
  };

  function SoundEffect_GetSampleSizeInBytes (duration, sampleRate, channels) {
    return (((+duration.get_TotalSeconds() * +sampleRate) * +channels.valueOf()) | 0);
  };

  function SoundEffect_INTERNAL_bufferData (data, sampleRate, channels, loopStart, loopEnd, isADPCM, formatParameter) {
    var bufLen = new JSIL.BoxedVariable(0);
    var bits = new JSIL.BoxedVariable(0);
    if ($T15().OpenALDevice$Instance$value === null) {
      throw $S07().Construct();
    }
    $S08().CallStatic($T11(), "alGenBuffers", null, $S04().CallStatic($T12(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ new JSIL.MemberReference(this, "INTERNAL_buffer"));
    if (isADPCM) {
      var format = ((
        ((channels >>> 0) === 2)
           ? 4867
           : 4866)
       | 0);
      $T11().alBufferi(this.INTERNAL_buffer, 8204, (formatParameter | 0));
    } else if ((formatParameter >>> 0) === 1) {
      format = ((
        ((channels >>> 0) === 2)
           ? 4355
           : 4353)
       | 0);
    } else {
      format = ((
        ((channels >>> 0) === 2)
           ? 4354
           : 4352)
       | 0);
    }
    $S09().CallStatic($T11(), "alBufferData", null, 
      this.INTERNAL_buffer, 
      format, 
      data, 
      $S04().CallStatic($T12(), "op_Explicit", null, data.length).MemberwiseClone(), 
      $S0A().CallStatic($T12(), "op_Explicit", null, ($T18().FromNumber(sampleRate)).ToInt64()).MemberwiseClone()
    );
    $T11().alGetBufferi(this.INTERNAL_buffer, 8196, /* ref */ bufLen);
    $T11().alGetBufferi(this.INTERNAL_buffer, 8194, /* ref */ bits);
    (this.SoundEffect$Duration$value = $T14().FromSeconds(+((+($T17().op_Division(
              $T17().FromNumber((((bufLen.get() | 0) / (((bits.get() | 0) / 8) | 0)) | 0)), 
              ($T18().FromNumber(channels)).ToInt64()
            )).ToNumber(-1, false) / +sampleRate))).MemberwiseClone());
    if (!(((loopStart >>> 0) <= 0) && ((loopEnd >>> 0) <= 0))) {
      $T11().alBufferiv(this.INTERNAL_buffer, 8213, JSIL.Array.New($T01(), [(loopStart | 0), (loopEnd | 0)]));
    }
  };

  function SoundEffect_INTERNAL_loadAudioStream (s) {
    var sampleRate = 0;
    var numChannels = 0;
    var isADPCM = false;
    var formatParameter = 0;
    var reader = $S0B().Construct(s);
    try {
      var signature = $S0C().Construct(reader.ReadChars(4));
      if (signature != "RIFF") {
        throw $S0D().Construct("Specified stream is not a wave file.");
      }
      reader.ReadUInt32();
      var wformat = $S0C().Construct(reader.ReadChars(4));
      if (wformat != "WAVE") {
        throw $S0D().Construct("Specified stream is not a wave file.");
      }

      for (var format_signature = $S0C().Construct(reader.ReadChars(4)); format_signature != "fmt "; ) {
        reader.ReadBytes(reader.ReadInt32());
        format_signature = $S0C().Construct(reader.ReadChars(4));
      }
      var format_chunk_size = (reader.ReadInt32() | 0);
      var audio_format = (reader.ReadUInt16() | 0);
      numChannels = (reader.ReadUInt16() | 0);
      sampleRate = (reader.ReadUInt32() >>> 0);
      reader.ReadUInt32();
      var blockAlign = (reader.ReadUInt16() | 0);
      var bitDepth = (reader.ReadUInt16() | 0);
      if (audio_format === 1) {
        formatParameter = ((bitDepth / 16) & 0xFFFF);
      } else {
        if (audio_format === 2) {
          throw $S0D().Construct("Wave format is not supported.");
        }
        isADPCM = true;
        formatParameter = (Math.imul(((((blockAlign / numChannels) >>> 0) - 6) >>> 0), 2) >>> 0);
      }
      if (format_chunk_size > 16) {
        reader.ReadBytes(((format_chunk_size - 16) | 0));
      }

      for (var data_signature = $S0C().Construct(reader.ReadChars(4)); data_signature.toLowerCase() != "data"; ) {
        reader.ReadBytes(reader.ReadInt32());
        data_signature = $S0C().Construct(reader.ReadChars(4));
      }
      if (data_signature != "data") {
        throw $S0D().Construct("Specified wave file is not supported.");
      }
      var waveDataLength = (reader.ReadInt32() | 0);
      var data = reader.ReadBytes(waveDataLength);
    } finally {
      if (reader !== null) {
        $IM00().Call(reader, null);
      }
    }
    this.INTERNAL_bufferData(
      data, 
      sampleRate, 
      numChannels, 
      0, 
      0, 
      isADPCM, 
      formatParameter
    );
  };

  function SoundEffect_Play$05 () {
    return this.Play($thisType.get_MasterVolume(), 0, 0);
  };

  function SoundEffect_Play$06 (volume, pitch, pan) {
    var instance = this.CreateInstance();
    instance.set_Volume(volume);
    instance.set_Pitch(pitch);
    instance.set_Pan(pan);
    instance.Play();
    if (instance.get_State() !== $T1D().Playing) {
      instance.Dispose();
      var result = false;
    } else {
      $T15().OpenALDevice$Instance$value.instancePool.Add(instance);
      result = true;
    }
    return result;
  };

  function SoundEffect_set_DistanceScale (value) {
    if (+value <= 0) {
      throw $S0E().Construct("value of DistanceScale");
    }
    $thisType.INTERNAL_distanceScale = +value;
  };

  function SoundEffect_set_DopplerScale (value) {
    if (+value <= 0) {
      throw $S0E().Construct("value of DopplerScale");
    }
    $thisType.INTERNAL_dopplerScale = +value;
  };

  function SoundEffect_set_Duration (value) {
    this.SoundEffect$Duration$value = value.MemberwiseClone();
  };

  function SoundEffect_set_IsDisposed (value) {
    this.SoundEffect$IsDisposed$value = value;
  };

  function SoundEffect_set_MasterVolume (value) {
    $thisType.INTERNAL_masterVolume = +value;
  };

  function SoundEffect_set_Name (value) {
    this.SoundEffect$Name$value = value;
  };

  function SoundEffect_set_SpeedOfSound (value) {
    $thisType.INTERNAL_speedOfSound = +value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.SoundEffect", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
        ]), 
      SoundEffect__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), $.Int32, 
          $.Int32
        ]), 
      SoundEffect__ctor$01
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      SoundEffect__ctor$02
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IO.Stream")), 
      SoundEffect__ctor$03
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $.UInt32, 
          $.UInt32, $.UInt32, 
          $.Boolean, $.UInt32
        ]), 
      SoundEffect__ctor$04
    );

    $.Method({Static:false, Public:true }, "CreateInstance", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")), 
      SoundEffect_CreateInstance
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      SoundEffect_Dispose
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      SoundEffect_Finalize
    );

    $.Method({Static:true , Public:true }, "FromStream", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.Stream")]), 
      SoundEffect_FromStream
    );

    $.Method({Static:true , Public:true }, "get_DistanceScale", 
      JSIL.MethodSignature.Return($.Single), 
      SoundEffect_get_DistanceScale
    );

    $.Method({Static:true , Public:true }, "get_DopplerScale", 
      JSIL.MethodSignature.Return($.Single), 
      SoundEffect_get_DopplerScale
    );

    $.Method({Static:false, Public:true }, "get_Duration", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      SoundEffect_get_Duration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      SoundEffect_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_MasterVolume", 
      JSIL.MethodSignature.Return($.Single), 
      SoundEffect_get_MasterVolume
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      SoundEffect_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SpeedOfSound", 
      JSIL.MethodSignature.Return($.Single), 
      SoundEffect_get_SpeedOfSound
    );

    $.Method({Static:true , Public:true }, "GetSampleDuration", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [
          $.Int32, $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
        ]), 
      SoundEffect_GetSampleDuration
    );

    $.Method({Static:true , Public:true }, "GetSampleSizeInBytes", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.TimeSpan"), $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
        ]), 
      SoundEffect_GetSampleSizeInBytes
    );

    $.Method({Static:false, Public:false}, "INTERNAL_bufferData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt32, 
          $.UInt32, $.UInt32, 
          $.UInt32, $.Boolean, 
          $.UInt32
        ]), 
      SoundEffect_INTERNAL_bufferData
    );

    $.Method({Static:false, Public:false}, "INTERNAL_loadAudioStream", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IO.Stream")), 
      SoundEffect_INTERNAL_loadAudioStream
    );

    $.Method({Static:false, Public:true }, "Play", 
      JSIL.MethodSignature.Return($.Boolean), 
      SoundEffect_Play$05
    );

    $.Method({Static:false, Public:true }, "Play", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $.Single
        ]), 
      SoundEffect_Play$06
    );

    $.Method({Static:true , Public:true }, "set_DistanceScale", 
      JSIL.MethodSignature.Action($.Single), 
      SoundEffect_set_DistanceScale
    );

    $.Method({Static:true , Public:true }, "set_DopplerScale", 
      JSIL.MethodSignature.Action($.Single), 
      SoundEffect_set_DopplerScale
    );

    $.Method({Static:false, Public:false}, "set_Duration", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.TimeSpan")), 
      SoundEffect_set_Duration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      SoundEffect_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_MasterVolume", 
      JSIL.MethodSignature.Action($.Single), 
      SoundEffect_set_MasterVolume
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      SoundEffect_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "set_SpeedOfSound", 
      JSIL.MethodSignature.Action($.Single), 
      SoundEffect_set_SpeedOfSound
    );

    $.Field({Static:true , Public:false}, "INTERNAL_masterVolume", $.Single, 1); 
    $.Field({Static:true , Public:false}, "INTERNAL_distanceScale", $.Single, 1); 
    $.Field({Static:true , Public:false}, "INTERNAL_dopplerScale", $.Single, 1); 
    $.Field({Static:true , Public:false}, "INTERNAL_speedOfSound", $.Single, 343.5); 
    $.Field({Static:false, Public:false}, "INTERNAL_buffer", $.UInt32); 
    $.Field({Static:false, Public:false}, "SoundEffect$Duration$value", $asm01.TypeRef("System.TimeSpan"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SoundEffect$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SoundEffect$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function SoundEffect__cctor () {
      $thisType.INTERNAL_masterVolume = 1;
      $thisType.INTERNAL_distanceScale = 1;
      $thisType.INTERNAL_dopplerScale = 1;
      $thisType.INTERNAL_speedOfSound = 343.5;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SoundEffect__cctor
    );

    $.Property({Static:false, Public:true }, "Duration", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:true , Public:true }, "MasterVolume", $.Single);

    $.Property({Static:true , Public:true }, "DistanceScale", $.Single);

    $.Property({Static:true , Public:true }, "DopplerScale", $.Single);

    $.Property({Static:true , Public:true }, "SpeedOfSound", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.SoundEffectInstance */ 

(function SoundEffectInstance$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.System.Diagnostics.Stopwatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioListener)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioEmitter)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.OpenAL.AL10)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.AudioListener))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundState)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPEffect)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPFilter)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Convert)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Boolean")]))) ();
  };

  function SoundEffectInstance__ctor (parent) {
    this.INTERNAL_looped = false;
    this.INTERNAL_pan = 0;
    this.INTERNAL_pitch = 0;
    this.INTERNAL_volume = 1;
    this.INTERNAL_isXACTSource = false;
    this.INTERNAL_timer = new ($T01())();
    this.INTERNAL_delayMS = 0;
    this.INTERNAL_alSource = 0;
    this.INTERNAL_alEffectSlot = 0;
    this.position = $S00().Construct(0, 0, 0.1);
    this.INTERNAL_positionalAudio = false;
    this.INTERNAL_parentEffect = parent;
  };

  function SoundEffectInstance_Apply3D$00 (listener, emitter) {
    if ((this.INTERNAL_alSource >>> 0) !== 0) {
      var orientation = $T05().CreateWorld($T02().get_Zero().MemberwiseClone(), listener.AudioListener$Forward$value.MemberwiseClone(), listener.AudioListener$Up$value.MemberwiseClone()).MemberwiseClone();
      this.position = $S01().CallStatic($T02(), "Transform", null, $T02().op_Subtraction(emitter.AudioEmitter$Position$value.MemberwiseClone(), listener.AudioListener$Position$value).MemberwiseClone(), orientation.MemberwiseClone());
      if ($T02().op_Inequality(this.position.MemberwiseClone(), $T02().get_Zero().MemberwiseClone())) {
        (this.position).Normalize();
      }
      $T06().alSource3f(
        this.INTERNAL_alSource, 
        4100, 
        this.position.X, 
        this.position.Y, 
        this.position.Z
      );
      this.INTERNAL_positionalAudio = true;
    }
  };

  function SoundEffectInstance_Apply3D$01 (listeners, emitter) {
    throw $S02().Construct("OpenAL can only make use of one listener.");
  };

  function SoundEffectInstance_Dispose () {
    if (!this.SoundEffectInstance$IsDisposed$value) {
      this.Stop(true);
      this.SoundEffectInstance$IsDisposed$value = true;
    }
  };

  function SoundEffectInstance_Finalize () {
    try {
      this.Dispose();
    } finally {
      $T09().prototype.Finalize.call(this);
    }
  };

  function SoundEffectInstance_get_FilterType () {
    return this.SoundEffectInstance$FilterType$value;
  };

  function SoundEffectInstance_get_IsDisposed () {
    return this.SoundEffectInstance$IsDisposed$value;
  };

  function SoundEffectInstance_get_IsLooped () {
    return this.INTERNAL_looped;
  };

  function SoundEffectInstance_get_Pan () {
    return this.INTERNAL_pan;
  };

  function SoundEffectInstance_get_Pitch () {
    return this.INTERNAL_pitch;
  };

  function SoundEffectInstance_get_State () {
    var state = new JSIL.BoxedVariable(0);
    if ((this.INTERNAL_timer).get_IsRunning()) {
      var result = $T0B().Playing;
    } else if (!$T0C().op_LessThanOrEqual(
        (this.INTERNAL_timer).get_ElapsedMilliseconds(), 
        $T0C().Create(0, 0, 0)
      )) {
      result = $T0B().Paused;
    } else if ((this.INTERNAL_alSource >>> 0) === 0) {
      result = $T0B().Stopped;
    } else {
      $T06().alGetSourcei(this.INTERNAL_alSource, 4112, /* ref */ state);
      if ((state.get() | 0) === 4114) {
        result = $T0B().Playing;
      } else if ((state.get() | 0) === 4115) {
        result = $T0B().Paused;
      } else {
        result = $T0B().Stopped;
      }
    }
    return result;
  };

  function SoundEffectInstance_get_Volume () {
    return this.INTERNAL_volume;
  };

  function SoundEffectInstance_INTERNAL_applyEffect (effectSlotHandle) {
    this.INTERNAL_alEffectSlot = (effectSlotHandle.DSPEffect$Handle$value >>> 0);
    if ((this.INTERNAL_alSource >>> 0) !== 0) {
      $T06().alSource3i(
        this.INTERNAL_alSource, 
        131078, 
        (this.INTERNAL_alEffectSlot | 0), 
        0, 
        0
      );
    }
  };

  function SoundEffectInstance_INTERNAL_applyFilter (filter, hfGain, lfGain) {
    if ((this.SoundEffectInstance$FilterType$value | 0) !== -1) {
      if ((this.SoundEffectInstance$FilterType$value | 0) === 0) {
        filter.ApplyLowPassFilter(this.INTERNAL_alSource, hfGain);
      } else if ((this.SoundEffectInstance$FilterType$value | 0) === 1) {
        filter.ApplyHighPassFilter(this.INTERNAL_alSource, lfGain);
      } else if ((this.SoundEffectInstance$FilterType$value | 0) === 2) {
        filter.ApplyBandPassFilter(this.INTERNAL_alSource, hfGain, lfGain);
      }
      if ((this.INTERNAL_alSource >>> 0) !== 0) {
        $T06().alSourcei(this.INTERNAL_alSource, 131077, (filter.DSPFilter$Handle$value | 0));
      }
    }
  };

  function SoundEffectInstance_INTERNAL_XNA_To_AL_Pitch (xnaPitch) {
    if (!(this.INTERNAL_isXACTSource || ((+xnaPitch >= -1) && 
          (+xnaPitch <= 1)))) {
      throw $S03().Construct("XNA PITCH MUST BE WITHIN [-1.0f, 1.0f]!");
    }
    return Math.fround(Math.pow(2, xnaPitch));
  };

  function SoundEffectInstance_Pause () {
    if ((this.INTERNAL_delayMS >>> 0) > 0) {
      (this.INTERNAL_timer).Stop();
    }
    if (!(((this.INTERNAL_alSource >>> 0) === 0) || (this.get_State() !== $T0B().Playing))) {
      $T06().alSourcePause(this.INTERNAL_alSource);
    }
  };

  function SoundEffectInstance_Play$02 () {
    if (!((this.get_State() === $T0B().Stopped) || ((this.INTERNAL_alSource >>> 0) === 0))) {
      this.Stop();
    }
    if (!(((this.INTERNAL_delayMS >>> 0) === 0) || (this.INTERNAL_timer).get_IsRunning())) {
      (this.INTERNAL_timer).Start();
    }
    if ($T0C().op_GreaterThanOrEqual(
        (this.INTERNAL_timer).get_ElapsedMilliseconds(), 
        ($T14().FromNumber(this.INTERNAL_delayMS)).ToInt64()
      )) {
      (this.INTERNAL_timer).Stop();
      (this.INTERNAL_timer).Reset();
      if ((this.INTERNAL_alSource >>> 0) !== 0) {
        $T06().alSourceStop(this.INTERNAL_alSource);
        $S04().CallStatic($T06(), "alDeleteSources", null, $S05().CallStatic($T15(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ new JSIL.MemberReference(this, "INTERNAL_alSource"));
        this.INTERNAL_alSource = 0;
      }
      $S06().CallStatic($T06(), "alGenSources", null, $S05().CallStatic($T15(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ new JSIL.MemberReference(this, "INTERNAL_alSource"));
      if ((this.INTERNAL_alSource >>> 0) === 0) {
        $T16().WriteLine("WARNING: AL SOURCE WAS NOT AVAILABLE. SKIPPING.");
      } else {
        $T06().alSourcei(this.INTERNAL_alSource, 4105, (this.INTERNAL_parentEffect.INTERNAL_buffer | 0));
        if (this.INTERNAL_positionalAudio) {
          this.INTERNAL_positionalAudio = false;
          $T06().alSource3f(
            this.INTERNAL_alSource, 
            4100, 
            this.position.X, 
            this.position.Y, 
            this.position.Z
          );
        } else {
          this.set_Pan(this.get_Pan());
        }
        this.set_Volume(this.get_Volume());
        this.set_IsLooped(this.get_IsLooped());
        this.set_Pitch(this.get_Pitch());
        if ((this.INTERNAL_alEffectSlot >>> 0) !== 0) {
          $T06().alSource3i(
            this.INTERNAL_alSource, 
            131078, 
            (this.INTERNAL_alEffectSlot | 0), 
            0, 
            0
          );
        }
        $T06().alSourcePlay(this.INTERNAL_alSource);
      }
    }
  };

  function SoundEffectInstance_Resume () {
    if ((this.INTERNAL_delayMS >>> 0) > 0) {
      (this.INTERNAL_timer).Start();
    }
    if (!(((this.INTERNAL_alSource >>> 0) === 0) || (this.get_State() !== $T0B().Paused))) {
      $T06().alSourcePlay(this.INTERNAL_alSource);
    }
  };

  function SoundEffectInstance_set_FilterType (value) {
    this.SoundEffectInstance$FilterType$value = (value | 0);
  };

  function SoundEffectInstance_set_IsDisposed (value) {
    this.SoundEffectInstance$IsDisposed$value = value;
  };

  function SoundEffectInstance_set_IsLooped (value) {
    this.INTERNAL_looped = value;
    if ((this.INTERNAL_alSource >>> 0) !== 0) {
      $T06().alSourcei(this.INTERNAL_alSource, 4103, $S07().CallStatic($T18(), "ToInt32", null, this.INTERNAL_looped));
    }
  };

  function SoundEffectInstance_set_Pan (value) {
    this.INTERNAL_pan = +value;
    if ((this.INTERNAL_alSource >>> 0) !== 0) {
      $T06().alSource3f(
        this.INTERNAL_alSource, 
        4100, 
        this.INTERNAL_pan, 
        0, 
        Math.fround(Math.sqrt((1 - (Math.pow(this.INTERNAL_pan, 2)))))
      );
    }
  };

  function SoundEffectInstance_set_Pitch (value) {
    this.INTERNAL_pitch = +value;
    if ((this.INTERNAL_alSource >>> 0) !== 0) {
      $T06().alSourcef(this.INTERNAL_alSource, 4099, this.INTERNAL_XNA_To_AL_Pitch(this.INTERNAL_pitch));
    }
  };

  function SoundEffectInstance_set_Volume (value) {
    this.INTERNAL_volume = +value;
    if ((this.INTERNAL_alSource >>> 0) !== 0) {
      $T06().alSourcef(this.INTERNAL_alSource, 4106, +this.INTERNAL_volume * +$T00().get_MasterVolume());
    }
  };

  function SoundEffectInstance_Stop$03 () {
    if ((this.INTERNAL_delayMS >>> 0) > 0) {
      (this.INTERNAL_timer).Stop();
      (this.INTERNAL_timer).Reset();
    }
    if ((this.INTERNAL_alSource >>> 0) !== 0) {
      $T06().alSourceStop(this.INTERNAL_alSource);
      $S04().CallStatic($T06(), "alDeleteSources", null, $S05().CallStatic($T15(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ new JSIL.MemberReference(this, "INTERNAL_alSource"));
      this.INTERNAL_alSource = 0;
    }
  };

  function SoundEffectInstance_Stop$04 (immediate) {
    this.Stop();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.SoundEffectInstance", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")), 
      SoundEffectInstance__ctor
    );

    $.Method({Static:false, Public:true }, "Apply3D", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener"), $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")]), 
      SoundEffectInstance_Apply3D$00
    );

    $.Method({Static:false, Public:true }, "Apply3D", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener")]), $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")]), 
      SoundEffectInstance_Apply3D$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      SoundEffectInstance_Dispose
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      SoundEffectInstance_Finalize
    );

    $.Method({Static:false, Public:false}, "get_FilterType", 
      JSIL.MethodSignature.Return($.Int32), 
      SoundEffectInstance_get_FilterType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      SoundEffectInstance_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsLooped", 
      JSIL.MethodSignature.Return($.Boolean), 
      SoundEffectInstance_get_IsLooped
    );

    $.Method({Static:false, Public:true }, "get_Pan", 
      JSIL.MethodSignature.Return($.Single), 
      SoundEffectInstance_get_Pan
    );

    $.Method({Static:false, Public:true }, "get_Pitch", 
      JSIL.MethodSignature.Return($.Single), 
      SoundEffectInstance_get_Pitch
    );

    $.Method({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundState")), 
      SoundEffectInstance_get_State
    );

    $.Method({Static:false, Public:true }, "get_Volume", 
      JSIL.MethodSignature.Return($.Single), 
      SoundEffectInstance_get_Volume
    );

    $.Method({Static:false, Public:false}, "INTERNAL_applyEffect", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPEffect")), 
      SoundEffectInstance_INTERNAL_applyEffect
    );

    $.Method({Static:false, Public:false}, "INTERNAL_applyFilter", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPFilter"), $.Single, 
          $.Single
        ]), 
      SoundEffectInstance_INTERNAL_applyFilter
    );

    $.Method({Static:false, Public:false}, "INTERNAL_XNA_To_AL_Pitch", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      SoundEffectInstance_INTERNAL_XNA_To_AL_Pitch
    );

    $.Method({Static:false, Public:true }, "Pause", 
      JSIL.MethodSignature.Void, 
      SoundEffectInstance_Pause
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Play", 
      JSIL.MethodSignature.Void, 
      SoundEffectInstance_Play$02
    );

    $.Method({Static:false, Public:true }, "Resume", 
      JSIL.MethodSignature.Void, 
      SoundEffectInstance_Resume
    );

    $.Method({Static:false, Public:false}, "set_FilterType", 
      JSIL.MethodSignature.Action($.Int32), 
      SoundEffectInstance_set_FilterType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      SoundEffectInstance_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_IsLooped", 
      JSIL.MethodSignature.Action($.Boolean), 
      SoundEffectInstance_set_IsLooped
    );

    $.Method({Static:false, Public:true }, "set_Pan", 
      JSIL.MethodSignature.Action($.Single), 
      SoundEffectInstance_set_Pan
    );

    $.Method({Static:false, Public:true }, "set_Pitch", 
      JSIL.MethodSignature.Action($.Single), 
      SoundEffectInstance_set_Pitch
    );

    $.Method({Static:false, Public:true }, "set_Volume", 
      JSIL.MethodSignature.Action($.Single), 
      SoundEffectInstance_set_Volume
    );

    $.Method({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Void, 
      SoundEffectInstance_Stop$03
    );

    $.Method({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Action($.Boolean), 
      SoundEffectInstance_Stop$04
    );

    $.Field({Static:false, Public:false}, "INTERNAL_looped", $.Boolean); 
    $.Field({Static:false, Public:false}, "INTERNAL_pan", $.Single); 
    $.Field({Static:false, Public:false}, "INTERNAL_pitch", $.Single); 
    $.Field({Static:false, Public:false}, "INTERNAL_volume", $.Single); 
    $.Field({Static:false, Public:false}, "INTERNAL_parentEffect", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "INTERNAL_isXACTSource", $.Boolean); 
    $.Field({Static:false, Public:false}, "INTERNAL_timer", $asm03.TypeRef("System.Diagnostics.Stopwatch")); 
    $.Field({Static:false, Public:false}, "INTERNAL_delayMS", $.UInt32); 
    $.Field({Static:false, Public:false}, "INTERNAL_alSource", $.UInt32)
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; }); 
    $.Field({Static:false, Public:false}, "INTERNAL_alEffectSlot", $.UInt32); 
    $.Field({Static:false, Public:false}, "position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "INTERNAL_positionalAudio", $.Boolean); 
    $.Field({Static:false, Public:false}, "SoundEffectInstance$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SoundEffectInstance$FilterType$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsLooped", $.Boolean);

    $.Property({Static:false, Public:true }, "Pan", $.Single);

    $.Property({Static:false, Public:true }, "Pitch", $.Single);

    $.Property({Static:false, Public:true }, "State", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundState"));

    $.Property({Static:false, Public:true }, "Volume", $.Single);

    $.Property({Static:false, Public:false}, "FilterType", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Input.InputType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.InputType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: -1, 
    PovUp: 1, 
    PovRight: 2, 
    PovDown: 4, 
    PovLeft: 8, 
    Button: 16, 
    Axis: 32, 
  }
);

/* class Microsoft.Xna.Framework.Input.MonoGameJoystickValue */ 

(function MonoGameJoystickValue$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.InputType)) ();
  };

  function MonoGameJoystickValue__ctor () {
    this.INPUT_TYPE = $T00().None;
    this.INPUT_ID = -1;
    this.INPUT_INVERT = false;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Input.MonoGameJoystickValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MonoGameJoystickValue__ctor
    );

    $.Field({Static:false, Public:true }, "INPUT_TYPE", $asm00.TypeRef("Microsoft.Xna.Framework.Input.InputType")); 
    $.Field({Static:false, Public:true }, "INPUT_ID", $.Int32); 
    $.Field({Static:false, Public:true }, "INPUT_INVERT", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.MonoGameJoystickConfig */ 

(function MonoGameJoystickConfig$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.MonoGameJoystickValue)) ();
  };

  function MonoGameJoystickConfig__ctor () {
    this.BUTTON_START = new ($T00())();
    this.BUTTON_BACK = new ($T00())();
    this.BUTTON_A = new ($T00())();
    this.BUTTON_B = new ($T00())();
    this.BUTTON_X = new ($T00())();
    this.BUTTON_Y = new ($T00())();
    this.SHOULDER_LB = new ($T00())();
    this.SHOULDER_RB = new ($T00())();
    this.TRIGGER_RT = new ($T00())();
    this.TRIGGER_LT = new ($T00())();
    this.BUTTON_LSTICK = new ($T00())();
    this.BUTTON_RSTICK = new ($T00())();
    this.DPAD_UP = new ($T00())();
    this.DPAD_DOWN = new ($T00())();
    this.DPAD_LEFT = new ($T00())();
    this.DPAD_RIGHT = new ($T00())();
    this.AXIS_LX = new ($T00())();
    this.AXIS_LY = new ($T00())();
    this.AXIS_RX = new ($T00())();
    this.AXIS_RY = new ($T00())();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Input.MonoGameJoystickConfig", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MonoGameJoystickConfig__ctor
    );

    $.Field({Static:false, Public:true }, "BUTTON_START", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "BUTTON_BACK", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "BUTTON_A", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "BUTTON_B", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "BUTTON_X", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "BUTTON_Y", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "SHOULDER_LB", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "SHOULDER_RB", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "TRIGGER_RT", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "TRIGGER_LT", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "BUTTON_LSTICK", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "BUTTON_RSTICK", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "DPAD_UP", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "DPAD_DOWN", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "DPAD_LEFT", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "DPAD_RIGHT", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "AXIS_LX", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "AXIS_LY", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "AXIS_RX", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    $.Field({Static:false, Public:true }, "AXIS_RY", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.GamePad */ 

(function GamePad$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePad_HapticType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.SDL2.SDL_SDL_HapticEffect)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.SDL2.SDL_SDL_HapticLeftRight)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.UInt16))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandle)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandleType)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.SDL2.SDL_SDL_HapticCustom)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadCapabilities)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.InputType)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadDeadZone)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadThumbSticks)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadTriggers)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadDPad)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadButtons)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Buttons)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.SDL2.SDL)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.SDL2.SDL_SDL_GameControllerAxis)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.SDL2.SDL_SDL_GameControllerButton)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.SDL2.SDL_SDL_bool)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GamePlatform)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.String))) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.IO.Directory)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm01.System.Environment)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm01.System.IO.File)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm01.System.IO.FileStream)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm07.System.Xml.Serialization.XmlSerializer)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.MonoGameJoystickConfig)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm01.System.IO.FileMode)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.MonoGameJoystickValue)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Text.StringBuilder"), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Char")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.String")]), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.IO.Stream")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Object")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function GamePad_GetCapabilities (playerIndex) {
    if ($thisType.INTERNAL_isGameController[playerIndex.valueOf()]) {
      var gamePadCapabilities = new ($T0E())();
      gamePadCapabilities.GamePadCapabilities$IsConnected$value = $T00().op_Inequality($thisType.INTERNAL_devices[playerIndex.valueOf()].MemberwiseClone(), $T00().Zero.MemberwiseClone());
      gamePadCapabilities.GamePadCapabilities$HasAButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasBButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasXButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasYButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasBackButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasStartButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasDPadDownButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasDPadLeftButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasDPadRightButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasDPadUpButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasLeftShoulderButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasRightShoulderButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasLeftStickButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasRightStickButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasLeftTrigger$value = true;
      gamePadCapabilities.GamePadCapabilities$HasRightTrigger$value = true;
      gamePadCapabilities.GamePadCapabilities$HasLeftXThumbStick$value = true;
      gamePadCapabilities.GamePadCapabilities$HasLeftYThumbStick$value = true;
      gamePadCapabilities.GamePadCapabilities$HasRightXThumbStick$value = true;
      gamePadCapabilities.GamePadCapabilities$HasRightYThumbStick$value = true;
      gamePadCapabilities.GamePadCapabilities$HasBigButton$value = true;
      gamePadCapabilities.GamePadCapabilities$HasLeftVibrationMotor$value = $T00().op_Inequality($thisType.INTERNAL_haptics[playerIndex.valueOf()].MemberwiseClone(), $T00().Zero.MemberwiseClone());
      gamePadCapabilities.GamePadCapabilities$HasRightVibrationMotor$value = $T00().op_Inequality($thisType.INTERNAL_haptics[playerIndex.valueOf()].MemberwiseClone(), $T00().Zero.MemberwiseClone());
      gamePadCapabilities.GamePadCapabilities$HasVoiceSupport$value = false;
      var result = gamePadCapabilities;
    } else {
      var d = $thisType.INTERNAL_devices[playerIndex.valueOf()].MemberwiseClone();
      if ($T00().op_Equality(d.MemberwiseClone(), $T00().Zero.MemberwiseClone())) {
        result = new ($T0E())();
      } else {
        var gamePadCapabilities2 = new ($T0E())();
        gamePadCapabilities2.GamePadCapabilities$IsConnected$value = true;
        gamePadCapabilities2.GamePadCapabilities$HasAButton$value = $thisType.INTERNAL_joystickConfig.BUTTON_A.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasBButton$value = $thisType.INTERNAL_joystickConfig.BUTTON_B.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasXButton$value = $thisType.INTERNAL_joystickConfig.BUTTON_X.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasYButton$value = $thisType.INTERNAL_joystickConfig.BUTTON_Y.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasBackButton$value = $thisType.INTERNAL_joystickConfig.BUTTON_BACK.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasStartButton$value = $thisType.INTERNAL_joystickConfig.BUTTON_START.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasDPadDownButton$value = $thisType.INTERNAL_joystickConfig.DPAD_DOWN.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasDPadLeftButton$value = $thisType.INTERNAL_joystickConfig.DPAD_LEFT.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasDPadRightButton$value = $thisType.INTERNAL_joystickConfig.DPAD_RIGHT.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasDPadUpButton$value = $thisType.INTERNAL_joystickConfig.DPAD_UP.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasLeftShoulderButton$value = $thisType.INTERNAL_joystickConfig.SHOULDER_LB.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasRightShoulderButton$value = $thisType.INTERNAL_joystickConfig.SHOULDER_RB.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasLeftStickButton$value = $thisType.INTERNAL_joystickConfig.BUTTON_LSTICK.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasRightStickButton$value = $thisType.INTERNAL_joystickConfig.BUTTON_RSTICK.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasLeftTrigger$value = $thisType.INTERNAL_joystickConfig.TRIGGER_LT.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasRightTrigger$value = $thisType.INTERNAL_joystickConfig.TRIGGER_RT.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasLeftXThumbStick$value = $thisType.INTERNAL_joystickConfig.AXIS_LX.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasLeftYThumbStick$value = $thisType.INTERNAL_joystickConfig.AXIS_LY.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasRightXThumbStick$value = $thisType.INTERNAL_joystickConfig.AXIS_RX.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasRightYThumbStick$value = $thisType.INTERNAL_joystickConfig.AXIS_RY.INPUT_TYPE !== $T0F().None;
        gamePadCapabilities2.GamePadCapabilities$HasLeftVibrationMotor$value = $T00().op_Inequality($thisType.INTERNAL_haptics[playerIndex.valueOf()].MemberwiseClone(), $T00().Zero.MemberwiseClone());
        gamePadCapabilities2.GamePadCapabilities$HasRightVibrationMotor$value = $T00().op_Inequality($thisType.INTERNAL_haptics[playerIndex.valueOf()].MemberwiseClone(), $T00().Zero.MemberwiseClone());
        gamePadCapabilities2.GamePadCapabilities$HasVoiceSupport$value = false;
        gamePadCapabilities2.GamePadCapabilities$HasBigButton$value = false;
        result = gamePadCapabilities2;
      }
    }
    return result;
  };

  function GamePad_GetGUIDEXT (playerIndex) {
    return $thisType.INTERNAL_guids[playerIndex.valueOf()];
  };

  function GamePad_GetState$00 (playerIndex) {
    return $thisType.GetState(playerIndex, $T10().IndependentAxes);
  };

  function GamePad_GetState$01 (playerIndex, deadZoneMode) {
    var gc_sticks = new ($T11())(), gc_triggers = new ($T12())(), gc_dpad = new ($T13())(), gc_buttons = new ($T14())(), gc_builtState = new ($T05())(), sticks = new ($T11())(), triggers = new ($T12())(), buttons = new ($T14())(), dpad = new ($T13())(), builtState = new ($T05())();
    var device = $thisType.INTERNAL_devices[playerIndex.valueOf()].MemberwiseClone();
    if ($T00().op_Equality(device.MemberwiseClone(), $T00().Zero.MemberwiseClone())) {
      var result = $thisType.InitializedState.MemberwiseClone();
    } else if ($thisType.INTERNAL_isGameController[playerIndex.valueOf()]) {
      var gc_buttonState = $T15().$Cast(0);
      $T11().prototype._ctor.call(gc_sticks, 
        $S01().Construct(+((+($T17().SDL_GameControllerGetAxis(device.MemberwiseClone(), $T18().SDL_CONTROLLER_AXIS_LEFTX)) / 32768)), +((+($T17().SDL_GameControllerGetAxis(device.MemberwiseClone(), $T18().SDL_CONTROLLER_AXIS_LEFTY)) / -32768))), 
        $S01().Construct(+((+($T17().SDL_GameControllerGetAxis(device.MemberwiseClone(), $T18().SDL_CONTROLLER_AXIS_RIGHTX)) / 32768)), +((+($T17().SDL_GameControllerGetAxis(device.MemberwiseClone(), $T18().SDL_CONTROLLER_AXIS_RIGHTY)) / -32768))), 
        deadZoneMode
      );
      gc_buttonState = $T15().$Cast(gc_buttonState | $thisType.READ_StickToButtons(
          gc_sticks.get_Left(), 
          $T15().LeftThumbstickLeft, 
          $T15().LeftThumbstickRight, 
          $T15().LeftThumbstickUp, 
          $T15().LeftThumbstickDown, 
          0.27
        ));
      gc_buttonState = $T15().$Cast(gc_buttonState | $thisType.READ_StickToButtons(
          gc_sticks.get_Right(), 
          $T15().RightThumbstickLeft, 
          $T15().RightThumbstickRight, 
          $T15().RightThumbstickUp, 
          $T15().RightThumbstickDown, 
          0.27
        ));
      $T12().prototype._ctor.call(gc_triggers, 
        +((+($T17().SDL_GameControllerGetAxis(device.MemberwiseClone(), $T18().SDL_CONTROLLER_AXIS_TRIGGERLEFT)) / 32768)), 
        +((+($T17().SDL_GameControllerGetAxis(device.MemberwiseClone(), $T18().SDL_CONTROLLER_AXIS_TRIGGERRIGHT)) / 32768))
      );
      gc_buttonState = $T15().$Cast(gc_buttonState | $thisType.READ_TriggerToButton(gc_triggers.get_Left(), $T15().LeftTrigger, 0.27));
      gc_buttonState = $T15().$Cast(gc_buttonState | $thisType.READ_TriggerToButton(gc_triggers.get_Right(), $T15().RightTrigger, 0.27));
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_A) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().A);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_B) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().B);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_X) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().X);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_Y) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().Y);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_BACK) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().Back);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_GUIDE) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().BigButton);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_START) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().Start);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_LEFTSTICK) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().LeftStick);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_RIGHTSTICK) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().RightStick);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_LEFTSHOULDER) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().LeftShoulder);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_RIGHTSHOULDER) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().RightShoulder);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_DPAD_UP) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().DPadUp);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_DPAD_DOWN) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().DPadDown);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_DPAD_LEFT) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().DPadLeft);
      }
      if (($T17().SDL_GameControllerGetButton(device.MemberwiseClone(), $T19().SDL_CONTROLLER_BUTTON_DPAD_RIGHT) | 0) !== 0) {
        gc_buttonState = $T15().$Cast(gc_buttonState | $T15().DPadRight);
      }
      $T13().prototype._ctor.call(gc_dpad, JSIL.Array.New($T15(), [gc_buttonState]));
      $S02().Call($T14().prototype, "_ctor", null, gc_buttons, gc_buttonState);
      $T05().prototype._ctor.call(gc_builtState, gc_sticks.MemberwiseClone(), gc_triggers.MemberwiseClone(), gc_buttons.MemberwiseClone(), gc_dpad.MemberwiseClone());
      gc_builtState.GamePadState$PacketNumber$value = ($thisType.INTERNAL_states[playerIndex.valueOf()].GamePadState$PacketNumber$value | 0);
      if ($T05().op_Inequality(gc_builtState, $thisType.INTERNAL_states[playerIndex.valueOf()])) {
        gc_builtState.GamePadState$PacketNumber$value = (((gc_builtState.GamePadState$PacketNumber$value | 0) + 1) | 0);
        $thisType.INTERNAL_states[playerIndex.valueOf()] = gc_builtState;
      }
      result = gc_builtState;
    } else {
      var buttonState = $T15().$Cast(0);
      $T11().prototype._ctor.call(sticks, 
        $S01().Construct($thisType.READTYPE_ReadFloat($thisType.INTERNAL_joystickConfig.AXIS_LX, device.MemberwiseClone()), -$thisType.READTYPE_ReadFloat($thisType.INTERNAL_joystickConfig.AXIS_LY, device.MemberwiseClone())), 
        $S01().Construct($thisType.READTYPE_ReadFloat($thisType.INTERNAL_joystickConfig.AXIS_RX, device.MemberwiseClone()), -$thisType.READTYPE_ReadFloat($thisType.INTERNAL_joystickConfig.AXIS_RY, device.MemberwiseClone())), 
        deadZoneMode
      );
      buttonState = $T15().$Cast(buttonState | $thisType.READ_StickToButtons(
          sticks.get_Left(), 
          $T15().LeftThumbstickLeft, 
          $T15().LeftThumbstickRight, 
          $T15().LeftThumbstickUp, 
          $T15().LeftThumbstickDown, 
          0.27
        ));
      buttonState = $T15().$Cast(buttonState | $thisType.READ_StickToButtons(
          sticks.get_Right(), 
          $T15().RightThumbstickLeft, 
          $T15().RightThumbstickRight, 
          $T15().RightThumbstickUp, 
          $T15().RightThumbstickDown, 
          0.27
        ));
      buttonState = $thisType.READ_ReadButtons(device.MemberwiseClone(), 0.27);
      $T12().prototype._ctor.call(triggers, 
        $thisType.READTYPE_ReadFloat($thisType.INTERNAL_joystickConfig.TRIGGER_LT, device.MemberwiseClone()), 
        $thisType.READTYPE_ReadFloat($thisType.INTERNAL_joystickConfig.TRIGGER_RT, device.MemberwiseClone())
      );
      buttonState = $T15().$Cast(buttonState | $thisType.READ_TriggerToButton(triggers.get_Left(), $T15().LeftTrigger, 0.27));
      buttonState = $T15().$Cast(buttonState | $thisType.READ_TriggerToButton(triggers.get_Right(), $T15().RightTrigger, 0.27));
      $S02().Call($T14().prototype, "_ctor", null, buttons, buttonState);
      $T13().prototype._ctor.call(dpad, JSIL.Array.New($T15(), [buttons.buttons]));
      $T05().prototype._ctor.call(builtState, sticks.MemberwiseClone(), triggers.MemberwiseClone(), buttons.MemberwiseClone(), dpad.MemberwiseClone());
      builtState.GamePadState$PacketNumber$value = ($thisType.INTERNAL_states[playerIndex.valueOf()].GamePadState$PacketNumber$value | 0);
      if ($T05().op_Inequality(builtState, $thisType.INTERNAL_states[playerIndex.valueOf()])) {
        builtState.GamePadState$PacketNumber$value = (((builtState.GamePadState$PacketNumber$value | 0) + 1) | 0);
        $thisType.INTERNAL_states[playerIndex.valueOf()] = builtState;
      }
      result = builtState;
    }
    return result;
  };

  function GamePad_INTERNAL_AddInstance (which) {
    if ((which | 0) <= 3) {
      $T17().SDL_ClearError();
      $thisType.INTERNAL_isGameController[which] = $T17().SDL_IsGameController(which) === $T1B().SDL_TRUE;
      if ($thisType.INTERNAL_isGameController[which]) {
        $thisType.INTERNAL_devices[which] = $T17().SDL_GameControllerOpen(which).MemberwiseClone();
        var thisJoystick = $T17().SDL_GameControllerGetJoystick($thisType.INTERNAL_devices[which].MemberwiseClone()).MemberwiseClone();
      } else {
        $thisType.INTERNAL_devices[which] = $T17().SDL_JoystickOpen(which).MemberwiseClone();
        thisJoystick = $thisType.INTERNAL_devices[which].MemberwiseClone();
      }
      $thisType.INTERNAL_instanceList.Add($T17().SDL_JoystickInstanceID(thisJoystick.MemberwiseClone()), which);
      $thisType.INTERNAL_states[which] = $thisType.InitializedState.MemberwiseClone();
      if (($T17().SDL_JoystickIsHaptic(thisJoystick.MemberwiseClone()) | 0) === 1) {
        $thisType.INTERNAL_haptics[which] = $T17().SDL_HapticOpenFromJoystick(thisJoystick.MemberwiseClone()).MemberwiseClone();
        if ($T00().op_Equality($thisType.INTERNAL_haptics[which].MemberwiseClone(), $T00().Zero.MemberwiseClone())) {
          $T1C().WriteLine(JSIL.ConcatString("HAPTIC OPEN ERROR: ", $T17().SDL_GetError()));
        }
      }
      if ($T00().op_Inequality($thisType.INTERNAL_haptics[which].MemberwiseClone(), $T00().Zero.MemberwiseClone())) {
        if (!(!($T1E().get_Instance().Platform.GamePlatform$OSVersion$value == "Mac OS X") || (($T17().SDL_HapticEffectSupported($thisType.INTERNAL_haptics[which].MemberwiseClone(), /* ref */ new JSIL.MemberReference($thisType, "INTERNAL_leftRightMacHackEffect")) | 0) !== 1))) {
          $thisType.INTERNAL_hapticTypes[which] = $T04().LeftRightMacHack;
          $T17().SDL_HapticNewEffect($thisType.INTERNAL_haptics[which].MemberwiseClone(), /* ref */ new JSIL.MemberReference($thisType, "INTERNAL_leftRightMacHackEffect"));
        } else if (!(($T1E().get_Instance().Platform.GamePlatform$OSVersion$value == "Mac OS X") || (($T17().SDL_HapticEffectSupported($thisType.INTERNAL_haptics[which].MemberwiseClone(), /* ref */ new JSIL.MemberReference($thisType, "INTERNAL_leftRightEffect")) | 0) !== 1))) {
          $thisType.INTERNAL_hapticTypes[which] = $T04().LeftRight;
          $T17().SDL_HapticNewEffect($thisType.INTERNAL_haptics[which].MemberwiseClone(), /* ref */ new JSIL.MemberReference($thisType, "INTERNAL_leftRightEffect"));
        } else if (($T17().SDL_HapticRumbleSupported($thisType.INTERNAL_haptics[which].MemberwiseClone()) | 0) === 1) {
          $thisType.INTERNAL_hapticTypes[which] = $T04().Simple;
          $T17().SDL_HapticRumbleInit($thisType.INTERNAL_haptics[which].MemberwiseClone());
        } else {
          $T17().SDL_HapticClose($thisType.INTERNAL_haptics[which].MemberwiseClone());
          $thisType.INTERNAL_haptics[which] = $T00().Zero.MemberwiseClone();
        }
      }
      var result = $S03().Construct();
      var resChar = JSIL.Array.New($T21(), 33);
      $T17().SDL_JoystickGetGUIDString($T17().SDL_JoystickGetGUID(thisJoystick.MemberwiseClone()).MemberwiseClone(), resChar, resChar.length);
      if ($T1E().get_Instance().Platform.GamePlatform$OSVersion$value == "Linux") {
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[8]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[9]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[10]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[11]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[16]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[17]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[18]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[19]));
      } else if ($T1E().get_Instance().Platform.GamePlatform$OSVersion$value == "Mac OS X") {
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[0]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[1]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[2]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[3]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[16]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[17]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[18]));
        $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[19]));
      } else {
        if (!($T1E().get_Instance().Platform.GamePlatform$OSVersion$value == "Windows")) {
          throw $S05().Construct("SDL2_GamePad: Platform.OSVersion not handled!");
        }
        var isXInput = true;
        var array = resChar;

      $loop0: 
        for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
          var b = (array[j] | 0);
          if (!((b === 48) || (b === 0))) {
            isXInput = false;
            break $loop0;
          }
        }
        if (isXInput) {
          $S06().CallVirtual("Append", null, result, "xinput");
        } else {
          $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[0]));
          $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[1]));
          $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[2]));
          $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[3]));
          $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[4]));
          $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[5]));
          $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[6]));
          $S04().CallVirtual("Append", null, result, String.fromCharCode(resChar[7]));
        }
      }
      $thisType.INTERNAL_guids[which] = result.toString();
      if (!(!($T1E().get_Instance().Platform.GamePlatform$OSVersion$value == "Linux") || !($thisType.INTERNAL_guids[which] == "4c05c405"))) {
        var ledList = $S07().Construct();
        var dirs = $T26().GetDirectories("/sys/class/leds/");
        var array2 = dirs;

        for (j = 0; j < (array2.length | 0); j = ((j + 1) | 0)) {
          var dir = array2[j];
          if (!(!((dir.indexOf("054C:05C4") != -1)) || !(System.String.EndsWith(dir, "blue")))) {
            ledList.Add(dir.substr(0, (((dir.lastIndexOf(":")) + 1) | 0)));
          }
        }
        var numLights = 0;

        for (var i = 0; i < ($thisType.INTERNAL_lightBars.length | 0); i = ((i + 1) | 0)) {
          if (!$T03().IsNullOrEmpty($thisType.INTERNAL_lightBars[i])) {
            numLights = ((numLights + 1) | 0);
          }
        }
        if (numLights < (ledList.get_Count() | 0)) {
          $thisType.INTERNAL_lightBars[which] = ledList.get_Item(numLights);
        }
      }
      if ($thisType.INTERNAL_isGameController[which]) {
        $T1C().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T03(), ["Controller ", (which).toString(), ", ", $T17().SDL_GameControllerName($thisType.INTERNAL_devices[which].MemberwiseClone()), ", will use SDL_GameController support."])));
      } else {
        $T1C().WriteLine(JSIL.ConcatString.apply(null, JSIL.Array.New($T03(), ["Controller ", (which).toString(), ", ", $T17().SDL_JoystickName($thisType.INTERNAL_devices[which].MemberwiseClone()), ", will use generic MonoGameJoystick support."])));
      }
    }
  };

  function GamePad_INTERNAL_InitMonoGameJoystick () {
    var osConfigFile = $T03().Empty;
    if ($T1E().get_Instance().Platform.GamePlatform$OSVersion$value == "Windows") {
      osConfigFile = "MonoGameJoystick.cfg";
    } else if ($T1E().get_Instance().Platform.GamePlatform$OSVersion$value == "Mac OS X") {
      osConfigFile = (JSIL.ConcatString(osConfigFile, $T28().GetEnvironmentVariable("HOME")));
      if ((osConfigFile.length | 0) === 0) {
        osConfigFile = "MonoGameJoystick.cfg";
      } else {
        osConfigFile = (JSIL.ConcatString(osConfigFile, "/Library/Application Support/MonoGame/MonoGameJoystick.cfg"));
      }
    } else {
      if (!($T1E().get_Instance().Platform.GamePlatform$OSVersion$value == "Linux")) {
        throw $S05().Construct("SDL2_GamePad: Platform.OSVersion not handled!");
      }
      osConfigFile = (JSIL.ConcatString(osConfigFile, $T28().GetEnvironmentVariable("XDG_CONFIG_HOME")));
      if ((osConfigFile.length | 0) === 0) {
        osConfigFile = (JSIL.ConcatString(osConfigFile, $T28().GetEnvironmentVariable("HOME")));
        if ((osConfigFile.length | 0) === 0) {
          osConfigFile = "MonoGameJoystick.cfg";
        } else {
          osConfigFile = (JSIL.ConcatString(osConfigFile, "/.config/MonoGame/MonoGameJoystick.cfg"));
        }
      } else {
        osConfigFile = (JSIL.ConcatString(osConfigFile, "/MonoGame/MonoGameJoystick.cfg"));
      }
    }
    if ($T29().Exists(osConfigFile)) {
      var fileIn = $T29().OpenRead(osConfigFile);
      try {
        var serializer = $S08().Construct($T2C().__Type__);
        $thisType.INTERNAL_joystickConfig = $T2C().$Cast($S09().CallVirtual("Deserialize", null, serializer, fileIn));
      } finally {
        if (fileIn !== null) {
          $IM00().Call(fileIn, null);
        }
      }
    } else {
      $thisType.INTERNAL_joystickConfig = new ($T2C())();
      var osConfigDir = (osConfigFile.substr(0, osConfigFile.indexOf("MonoGameJoystick.cfg")));
      if (!($T03().IsNullOrEmpty(osConfigDir) || $T26().Exists(osConfigDir))) {
        $T26().CreateDirectory(osConfigDir);
      }
      var fileOut = $T29().Open(osConfigFile, $T2E().OpenOrCreate);
      try {
        serializer = $S08().Construct($T2C().__Type__);
        $S0A().CallVirtual("Serialize", null, serializer, fileOut, $thisType.INTERNAL_joystickConfig);
      } finally {
        if (fileOut !== null) {
          $IM00().Call(fileOut, null);
        }
      }
    }
  };

  function GamePad_INTERNAL_RemoveInstance (which) {
    var output = new JSIL.BoxedVariable(0);
    if ($thisType.INTERNAL_instanceList.TryGetValue(which, /* ref */ output)) {
      $thisType.INTERNAL_instanceList.Remove(which);
      if ($T00().op_Inequality($thisType.INTERNAL_haptics[output.get()].MemberwiseClone(), $T00().Zero.MemberwiseClone())) {
        $T17().SDL_HapticClose($thisType.INTERNAL_haptics[output.get()].MemberwiseClone());
        $thisType.INTERNAL_haptics[output.get()] = $T00().Zero.MemberwiseClone();
      }
      if ($thisType.INTERNAL_isGameController[output.get()]) {
        $thisType.INTERNAL_isGameController[output.get()] = false;
        $T17().SDL_GameControllerClose($thisType.INTERNAL_devices[output.get()].MemberwiseClone());
      } else {
        $T17().SDL_JoystickClose($thisType.INTERNAL_devices[output.get()].MemberwiseClone());
      }
      $thisType.INTERNAL_devices[output.get()] = $T00().Zero.MemberwiseClone();
      $thisType.INTERNAL_states[output.get()] = $thisType.InitializedState.MemberwiseClone();
      $thisType.INTERNAL_guids[output.get()] = $T03().Empty;
      $T17().SDL_ClearError();
      $T1C().WriteLine(JSIL.ConcatString("Removed device, player: ", (output.get()).toString()));
    }
  };

  function GamePad_READ_ReadButtons (device, deadZoneSize) {
    var DeadZone = ((+deadZoneSize * 32767) | 0);
    var b = $T15().$Cast(0);
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.BUTTON_A, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().A);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.BUTTON_B, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().B);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.BUTTON_X, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().X);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.BUTTON_Y, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().Y);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.SHOULDER_LB, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().LeftShoulder);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.SHOULDER_RB, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().RightShoulder);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.BUTTON_BACK, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().Back);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.BUTTON_START, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().Start);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.BUTTON_LSTICK, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().LeftStick);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.BUTTON_RSTICK, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().RightStick);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.DPAD_UP, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().DPadUp);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.DPAD_DOWN, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().DPadDown);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.DPAD_LEFT, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().DPadLeft);
    }
    if ($thisType.READTYPE_ReadBool($thisType.INTERNAL_joystickConfig.DPAD_RIGHT, device.MemberwiseClone(), DeadZone)) {
      b = $T15().$Cast(b | $T15().DPadRight);
    }
    return b;
  };

  function GamePad_READ_StickToButtons (stick, left, right, up, down, DeadZoneSize) {
    var b = $T15().$Cast(0);
    if (+stick.X > +DeadZoneSize) {
      b = $T15().$Cast(b | right);
    }
    if (+stick.X < -DeadZoneSize) {
      b = $T15().$Cast(b | left);
    }
    if (+stick.Y > +DeadZoneSize) {
      b = $T15().$Cast(b | up);
    }
    if (+stick.Y < -DeadZoneSize) {
      b = $T15().$Cast(b | down);
    }
    return b;
  };

  function GamePad_READ_TriggerToButton (trigger, button, DeadZoneSize) {
    var b = $T15().$Cast(0);
    if (+trigger > +DeadZoneSize) {
      b = $T15().$Cast(b | button);
    }
    return b;
  };

  function GamePad_READTYPE_ReadBool (input, device, deadZone) {
    if (input.INPUT_TYPE === $T0F().Axis) {
      var axis = ($T17().SDL_JoystickGetAxis(device.MemberwiseClone(), input.INPUT_ID) | 0);
      if (input.INPUT_INVERT) {
        var result = axis < ((-deadZone + 0x8000 & 0xFFFF) - 0x8000);
      } else {
        result = axis > (deadZone | 0);
      }
    } else if (input.INPUT_TYPE === $T0F().Button) {
      result = (($T17().SDL_JoystickGetButton(device.MemberwiseClone(), input.INPUT_ID) | 0) > 0) ^ input.INPUT_INVERT;
    } else {
      result = !(!((input.INPUT_TYPE === $T0F().PovUp) || 
          (input.INPUT_TYPE === $T0F().PovDown) || 
          (input.INPUT_TYPE === $T0F().PovLeft)) && 
        (input.INPUT_TYPE !== $T0F().PovRight)) && 
      (((($T17().SDL_JoystickGetHat(device.MemberwiseClone(), input.INPUT_ID) | 0) & ((input.INPUT_TYPE).valueOf() | 0)) > 0) ^ input.INPUT_INVERT);
    }
    return result;
  };

  function GamePad_READTYPE_ReadFloat (input, device) {
    var inputMask = +(
      input.INPUT_INVERT
         ? -1
         : 1)
    ;
    if (input.INPUT_TYPE === $T0F().Axis) {
      var maxRange = +(
        input.INPUT_INVERT
           ? -32767
           : 32767)
      ;
      var result = +((+($T17().SDL_JoystickGetAxis(device.MemberwiseClone(), input.INPUT_ID)) / maxRange));
    } else if (input.INPUT_TYPE === $T0F().Button) {
      result = +($T17().SDL_JoystickGetButton(device.MemberwiseClone(), input.INPUT_ID)) * inputMask;
    } else if (!(!((input.INPUT_TYPE === $T0F().PovUp) || 
          (input.INPUT_TYPE === $T0F().PovDown) || 
          (input.INPUT_TYPE === $T0F().PovLeft)) && (input.INPUT_TYPE !== $T0F().PovRight))) {
      result = +(($T17().SDL_JoystickGetHat(device.MemberwiseClone(), input.INPUT_ID) | 0) & ((input.INPUT_TYPE).valueOf() | 0)) * inputMask;
    } else {
      result = 0;
    }
    return result;
  };

  function GamePad_SetLightBarEXT (playerIndex, color, $exception) {
    if (!$T03().IsNullOrEmpty($thisType.INTERNAL_lightBars[playerIndex.valueOf()])) {
      var baseDir = $thisType.INTERNAL_lightBars[playerIndex.valueOf()];
      try {
        $T29().WriteAllText(JSIL.ConcatString(baseDir, "red/brightness"), (color.get_R()).toString());
        $T29().WriteAllText(JSIL.ConcatString(baseDir, "green/brightness"), (color.get_G()).toString());
        $T29().WriteAllText(JSIL.ConcatString(baseDir, "blue/brightness"), (color.get_B()).toString());
      } catch ($exception) {
        $thisType.INTERNAL_lightBars[playerIndex.valueOf()] = $T03().Empty;
      }
    }
  };

  function GamePad_SetVibration (playerIndex, leftMotor, rightMotor) {
    var haptic = $thisType.INTERNAL_haptics[playerIndex.valueOf()].MemberwiseClone();
    var type = $thisType.INTERNAL_hapticTypes[playerIndex.valueOf()];
    if ($T00().op_Equality(haptic.MemberwiseClone(), $T00().Zero.MemberwiseClone())) {
      var result = false;
    } else {
      if (!((+leftMotor > 0) || (+rightMotor > 0))) {
        $T17().SDL_HapticStopAll(haptic.MemberwiseClone());
      } else if (type === $T04().LeftRight) {
        $thisType.INTERNAL_leftRightEffect.leftright.large_magnitude = ((65535 * +leftMotor) | 0);
        $thisType.INTERNAL_leftRightEffect.leftright.small_magnitude = ((65535 * +rightMotor) | 0);
        $T17().SDL_HapticUpdateEffect(haptic.MemberwiseClone(), 0, /* ref */ new JSIL.MemberReference($thisType, "INTERNAL_leftRightEffect"));
        $T17().SDL_HapticRunEffect(haptic.MemberwiseClone(), 0, 1);
      } else if (type === $T04().LeftRightMacHack) {
        $thisType.leftRightMacHackData[0] = ((65535 * +leftMotor) | 0);
        $thisType.leftRightMacHackData[1] = ((65535 * +rightMotor) | 0);
        $T17().SDL_HapticUpdateEffect(haptic.MemberwiseClone(), 0, /* ref */ new JSIL.MemberReference($thisType, "INTERNAL_leftRightMacHackEffect"));
        $T17().SDL_HapticRunEffect(haptic.MemberwiseClone(), 0, 1);
      } else {
        $T17().SDL_HapticRumblePlay(haptic.MemberwiseClone(), $T33().Max(leftMotor, rightMotor), 4292967295);
      }
      result = true;
    }
    return result;
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.GamePad", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "GetCapabilities", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadCapabilities"), [$asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), 
      GamePad_GetCapabilities
    );

    $.Method({Static:true , Public:true }, "GetGUIDEXT", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), 
      GamePad_GetGUIDEXT
    );

    $.Method({Static:true , Public:true }, "GetState", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"), [$asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), 
      GamePad_GetState$00
    );

    $.Method({Static:true , Public:true }, "GetState", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"), [$asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")]), 
      GamePad_GetState$01
    );

    $.Method({Static:true , Public:false}, "INTERNAL_AddInstance", 
      JSIL.MethodSignature.Action($.Int32), 
      GamePad_INTERNAL_AddInstance
    );

    $.Method({Static:true , Public:false}, "INTERNAL_InitMonoGameJoystick", 
      JSIL.MethodSignature.Void, 
      GamePad_INTERNAL_InitMonoGameJoystick
    );

    $.Method({Static:true , Public:false}, "INTERNAL_RemoveInstance", 
      JSIL.MethodSignature.Action($.Int32), 
      GamePad_INTERNAL_RemoveInstance
    );

    $.Method({Static:true , Public:false}, "READ_ReadButtons", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons"), [$asm01.TypeRef("System.IntPtr"), $.Single]), 
      GamePad_READ_ReadButtons
    );

    $.Method({Static:true , Public:false}, "READ_StickToButtons", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons"), [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons"), $.Single
        ]), 
      GamePad_READ_StickToButtons
    );

    $.Method({Static:true , Public:false}, "READ_TriggerToButton", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons"), [
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons"), 
          $.Single
        ]), 
      GamePad_READ_TriggerToButton
    );

    $.Method({Static:true , Public:false}, "READTYPE_ReadBool", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue"), $asm01.TypeRef("System.IntPtr"), 
          $.Int16
        ]), 
      GamePad_READTYPE_ReadBool
    );

    $.Method({Static:true , Public:false}, "READTYPE_ReadFloat", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickValue"), $asm01.TypeRef("System.IntPtr")]), 
      GamePad_READTYPE_ReadFloat
    );

    $.Method({Static:true , Public:true }, "SetLightBarEXT", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $asm00.TypeRef("Microsoft.Xna.Framework.Color")]), 
      GamePad_SetLightBarEXT
    );

    $.Method({Static:true , Public:true }, "SetVibration", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $.Single, 
          $.Single
        ]), 
      GamePad_SetVibration
    );

    $.Field({Static:true , Public:false}, "INTERNAL_devices", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.IntPtr")]), function ($pi) {
        return JSIL.Array.New($asm01.System.IntPtr, 4);
      }); 
    $.Field({Static:true , Public:false}, "INTERNAL_isGameController", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm01.System.Boolean, 4);
      }); 
    $.Field({Static:true , Public:false}, "INTERNAL_instanceList", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Int32])); 
    $.Field({Static:true , Public:false}, "INTERNAL_guids", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false}, "INTERNAL_haptics", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.IntPtr")]), function ($pi) {
        return JSIL.Array.New($asm01.System.IntPtr, 4);
      }); 
    $.Field({Static:true , Public:false}, "INTERNAL_hapticTypes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePad+HapticType")]), function ($pi) {
        return JSIL.Array.New($asm00.Microsoft.Xna.Framework.Input.GamePad_HapticType, 4);
      }); 
    $.Field({Static:true , Public:false}, "INTERNAL_lightBars", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false}, "INTERNAL_states", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")]), function ($pi) {
        return JSIL.Array.New($asm00.Microsoft.Xna.Framework.Input.GamePadState, 4);
      }); 
    $.Field({Static:true , Public:false}, "INTERNAL_leftRightEffect", $asm00.TypeRef("SDL2.SDL+SDL_HapticEffect")); 
    $.Field({Static:true , Public:false}, "leftRightMacHackData", $jsilcore.TypeRef("System.Array", [$.UInt16])); 
    $.Field({Static:true , Public:false}, "leftRightMacHackPArry", $asm01.TypeRef("System.Runtime.InteropServices.GCHandle")); 
    $.Field({Static:true , Public:false}, "leftRightMacHackPtr", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:true , Public:false}, "INTERNAL_leftRightMacHackEffect", $asm00.TypeRef("SDL2.SDL+SDL_HapticEffect")); 
    $.Field({Static:true , Public:false}, "INTERNAL_joystickConfig", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MonoGameJoystickConfig")); 
    $.Field({Static:true , Public:false}, "InitializedState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")); 
    function GamePad__cctor () {
      $thisType.INTERNAL_leftRightEffect = new $asm00.SDL2.SDL_SDL_HapticEffect();
      $thisType.leftRightMacHackPArry = new $asm01.System.Runtime.InteropServices.GCHandle();
      $thisType.leftRightMacHackPtr = new $asm01.System.IntPtr();
      $thisType.INTERNAL_leftRightMacHackEffect = new $asm00.SDL2.SDL_SDL_HapticEffect();
      $thisType.InitializedState = new $asm00.Microsoft.Xna.Framework.Input.GamePadState();
      $thisType.INTERNAL_devices = JSIL.Array.New($T00(), 4);
      $thisType.INTERNAL_isGameController = JSIL.Array.New($T01(), 4);
      $thisType.INTERNAL_instanceList = $S00().Construct();
      $thisType.INTERNAL_guids = JSIL.Array.New($T03(), [$T03().Empty, $T03().Empty, $T03().Empty, $T03().Empty]);
      $thisType.INTERNAL_haptics = JSIL.Array.New($T00(), 4);
      $thisType.INTERNAL_hapticTypes = JSIL.Array.New($T04(), 4);
      $thisType.INTERNAL_lightBars = JSIL.Array.New($T03(), [$T03().Empty, $T03().Empty, $T03().Empty, $T03().Empty]);
      $thisType.INTERNAL_states = JSIL.Array.New($T05(), 4);
      var iNTERNAL_leftRightEffect = new ($T06())();
      iNTERNAL_leftRightEffect.type = 4;
      var leftright = new ($T07())();
      leftright.type = 4;
      leftright.$length = 4292967295;
      leftright.large_magnitude = 65535;
      leftright.small_magnitude = 65535;
      iNTERNAL_leftRightEffect.leftright = leftright;
      $thisType.INTERNAL_leftRightEffect = iNTERNAL_leftRightEffect;
      var array = JSIL.Array.New($T09(), 2);
      $thisType.leftRightMacHackData = array;
      $thisType.leftRightMacHackPArry = $T0A().Alloc($thisType.leftRightMacHackData, $T0B().Pinned).MemberwiseClone();
      $thisType.leftRightMacHackPtr = $thisType.leftRightMacHackPArry.AddrOfPinnedObject().MemberwiseClone();
      var iNTERNAL_leftRightMacHackEffect = new ($T06())();
      iNTERNAL_leftRightMacHackEffect.type = 2048;
      var custom = new ($T0C())();
      custom.type = 2048;
      custom.$length = 4292967295;
      custom.channels = 2;
      custom.period = 1;
      custom.samples = 2;
      custom.data = $thisType.leftRightMacHackPtr.MemberwiseClone();
      iNTERNAL_leftRightMacHackEffect.custom = custom;
      $thisType.INTERNAL_leftRightMacHackEffect = iNTERNAL_leftRightMacHackEffect;
      $thisType.InitializedState = new ($T05())();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      GamePad__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Input.GamePad+HapticType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Input.GamePad+HapticType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Simple: 0, 
    LeftRight: 1, 
    LeftRightMacHack: 2, 
  }
);

/* class Microsoft.Xna.Framework.SDL2_GamePlatform */ 

(function SDL2_GamePlatform$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GamePlatform)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.SDL2.SDL)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.SDL2_GameWindow)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.OpenALDevice)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm00.SDL2.SDL_SDL_Event))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.SDL2.SDL_SDL_Event)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.SDL2.SDL_SDL_eventaction)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.SDL2.SDL_SDL_EventType)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePad)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.SDL2.SDL_SDL_HintPriority)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.SDL2.SDL_SDL_DisplayMode)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DisplayMode)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Threading)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.SDL2_KeyboardUtil)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Mouse)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchPanel)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocationState)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.SDL2.SDL_SDL_WindowEventID)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PresentationParameters)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_FauxBackbuffer)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.Text.Encoding)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.TextInputEXT)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Graphics.DisplayMode))) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DisplayModeCollection)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm01.System.Environment)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PresentInterval)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.SDL2.SDL_SDL_MessageBoxFlags)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys"), [$asm00.TypeRef("SDL2.SDL+SDL_Keycode")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")])]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode")]), null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };

  function SDL2_GamePlatform__ctor (game) {
    this.displayIndex = 0;
    this.supportedDisplayModes = null;
    $T01().prototype._ctor.call(this, game, $T02().SDL_GetPlatform());
    $T02().SDL_SetMainReady();
    $T02().SDL_Init(12832);
    this.set_Window(new ($T03())());
    this.displayIndex = ($T02().SDL_GetWindowDisplayIndex((this.get_Window()).get_Handle().MemberwiseClone()) | 0);
    this.INTERNAL_GenerateDisplayModes();
    $T02().SDL_DisableScreenSaver();
    if (this.get_IsMouseVisible()) {
      this.set_IsMouseVisible(false);
    } else {
      $T02().SDL_ShowCursor(0);
    }
    if (this.GamePlatform$OSVersion$value == "Mac OS X") {
      var hint = $T02().SDL_GetHint("SDL_VIDEO_MAC_FULLSCREEN_SPACES");
      this.INTERNAL_useFullscreenSpaces = $T05().IsNullOrEmpty(hint) || 
      (hint == "1");
    } else {
      this.INTERNAL_useFullscreenSpaces = false;
    }
    $T06().Initialize();
    this.keys = $S00().Construct();
    this.INTERNAL_TextInputControlDown = JSIL.Array.New($T08(), 4);
    this.INTERNAL_TextInputControlRepeat = JSIL.Array.New($T09(), 4);
    this.set_IsActive(true);
    this.INTERNAL_runApplication = true;
  };

  function SDL2_GamePlatform_BeforeDraw (gameTime) {
    return true;
  };

  function SDL2_GamePlatform_BeforeInitialize () {
    $T01().prototype.BeforeInitialize.call(this);
    var evt = JSIL.Array.New($T0C(), 1);
    $T02().SDL_PumpEvents();

    while (($T02().SDL_PeepEvents(
        evt, 
        1, 
        $T0D().SDL_GETEVENT, 
        $T0E().SDL_JOYDEVICEADDED, 
        $T0E().SDL_JOYDEVICEADDED
      ) | 0) === 1) {
      $T0F().INTERNAL_AddInstance(evt[0].jdevice.which);
    }
  };

  function SDL2_GamePlatform_BeforeUpdate (gameTime) {
    if ($T06().OpenALDevice$Instance$value !== null) {
      $T06().OpenALDevice$Instance$value.Update();
    }
    return true;
  };

  function SDL2_GamePlatform_BeginScreenDeviceChange (willBeFullScreen) {
    (this.get_Window()).BeginScreenDeviceChange(willBeFullScreen);
  };

  function SDL2_GamePlatform_Dispose$00 (disposing) {
    if (!this.get_IsDisposed()) {
      if (this.get_Window() !== null) {
        $T02().SDL_SetHintWithPriority("SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS", "0", $T10().SDL_HINT_OVERRIDE);
        $T02().SDL_DestroyWindow((this.get_Window()).get_Handle().MemberwiseClone());
        this.set_Window(null);
      }
      if ($T06().OpenALDevice$Instance$value !== null) {
        $T06().OpenALDevice$Instance$value.Dispose();
      }
      $T02().SDL_Quit();
    }
    $T01().prototype.Dispose.call(this, disposing);
  };

  function SDL2_GamePlatform_EndScreenDeviceChange (screenDeviceName, clientWidth, clientHeight) {
    (this.get_Window()).EndScreenDeviceChange(screenDeviceName, clientWidth, clientHeight);
  };

  function SDL2_GamePlatform_Exit () {
    this.INTERNAL_runApplication = false;
  };

  function SDL2_GamePlatform_GetCurrentDisplayMode () {
    var mode = new JSIL.BoxedVariable(new ($T11())());
    $T02().SDL_GetCurrentDisplayMode(this.displayIndex, /* ref */ mode);
    return new ($T12())(mode.get().w, mode.get().h, $T13().Color);
  };

  function SDL2_GamePlatform_GetDisplayModes () {
    return this.supportedDisplayModes;
  };

  function SDL2_GamePlatform_HasTouch () {
    return (($T02().SDL_GetNumTouchDevices() | 0) > 0);
  };

  function SDL2_GamePlatform_InnerLoop () {
    var evt = new JSIL.BoxedVariable(new ($T0C())());
    $T14().Run();

  $loop0: 
    while (($T02().SDL_PollEvent(/* ref */ evt) | 0) === 1) {
      if (evt.get().type === $T0E().SDL_KEYDOWN) {
        var key = $S01().CallStatic($T16(), "ToXNA", null, evt.get().key.keysym.sym);
        if (!(this.keys).Contains(key)) {
          (this.keys).Add(key);
          this.INTERNAL_TextInputIn(key);
        }
      } else if (evt.get().type === $T0E().SDL_KEYUP) {
        key = $S01().CallStatic($T16(), "ToXNA", null, evt.get().key.keysym.sym);
        if ((this.keys).Remove(key)) {
          this.INTERNAL_TextInputOut(key);
        }
      } else if (evt.get().type === $T0E().SDL_MOUSEMOTION) {
        $T17().INTERNAL_IsWarped = false;
      } else if (evt.get().type === $T0E().SDL_MOUSEWHEEL) {
        $T17().INTERNAL_MouseWheel = ((($T17().INTERNAL_MouseWheel | 0) + Math.imul(evt.get().wheel.y, 120)) | 0);
      } else if (evt.get().type === $T0E().SDL_FINGERDOWN) {
        $T18().AddEvent((evt.get().tfinger.touchId).ToNumber(4294967295, true), $T1A().Pressed, $S02().Construct(evt.get().tfinger.x, evt.get().tfinger.y));
      } else if (evt.get().type === $T0E().SDL_FINGERUP) {
        $T18().AddEvent((evt.get().tfinger.touchId).ToNumber(4294967295, true), $T1A().Released, $S02().Construct(evt.get().tfinger.x, evt.get().tfinger.y));
      } else if (evt.get().type === $T0E().SDL_FINGERMOTION) {
        $T18().AddEvent((evt.get().tfinger.touchId).ToNumber(4294967295, true), $T1A().Moved, $S02().Construct(evt.get().tfinger.x, evt.get().tfinger.y));
      } else if (evt.get().type === $T0E().SDL_WINDOWEVENT) {
        if (evt.get().window.windowEvent === $T1C().SDL_WINDOWEVENT_FOCUS_GAINED) {
          this.set_IsActive(true);
          if (!this.INTERNAL_useFullscreenSpaces) {
            $T02().SDL_SetWindowFullscreen(
              (this.get_Window()).get_Handle().MemberwiseClone(), 
              (
                (this.GamePlatform$Game$value).get_GraphicsDevice().GraphicsDevice$PresentationParameters$value.PresentationParameters$IsFullScreen$value
                   ? 4097
                   : 0)

            );
          }
          $T02().SDL_DisableScreenSaver();
        } else if (evt.get().window.windowEvent === $T1C().SDL_WINDOWEVENT_FOCUS_LOST) {
          this.set_IsActive(false);
          if (!this.INTERNAL_useFullscreenSpaces) {
            $T02().SDL_SetWindowFullscreen((this.get_Window()).get_Handle().MemberwiseClone(), 0);
          }
          $T02().SDL_EnableScreenSaver();
        } else if (evt.get().window.windowEvent === $T1C().SDL_WINDOWEVENT_RESIZED) {
          $T17().INTERNAL_WindowWidth = (evt.get().window.data1 | 0);
          $T17().INTERNAL_WindowHeight = (evt.get().window.data2 | 0);
          ($T03().$Cast(this.get_Window())).INTERNAL_ClientSizeChanged();
        } else if (evt.get().window.windowEvent === $T1C().SDL_WINDOWEVENT_SIZE_CHANGED) {
          $T17().INTERNAL_WindowWidth = (evt.get().window.data1 | 0);
          $T17().INTERNAL_WindowHeight = (evt.get().window.data2 | 0);
          if ((this.GamePlatform$Game$value).get_graphicsDeviceManager().GraphicsDeviceManager$IsFullScreen$value) {
            var device = (this.GamePlatform$Game$value).get_GraphicsDevice();
            ((this.GamePlatform$Game$value).get_graphicsDeviceManager()).INTERNAL_ResizeGraphicsDevice(device.GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Width$value, device.GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Height$value);
          } else {
            ((this.GamePlatform$Game$value).get_graphicsDeviceManager()).INTERNAL_ResizeGraphicsDevice(evt.get().window.data1, evt.get().window.data2);
          }
        } else if (evt.get().window.windowEvent === $T1C().SDL_WINDOWEVENT_MOVED) {
          var newIndex = ($T02().SDL_GetWindowDisplayIndex((this.get_Window()).get_Handle().MemberwiseClone()) | 0);
          if (newIndex !== (this.displayIndex | 0)) {
            this.displayIndex = newIndex;
            this.INTERNAL_GenerateDisplayModes();
            ((this.GamePlatform$Game$value).get_GraphicsDevice()).Reset();
          }
        } else if (evt.get().window.windowEvent === $T1C().SDL_WINDOWEVENT_ENTER) {
          $T02().SDL_DisableScreenSaver();
        } else if (evt.get().window.windowEvent === $T1C().SDL_WINDOWEVENT_LEAVE) {
          $T02().SDL_EnableScreenSaver();
        }
      } else if (evt.get().type === $T0E().SDL_JOYDEVICEADDED) {
        $T0F().INTERNAL_AddInstance(evt.get().jdevice.which);
      } else if (evt.get().type === $T0E().SDL_JOYDEVICEREMOVED) {
        $T0F().INTERNAL_RemoveInstance(evt.get().jdevice.which);
      } else if (!((evt.get().type !== $T0E().SDL_TEXTINPUT) || this.INTERNAL_TextInputSuppress)) {

        for (var endPtr = 
          /* WARNING: Mutating the result pointer will not mutate the input value. */ 
          JSIL.PinValueAndGetPointer(JSIL.IgnoredMember("FixedElementField", JSIL.IgnoredMember("text", evt.text)), $asm01.System.Byte, JSIL.Pointer.Of($asm01.System.Byte)); (endPtr.get() | 0) !== 0; endPtr.add(1, true)) {
        }
        var bytes = JSIL.Array.New($T23(), (endPtr.deltaBytes(
              /* WARNING: Mutating the result pointer will not mutate the input value. */ 
              JSIL.PinValueAndGetPointer(JSIL.IgnoredMember("FixedElementField", JSIL.IgnoredMember("text", evt.text)), $asm01.System.Byte, JSIL.Pointer.Of($asm01.System.Byte))) / 1));
        $S03().CallStatic($T24(), "Copy", null, $S04().CallStatic($T25(), "op_Explicit", null, JSIL.UntranslatableInstruction("Conversion of non-constant integral expression 'Reference to ignored member FixedElementField' to pointer")).MemberwiseClone(), bytes, 0, bytes.length);
        var text = $T26().get_UTF8().GetString(bytes);
        if ((text.length | 0) > 0) {
          $T27().OnTextInput(text[0]);
        }
      } else if (evt.get().type === $T0E().SDL_QUIT) {
        this.INTERNAL_runApplication = false;
        break $loop0;
      }
    }
    this.INTERNAL_TextInputUpdate();
    $T28().SetKeys(this.keys);
    (this.GamePlatform$Game$value).Tick();
  };

  function SDL2_GamePlatform_INTERNAL_GenerateDisplayModes () {
    var $temp00;
    var modes = $S05().Construct();
    var filler = new JSIL.BoxedVariable(new ($T11())());
    var numModes = ($T02().SDL_GetNumDisplayModes(this.displayIndex) | 0);

    for (var i = 0; i < numModes; i = ((i + 1) | 0)) {
      $T02().SDL_GetDisplayMode(this.displayIndex, i, /* ref */ filler);
      var dupe = false;

      for (var a$0 = modes._items, i$0 = 0, l$0 = (modes._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var mode = a$0[i$0];
        if (!(((filler.get().w | 0) !== (mode.DisplayMode$Width$value | 0)) || ((filler.get().h | 0) !== (mode.DisplayMode$Height$value | 0)))) {
          dupe = true;
        }
      }
      if (!dupe) {
        modes.Add(new ($T12())(filler.get().w, filler.get().h, $T13().Color));
      }
    }
    this.supportedDisplayModes = new ($T2A())(modes);
  };

  function SDL2_GamePlatform_INTERNAL_TextInputIn (key) {
    if (key === $T15().Back) {
      this.INTERNAL_TextInputControlDown[0] = true;
      this.INTERNAL_TextInputControlRepeat[0] = ((($T2B().get_TickCount() | 0) + 400) | 0);
      $T27().OnTextInput("\x08");
    } else if (key === $T15().Tab) {
      this.INTERNAL_TextInputControlDown[1] = true;
      this.INTERNAL_TextInputControlRepeat[1] = ((($T2B().get_TickCount() | 0) + 400) | 0);
      $T27().OnTextInput("\t");
    } else if (key === $T15().Enter) {
      this.INTERNAL_TextInputControlDown[2] = true;
      this.INTERNAL_TextInputControlRepeat[2] = ((($T2B().get_TickCount() | 0) + 400) | 0);
      $T27().OnTextInput("\r");
    } else if (!(!(this.keys).Contains($T15().LeftControl) || (key !== $T15().V))) {
      this.INTERNAL_TextInputControlDown[3] = true;
      this.INTERNAL_TextInputControlRepeat[3] = ((($T2B().get_TickCount() | 0) + 400) | 0);
      $T27().OnTextInput("\x16");
      this.INTERNAL_TextInputSuppress = true;
    }
  };

  function SDL2_GamePlatform_INTERNAL_TextInputOut (key) {
    if (key === $T15().Back) {
      this.INTERNAL_TextInputControlDown[0] = false;
    } else if (key === $T15().Tab) {
      this.INTERNAL_TextInputControlDown[1] = false;
    } else if (key === $T15().Enter) {
      this.INTERNAL_TextInputControlDown[2] = false;
    } else if (!(!(!(this.keys).Contains($T15().LeftControl) && 
          this.INTERNAL_TextInputControlDown[3]) && (key !== $T15().V))) {
      this.INTERNAL_TextInputControlDown[3] = false;
      this.INTERNAL_TextInputSuppress = false;
    }
  };

  function SDL2_GamePlatform_INTERNAL_TextInputUpdate () {
    if (!(!this.INTERNAL_TextInputControlDown[0] || ((this.INTERNAL_TextInputControlRepeat[0] | 0) > ($T2B().get_TickCount() | 0)))) {
      $T27().OnTextInput("\x08");
    }
    if (!(!this.INTERNAL_TextInputControlDown[1] || ((this.INTERNAL_TextInputControlRepeat[1] | 0) > ($T2B().get_TickCount() | 0)))) {
      $T27().OnTextInput("\t");
    }
    if (!(!this.INTERNAL_TextInputControlDown[2] || ((this.INTERNAL_TextInputControlRepeat[2] | 0) > ($T2B().get_TickCount() | 0)))) {
      $T27().OnTextInput("\r");
    }
    if (!(!this.INTERNAL_TextInputControlDown[3] || ((this.INTERNAL_TextInputControlRepeat[3] | 0) > ($T2B().get_TickCount() | 0)))) {
      $T27().OnTextInput("\x16");
    }
  };

  function SDL2_GamePlatform_Log (Message) {
    $T2C().WriteLine(Message);
  };

  function SDL2_GamePlatform_OnIsMouseVisibleChanged () {
    $T02().SDL_ShowCursor((
        this.get_IsMouseVisible()
           ? 1
           : 0)
    );
  };

  function SDL2_GamePlatform_Present () {
    $T01().prototype.Present.call(this);
    var device = (this.GamePlatform$Game$value).get_GraphicsDevice();
    if (device !== null) {
      device.Present();
    }
  };

  function SDL2_GamePlatform_RunLoop () {
    $T02().SDL_ShowWindow((this.get_Window()).get_Handle().MemberwiseClone());

    while (this.INTERNAL_runApplication) {
      this.InnerLoop();
    }
    (this.GamePlatform$Game$value).Exit();
  };

  function SDL2_GamePlatform_SetPresentationInterval (interval) {
    if (!(((interval.valueOf() | 0) !== 0) && (interval !== $T2D().One))) {
      if (this.GamePlatform$OSVersion$value == "Mac OS X") {
        $T02().SDL_GL_SetSwapInterval(1);
      } else if (($T02().SDL_GL_SetSwapInterval(-1) | 0) !== -1) {
        $T2C().WriteLine("Using EXT_swap_control_tear VSync!");
      } else {
        $T2C().WriteLine("EXT_swap_control_tear unsupported. Fall back to standard VSync.");
        $T02().SDL_ClearError();
        $T02().SDL_GL_SetSwapInterval(1);
      }
    } else if (interval === $T2D().Immediate) {
      $T02().SDL_GL_SetSwapInterval(0);
    } else {
      if (interval !== $T2D().Two) {
        throw $S06().Construct("Unrecognized PresentInterval!");
      }
      $T02().SDL_GL_SetSwapInterval(2);
    }
  };

  function SDL2_GamePlatform_ShowRuntimeError (title, message) {
    $T02().SDL_ShowSimpleMessageBox($T2F().SDL_MESSAGEBOX_ERROR, title, message, (this.get_Window()).get_Handle().MemberwiseClone());
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.GamePlatform"), 
      Name: "Microsoft.Xna.Framework.SDL2_GamePlatform", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Game")), 
      SDL2_GamePlatform__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BeforeDraw", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.GameTime")]), 
      SDL2_GamePlatform_BeforeDraw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BeforeInitialize", 
      JSIL.MethodSignature.Void, 
      SDL2_GamePlatform_BeforeInitialize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BeforeUpdate", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.GameTime")]), 
      SDL2_GamePlatform_BeforeUpdate
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BeginScreenDeviceChange", 
      JSIL.MethodSignature.Action($.Boolean), 
      SDL2_GamePlatform_BeginScreenDeviceChange
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      SDL2_GamePlatform_Dispose$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EndScreenDeviceChange", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ]), 
      SDL2_GamePlatform_EndScreenDeviceChange
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Exit", 
      JSIL.MethodSignature.Void, 
      SDL2_GamePlatform_Exit
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GetCurrentDisplayMode", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayMode")), 
      SDL2_GamePlatform_GetCurrentDisplayMode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GetDisplayModes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayModeCollection")), 
      SDL2_GamePlatform_GetDisplayModes
    );

    $.Method({Static:false, Public:false, Virtual:true }, "HasTouch", 
      JSIL.MethodSignature.Return($.Boolean), 
      SDL2_GamePlatform_HasTouch
    );

    $.Method({Static:false, Public:true }, "InnerLoop", 
      JSIL.MethodSignature.Void, 
      SDL2_GamePlatform_InnerLoop
    );

    $.Method({Static:false, Public:false}, "INTERNAL_GenerateDisplayModes", 
      JSIL.MethodSignature.Void, 
      SDL2_GamePlatform_INTERNAL_GenerateDisplayModes
    );

    $.Method({Static:false, Public:false}, "INTERNAL_TextInputIn", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")), 
      SDL2_GamePlatform_INTERNAL_TextInputIn
    );

    $.Method({Static:false, Public:false}, "INTERNAL_TextInputOut", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")), 
      SDL2_GamePlatform_INTERNAL_TextInputOut
    );

    $.Method({Static:false, Public:false}, "INTERNAL_TextInputUpdate", 
      JSIL.MethodSignature.Void, 
      SDL2_GamePlatform_INTERNAL_TextInputUpdate
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Log", 
      JSIL.MethodSignature.Action($.String), 
      SDL2_GamePlatform_Log
    );

    $.Method({Static:false, Public:false, Virtual:true }, "OnIsMouseVisibleChanged", 
      JSIL.MethodSignature.Void, 
      SDL2_GamePlatform_OnIsMouseVisibleChanged
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Present", 
      JSIL.MethodSignature.Void, 
      SDL2_GamePlatform_Present
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RunLoop", 
      JSIL.MethodSignature.Void, 
      SDL2_GamePlatform_RunLoop
    );

    $.Method({Static:false, Public:false, Virtual:true }, "SetPresentationInterval", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentInterval")), 
      SDL2_GamePlatform_SetPresentationInterval
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ShowRuntimeError", 
      new JSIL.MethodSignature(null, [$.String, $.String]), 
      SDL2_GamePlatform_ShowRuntimeError
    );

    $.Field({Static:false, Public:false}, "INTERNAL_useFullscreenSpaces", $.Boolean); 
    $.Field({Static:false, Public:false}, "INTERNAL_runApplication", $.Boolean); 
    $.Field({Static:false, Public:false}, "keys", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")])); 
    $.Field({Static:false, Public:false}, "INTERNAL_TextInputControlRepeat", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "INTERNAL_TextInputControlDown", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false}, "INTERNAL_TextInputSuppress", $.Boolean); 
    $.Field({Static:false, Public:false}, "displayIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "supportedDisplayModes", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DisplayModeCollection")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.SDL2_GameWindow */ 

(function SDL2_GameWindow$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.SDL2.SDL_SDL_WindowFlags)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.SDL2.SDL)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.SDL2.SDL_SDL_GLattr)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.MonoGame.Utilities.AssemblyHelper)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.SDL2.SDL_SDL_DisplayMode)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.DisplayOrientation)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.IO.File)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Char))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Char))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.SDL2.SDL_image)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.DllNotFoundException)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.SDL2.SDL_SDL_bool)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Char")]), null))) ();
  };

  function SDL2_GameWindow__ctor () {
    $T00().prototype._ctor.call(this);
    var initFlags = $T01().$Flags("SDL_WINDOW_HIDDEN", "SDL_WINDOW_INPUT_FOCUS", "SDL_WINDOW_MOUSE_FOCUS", "SDL_WINDOW_OPENGL");
    if (this.get_AllowUserResizing()) {
      initFlags = $T01().$Cast(initFlags | $T01().SDL_WINDOW_RESIZABLE);
    }
    $T02().SDL_GL_SetAttribute($T03().SDL_GL_RED_SIZE, 8);
    $T02().SDL_GL_SetAttribute($T03().SDL_GL_GREEN_SIZE, 8);
    $T02().SDL_GL_SetAttribute($T03().SDL_GL_BLUE_SIZE, 8);
    $T02().SDL_GL_SetAttribute($T03().SDL_GL_ALPHA_SIZE, 8);
    $T02().SDL_GL_SetAttribute($T03().SDL_GL_DEPTH_SIZE, 24);
    $T02().SDL_GL_SetAttribute($T03().SDL_GL_STENCIL_SIZE, 8);
    $T02().SDL_GL_SetAttribute($T03().SDL_GL_DOUBLEBUFFER, 1);
    $T02().SDL_GL_SetAttribute($T03().SDL_GL_CONTEXT_FLAGS, 1);
    var title = $T05().GetDefaultWindowTitle();
    this.INTERNAL_sdlWindow = $T02().SDL_CreateWindow(
      title, 
      805240832, 
      805240832, 
      $T06().DefaultBackBufferWidth, 
      $T06().DefaultBackBufferHeight, 
      initFlags
    ).MemberwiseClone();
    this.INTERNAL_SetIcon(title);
    this.INTERNAL_isFullscreen = false;
    this.INTERNAL_wantsFullscreen = false;
  };

  function SDL2_GameWindow_BeginScreenDeviceChange (willBeFullScreen) {
    this.INTERNAL_wantsFullscreen = willBeFullScreen;
  };

  function SDL2_GameWindow_EndScreenDeviceChange$00 (screenDeviceName, clientWidth, clientHeight) {
    this.INTERNAL_deviceName = screenDeviceName;
    $T02().SDL_SetWindowFullscreen(this.INTERNAL_sdlWindow.MemberwiseClone(), (
        this.INTERNAL_wantsFullscreen
           ? 4097
           : 0)
    );
    var prevBounds = $T09().get_Empty().MemberwiseClone();
    if (!this.INTERNAL_wantsFullscreen) {
      prevBounds = this.get_ClientBounds().MemberwiseClone();
    }
    $T02().SDL_SetWindowSize(this.INTERNAL_sdlWindow.MemberwiseClone(), clientWidth, clientHeight);
    if (!(!this.INTERNAL_isFullscreen || this.INTERNAL_wantsFullscreen)) {
      $T02().SDL_SetWindowPosition(this.INTERNAL_sdlWindow.MemberwiseClone(), 805240832, 805240832);
    } else if (!this.INTERNAL_wantsFullscreen) {
      $T02().SDL_SetWindowPosition(
        this.INTERNAL_sdlWindow.MemberwiseClone(), 
        $T0A().Max((((prevBounds.X | 0) + (((((prevBounds.Width | 0) - (clientWidth | 0)) | 0) / 2) | 0)) | 0), 0), 
        $T0A().Max((((prevBounds.Y | 0) + (((((prevBounds.Height | 0) - (clientHeight | 0)) | 0) / 2) | 0)) | 0), 0)
      );
    }
    this.INTERNAL_isFullscreen = this.INTERNAL_wantsFullscreen;
  };

  function SDL2_GameWindow_get_AllowUserResizing () {
    return false;
  };

  function SDL2_GameWindow_get_ClientBounds () {
    var mode = new JSIL.BoxedVariable(new ($T0B())());
    var result = new ($T09())();
    if (this.INTERNAL_isFullscreen) {
      $T02().SDL_GetCurrentDisplayMode($T02().SDL_GetWindowDisplayIndex(this.INTERNAL_sdlWindow.MemberwiseClone()), /* ref */ mode);
      result.X = 0;
      result.Y = 0;
      result.Width = (mode.get().w | 0);
      result.Height = (mode.get().h | 0);
    } else {
      $T02().SDL_GetWindowPosition(this.INTERNAL_sdlWindow.MemberwiseClone(), /* ref */ new JSIL.MemberReference(result, "X"), /* ref */ new JSIL.MemberReference(result, "Y"));
      $T02().SDL_GetWindowSize(this.INTERNAL_sdlWindow.MemberwiseClone(), /* ref */ new JSIL.MemberReference(result, "Width"), /* ref */ new JSIL.MemberReference(result, "Height"));
    }
    return result;
  };

  function SDL2_GameWindow_get_CurrentOrientation () {
    return $T0C().LandscapeLeft;
  };

  function SDL2_GameWindow_get_Handle () {
    return this.INTERNAL_sdlWindow;
  };

  function SDL2_GameWindow_get_IsBorderlessEXT () {
    return ((($T02().SDL_GetWindowFlags(this.INTERNAL_sdlWindow.MemberwiseClone()) >>> 0) & 16) !== 0);
  };

  function SDL2_GameWindow_get_ScreenDeviceName () {
    return this.INTERNAL_deviceName;
  };

  function SDL2_GameWindow_INTERNAL_ClientSizeChanged () {
    this.OnClientSizeChanged();
  };

  function SDL2_GameWindow_INTERNAL_GetIconName (title, extension) {
    var $temp00;
    var fileIn = $T04().Empty;
    if ($T0D().Exists(JSIL.ConcatString(title, extension))) {
      fileIn = (JSIL.ConcatString(title, extension));
    } else {
      var hardCodeBadChars = JSIL.Array.New($T0F(), ["<", ">", ":", "\"", "/", "\\", "|", "?", "*"]);
      var badChars = $S00().Construct();
      $T10().prototype.AddRange.call(badChars, $T11().$Cast($T12().GetInvalidFileNameChars()));
      $T10().prototype.AddRange.call(badChars, $T11().$Cast(hardCodeBadChars));
      var stripChars = title;

      for (var a$0 = badChars._items, i$0 = 0, l$0 = (badChars._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var c = a$0[i$0];
        stripChars = (System.String.Replace(stripChars, c.toString(), ""));
      }
      stripChars = (JSIL.ConcatString(stripChars, extension));
      if ($T0D().Exists(stripChars)) {
        fileIn = stripChars;
      }
    }
    return fileIn;
  };

  function SDL2_GameWindow_INTERNAL_SetIcon (title, $exception) {
    var fileIn = $T04().Empty;
    try {
      fileIn = $thisType.INTERNAL_GetIconName(title, ".png");
      if (!$T04().IsNullOrEmpty(fileIn)) {
        var icon = $T15().IMG_Load(fileIn).MemberwiseClone();
        $T02().SDL_SetWindowIcon(this.INTERNAL_sdlWindow.MemberwiseClone(), icon.MemberwiseClone());
        $T02().SDL_FreeSurface(icon.MemberwiseClone());
        return;
      }
    } catch ($exception) {
      if ($T16().$Is($exception)) {
      } else {
        throw $exception;
      }
    }
    fileIn = $thisType.INTERNAL_GetIconName(title, ".bmp");
    if (!$T04().IsNullOrEmpty(fileIn)) {
      icon = $T02().SDL_LoadBMP(fileIn).MemberwiseClone();
      $T02().SDL_SetWindowIcon(this.INTERNAL_sdlWindow.MemberwiseClone(), icon.MemberwiseClone());
      $T02().SDL_FreeSurface(icon.MemberwiseClone());
    }
  };

  function SDL2_GameWindow_set_AllowUserResizing (value) {
  };

  function SDL2_GameWindow_set_IsBorderlessEXT (value) {
    $T02().SDL_SetWindowBordered(this.INTERNAL_sdlWindow.MemberwiseClone(), (
        value
           ? $T17().SDL_FALSE
           : $T17().SDL_TRUE)
    );
  };

  function SDL2_GameWindow_SetSupportedOrientations (orientations) {
  };

  function SDL2_GameWindow_SetTitle (title) {
    $T02().SDL_SetWindowTitle(this.INTERNAL_sdlWindow.MemberwiseClone(), title);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.GameWindow"), 
      Name: "Microsoft.Xna.Framework.SDL2_GameWindow", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      SDL2_GameWindow__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BeginScreenDeviceChange", 
      JSIL.MethodSignature.Action($.Boolean), 
      SDL2_GameWindow_BeginScreenDeviceChange
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EndScreenDeviceChange", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ]), 
      SDL2_GameWindow_EndScreenDeviceChange$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AllowUserResizing", 
      JSIL.MethodSignature.Return($.Boolean), 
      SDL2_GameWindow_get_AllowUserResizing
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ClientBounds", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      SDL2_GameWindow_get_ClientBounds
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CurrentOrientation", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")), 
      SDL2_GameWindow_get_CurrentOrientation
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Handle", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      SDL2_GameWindow_get_Handle
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsBorderlessEXT", 
      JSIL.MethodSignature.Return($.Boolean), 
      SDL2_GameWindow_get_IsBorderlessEXT
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ScreenDeviceName", 
      JSIL.MethodSignature.Return($.String), 
      SDL2_GameWindow_get_ScreenDeviceName
    );

    $.Method({Static:false, Public:false}, "INTERNAL_ClientSizeChanged", 
      JSIL.MethodSignature.Void, 
      SDL2_GameWindow_INTERNAL_ClientSizeChanged
    );

    $.Method({Static:true , Public:false}, "INTERNAL_GetIconName", 
      new JSIL.MethodSignature($.String, [$.String, $.String]), 
      SDL2_GameWindow_INTERNAL_GetIconName
    );

    $.Method({Static:false, Public:false}, "INTERNAL_SetIcon", 
      JSIL.MethodSignature.Action($.String), 
      SDL2_GameWindow_INTERNAL_SetIcon
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_AllowUserResizing", 
      JSIL.MethodSignature.Action($.Boolean), 
      SDL2_GameWindow_set_AllowUserResizing
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_IsBorderlessEXT", 
      JSIL.MethodSignature.Action($.Boolean), 
      SDL2_GameWindow_set_IsBorderlessEXT
    );

    $.Method({Static:false, Public:false, Virtual:true }, "SetSupportedOrientations", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")), 
      SDL2_GameWindow_SetSupportedOrientations
    );

    $.Method({Static:false, Public:false, Virtual:true }, "SetTitle", 
      JSIL.MethodSignature.Action($.String), 
      SDL2_GameWindow_SetTitle
    );

    $.Field({Static:false, Public:false}, "INTERNAL_sdlWindow", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "INTERNAL_isFullscreen", $.Boolean); 
    $.Field({Static:false, Public:false}, "INTERNAL_wantsFullscreen", $.Boolean); 
    $.Field({Static:false, Public:false}, "INTERNAL_deviceName", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "AllowUserResizing", $.Boolean)
      .Attribute($asm03.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true , Virtual:true }, "ClientBounds", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentOrientation", $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"));

    $.Property({Static:false, Public:true , Virtual:true }, "Handle", $asm01.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsBorderlessEXT", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ScreenDeviceName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.Mouse */ 

(function Mouse$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.SDL2.SDL)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_FauxBackbuffer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt32"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])]))) ();
  };

  function Mouse_get_WindowHandle () {
    return $thisType.Mouse$WindowHandle$value;
  };

  function Mouse_GetState () {
    var x = new JSIL.BoxedVariable(0);
    var y = new JSIL.BoxedVariable(0);
    var flags = ($S00().CallStatic($T02(), "SDL_GetMouseState", null, /* ref */ x, /* ref */ y) >>> 0);
    x.set(((+((+(x.get()) * +($T06().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Width$value)) / +($thisType.INTERNAL_WindowWidth))) | 0));
    y.set(((+((+(y.get()) * +($T06().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Height$value)) / +($thisType.INTERNAL_WindowHeight))) | 0));
    if (!$thisType.INTERNAL_IsWarped) {
      $thisType.state.MouseState$X$value = (x.get() | 0);
      $thisType.state.MouseState$Y$value = (y.get() | 0);
    }
    $thisType.state.MouseState$LeftButton$value = $T08().$Cast(flags & ($T02().SDL_BUTTON_LMASK >>> 0));
    $thisType.state.MouseState$MiddleButton$value = $T08().$Cast((flags & ($T02().SDL_BUTTON_MMASK >>> 0)) >>> 1);
    $thisType.state.MouseState$RightButton$value = $T08().$Cast((flags & ($T02().SDL_BUTTON_RMASK >>> 0)) >>> 2);
    $thisType.state.MouseState$XButton1$value = $T08().$Cast((flags & ($T02().SDL_BUTTON_X1MASK >>> 0)) >>> 3);
    $thisType.state.MouseState$XButton2$value = $T08().$Cast((flags & ($T02().SDL_BUTTON_X2MASK >>> 0)) >>> 4);
    $thisType.state.MouseState$ScrollWheelValue$value = ($thisType.INTERNAL_MouseWheel | 0);
    return $thisType.state;
  };

  function Mouse_set_WindowHandle (value) {
    $thisType.Mouse$WindowHandle$value = value.MemberwiseClone();
  };

  function Mouse_SetPosition (x, y) {
    x = ((+((+x * +($thisType.INTERNAL_WindowWidth)) / +($T06().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Width$value))) | 0);
    y = ((+((+y * +($thisType.INTERNAL_WindowHeight)) / +($T06().get_Instance().get_GraphicsDevice().GraphicsDevice$GLDevice$value.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Height$value))) | 0);
    $thisType.state.MouseState$X$value = (x | 0);
    $thisType.state.MouseState$Y$value = (y | 0);
    $T02().SDL_WarpMouseInWindow($thisType.Mouse$WindowHandle$value.MemberwiseClone(), x, y);
    $thisType.INTERNAL_IsWarped = true;
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.Mouse", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "get_WindowHandle", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      Mouse_get_WindowHandle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "GetState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.MouseState")), 
      Mouse_GetState
    );

    $.Method({Static:true , Public:true }, "set_WindowHandle", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      Mouse_set_WindowHandle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "SetPosition", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      Mouse_SetPosition
    );

    $.Field({Static:true , Public:false}, "INTERNAL_WindowWidth", $.Int32, 800); 
    $.Field({Static:true , Public:false}, "INTERNAL_WindowHeight", $.Int32, 600); 
    $.Field({Static:true , Public:false}, "INTERNAL_MouseWheel", $.Int32, 0); 
    $.Field({Static:true , Public:false}, "INTERNAL_IsWarped", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "state", $asm00.TypeRef("Microsoft.Xna.Framework.Input.MouseState")); 
    $.Field({Static:true , Public:false}, "Mouse$WindowHandle$value", $asm01.TypeRef("System.IntPtr"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function Mouse__cctor () {
      $thisType.state = new $asm00.Microsoft.Xna.Framework.Input.MouseState();
      $thisType.Mouse$WindowHandle$value = new $asm01.System.IntPtr();
      $thisType.INTERNAL_WindowWidth = 800;
      $thisType.INTERNAL_WindowHeight = 600;
      $thisType.INTERNAL_MouseWheel = 0;
      $thisType.INTERNAL_IsWarped = false;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Mouse__cctor
    );

    $.Property({Static:true , Public:true }, "WindowHandle", $asm01.TypeRef("System.IntPtr"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.SDL2_KeyboardUtil */ 

(function SDL2_KeyboardUtil$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm00.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.SDL2.SDL_SDL_Keycode)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.SDL2.SDL_SDL_Scancode)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), null))) ();
  };

  function SDL2_KeyboardUtil_ToXNA$00 (key) {
    var retVal = new JSIL.BoxedVariable($asm00.Microsoft.Xna.Framework.Input.Keys.None);
    if ($thisType.INTERNAL_keyMap.TryGetValue(key.valueOf(), /* ref */ retVal)) {
      var result = retVal.get();
    } else {
      $T03().WriteLine(JSIL.ConcatString("KEY MISSING FROM SDL2->XNA DICTIONARY: ", (key).toString()));
      result = $T01().None;
    }
    return result;
  };

  function SDL2_KeyboardUtil_ToXNA$01 (key) {
    var retVal = new JSIL.BoxedVariable($asm00.Microsoft.Xna.Framework.Input.Keys.None);
    if ($thisType.INTERNAL_scanMap.TryGetValue(key.valueOf(), /* ref */ retVal)) {
      var result = retVal.get();
    } else {
      $T03().WriteLine(JSIL.ConcatString("SCANCODE MISSING FROM SDL2->XNA DICTIONARY: ", (key).toString()));
      result = $T01().None;
    }
    return result;
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.SDL2_KeyboardUtil", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "ToXNA", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys"), [$asm00.TypeRef("SDL2.SDL+SDL_Keycode")]), 
      SDL2_KeyboardUtil_ToXNA$00
    );

    $.Method({Static:true , Public:true }, "ToXNA", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys"), [$asm00.TypeRef("SDL2.SDL+SDL_Scancode")]), 
      SDL2_KeyboardUtil_ToXNA$01
    );

    $.Field({Static:true , Public:false}, "INTERNAL_keyMap", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")])); 
    $.Field({Static:true , Public:false}, "INTERNAL_scanMap", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Keys")])); 
    function SDL2_KeyboardUtil__cctor () {
      $thisType.INTERNAL_keyMap = $S00().Construct();
      $thisType.INTERNAL_scanMap = $S00().Construct();
      $thisType.INTERNAL_keyMap.Add(97, $T01().A);
      $thisType.INTERNAL_keyMap.Add(98, $T01().B);
      $thisType.INTERNAL_keyMap.Add(99, $T01().C);
      $thisType.INTERNAL_keyMap.Add(100, $T01().D);
      $thisType.INTERNAL_keyMap.Add(101, $T01().E);
      $thisType.INTERNAL_keyMap.Add(102, $T01().F);
      $thisType.INTERNAL_keyMap.Add(103, $T01().G);
      $thisType.INTERNAL_keyMap.Add(104, $T01().H);
      $thisType.INTERNAL_keyMap.Add(105, $T01().I);
      $thisType.INTERNAL_keyMap.Add(106, $T01().J);
      $thisType.INTERNAL_keyMap.Add(107, $T01().K);
      $thisType.INTERNAL_keyMap.Add(108, $T01().L);
      $thisType.INTERNAL_keyMap.Add(109, $T01().M);
      $thisType.INTERNAL_keyMap.Add(110, $T01().N);
      $thisType.INTERNAL_keyMap.Add(111, $T01().O);
      $thisType.INTERNAL_keyMap.Add(112, $T01().P);
      $thisType.INTERNAL_keyMap.Add(113, $T01().Q);
      $thisType.INTERNAL_keyMap.Add(114, $T01().R);
      $thisType.INTERNAL_keyMap.Add(115, $T01().S);
      $thisType.INTERNAL_keyMap.Add(116, $T01().T);
      $thisType.INTERNAL_keyMap.Add(117, $T01().U);
      $thisType.INTERNAL_keyMap.Add(118, $T01().V);
      $thisType.INTERNAL_keyMap.Add(119, $T01().W);
      $thisType.INTERNAL_keyMap.Add(120, $T01().X);
      $thisType.INTERNAL_keyMap.Add(121, $T01().Y);
      $thisType.INTERNAL_keyMap.Add(122, $T01().Z);
      $thisType.INTERNAL_keyMap.Add(48, $T01().D0);
      $thisType.INTERNAL_keyMap.Add(49, $T01().D1);
      $thisType.INTERNAL_keyMap.Add(50, $T01().D2);
      $thisType.INTERNAL_keyMap.Add(51, $T01().D3);
      $thisType.INTERNAL_keyMap.Add(52, $T01().D4);
      $thisType.INTERNAL_keyMap.Add(53, $T01().D5);
      $thisType.INTERNAL_keyMap.Add(54, $T01().D6);
      $thisType.INTERNAL_keyMap.Add(55, $T01().D7);
      $thisType.INTERNAL_keyMap.Add(56, $T01().D8);
      $thisType.INTERNAL_keyMap.Add(57, $T01().D9);
      $thisType.INTERNAL_keyMap.Add(1073741922, $T01().NumPad0);
      $thisType.INTERNAL_keyMap.Add(1073741913, $T01().NumPad1);
      $thisType.INTERNAL_keyMap.Add(1073741914, $T01().NumPad2);
      $thisType.INTERNAL_keyMap.Add(1073741915, $T01().NumPad3);
      $thisType.INTERNAL_keyMap.Add(1073741916, $T01().NumPad4);
      $thisType.INTERNAL_keyMap.Add(1073741917, $T01().NumPad5);
      $thisType.INTERNAL_keyMap.Add(1073741918, $T01().NumPad6);
      $thisType.INTERNAL_keyMap.Add(1073741919, $T01().NumPad7);
      $thisType.INTERNAL_keyMap.Add(1073741920, $T01().NumPad8);
      $thisType.INTERNAL_keyMap.Add(1073741921, $T01().NumPad9);
      $thisType.INTERNAL_keyMap.Add(1073742040, $T01().OemClear);
      $thisType.INTERNAL_keyMap.Add(1073742044, $T01().Decimal);
      $thisType.INTERNAL_keyMap.Add(1073741908, $T01().Divide);
      $thisType.INTERNAL_keyMap.Add(1073741912, $T01().Enter);
      $thisType.INTERNAL_keyMap.Add(1073741910, $T01().OemMinus);
      $thisType.INTERNAL_keyMap.Add(1073741909, $T01().Multiply);
      $thisType.INTERNAL_keyMap.Add(1073741923, $T01().OemPeriod);
      $thisType.INTERNAL_keyMap.Add(1073741911, $T01().Add);
      $thisType.INTERNAL_keyMap.Add(1073741882, $T01().F1);
      $thisType.INTERNAL_keyMap.Add(1073741883, $T01().F2);
      $thisType.INTERNAL_keyMap.Add(1073741884, $T01().F3);
      $thisType.INTERNAL_keyMap.Add(1073741885, $T01().F4);
      $thisType.INTERNAL_keyMap.Add(1073741886, $T01().F5);
      $thisType.INTERNAL_keyMap.Add(1073741887, $T01().F6);
      $thisType.INTERNAL_keyMap.Add(1073741888, $T01().F7);
      $thisType.INTERNAL_keyMap.Add(1073741889, $T01().F8);
      $thisType.INTERNAL_keyMap.Add(1073741890, $T01().F9);
      $thisType.INTERNAL_keyMap.Add(1073741891, $T01().F10);
      $thisType.INTERNAL_keyMap.Add(1073741892, $T01().F11);
      $thisType.INTERNAL_keyMap.Add(1073741893, $T01().F12);
      $thisType.INTERNAL_keyMap.Add(1073741928, $T01().F13);
      $thisType.INTERNAL_keyMap.Add(1073741929, $T01().F14);
      $thisType.INTERNAL_keyMap.Add(1073741930, $T01().F15);
      $thisType.INTERNAL_keyMap.Add(1073741931, $T01().F16);
      $thisType.INTERNAL_keyMap.Add(1073741932, $T01().F17);
      $thisType.INTERNAL_keyMap.Add(1073741933, $T01().F18);
      $thisType.INTERNAL_keyMap.Add(1073741934, $T01().F19);
      $thisType.INTERNAL_keyMap.Add(1073741935, $T01().F20);
      $thisType.INTERNAL_keyMap.Add(1073741936, $T01().F21);
      $thisType.INTERNAL_keyMap.Add(1073741937, $T01().F22);
      $thisType.INTERNAL_keyMap.Add(1073741938, $T01().F23);
      $thisType.INTERNAL_keyMap.Add(1073741939, $T01().F24);
      $thisType.INTERNAL_keyMap.Add(32, $T01().Space);
      $thisType.INTERNAL_keyMap.Add(1073741906, $T01().Up);
      $thisType.INTERNAL_keyMap.Add(1073741905, $T01().Down);
      $thisType.INTERNAL_keyMap.Add(1073741904, $T01().Left);
      $thisType.INTERNAL_keyMap.Add(1073741903, $T01().Right);
      $thisType.INTERNAL_keyMap.Add(1073742050, $T01().LeftAlt);
      $thisType.INTERNAL_keyMap.Add(1073742054, $T01().RightAlt);
      $thisType.INTERNAL_keyMap.Add(1073742048, $T01().LeftControl);
      $thisType.INTERNAL_keyMap.Add(1073742052, $T01().RightControl);
      $thisType.INTERNAL_keyMap.Add(1073742051, $T01().LeftWindows);
      $thisType.INTERNAL_keyMap.Add(1073742055, $T01().RightWindows);
      $thisType.INTERNAL_keyMap.Add(1073742049, $T01().LeftShift);
      $thisType.INTERNAL_keyMap.Add(1073742053, $T01().RightShift);
      $thisType.INTERNAL_keyMap.Add(1073741925, $T01().Apps);
      $thisType.INTERNAL_keyMap.Add(47, $T01().OemQuestion);
      $thisType.INTERNAL_keyMap.Add(92, $T01().OemBackslash);
      $thisType.INTERNAL_keyMap.Add(91, $T01().OemOpenBrackets);
      $thisType.INTERNAL_keyMap.Add(93, $T01().OemCloseBrackets);
      $thisType.INTERNAL_keyMap.Add(1073741881, $T01().CapsLock);
      $thisType.INTERNAL_keyMap.Add(44, $T01().OemComma);
      $thisType.INTERNAL_keyMap.Add(127, $T01().Delete);
      $thisType.INTERNAL_keyMap.Add(1073741901, $T01().End);
      $thisType.INTERNAL_keyMap.Add(8, $T01().Back);
      $thisType.INTERNAL_keyMap.Add(13, $T01().Enter);
      $thisType.INTERNAL_keyMap.Add(27, $T01().Escape);
      $thisType.INTERNAL_keyMap.Add(1073741898, $T01().Home);
      $thisType.INTERNAL_keyMap.Add(1073741897, $T01().Insert);
      $thisType.INTERNAL_keyMap.Add(45, $T01().OemMinus);
      $thisType.INTERNAL_keyMap.Add(1073741907, $T01().NumLock);
      $thisType.INTERNAL_keyMap.Add(1073741899, $T01().PageUp);
      $thisType.INTERNAL_keyMap.Add(1073741902, $T01().PageDown);
      $thisType.INTERNAL_keyMap.Add(1073741896, $T01().Pause);
      $thisType.INTERNAL_keyMap.Add(46, $T01().OemPeriod);
      $thisType.INTERNAL_keyMap.Add(61, $T01().OemPlus);
      $thisType.INTERNAL_keyMap.Add(1073741894, $T01().PrintScreen);
      $thisType.INTERNAL_keyMap.Add(39, $T01().OemQuotes);
      $thisType.INTERNAL_keyMap.Add(1073741895, $T01().Scroll);
      $thisType.INTERNAL_keyMap.Add(59, $T01().OemSemicolon);
      $thisType.INTERNAL_keyMap.Add(1073742106, $T01().Sleep);
      $thisType.INTERNAL_keyMap.Add(9, $T01().Tab);
      $thisType.INTERNAL_keyMap.Add(96, $T01().OemTilde);
      $thisType.INTERNAL_keyMap.Add(0, $T01().None);
      $thisType.INTERNAL_scanMap.Add(4, $T01().A);
      $thisType.INTERNAL_scanMap.Add(5, $T01().B);
      $thisType.INTERNAL_scanMap.Add(6, $T01().C);
      $thisType.INTERNAL_scanMap.Add(7, $T01().D);
      $thisType.INTERNAL_scanMap.Add(8, $T01().E);
      $thisType.INTERNAL_scanMap.Add(9, $T01().F);
      $thisType.INTERNAL_scanMap.Add(10, $T01().G);
      $thisType.INTERNAL_scanMap.Add(11, $T01().H);
      $thisType.INTERNAL_scanMap.Add(12, $T01().I);
      $thisType.INTERNAL_scanMap.Add(13, $T01().J);
      $thisType.INTERNAL_scanMap.Add(14, $T01().K);
      $thisType.INTERNAL_scanMap.Add(15, $T01().L);
      $thisType.INTERNAL_scanMap.Add(16, $T01().M);
      $thisType.INTERNAL_scanMap.Add(17, $T01().N);
      $thisType.INTERNAL_scanMap.Add(18, $T01().O);
      $thisType.INTERNAL_scanMap.Add(19, $T01().P);
      $thisType.INTERNAL_scanMap.Add(20, $T01().Q);
      $thisType.INTERNAL_scanMap.Add(21, $T01().R);
      $thisType.INTERNAL_scanMap.Add(22, $T01().S);
      $thisType.INTERNAL_scanMap.Add(23, $T01().T);
      $thisType.INTERNAL_scanMap.Add(24, $T01().U);
      $thisType.INTERNAL_scanMap.Add(25, $T01().V);
      $thisType.INTERNAL_scanMap.Add(26, $T01().W);
      $thisType.INTERNAL_scanMap.Add(27, $T01().X);
      $thisType.INTERNAL_scanMap.Add(28, $T01().Y);
      $thisType.INTERNAL_scanMap.Add(29, $T01().Z);
      $thisType.INTERNAL_scanMap.Add(39, $T01().D0);
      $thisType.INTERNAL_scanMap.Add(30, $T01().D1);
      $thisType.INTERNAL_scanMap.Add(31, $T01().D2);
      $thisType.INTERNAL_scanMap.Add(32, $T01().D3);
      $thisType.INTERNAL_scanMap.Add(33, $T01().D4);
      $thisType.INTERNAL_scanMap.Add(34, $T01().D5);
      $thisType.INTERNAL_scanMap.Add(35, $T01().D6);
      $thisType.INTERNAL_scanMap.Add(36, $T01().D7);
      $thisType.INTERNAL_scanMap.Add(37, $T01().D8);
      $thisType.INTERNAL_scanMap.Add(38, $T01().D9);
      $thisType.INTERNAL_scanMap.Add(98, $T01().NumPad0);
      $thisType.INTERNAL_scanMap.Add(89, $T01().NumPad1);
      $thisType.INTERNAL_scanMap.Add(90, $T01().NumPad2);
      $thisType.INTERNAL_scanMap.Add(91, $T01().NumPad3);
      $thisType.INTERNAL_scanMap.Add(92, $T01().NumPad4);
      $thisType.INTERNAL_scanMap.Add(93, $T01().NumPad5);
      $thisType.INTERNAL_scanMap.Add(94, $T01().NumPad6);
      $thisType.INTERNAL_scanMap.Add(95, $T01().NumPad7);
      $thisType.INTERNAL_scanMap.Add(96, $T01().NumPad8);
      $thisType.INTERNAL_scanMap.Add(97, $T01().NumPad9);
      $thisType.INTERNAL_scanMap.Add(216, $T01().OemClear);
      $thisType.INTERNAL_scanMap.Add(220, $T01().Decimal);
      $thisType.INTERNAL_scanMap.Add(84, $T01().Divide);
      $thisType.INTERNAL_scanMap.Add(88, $T01().Enter);
      $thisType.INTERNAL_scanMap.Add(86, $T01().OemMinus);
      $thisType.INTERNAL_scanMap.Add(85, $T01().Multiply);
      $thisType.INTERNAL_scanMap.Add(99, $T01().OemPeriod);
      $thisType.INTERNAL_scanMap.Add(87, $T01().Add);
      $thisType.INTERNAL_scanMap.Add(58, $T01().F1);
      $thisType.INTERNAL_scanMap.Add(59, $T01().F2);
      $thisType.INTERNAL_scanMap.Add(60, $T01().F3);
      $thisType.INTERNAL_scanMap.Add(61, $T01().F4);
      $thisType.INTERNAL_scanMap.Add(62, $T01().F5);
      $thisType.INTERNAL_scanMap.Add(63, $T01().F6);
      $thisType.INTERNAL_scanMap.Add(64, $T01().F7);
      $thisType.INTERNAL_scanMap.Add(65, $T01().F8);
      $thisType.INTERNAL_scanMap.Add(66, $T01().F9);
      $thisType.INTERNAL_scanMap.Add(67, $T01().F10);
      $thisType.INTERNAL_scanMap.Add(68, $T01().F11);
      $thisType.INTERNAL_scanMap.Add(69, $T01().F12);
      $thisType.INTERNAL_scanMap.Add(104, $T01().F13);
      $thisType.INTERNAL_scanMap.Add(105, $T01().F14);
      $thisType.INTERNAL_scanMap.Add(106, $T01().F15);
      $thisType.INTERNAL_scanMap.Add(107, $T01().F16);
      $thisType.INTERNAL_scanMap.Add(108, $T01().F17);
      $thisType.INTERNAL_scanMap.Add(109, $T01().F18);
      $thisType.INTERNAL_scanMap.Add(110, $T01().F19);
      $thisType.INTERNAL_scanMap.Add(111, $T01().F20);
      $thisType.INTERNAL_scanMap.Add(112, $T01().F21);
      $thisType.INTERNAL_scanMap.Add(113, $T01().F22);
      $thisType.INTERNAL_scanMap.Add(114, $T01().F23);
      $thisType.INTERNAL_scanMap.Add(115, $T01().F24);
      $thisType.INTERNAL_scanMap.Add(44, $T01().Space);
      $thisType.INTERNAL_scanMap.Add(82, $T01().Up);
      $thisType.INTERNAL_scanMap.Add(81, $T01().Down);
      $thisType.INTERNAL_scanMap.Add(80, $T01().Left);
      $thisType.INTERNAL_scanMap.Add(79, $T01().Right);
      $thisType.INTERNAL_scanMap.Add(226, $T01().LeftAlt);
      $thisType.INTERNAL_scanMap.Add(230, $T01().RightAlt);
      $thisType.INTERNAL_scanMap.Add(224, $T01().LeftControl);
      $thisType.INTERNAL_scanMap.Add(228, $T01().RightControl);
      $thisType.INTERNAL_scanMap.Add(227, $T01().LeftWindows);
      $thisType.INTERNAL_scanMap.Add(231, $T01().RightWindows);
      $thisType.INTERNAL_scanMap.Add(225, $T01().LeftShift);
      $thisType.INTERNAL_scanMap.Add(229, $T01().RightShift);
      $thisType.INTERNAL_scanMap.Add(101, $T01().Apps);
      $thisType.INTERNAL_scanMap.Add(56, $T01().OemQuestion);
      $thisType.INTERNAL_scanMap.Add(49, $T01().OemBackslash);
      $thisType.INTERNAL_scanMap.Add(47, $T01().OemOpenBrackets);
      $thisType.INTERNAL_scanMap.Add(48, $T01().OemCloseBrackets);
      $thisType.INTERNAL_scanMap.Add(57, $T01().CapsLock);
      $thisType.INTERNAL_scanMap.Add(54, $T01().OemComma);
      $thisType.INTERNAL_scanMap.Add(76, $T01().Delete);
      $thisType.INTERNAL_scanMap.Add(77, $T01().End);
      $thisType.INTERNAL_scanMap.Add(42, $T01().Back);
      $thisType.INTERNAL_scanMap.Add(40, $T01().Enter);
      $thisType.INTERNAL_scanMap.Add(41, $T01().Escape);
      $thisType.INTERNAL_scanMap.Add(74, $T01().Home);
      $thisType.INTERNAL_scanMap.Add(73, $T01().Insert);
      $thisType.INTERNAL_scanMap.Add(45, $T01().OemMinus);
      $thisType.INTERNAL_scanMap.Add(83, $T01().NumLock);
      $thisType.INTERNAL_scanMap.Add(75, $T01().PageUp);
      $thisType.INTERNAL_scanMap.Add(78, $T01().PageDown);
      $thisType.INTERNAL_scanMap.Add(72, $T01().Pause);
      $thisType.INTERNAL_scanMap.Add(55, $T01().OemPeriod);
      $thisType.INTERNAL_scanMap.Add(46, $T01().OemPlus);
      $thisType.INTERNAL_scanMap.Add(70, $T01().PrintScreen);
      $thisType.INTERNAL_scanMap.Add(52, $T01().OemQuotes);
      $thisType.INTERNAL_scanMap.Add(71, $T01().Scroll);
      $thisType.INTERNAL_scanMap.Add(51, $T01().OemSemicolon);
      $thisType.INTERNAL_scanMap.Add(282, $T01().Sleep);
      $thisType.INTERNAL_scanMap.Add(43, $T01().Tab);
      $thisType.INTERNAL_scanMap.Add(53, $T01().OemTilde);
      $thisType.INTERNAL_scanMap.Add(0, $T01().None);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SDL2_KeyboardUtil__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.Video */ 

(function Video$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.VideoSoundtrackType)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.TheoraPlay)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.TheoraPlay_THEORAPLAY_VideoFormat)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.TheoraPlay_THEORAPLAY_VideoFrame)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Int32")))) ();
  };

  function Video__ctor$00 (fileName) {
    this.fileName = fileName;
    this.theoraDecoder = $T01().Zero.MemberwiseClone();
    this.videoStream = $T01().Zero.MemberwiseClone();
    this.Video$IsDisposed$value = true;
    this.Video$AttachedToPlayer$value = false;
    this.Initialize();
    (this.Video$Duration$value = $T02().MaxValue.MemberwiseClone());
  };

  function Video__ctor$01 (fileName, durationMS, width, height, framesPerSecond, soundtrackType) {
    $thisType.prototype._ctor.call(this, fileName);
    if (!(((width | 0) === (this.Video$Width$value | 0)) && ((height | 0) === (this.Video$Height$value | 0)))) {
      throw $S00().Construct("XNB/OGV width/height mismatch!");
    }
    if ((Math.abs((+this.Video$FramesPerSecond$value - +framesPerSecond))) >= 1) {
      throw $S00().Construct("XNB/OGV framesPerSecond mismatch!");
    }
    (this.Video$Duration$value = $T02().FromMilliseconds(+durationMS).MemberwiseClone());
    this.Video$VideoSoundtrackType$value = soundtrackType;
  };

  function Video_Dispose () {
    if (!this.Video$AttachedToPlayer$value) {
      if ($T01().op_Inequality(this.theoraDecoder.MemberwiseClone(), $T01().Zero.MemberwiseClone())) {
        $T08().THEORAPLAY_stopDecode(this.theoraDecoder.MemberwiseClone());
        this.theoraDecoder = $T01().Zero.MemberwiseClone();
      }
      if ($T01().op_Inequality(this.videoStream.MemberwiseClone(), $T01().Zero.MemberwiseClone())) {
        $T08().THEORAPLAY_freeVideo(this.videoStream.MemberwiseClone());
        this.videoStream = $T01().Zero.MemberwiseClone();
      }
      this.Video$IsDisposed$value = true;
    }
  };

  function Video_get_AttachedToPlayer () {
    return this.Video$AttachedToPlayer$value;
  };

  function Video_get_Duration () {
    return this.Video$Duration$value;
  };

  function Video_get_FramesPerSecond () {
    return this.Video$FramesPerSecond$value;
  };

  function Video_get_Height () {
    return this.Video$Height$value;
  };

  function Video_get_IsDisposed () {
    return this.Video$IsDisposed$value;
  };

  function Video_get_VideoSoundtrackType () {
    return this.Video$VideoSoundtrackType$value;
  };

  function Video_get_Width () {
    return this.Video$Width$value;
  };

  function Video_Initialize () {
    if (!this.Video$IsDisposed$value) {
      this.Dispose();
    }
    this.theoraDecoder = $T08().THEORAPLAY_startDecodeFile(this.fileName, 150, $T09().THEORAPLAY_VIDFMT_IYUV).MemberwiseClone();

    while (($T08().THEORAPLAY_isInitialized(this.theoraDecoder.MemberwiseClone()) | 0) === 0) {
      $S01().CallStatic($T0A(), "Sleep", null, 10);
    }
    if (($T08().THEORAPLAY_hasVideoStream(this.theoraDecoder.MemberwiseClone()) | 0) !== 0) {

      while ($T01().op_Equality(this.videoStream.MemberwiseClone(), $T01().Zero.MemberwiseClone())) {
        this.videoStream = $T08().THEORAPLAY_getVideo(this.theoraDecoder.MemberwiseClone()).MemberwiseClone();
        $S01().CallStatic($T0A(), "Sleep", null, 10);
      }
      var frame = $T08().getVideoFrame(this.videoStream.MemberwiseClone()).MemberwiseClone();
      this.Video$FramesPerSecond$value = Math.fround(frame.fps);
      this.Video$Width$value = (frame.width | 0);
      this.Video$Height$value = (frame.height | 0);
    }
    this.Video$IsDisposed$value = false;
  };

  function Video_set_AttachedToPlayer (value) {
    this.Video$AttachedToPlayer$value = value;
  };

  function Video_set_Duration (value) {
    this.Video$Duration$value = value.MemberwiseClone();
  };

  function Video_set_FramesPerSecond (value) {
    this.Video$FramesPerSecond$value = +value;
  };

  function Video_set_Height (value) {
    this.Video$Height$value = (value | 0);
  };

  function Video_set_IsDisposed (value) {
    this.Video$IsDisposed$value = value;
  };

  function Video_set_VideoSoundtrackType (value) {
    this.Video$VideoSoundtrackType$value = value;
  };

  function Video_set_Width (value) {
    this.Video$Width$value = (value | 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Video", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      Video__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Single, $asm00.TypeRef("Microsoft.Xna.Framework.Media.VideoSoundtrackType")
        ]), 
      Video__ctor$01
    );

    $.Method({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void, 
      Video_Dispose
    );

    $.Method({Static:false, Public:false}, "get_AttachedToPlayer", 
      JSIL.MethodSignature.Return($.Boolean), 
      Video_get_AttachedToPlayer
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Duration", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      Video_get_Duration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_FramesPerSecond", 
      JSIL.MethodSignature.Return($.Single), 
      Video_get_FramesPerSecond
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      Video_get_Height
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      Video_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_VideoSoundtrackType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.VideoSoundtrackType")), 
      Video_get_VideoSoundtrackType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      Video_get_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void, 
      Video_Initialize
    );

    $.Method({Static:false, Public:false}, "set_AttachedToPlayer", 
      JSIL.MethodSignature.Action($.Boolean), 
      Video_set_AttachedToPlayer
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Duration", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.TimeSpan")), 
      Video_set_Duration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_FramesPerSecond", 
      JSIL.MethodSignature.Action($.Single), 
      Video_set_FramesPerSecond
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Height", 
      JSIL.MethodSignature.Action($.Int32), 
      Video_set_Height
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      Video_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_VideoSoundtrackType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.VideoSoundtrackType")), 
      Video_set_VideoSoundtrackType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Width", 
      JSIL.MethodSignature.Action($.Int32), 
      Video_set_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "theoraDecoder", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "videoStream", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "fileName", $.String); 
    $.Field({Static:false, Public:false}, "Video$Width$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Video$Height$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Video$FramesPerSecond$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Video$VideoSoundtrackType$value", $asm00.TypeRef("Microsoft.Xna.Framework.Media.VideoSoundtrackType"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Video$Duration$value", $asm01.TypeRef("System.TimeSpan"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Video$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Video$AttachedToPlayer$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "FramesPerSecond", $.Single);

    $.Property({Static:false, Public:true }, "VideoSoundtrackType", $asm00.TypeRef("Microsoft.Xna.Framework.Media.VideoSoundtrackType"));

    $.Property({Static:false, Public:true }, "Duration", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "AttachedToPlayer", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.VideoPlayer */ 

(function VideoPlayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandle)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandleType)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.MediaState)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.System.Diagnostics.Stopwatch)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.ObjectDisposedException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.TheoraPlay)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Video)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLVertexBuffer)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm01.System.Boolean))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLTexture)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CullMode)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.TheoraPlay_THEORAPLAY_AudioPacket)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioChannels)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Single))) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundState)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Single))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ObjectDisposedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.TimeSpan"), [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int64")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Boolean"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Single")]), null))) ();
  };

  function VideoPlayer__ctor () {
    this.VideoPlayer$IsDisposed$value = false;
    this.VideoPlayer$IsLooped$value = false;
    this.set_IsMuted(false);
    this.VideoPlayer$State$value = $T03().Stopped;
    this.set_Volume(1);
    this.timer = new ($T04())();
    this.currentDevice = $T05().get_Instance().get_GraphicsDevice();
    this.videoTexture = $S00().Construct(this.currentDevice, 1280, 720);
    this.GL_initialize();
  };

  function VideoPlayer_checkDisposed () {
    if (this.VideoPlayer$IsDisposed$value) {
      throw $S01().Construct("VideoPlayer");
    }
  };

  function VideoPlayer_Dispose () {
    this.Stop();
    this.GL_dispose();
    if (this.audioStream !== null) {
      (this.audioStream).Dispose();
      this.audioStream = null;
    }
    (this.videoTexture).Dispose();
    this.VideoPlayer$IsDisposed$value = true;
  };

  function VideoPlayer_get_IsDisposed () {
    return this.VideoPlayer$IsDisposed$value;
  };

  function VideoPlayer_get_IsLooped () {
    return this.VideoPlayer$IsLooped$value;
  };

  function VideoPlayer_get_IsMuted () {
    return this.backing_ismuted;
  };

  function VideoPlayer_get_PlayPosition () {
    return (this.timer).get_Elapsed();
  };

  function VideoPlayer_get_State () {
    return this.VideoPlayer$State$value;
  };

  function VideoPlayer_get_Video () {
    return this.VideoPlayer$Video$value;
  };

  function VideoPlayer_get_Volume () {
    return this.backing_volume;
  };

  function VideoPlayer_GetTexture () {
    this.checkDisposed();
    if (!(!((((this.VideoPlayer$State$value).valueOf() | 0) === 0) || 
          $T0A().op_Equality(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone(), $T0A().Zero.MemberwiseClone()) || 
          (($T0B().THEORAPLAY_isInitialized(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()) | 0) === 0)) && (($T0B().THEORAPLAY_hasVideoStream(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()) | 0) !== 0))) {
      var result = this.videoTexture;
    } else {

      for (var missedFrame = false; $T0E().op_LessThanOrEqual(
          $T0E().FromNumber(this.nextVideo.playms), 
          ((this.timer).get_ElapsedMilliseconds()).ToUInt64()
        ) && ((!missedFrame).valueOf() | 0); ) {
        this.currentVideo = this.nextVideo.MemberwiseClone();
        var nextFrame = $T0B().THEORAPLAY_getVideo(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()).MemberwiseClone();
        if ($T0A().op_Inequality(nextFrame.MemberwiseClone(), $T0A().Zero.MemberwiseClone())) {
          $T0B().THEORAPLAY_freeVideo(this.previousFrame.MemberwiseClone());
          this.previousFrame = this.VideoPlayer$Video$value.videoStream.MemberwiseClone();
          this.VideoPlayer$Video$value.videoStream = nextFrame;
          this.nextVideo = $T0B().getVideoFrame(this.VideoPlayer$Video$value.videoStream.MemberwiseClone()).MemberwiseClone();
          missedFrame = false;
        } else {
          missedFrame = true;
        }
        if (($T0B().THEORAPLAY_isDecoding(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()) | 0) === 0) {
          (this.VideoPlayer$Video$value.Video$Duration$value = $S02().Construct(0, 0, 0, 0, (this.currentVideo.playms | 0)));
          (this.timer).Stop();
          (this.timer).Reset();
          if (!this.VideoPlayer$IsLooped$value || (this.VideoPlayer$State$value !== $T03().Playing)) {
            this.VideoPlayer$State$value = $T03().Stopped;
            if (this.audioStream !== null) {
              (this.audioStream).Stop();
              (this.audioStream).Dispose();
              this.audioStream = null;
            }
            $T0B().THEORAPLAY_freeVideo(this.previousFrame.MemberwiseClone());
            this.VideoPlayer$Video$value.Video$AttachedToPlayer$value = false;
            (this.VideoPlayer$Video$value).Dispose();
            result = this.videoTexture;
            return result;
          }
          if (this.audioStream !== null) {
            (this.audioStream).Stop();
            (this.audioStream).Dispose();
            this.audioStream = null;
          }
          $T0B().THEORAPLAY_freeVideo(this.previousFrame.MemberwiseClone());
          this.previousFrame = $T0A().Zero.MemberwiseClone();
          this.VideoPlayer$Video$value.Video$AttachedToPlayer$value = false;
          (this.VideoPlayer$Video$value).Dispose();
          this.VideoPlayer$Video$value.Video$AttachedToPlayer$value = true;
          (this.VideoPlayer$Video$value).Initialize();
          if (($T0B().THEORAPLAY_hasAudioStream(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()) | 0) !== 0) {
            this.InitAudioStream();
          }
          if (($T0B().THEORAPLAY_hasVideoStream(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()) | 0) !== 0) {
            this.currentVideo = $T0B().getVideoFrame(this.VideoPlayer$Video$value.videoStream.MemberwiseClone()).MemberwiseClone();
            this.previousFrame = this.VideoPlayer$Video$value.videoStream.MemberwiseClone();

            do {
              this.VideoPlayer$Video$value.videoStream = $T0B().THEORAPLAY_getVideo(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()).MemberwiseClone();
            } while ($T0A().op_Equality(this.VideoPlayer$Video$value.videoStream.MemberwiseClone(), $T0A().Zero.MemberwiseClone()));
            this.nextVideo = $T0B().getVideoFrame(this.VideoPlayer$Video$value.videoStream.MemberwiseClone()).MemberwiseClone();
          }
          (this.timer).Start();
          if (this.audioStream !== null) {
            (this.audioStream).Play();
          }
        }
      }
      this.GL_pushState();
      this.currentDevice.GraphicsDevice$GLDevice$value.glUseProgram(this.shaderProgram);
      (this.currentDevice.GraphicsDevice$GLDevice$value).BindVertexBuffer($T14().NullBuffer);
      this.currentDevice.GraphicsDevice$GLDevice$value.OpenGLDevice$AttributeEnabled$value[0] = true;
      this.currentDevice.GraphicsDevice$GLDevice$value.OpenGLDevice$AttributeEnabled$value[1] = true;

      for (var i = 2; i < (this.currentDevice.GraphicsDevice$GLDevice$value.OpenGLDevice$AttributeEnabled$value.length | 0); i = ((i + 1) | 0)) {
        this.currentDevice.GraphicsDevice$GLDevice$value.OpenGLDevice$AttributeEnabled$value[i] = false;
      }
      (this.currentDevice.GraphicsDevice$GLDevice$value).FlushGLVertexAttributes();
      (this.currentDevice.GraphicsDevice$GLDevice$value).VertexAttribPointer(
        0, 
        2, 
        $T16().Single, 
        false, 
        8, 
        $thisType.vertPosPtr.MemberwiseClone()
      );
      (this.currentDevice.GraphicsDevice$GLDevice$value).VertexAttribPointer(
        1, 
        2, 
        $T16().Single, 
        false, 
        8, 
        $thisType.vertTexPtr.MemberwiseClone()
      );
      (this.currentDevice.GraphicsDevice$GLDevice$value).BindDrawFramebuffer(this.rgbaFramebuffer);
      this.currentDevice.GraphicsDevice$GLDevice$value.glActiveTexture($T17().GL_TEXTURE0);
      this.currentDevice.GraphicsDevice$GLDevice$value.glBindTexture($T17().GL_TEXTURE_2D, this.yuvTextures[0]);
      this.currentDevice.GraphicsDevice$GLDevice$value.glTexSubImage2D(
        $T17().GL_TEXTURE_2D, 
        0, 
        0, 
        0, 
        (this.currentVideo.width | 0), 
        (this.currentVideo.height | 0), 
        $T17().GL_LUMINANCE, 
        $T17().GL_UNSIGNED_BYTE, 
        this.currentVideo.pixels.MemberwiseClone()
      );
      this.currentDevice.GraphicsDevice$GLDevice$value.glActiveTexture($T17().$Cast(33985));
      this.currentDevice.GraphicsDevice$GLDevice$value.glBindTexture($T17().GL_TEXTURE_2D, this.yuvTextures[1]);
      this.currentDevice.GraphicsDevice$GLDevice$value.glTexSubImage2D(
        $T17().GL_TEXTURE_2D, 
        0, 
        0, 
        0, 
        ((((this.currentVideo.width >>> 0) / 2) >>> 0) | 0), 
        ((((this.currentVideo.height >>> 0) / 2) >>> 0) | 0), 
        $T17().GL_LUMINANCE, 
        $T17().GL_UNSIGNED_BYTE, 
        $S03().Construct($T0F().op_Addition(
            (this.currentVideo.pixels).ToInt64(), 
            ($T0E().FromNumber((Math.imul(this.currentVideo.width, this.currentVideo.height) >>> 0))).ToInt64()
          ))
      );
      this.currentDevice.GraphicsDevice$GLDevice$value.glActiveTexture($T17().$Cast(33986));
      this.currentDevice.GraphicsDevice$GLDevice$value.glBindTexture($T17().GL_TEXTURE_2D, this.yuvTextures[2]);
      this.currentDevice.GraphicsDevice$GLDevice$value.glTexSubImage2D(
        $T17().GL_TEXTURE_2D, 
        0, 
        0, 
        0, 
        ((((this.currentVideo.width >>> 0) / 2) >>> 0) | 0), 
        ((((this.currentVideo.height >>> 0) / 2) >>> 0) | 0), 
        $T17().GL_LUMINANCE, 
        $T17().GL_UNSIGNED_BYTE, 
        $S03().Construct($T0F().op_Addition(
            $T0F().op_Addition(
              (this.currentVideo.pixels).ToInt64(), 
              ($T0E().FromNumber((Math.imul(this.currentVideo.width, this.currentVideo.height) >>> 0))).ToInt64()
            ), 
            ($T0E().FromNumber((((Math.imul((((this.currentVideo.width >>> 0) / 2) >>> 0), this.currentVideo.height) >>> 0) / 2) >>> 0))).ToInt64()
          ))
      );
      this.currentDevice.GraphicsDevice$GLDevice$value.glViewport(0, 0, (this.currentVideo.width | 0), (this.currentVideo.height | 0));
      this.currentDevice.GraphicsDevice$GLDevice$value.glDrawArrays($T17().GL_TRIANGLE_STRIP, 0, 4);
      this.GL_popState();
      result = this.videoTexture;
    }
    return result;
  };

  function VideoPlayer_GL_dispose () {
    this.currentDevice.GraphicsDevice$GLDevice$value.glDeleteProgram(this.shaderProgram);
    this.currentDevice.GraphicsDevice$GLDevice$value.glDeleteFramebuffers(1, /* ref */ new JSIL.MemberReference(this, "rgbaFramebuffer"));
    this.currentDevice.GraphicsDevice$GLDevice$value.glDeleteTextures(1, /* ref */ new JSIL.ArrayElementReference(this.yuvTextures, 0));
    this.currentDevice.GraphicsDevice$GLDevice$value.glDeleteTextures(1, /* ref */ new JSIL.ArrayElementReference(this.yuvTextures, 1));
    this.currentDevice.GraphicsDevice$GLDevice$value.glDeleteTextures(1, /* ref */ new JSIL.ArrayElementReference(this.yuvTextures, 2));
  };

  function VideoPlayer_GL_initialize () {
    this.oldTextures = JSIL.Array.New($T18(), 3);
    this.yuvTextures = JSIL.Array.New($T19(), 3);
    this.currentDevice.GraphicsDevice$GLDevice$value.glGenTextures(1, /* ref */ new JSIL.ArrayElementReference(this.yuvTextures, 0));
    this.currentDevice.GraphicsDevice$GLDevice$value.glGenTextures(1, /* ref */ new JSIL.ArrayElementReference(this.yuvTextures, 1));
    this.currentDevice.GraphicsDevice$GLDevice$value.glGenTextures(1, /* ref */ new JSIL.ArrayElementReference(this.yuvTextures, 2));
    this.currentDevice.GraphicsDevice$GLDevice$value.glGenFramebuffers(1, /* ref */ new JSIL.MemberReference(this, "rgbaFramebuffer"));
    $thisType.vert_pos = JSIL.Array.New($T00(), 8);
    $thisType.vert_tex = JSIL.Array.New($T00(), 8);
    var vshader_id = (this.currentDevice.GraphicsDevice$GLDevice$value.glCreateShader($T17().GL_VERTEX_SHADER) >>> 0);
    var len = new JSIL.BoxedVariable($thisType.shader_vertex.length);
    this.currentDevice.GraphicsDevice$GLDevice$value.glShaderSource(vshader_id, 1, /* ref */ new JSIL.MemberReference($thisType, "shader_vertex"), /* ref */ len);
    this.currentDevice.GraphicsDevice$GLDevice$value.glCompileShader(vshader_id);
    var fshader_id = (this.currentDevice.GraphicsDevice$GLDevice$value.glCreateShader($T17().GL_FRAGMENT_SHADER) >>> 0);
    len.set($thisType.shader_fragment.length);
    this.currentDevice.GraphicsDevice$GLDevice$value.glShaderSource(fshader_id, 1, /* ref */ new JSIL.MemberReference($thisType, "shader_fragment"), /* ref */ len);
    this.currentDevice.GraphicsDevice$GLDevice$value.glCompileShader(fshader_id);
    this.shaderProgram = (this.currentDevice.GraphicsDevice$GLDevice$value.glCreateProgram() >>> 0);
    this.currentDevice.GraphicsDevice$GLDevice$value.glAttachShader(this.shaderProgram, vshader_id);
    this.currentDevice.GraphicsDevice$GLDevice$value.glAttachShader(this.shaderProgram, fshader_id);
    this.currentDevice.GraphicsDevice$GLDevice$value.glBindAttribLocation(this.shaderProgram, 0, "pos");
    this.currentDevice.GraphicsDevice$GLDevice$value.glBindAttribLocation(this.shaderProgram, 1, "tex");
    this.currentDevice.GraphicsDevice$GLDevice$value.glLinkProgram(this.shaderProgram);
    this.currentDevice.GraphicsDevice$GLDevice$value.glDeleteShader(vshader_id);
    this.currentDevice.GraphicsDevice$GLDevice$value.glDeleteShader(fshader_id);
    this.currentDevice.GraphicsDevice$GLDevice$value.glGetIntegerv($T17().GL_CURRENT_PROGRAM, /* ref */ new JSIL.MemberReference(this, "oldShader"));
    this.currentDevice.GraphicsDevice$GLDevice$value.glUseProgram(this.shaderProgram);
    this.currentDevice.GraphicsDevice$GLDevice$value.glUniform1i(this.currentDevice.GraphicsDevice$GLDevice$value.glGetUniformLocation(this.shaderProgram, "samp0"), 0);
    this.currentDevice.GraphicsDevice$GLDevice$value.glUniform1i(this.currentDevice.GraphicsDevice$GLDevice$value.glGetUniformLocation(this.shaderProgram, "samp1"), 1);
    this.currentDevice.GraphicsDevice$GLDevice$value.glUniform1i(this.currentDevice.GraphicsDevice$GLDevice$value.glGetUniformLocation(this.shaderProgram, "samp2"), 2);
    this.currentDevice.GraphicsDevice$GLDevice$value.glUseProgram((this.oldShader >>> 0));
  };

  function VideoPlayer_GL_internal_genTexture (texID, width, height) {
    this.currentDevice.GraphicsDevice$GLDevice$value.glBindTexture($T17().GL_TEXTURE_2D, texID);
    this.currentDevice.GraphicsDevice$GLDevice$value.glTexParameteri($T17().GL_TEXTURE_2D, $T17().GL_TEXTURE_WRAP_S, 33071);
    this.currentDevice.GraphicsDevice$GLDevice$value.glTexParameteri($T17().GL_TEXTURE_2D, $T17().GL_TEXTURE_WRAP_T, 33071);
    this.currentDevice.GraphicsDevice$GLDevice$value.glTexParameteri($T17().GL_TEXTURE_2D, $T17().GL_TEXTURE_MIN_FILTER, 9729);
    this.currentDevice.GraphicsDevice$GLDevice$value.glTexParameteri($T17().GL_TEXTURE_2D, $T17().GL_TEXTURE_MAG_FILTER, 9729);
    this.currentDevice.GraphicsDevice$GLDevice$value.glTexParameteri($T17().GL_TEXTURE_2D, $T17().GL_TEXTURE_BASE_LEVEL, 0);
    this.currentDevice.GraphicsDevice$GLDevice$value.glTexParameteri($T17().GL_TEXTURE_2D, $T17().GL_TEXTURE_MAX_LEVEL, 0);
    this.currentDevice.GraphicsDevice$GLDevice$value.glTexImage2D(
      $T17().GL_TEXTURE_2D, 
      0, 
      6409, 
      width, 
      height, 
      0, 
      $T17().GL_LUMINANCE, 
      $T17().GL_UNSIGNED_BYTE, 
      $T0A().Zero.MemberwiseClone()
    );
  };

  function VideoPlayer_GL_popState () {
    var oldViewport = ((this.currentDevice).get_Viewport()).get_Bounds().MemberwiseClone();
    this.currentDevice.GraphicsDevice$GLDevice$value.glViewport(oldViewport.X, oldViewport.Y, oldViewport.Width, oldViewport.Height);
    this.currentDevice.GraphicsDevice$GLDevice$value.glUseProgram((this.oldShader >>> 0));

    for (var i = 0; i < 3; i = ((i + 1) | 0)) {
      this.currentDevice.GraphicsDevice$GLDevice$value.glActiveTexture($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T17().GL_TEXTURE0 + i));
      if (this.oldTextures[i].OpenGLTexture$Target$value !== $T17().GL_TEXTURE_2D) {
        this.currentDevice.GraphicsDevice$GLDevice$value.glBindTexture($T17().GL_TEXTURE_2D, 0);
      }
      this.currentDevice.GraphicsDevice$GLDevice$value.glBindTexture(this.oldTextures[i].OpenGLTexture$Target$value, this.oldTextures[i].OpenGLTexture$Handle$value);
    }
    this.currentDevice.GraphicsDevice$GLDevice$value.glActiveTexture($T17().GL_TEXTURE0);
    (this.currentDevice.GraphicsDevice$GLDevice$value).BindDrawFramebuffer(this.oldFramebuffer);
    if (this.currentDevice.GraphicsDevice$GLDevice$value.scissorTestEnable) {
      this.currentDevice.GraphicsDevice$GLDevice$value.glEnable($T17().GL_SCISSOR_TEST);
    }
    if (this.currentDevice.GraphicsDevice$GLDevice$value.cullFrontFace !== $T1D().None) {
      this.currentDevice.GraphicsDevice$GLDevice$value.glEnable($T17().GL_CULL_FACE);
    }
    if (this.currentDevice.GraphicsDevice$GLDevice$value.zEnable) {
      this.currentDevice.GraphicsDevice$GLDevice$value.glEnable($T17().GL_DEPTH_TEST);
    }
    if (this.currentDevice.GraphicsDevice$GLDevice$value.alphaBlendEnable) {
      this.currentDevice.GraphicsDevice$GLDevice$value.glEnable($T17().GL_BLEND);
    }
  };

  function VideoPlayer_GL_pushState () {
    this.currentDevice.GraphicsDevice$GLDevice$value.glGetIntegerv($T17().GL_CURRENT_PROGRAM, /* ref */ new JSIL.MemberReference(this, "oldShader"));

    for (var i = 0; i < 3; i = ((i + 1) | 0)) {
      this.oldTextures[i] = this.currentDevice.GraphicsDevice$GLDevice$value.OpenGLDevice$Textures$value[i];
      if (this.oldTextures[i].OpenGLTexture$Target$value !== $T17().GL_TEXTURE_2D) {
        this.currentDevice.GraphicsDevice$GLDevice$value.glActiveTexture($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T17().GL_TEXTURE0 + i));
        this.currentDevice.GraphicsDevice$GLDevice$value.glBindTexture(this.oldTextures[i].OpenGLTexture$Target$value, 0);
      }
    }
    this.oldFramebuffer = ((this.currentDevice.GraphicsDevice$GLDevice$value).get_CurrentDrawFramebuffer() >>> 0);
    if (this.currentDevice.GraphicsDevice$GLDevice$value.alphaBlendEnable) {
      this.currentDevice.GraphicsDevice$GLDevice$value.glDisable($T17().GL_BLEND);
    }
    if (this.currentDevice.GraphicsDevice$GLDevice$value.zEnable) {
      this.currentDevice.GraphicsDevice$GLDevice$value.glDisable($T17().GL_DEPTH_TEST);
    }
    if (this.currentDevice.GraphicsDevice$GLDevice$value.cullFrontFace !== $T1D().None) {
      this.currentDevice.GraphicsDevice$GLDevice$value.glDisable($T17().GL_CULL_FACE);
    }
    if (this.currentDevice.GraphicsDevice$GLDevice$value.scissorTestEnable) {
      this.currentDevice.GraphicsDevice$GLDevice$value.glDisable($T17().GL_SCISSOR_TEST);
    }
  };

  function VideoPlayer_GL_setupTargets (width, height) {
    var prevTexture = this.currentDevice.GraphicsDevice$GLDevice$value.OpenGLDevice$Textures$value[0];
    var prevReadFramebuffer = ((this.currentDevice.GraphicsDevice$GLDevice$value).get_CurrentReadFramebuffer() >>> 0);
    var prevDrawFramebuffer = ((this.currentDevice.GraphicsDevice$GLDevice$value).get_CurrentDrawFramebuffer() >>> 0);
    (this.currentDevice.GraphicsDevice$GLDevice$value).BindFramebuffer(this.rgbaFramebuffer);
    this.currentDevice.GraphicsDevice$GLDevice$value.glFramebufferTexture2D(
      $T17().GL_FRAMEBUFFER, 
      $T17().GL_COLOR_ATTACHMENT0, 
      $T17().GL_TEXTURE_2D, 
      this.videoTexture.texture.OpenGLTexture$Handle$value, 
      0
    );
    (this.currentDevice.GraphicsDevice$GLDevice$value).BindReadFramebuffer(prevReadFramebuffer);
    (this.currentDevice.GraphicsDevice$GLDevice$value).BindDrawFramebuffer(prevDrawFramebuffer);
    if (prevTexture.OpenGLTexture$Target$value !== $T17().GL_TEXTURE_2D) {
      this.currentDevice.GraphicsDevice$GLDevice$value.glBindTexture(prevTexture.OpenGLTexture$Target$value, 0);
    }
    this.GL_internal_genTexture(this.yuvTextures[0], width, height);
    this.GL_internal_genTexture(this.yuvTextures[1], (((width | 0) / 2) | 0), (((height | 0) / 2) | 0));
    this.GL_internal_genTexture(this.yuvTextures[2], (((width | 0) / 2) | 0), (((height | 0) / 2) | 0));
    if (prevTexture.OpenGLTexture$Target$value !== $T17().GL_TEXTURE_2D) {
      this.currentDevice.GraphicsDevice$GLDevice$value.glBindTexture($T17().GL_TEXTURE_2D, 0);
    }
    this.currentDevice.GraphicsDevice$GLDevice$value.glBindTexture(prevTexture.OpenGLTexture$Target$value, prevTexture.OpenGLTexture$Handle$value);
  };

  function VideoPlayer_InitAudioStream () {
    var audioPtr = $T0A().Zero.MemberwiseClone();

    do {
      audioPtr = $T0B().THEORAPLAY_getAudio(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()).MemberwiseClone();
    } while ($T0A().op_Equality(audioPtr.MemberwiseClone(), $T0A().Zero.MemberwiseClone()));
    var packet = $T0B().getAudioPacket(audioPtr.MemberwiseClone()).MemberwiseClone();
    this.audioStream = new ($T1F())(packet.freq, $T20().$Cast(packet.channels));
    (this.audioStream).add_BufferNeeded($T21().New(this, $thisType.prototype.OnBufferRequest, function () { return JSIL.GetMethodInfo($thisType, "OnBufferRequest", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
    this.UpdateVolume();

  $loop1: 
    for (var i = 0; i < 4; i = ((i + 1) | 0)) {
      if (!this.StreamAudio()) {
        break $loop1;
      }
    }
  };

  function VideoPlayer_OnBufferRequest (sender, args) {
    if (!this.StreamAudio()) {
      (this.audioStream).remove_BufferNeeded($T21().New(this, $thisType.prototype.OnBufferRequest, function () { return JSIL.GetMethodInfo($thisType, "OnBufferRequest", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
    }
  };

  function VideoPlayer_Pause () {
    this.checkDisposed();
    if (this.VideoPlayer$State$value === $T03().Playing) {
      this.VideoPlayer$State$value = $T03().Paused;
      (this.timer).Stop();
      if (this.audioStream !== null) {
        (this.audioStream).Pause();
      }
    }
  };

  function VideoPlayer_Play (video) {
    this.checkDisposed();
    this.VideoPlayer$Video$value = video;
    video.Video$AttachedToPlayer$value = true;
    (this.VideoPlayer$Video$value.Video$Duration$value = $T11().MaxValue.MemberwiseClone());
    if (this.VideoPlayer$State$value === $T03().Stopped) {
      this.VideoPlayer$State$value = $T03().Playing;
      if (this.VideoPlayer$Video$value.Video$IsDisposed$value) {
        video.Initialize();
      }
      if (($T0B().THEORAPLAY_hasAudioStream(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()) | 0) !== 0) {
        this.InitAudioStream();
      }
      if (($T0B().THEORAPLAY_hasVideoStream(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()) | 0) !== 0) {
        this.currentVideo = $T0B().getVideoFrame(this.VideoPlayer$Video$value.videoStream.MemberwiseClone()).MemberwiseClone();
        this.previousFrame = this.VideoPlayer$Video$value.videoStream.MemberwiseClone();

        do {
          this.VideoPlayer$Video$value.videoStream = $T0B().THEORAPLAY_getVideo(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()).MemberwiseClone();
        } while ($T0A().op_Equality(this.VideoPlayer$Video$value.videoStream.MemberwiseClone(), $T0A().Zero.MemberwiseClone()));
        this.nextVideo = $T0B().getVideoFrame(this.VideoPlayer$Video$value.videoStream.MemberwiseClone()).MemberwiseClone();
        var overlap = this.videoTexture;
        this.videoTexture = $S04().Construct(this.currentDevice, (this.currentVideo.width | 0), (this.currentVideo.height | 0), false, $T24().Color);
        overlap.Dispose();
        this.GL_setupTargets((this.currentVideo.width | 0), (this.currentVideo.height | 0));
      }
      $T25().Write("Starting Theora player...");
      (this.timer).Start();
      if (this.audioStream !== null) {
        (this.audioStream).Play();
      }
      $T25().WriteLine(" Done!");
    }
  };

  function VideoPlayer_Resume () {
    this.checkDisposed();
    if (this.VideoPlayer$State$value === $T03().Paused) {
      this.VideoPlayer$State$value = $T03().Playing;
      (this.timer).Start();
      if (this.audioStream !== null) {
        (this.audioStream).Resume();
      }
    }
  };

  function VideoPlayer_set_IsDisposed (value) {
    this.VideoPlayer$IsDisposed$value = value;
  };

  function VideoPlayer_set_IsLooped (value) {
    this.VideoPlayer$IsLooped$value = value;
  };

  function VideoPlayer_set_IsMuted (value) {
    this.backing_ismuted = value;
    this.UpdateVolume();
  };

  function VideoPlayer_set_State (value) {
    this.VideoPlayer$State$value = value;
  };

  function VideoPlayer_set_Video (value) {
    this.VideoPlayer$Video$value = value;
  };

  function VideoPlayer_set_Volume (value) {
    if (+value > 1) {
      this.backing_volume = 1;
    } else if (+value < 0) {
      this.backing_volume = 0;
    } else {
      this.backing_volume = +value;
    }
    this.UpdateVolume();
  };

  function VideoPlayer_Stop () {
    this.checkDisposed();
    if (this.VideoPlayer$State$value !== $T03().Stopped) {
      this.VideoPlayer$State$value = $T03().Stopped;
      $T25().Write("Signaled Theora player to stop, waiting...");
      (this.timer).Stop();
      (this.timer).Reset();
      if (this.audioStream !== null) {
        (this.audioStream).Stop();
        (this.audioStream).Dispose();
        this.audioStream = null;
      }
      if ($T0A().op_Inequality(this.previousFrame.MemberwiseClone(), $T0A().Zero.MemberwiseClone())) {
        $T0B().THEORAPLAY_freeVideo(this.previousFrame.MemberwiseClone());
      }
      this.VideoPlayer$Video$value.Video$AttachedToPlayer$value = false;
      (this.VideoPlayer$Video$value).Dispose();
      $T25().WriteLine(" Done!");
    }
  };

  function VideoPlayer_StreamAudio () {
    var currentAudio = new ($T1E())();
    var data = $S05().Construct();
    currentAudio.channels = 0;
    currentAudio.freq = 0;

    while (((this.audioStream).get_State() === $T27().Stopped) && (($T0B().THEORAPLAY_availableAudio(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()) >>> 0) === 0)) {
    }

    while (((data.get_Count() | 0) < 8192) && (($T0B().THEORAPLAY_availableAudio(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()) >>> 0) > 0)) {
      var audioPtr = $T0B().THEORAPLAY_getAudio(this.VideoPlayer$Video$value.theoraDecoder.MemberwiseClone()).MemberwiseClone();
      currentAudio = $T0B().getAudioPacket(audioPtr.MemberwiseClone()).MemberwiseClone();
      $T26().prototype.AddRange.call(data, $T28().$Cast($T0B().getSamples(currentAudio.samples.MemberwiseClone(), Math.imul(currentAudio.frames, currentAudio.channels))));
      $T0B().THEORAPLAY_freeAudio(audioPtr.MemberwiseClone());
    }
    if ((data.get_Count() | 0) > 0) {
      (this.audioStream).SubmitFloatBufferEXT($T26().prototype.ToArray.call(data));
      var result = true;
    } else {
      result = false;
    }
    return result;
  };

  function VideoPlayer_UpdateVolume () {
    if (this.audioStream !== null) {
      if (this.get_IsMuted()) {
        (this.audioStream).set_Volume(0);
      } else {
        (this.audioStream).set_Volume(this.get_Volume());
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.VideoPlayer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      VideoPlayer__ctor
    );

    $.Method({Static:false, Public:false}, "checkDisposed", 
      JSIL.MethodSignature.Void, 
      VideoPlayer_checkDisposed
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      VideoPlayer_Dispose
    );

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      VideoPlayer_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsLooped", 
      JSIL.MethodSignature.Return($.Boolean), 
      VideoPlayer_get_IsLooped
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsMuted", 
      JSIL.MethodSignature.Return($.Boolean), 
      VideoPlayer_get_IsMuted
    );

    $.Method({Static:false, Public:true }, "get_PlayPosition", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      VideoPlayer_get_PlayPosition
    );

    $.Method({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaState")), 
      VideoPlayer_get_State
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Video", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.Video")), 
      VideoPlayer_get_Video
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Volume", 
      JSIL.MethodSignature.Return($.Single), 
      VideoPlayer_get_Volume
    );

    $.Method({Static:false, Public:true }, "GetTexture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      VideoPlayer_GetTexture
    );

    $.Method({Static:false, Public:false}, "GL_dispose", 
      JSIL.MethodSignature.Void, 
      VideoPlayer_GL_dispose
    );

    $.Method({Static:false, Public:false}, "GL_initialize", 
      JSIL.MethodSignature.Void, 
      VideoPlayer_GL_initialize
    );

    $.Method({Static:false, Public:false}, "GL_internal_genTexture", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Int32
        ]), 
      VideoPlayer_GL_internal_genTexture
    );

    $.Method({Static:false, Public:false}, "GL_popState", 
      JSIL.MethodSignature.Void, 
      VideoPlayer_GL_popState
    );

    $.Method({Static:false, Public:false}, "GL_pushState", 
      JSIL.MethodSignature.Void, 
      VideoPlayer_GL_pushState
    );

    $.Method({Static:false, Public:false}, "GL_setupTargets", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      VideoPlayer_GL_setupTargets
    );

    $.Method({Static:false, Public:false}, "InitAudioStream", 
      JSIL.MethodSignature.Void, 
      VideoPlayer_InitAudioStream
    );

    $.Method({Static:false, Public:false}, "OnBufferRequest", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      VideoPlayer_OnBufferRequest
    );

    $.Method({Static:false, Public:true }, "Pause", 
      JSIL.MethodSignature.Void, 
      VideoPlayer_Pause
    );

    $.Method({Static:false, Public:true }, "Play", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.Video")), 
      VideoPlayer_Play
    );

    $.Method({Static:false, Public:true }, "Resume", 
      JSIL.MethodSignature.Void, 
      VideoPlayer_Resume
    );

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      VideoPlayer_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsLooped", 
      JSIL.MethodSignature.Action($.Boolean), 
      VideoPlayer_set_IsLooped
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IsMuted", 
      JSIL.MethodSignature.Action($.Boolean), 
      VideoPlayer_set_IsMuted
    );

    $.Method({Static:false, Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaState")), 
      VideoPlayer_set_State
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Video", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.Video")), 
      VideoPlayer_set_Video
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Volume", 
      JSIL.MethodSignature.Action($.Single), 
      VideoPlayer_set_Volume
    );

    $.Method({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Void, 
      VideoPlayer_Stop
    );

    $.Method({Static:false, Public:false}, "StreamAudio", 
      JSIL.MethodSignature.Return($.Boolean), 
      VideoPlayer_StreamAudio
    );

    $.Method({Static:false, Public:false}, "UpdateVolume", 
      JSIL.MethodSignature.Void, 
      VideoPlayer_UpdateVolume
    );

    $.Field({Static:true , Public:false}, "shader_vertex", $.String, "#version 110\nattribute vec2 pos;\nattribute vec2 tex;\nvoid main() {\n   gl_Position = vec4(pos.xy, 0.0, 1.0);\n   gl_TexCoord[0].xy = tex;\n}\n"); 
    $.Field({Static:true , Public:false}, "shader_fragment", $.String, "#version 110\nuniform sampler2D samp0;\nuniform sampler2D samp1;\nuniform sampler2D samp2;\nconst vec3 offset = vec3(-0.0625, -0.5, -0.5);\nconst vec3 Rcoeff = vec3(1.164,  0.000,  1.596);\nconst vec3 Gcoeff = vec3(1.164, -0.391, -0.813);\nconst vec3 Bcoeff = vec3(1.164,  2.018,  0.000);\nvoid main() {\n   vec2 tcoord;\n   vec3 yuv, rgb;\n   tcoord = gl_TexCoord[0].xy;\n   yuv.x = texture2D(samp0, tcoord).r;\n   yuv.y = texture2D(samp1, tcoord).r;\n   yuv.z = texture2D(samp2, tcoord).r;\n   yuv += offset;\n   rgb.r = dot(yuv, Rcoeff);\n   rgb.g = dot(yuv, Gcoeff);\n   rgb.b = dot(yuv, Bcoeff);\n   gl_FragColor = vec4(rgb, 1.0);\n}\n"); 
    $.Field({Static:false, Public:false}, "shaderProgram", $.UInt32); 
    $.Field({Static:false, Public:false}, "yuvTextures", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Field({Static:false, Public:false}, "rgbaFramebuffer", $.UInt32); 
    $.Field({Static:true , Public:false}, "vert_pos", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:true , Public:false}, "vert_tex", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:true , Public:false}, "vertPosArry", $asm01.TypeRef("System.Runtime.InteropServices.GCHandle")); 
    $.Field({Static:true , Public:false}, "vertTexArry", $asm01.TypeRef("System.Runtime.InteropServices.GCHandle")); 
    $.Field({Static:true , Public:false}, "vertPosPtr", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:true , Public:false}, "vertTexPtr", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "oldTextures", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture")])); 
    $.Field({Static:false, Public:false}, "oldShader", $.Int32); 
    $.Field({Static:false, Public:false}, "oldFramebuffer", $.UInt32); 
    $.Field({Static:false, Public:false}, "backing_ismuted", $.Boolean); 
    $.Field({Static:false, Public:false}, "backing_volume", $.Single); 
    $.Field({Static:false, Public:false}, "timer", $asm03.TypeRef("System.Diagnostics.Stopwatch")); 
    $.Field({Static:false, Public:false}, "videoTexture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "currentDevice", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Field({Static:false, Public:false}, "currentVideo", $asm00.TypeRef("TheoraPlay+THEORAPLAY_VideoFrame")); 
    $.Field({Static:false, Public:false}, "nextVideo", $asm00.TypeRef("TheoraPlay+THEORAPLAY_VideoFrame")); 
    $.Field({Static:false, Public:false}, "previousFrame", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "audioStream", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance")); 
    $.Field({Static:false, Public:false}, "VideoPlayer$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "VideoPlayer$IsLooped$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "VideoPlayer$State$value", $asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaState"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "VideoPlayer$Video$value", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Video"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function VideoPlayer__cctor () {
      $thisType.vertPosArry = new $asm01.System.Runtime.InteropServices.GCHandle();
      $thisType.vertTexArry = new $asm01.System.Runtime.InteropServices.GCHandle();
      $thisType.vertPosPtr = new $asm01.System.IntPtr();
      $thisType.vertTexPtr = new $asm01.System.IntPtr();
      $thisType.shader_vertex = "#version 110\nattribute vec2 pos;\nattribute vec2 tex;\nvoid main() {\n   gl_Position = vec4(pos.xy, 0.0, 1.0);\n   gl_TexCoord[0].xy = tex;\n}\n";
      $thisType.shader_fragment = "#version 110\nuniform sampler2D samp0;\nuniform sampler2D samp1;\nuniform sampler2D samp2;\nconst vec3 offset = vec3(-0.0625, -0.5, -0.5);\nconst vec3 Rcoeff = vec3(1.164,  0.000,  1.596);\nconst vec3 Gcoeff = vec3(1.164, -0.391, -0.813);\nconst vec3 Bcoeff = vec3(1.164,  2.018,  0.000);\nvoid main() {\n   vec2 tcoord;\n   vec3 yuv, rgb;\n   tcoord = gl_TexCoord[0].xy;\n   yuv.x = texture2D(samp0, tcoord).r;\n   yuv.y = texture2D(samp1, tcoord).r;\n   yuv.z = texture2D(samp2, tcoord).r;\n   yuv += offset;\n   rgb.r = dot(yuv, Rcoeff);\n   rgb.g = dot(yuv, Gcoeff);\n   rgb.b = dot(yuv, Bcoeff);\n   gl_FragColor = vec4(rgb, 1.0);\n}\n";
      $thisType.vert_pos = JSIL.Array.New($T00(), [-1, 1, 1, 1, -1, -1, 1, -1]);
      $thisType.vert_tex = JSIL.Array.New($T00(), [0, 1, 1, 1, 0, 0, 1, 0]);
      $thisType.vertPosArry = $T01().Alloc($thisType.vert_pos, $T02().Pinned).MemberwiseClone();
      $thisType.vertTexArry = $T01().Alloc($thisType.vert_tex, $T02().Pinned).MemberwiseClone();
      $thisType.vertPosPtr = $thisType.vertPosArry.AddrOfPinnedObject().MemberwiseClone();
      $thisType.vertTexPtr = $thisType.vertTexArry.AddrOfPinnedObject().MemberwiseClone();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      VideoPlayer__cctor
    );

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLooped", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMuted", $.Boolean);

    $.Property({Static:false, Public:true }, "PlayPosition", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "State", $asm00.TypeRef("Microsoft.Xna.Framework.Media.MediaState"));

    $.Property({Static:false, Public:true }, "Video", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Video"));

    $.Property({Static:false, Public:true }, "Volume", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.Song */ 

(function Song$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Vorbisfile_OggVorbis_File)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Vorbisfile)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Vorbisfile_vorbis_info)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioChannels)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.GC)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm03.System.Uri)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.MediaPlayer)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Threading.ThreadStart)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Byte))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Byte))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Threading.Thread"), [$asm01.TypeRef("System.Threading.ThreadStart")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Byte")]), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Array"), 
        $asm01.TypeRef("System.Int64")
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Int32")))) ();
  };

  function Song__ctor$00 (fileName) {
    this.vorbisFile = new ($T01())();
    this.vorbisBuffer = JSIL.Array.New($T02(), 4096);
    $T03().ov_fopen(fileName, /* ref */ new JSIL.MemberReference(this, "vorbisFile"));
    var fileInfo = $T03().ov_info(/* ref */ new JSIL.MemberReference(this, "vorbisFile"), 0).MemberwiseClone();
    this.Song$Name$value = $T05().GetFileNameWithoutExtension(fileName);
    this.Song$TrackNumber$value = 0;
    (this.Song$Duration$value = $T06().FromSeconds($T03().ov_time_total(/* ref */ new JSIL.MemberReference(this, "vorbisFile"), 0)).MemberwiseClone());
    (this.Song$Position$value = $T06().Zero.MemberwiseClone());
    this.soundStream = new ($T07())(fileInfo.rate, $T08().$Cast(fileInfo.channels));
    this.Song$IsDisposed$value = false;
  };

  function Song__ctor$01 (fileName, durationMS) {
    $thisType.prototype._ctor.call(this, fileName);
    if ((Math.abs(((((this.Song$Duration$value).get_Milliseconds() | 0) - (durationMS | 0)) | 0))) > 1) {
      throw $S00().Construct("XNB/OGG duration mismatch!");
    }
  };

  function Song_Dispose$02 () {
    this.Dispose(true);
    $T0C().SuppressFinalize(this);
  };

  function Song_Dispose$03 (disposing) {
    if (disposing) {
      this.Stop();
      (this.soundStream).Dispose();
      this.soundStream = null;
      $T03().ov_clear(/* ref */ new JSIL.MemberReference(this, "vorbisFile"));
    }
    this.Song$IsDisposed$value = true;
  };

  function Song_Equals$04 (song) {
    return ((song !== null) && (this.Song$Name$value == song.Song$Name$value));
  };

  function Song_Object_Equals (obj) {
    return ((obj !== null) && this.Equals($thisType.$As(obj)));
  };

  function Song_Finalize () {
    try {
      this.Dispose(true);
    } finally {
      $T0F().prototype.Finalize.call(this);
    }
  };

  function Song_FromUri (name, uri) {
    if (!uri.get_IsFile()) {
      throw $S01().Construct("Only local file URIs are supported for now");
    }
    var song = $S02().Construct(uri.get_LocalPath());
    song.Song$Name$value = name;
    return song;
  };

  function Song_get_Album () {
    return null;
  };

  function Song_get_Artist () {
    return null;
  };

  function Song_get_Duration () {
    return this.Song$Duration$value;
  };

  function Song_get_Genre () {
    return null;
  };

  function Song_get_IsDisposed () {
    return this.Song$IsDisposed$value;
  };

  function Song_get_IsProtected () {
    return false;
  };

  function Song_get_IsRated () {
    return false;
  };

  function Song_get_Name () {
    return this.Song$Name$value;
  };

  function Song_get_PlayCount () {
    return this.Song$PlayCount$value;
  };

  function Song_get_Position () {
    return this.Song$Position$value;
  };

  function Song_get_Rating () {
    return 0;
  };

  function Song_get_TrackNumber () {
    return this.Song$TrackNumber$value;
  };

  function Song_get_Volume () {
    return (this.soundStream).get_Volume();
  };

  function Song_GetHashCode () {
    return $T0F().prototype.GetHashCode.call(this);
  };

  function Song_OnFinishedPlaying () {
    $T12().OnSongFinishedPlaying(null, null);
  };

  function Song_op_Equality (song1, song2) {
    if (song1 === null) {
      var result = song2 === null;
    } else {
      result = song1.Equals(song2);
    }
    return result;
  };

  function Song_op_Inequality (song1, song2) {
    return !$thisType.op_Equality(song1, song2);
  };

  function Song_Pause () {
    (this.soundStream).Pause();
  };

  function Song_Play () {
    (this.soundStream).add_BufferNeeded($T13().New(this, $thisType.prototype.QueueBuffer, function () { return JSIL.GetMethodInfo($thisType, "QueueBuffer", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
    this.QueueBuffer(null, null);
    this.QueueBuffer(null, null);
    (this.soundStream).Play(false);
    this.exitThread = false;
    this.songThread = $S03().Construct($T15().New(this, $thisType.prototype.SongThread, function () { return JSIL.GetMethodInfo($thisType, "SongThread", JSIL.MethodSignature.Void, false); }));
    (this.songThread).set_IsBackground(true);
    (this.songThread).Start();
    this.Song$PlayCount$value = (((this.Song$PlayCount$value | 0) + 1) | 0);
  };

  function Song_QueueBuffer (sender, args) {
    var bs = new JSIL.BoxedVariable(0);
    var totalBuf = $S04().Construct();

    do {
      var len = $T03().ov_read(
        /* ref */ new JSIL.MemberReference(this, "vorbisFile"), 
        this.vorbisBuffer, 
        this.vorbisBuffer.length, 
        0, 
        2, 
        1, 
        /* ref */ bs
      );
      if (!$T18().op_Inequality(len, $T18().FromNumber(this.vorbisBuffer.length))) {
        $T17().prototype.AddRange.call(totalBuf, $T1A().$Cast(this.vorbisBuffer));
      } else if (!$T18().op_LessThanOrEqual(len, $T18().Create(0, 0, 0))) {
        var smallBuf = JSIL.Array.New($T02(), len);
        $S05().CallStatic($T1B(), "Copy", null, this.vorbisBuffer, smallBuf, len);
        $T17().prototype.AddRange.call(totalBuf, $T1A().$Cast(smallBuf));
      }
    } while ($T18().op_GreaterThan(len, $T18().Create(0, 0, 0)) && (((totalBuf.get_Count() | 0) < 16384).valueOf() | 0));
    if ((totalBuf.get_Count() | 0) === 0) {
      (this.soundStream).remove_BufferNeeded($T13().New(this, $thisType.prototype.QueueBuffer, function () { return JSIL.GetMethodInfo($thisType, "QueueBuffer", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
      this.OnFinishedPlaying();
    } else {
      (this.soundStream).SubmitBuffer(
        $T17().prototype.ToArray.call(totalBuf), 
        0, 
        totalBuf.get_Count()
      );
    }
  };

  function Song_Resume () {
    (this.soundStream).Resume();
  };

  function Song_set_Duration (value) {
    this.Song$Duration$value = value.MemberwiseClone();
  };

  function Song_set_IsDisposed (value) {
    this.Song$IsDisposed$value = value;
  };

  function Song_set_Name (value) {
    this.Song$Name$value = value;
  };

  function Song_set_PlayCount (value) {
    this.Song$PlayCount$value = (value | 0);
  };

  function Song_set_Position (value) {
    this.Song$Position$value = value.MemberwiseClone();
  };

  function Song_set_TrackNumber (value) {
    this.Song$TrackNumber$value = (value | 0);
  };

  function Song_set_Volume (value) {
    (this.soundStream).set_Volume(value);
  };

  function Song_SongThread () {

    while (!this.exitThread) {
      this.exitThread = !(this.soundStream).Update();
      if (!this.exitThread) {
        $S06().CallStatic($T14(), "Sleep", null, 67);
      }
    }
  };

  function Song_Stop () {
    this.exitThread = true;
    if (!((this.songThread === null) || ($T14().get_CurrentThread() === this.songThread))) {
      (this.songThread).Join();
    }
    (this.soundStream).Stop();
    (this.soundStream).remove_BufferNeeded($T13().New(this, $thisType.prototype.QueueBuffer, function () { return JSIL.GetMethodInfo($thisType, "QueueBuffer", new JSIL.MethodSignature(null, [$asm01.System.Object, $asm01.System.EventArgs]), false); }));
    this.Song$PlayCount$value = 0;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Song", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      Song__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32]), 
      Song__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Song_Dispose$02
    );

    $.Method({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      Song_Dispose$03
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Song_Equals$04
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Song_Object_Equals
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      Song_Finalize
    );

    $.Method({Static:true , Public:true }, "FromUri", 
      new JSIL.MethodSignature($.Type, [$.String, $asm03.TypeRef("System.Uri")]), 
      Song_FromUri
    );

    $.Method({Static:false, Public:true }, "get_Album", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.Album")), 
      Song_get_Album
    );

    $.Method({Static:false, Public:true }, "get_Artist", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.Artist")), 
      Song_get_Artist
    );

    $.Method({Static:false, Public:true }, "get_Duration", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      Song_get_Duration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Genre", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.Genre")), 
      Song_get_Genre
    );

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      Song_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsProtected", 
      JSIL.MethodSignature.Return($.Boolean), 
      Song_get_IsProtected
    );

    $.Method({Static:false, Public:true }, "get_IsRated", 
      JSIL.MethodSignature.Return($.Boolean), 
      Song_get_IsRated
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      Song_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PlayCount", 
      JSIL.MethodSignature.Return($.Int32), 
      Song_get_PlayCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Position", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      Song_get_Position
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Rating", 
      JSIL.MethodSignature.Return($.Int32), 
      Song_get_Rating
    );

    $.Method({Static:false, Public:true }, "get_TrackNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      Song_get_TrackNumber
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Volume", 
      JSIL.MethodSignature.Return($.Single), 
      Song_get_Volume
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Song_GetHashCode
    );

    $.Method({Static:false, Public:false}, "OnFinishedPlaying", 
      JSIL.MethodSignature.Void, 
      Song_OnFinishedPlaying
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Song_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      Song_op_Inequality
    );

    $.Method({Static:false, Public:false}, "Pause", 
      JSIL.MethodSignature.Void, 
      Song_Pause
    );

    $.Method({Static:false, Public:false}, "Play", 
      JSIL.MethodSignature.Void, 
      Song_Play
    );

    $.Method({Static:false, Public:false}, "QueueBuffer", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.EventArgs")]), 
      Song_QueueBuffer
    );

    $.Method({Static:false, Public:false}, "Resume", 
      JSIL.MethodSignature.Void, 
      Song_Resume
    );

    $.Method({Static:false, Public:false}, "set_Duration", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.TimeSpan")), 
      Song_set_Duration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      Song_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      Song_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_PlayCount", 
      JSIL.MethodSignature.Action($.Int32), 
      Song_set_PlayCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Position", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.TimeSpan")), 
      Song_set_Position
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TrackNumber", 
      JSIL.MethodSignature.Action($.Int32), 
      Song_set_TrackNumber
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Volume", 
      JSIL.MethodSignature.Action($.Single), 
      Song_set_Volume
    );

    $.Method({Static:false, Public:false}, "SongThread", 
      JSIL.MethodSignature.Void, 
      Song_SongThread
    );

    $.Method({Static:false, Public:false}, "Stop", 
      JSIL.MethodSignature.Void, 
      Song_Stop
    );

    $.Field({Static:false, Public:false}, "soundStream", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance")); 
    $.Field({Static:false, Public:false}, "vorbisFile", $asm00.TypeRef("Vorbisfile+OggVorbis_File")); 
    $.Field({Static:false, Public:false}, "vorbisBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "songThread", $asm01.TypeRef("System.Threading.Thread")); 
    $.Field({Static:false, Public:false}, "exitThread", $.Boolean); 
    $.Field({Static:false, Public:false}, "Song$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Song$TrackNumber$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Song$Duration$value", $asm01.TypeRef("System.TimeSpan"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Song$PlayCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Song$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Song$Position$value", $asm01.TypeRef("System.TimeSpan"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "TrackNumber", $.Int32);

    $.Property({Static:false, Public:true }, "Album", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Album"));

    $.Property({Static:false, Public:true }, "Artist", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Artist"));

    $.Property({Static:false, Public:true }, "Genre", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Genre"));

    $.Property({Static:false, Public:true }, "Duration", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IsProtected", $.Boolean);

    $.Property({Static:false, Public:true }, "IsRated", $.Boolean);

    $.Property({Static:false, Public:true }, "PlayCount", $.Int32);

    $.Property({Static:false, Public:true }, "Rating", $.Int32);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Position", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "Volume", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.VertexBufferBinding */ 

(function VertexBufferBinding$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexBuffer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBufferBinding"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")]))) ();
  };

  function VertexBufferBinding__ctor$00 (vertexBuffer) {
    this.vertexBuffer = vertexBuffer;
    this.vertexOffset = 0;
    this.instanceFrequency = 0;
  };

  function VertexBufferBinding__ctor$01 (vertexBuffer, vertexOffset) {
    this.vertexBuffer = vertexBuffer;
    this.vertexOffset = (vertexOffset | 0);
    this.instanceFrequency = 0;
  };

  function VertexBufferBinding__ctor$02 (vertexBuffer, vertexOffset, instanceFrequency) {
    this.vertexBuffer = vertexBuffer;
    this.vertexOffset = (vertexOffset | 0);
    this.instanceFrequency = (instanceFrequency | 0);
  };

  function VertexBufferBinding_get_InstanceFrequency () {
    return this.instanceFrequency;
  };

  function VertexBufferBinding_get_None () {
    return $thisType.none;
  };

  function VertexBufferBinding_get_VertexBuffer () {
    return this.vertexBuffer;
  };

  function VertexBufferBinding_get_VertexOffset () {
    return this.vertexOffset;
  };

  function VertexBufferBinding_op_Implicit (buffer) {
    return $S00().Construct(buffer);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.VertexBufferBinding", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")), 
      VertexBufferBinding__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer"), $.Int32]), 
      VertexBufferBinding__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer"), $.Int32, 
          $.Int32
        ]), 
      VertexBufferBinding__ctor$02
    );

    $.Method({Static:false, Public:true }, "get_InstanceFrequency", 
      JSIL.MethodSignature.Return($.Int32), 
      VertexBufferBinding_get_InstanceFrequency
    );

    $.Method({Static:true , Public:false}, "get_None", 
      JSIL.MethodSignature.Return($.Type), 
      VertexBufferBinding_get_None
    );

    $.Method({Static:false, Public:true }, "get_VertexBuffer", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")), 
      VertexBufferBinding_get_VertexBuffer
    );

    $.Method({Static:false, Public:true }, "get_VertexOffset", 
      JSIL.MethodSignature.Return($.Int32), 
      VertexBufferBinding_get_VertexOffset
    );

    $.Method({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")]), 
      VertexBufferBinding_op_Implicit
    );

    $.Field({Static:false, Public:false}, "vertexBuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer")); 
    $.Field({Static:false, Public:false}, "vertexOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "instanceFrequency", $.Int32); 
    $.Field({Static:true , Public:false}, "none", $.Type); 
    function VertexBufferBinding__cctor () {
      $thisType.none = new $thisType();
      $thisType.none = $S00().Construct(null);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      VertexBufferBinding__cctor
    );

    $.Property({Static:false, Public:true }, "InstanceFrequency", $.Int32);

    $.Property({Static:false, Public:true }, "VertexBuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexBuffer"));

    $.Property({Static:false, Public:true }, "VertexOffset", $.Int32);

    $.Property({Static:true , Public:false}, "None", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.CueData */ 

(function CueData$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTSound)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.MaxInstanceBehavior)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.XACTSound))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function CueData__ctor$00 (sound) {
    this.CueData$Sounds$value = JSIL.Array.New($T00(), 1);
    this.CueData$Probabilities$value = JSIL.MultidimensionalArray.New($T01(), 1, 2);
    this.CueData$Sounds$value[0] = sound;
    this.CueData$Category$value = (sound.XACTSound$Category$value | 0);
    (this.CueData$Probabilities$value).Set(0, 0, 1);
    (this.CueData$Probabilities$value).Set(0, 1, 0);
    this.CueData$IsUserControlled$value = false;
    this.CueData$InstanceLimit$value = 255;
    this.CueData$MaxCueBehavior$value = $T03().ReplaceOldest;
  };

  function CueData__ctor$01 (sounds, probabilities, controlVariable) {
    this.CueData$Sounds$value = sounds;
    this.CueData$Category$value = (this.CueData$Sounds$value[0].XACTSound$Category$value | 0);
    this.CueData$Probabilities$value = probabilities;
    this.CueData$IsUserControlled$value = !$T05().IsNullOrEmpty(controlVariable);
    this.CueData$UserControlVariable$value = controlVariable;
    this.CueData$InstanceLimit$value = 255;
    this.CueData$MaxCueBehavior$value = $T03().ReplaceOldest;
  };

  function CueData_get_Category () {
    return this.CueData$Category$value;
  };

  function CueData_get_InstanceLimit () {
    return this.CueData$InstanceLimit$value;
  };

  function CueData_get_IsUserControlled () {
    return this.CueData$IsUserControlled$value;
  };

  function CueData_get_MaxCueBehavior () {
    return this.CueData$MaxCueBehavior$value;
  };

  function CueData_get_Probabilities () {
    return this.CueData$Probabilities$value;
  };

  function CueData_get_Sounds () {
    return this.CueData$Sounds$value;
  };

  function CueData_get_UserControlVariable () {
    return this.CueData$UserControlVariable$value;
  };

  function CueData_set_Category (value) {
    this.CueData$Category$value = (value | 0);
  };

  function CueData_set_InstanceLimit (value) {
    this.CueData$InstanceLimit$value = (value | 0);
  };

  function CueData_set_IsUserControlled (value) {
    this.CueData$IsUserControlled$value = value;
  };

  function CueData_set_MaxCueBehavior (value) {
    this.CueData$MaxCueBehavior$value = value;
  };

  function CueData_set_Probabilities (value) {
    this.CueData$Probabilities$value = value;
  };

  function CueData_set_Sounds (value) {
    this.CueData$Sounds$value = value;
  };

  function CueData_set_UserControlVariable (value) {
    this.CueData$UserControlVariable$value = value;
  };

  function CueData_SetLimit (instanceLimit, behavior) {
    this.CueData$InstanceLimit$value = (instanceLimit | 0);
    this.CueData$MaxCueBehavior$value = (($T03().$Cast((behavior | 0) >> 3)).valueOf() | 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.CueData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTSound")), 
      CueData__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTSound")]), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.String
        ]), 
      CueData__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_Category", 
      JSIL.MethodSignature.Return($.UInt16), 
      CueData_get_Category
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_InstanceLimit", 
      JSIL.MethodSignature.Return($.Byte), 
      CueData_get_InstanceLimit
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsUserControlled", 
      JSIL.MethodSignature.Return($.Boolean), 
      CueData_get_IsUserControlled
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MaxCueBehavior", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Audio.MaxInstanceBehavior")), 
      CueData_get_MaxCueBehavior
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Probabilities", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Single])), 
      CueData_get_Probabilities
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Sounds", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTSound")])), 
      CueData_get_Sounds
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_UserControlVariable", 
      JSIL.MethodSignature.Return($.String), 
      CueData_get_UserControlVariable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Category", 
      JSIL.MethodSignature.Action($.UInt16), 
      CueData_set_Category
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_InstanceLimit", 
      JSIL.MethodSignature.Action($.Byte), 
      CueData_set_InstanceLimit
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsUserControlled", 
      JSIL.MethodSignature.Action($.Boolean), 
      CueData_set_IsUserControlled
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_MaxCueBehavior", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.MaxInstanceBehavior")), 
      CueData_set_MaxCueBehavior
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Probabilities", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single])), 
      CueData_set_Probabilities
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Sounds", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTSound")])), 
      CueData_set_Sounds
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_UserControlVariable", 
      JSIL.MethodSignature.Action($.String), 
      CueData_set_UserControlVariable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetLimit", 
      new JSIL.MethodSignature(null, [$.Byte, $.Byte]), 
      CueData_SetLimit
    );

    $.Field({Static:false, Public:false}, "CueData$Sounds$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTSound")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CueData$Category$value", $.UInt16)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CueData$Probabilities$value", $jsilcore.TypeRef("System.Array", [$.Single]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CueData$IsUserControlled$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CueData$UserControlVariable$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CueData$InstanceLimit$value", $.Byte)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CueData$MaxCueBehavior$value", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.MaxInstanceBehavior"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Sounds", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTSound")]));

    $.Property({Static:false, Public:true }, "Category", $.UInt16);

    $.Property({Static:false, Public:true }, "Probabilities", $jsilcore.TypeRef("System.Array", [$.Single]));

    $.Property({Static:false, Public:true }, "IsUserControlled", $.Boolean);

    $.Property({Static:false, Public:true }, "UserControlVariable", $.String);

    $.Property({Static:false, Public:true }, "InstanceLimit", $.Byte);

    $.Property({Static:false, Public:true }, "MaxCueBehavior", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.MaxInstanceBehavior"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.XACTSound */ 

(function XACTSound$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTClip)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTCalculator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.UInt32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.UInt32))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.XACTClip))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.IO.SeekOrigin)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Single))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioEngine)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.String))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTClip"), [$asm01.TypeRef("System.UInt16"), $asm01.TypeRef("System.Byte")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.UInt32")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTClip"), [$asm01.TypeRef("System.IO.BinaryReader"), $asm01.TypeRef("System.Double")]))) ();
  };

  function XACTSound__ctor$00 (track, waveBank) {
    this.INTERNAL_clips = JSIL.Array.New($T02(), 1);
    this.INTERNAL_clips[0] = $S00().Construct(track, waveBank);
    this.XACTSound$Category$value = 0;
    this.XACTSound$Volume$value = 0;
    this.XACTSound$HasLoadedTracks$value = false;
  };

  function XACTSound__ctor$01 (reader) {
    var soundFlags = (reader.ReadByte() | 0);
    var complex = (soundFlags & 1) !== 0;
    this.XACTSound$Category$value = (reader.ReadUInt16() | 0);
    this.XACTSound$Volume$value = +$T05().ParseDecibel(reader.ReadByte());
    this.XACTSound$Pitch$value = +((+(reader.ReadInt16()) / 1000));
    reader.ReadByte();
    reader.ReadUInt16();
    if (complex) {
      this.INTERNAL_clips = JSIL.Array.New($T02(), reader.ReadByte());
    } else {
      this.INTERNAL_clips = JSIL.Array.New($T02(), 1);
      var track = (reader.ReadUInt16() | 0);
      var waveBank = (reader.ReadByte() | 0);
      this.INTERNAL_clips[0] = $S00().Construct(track, waveBank);
    }
    var rpcCodeList = $S01().Construct();
    if ((soundFlags & 14) !== 0) {
      var rpcDataLength = (reader.ReadUInt16() | 0);

      for (var totalDataRead = 2; totalDataRead < rpcDataLength; totalDataRead = ((totalDataRead + (((1 + ((4 * numCodes) | 0)) | 0) & 0xFFFF)) & 0xFFFF)) {
        var numCodes = (reader.ReadByte() | 0);

        for (var i = 0; i < numCodes; i = (((i + 1) | 0) & 0xFF)) {
          rpcCodeList.Add(reader.ReadUInt32());
        }
      }
    }
    this.XACTSound$RPCCodes$value = $T06().prototype.ToArray.call(rpcCodeList);
    this.XACTSound$DSPCodes$value = JSIL.Array.New($T07(), 0);
    if ((soundFlags & 16) !== 0) {
      reader.ReadUInt16();
      this.XACTSound$DSPCodes$value = JSIL.Array.New($T07(), reader.ReadByte());

      for (var j = 0; j < (this.XACTSound$DSPCodes$value.length | 0); j = (((j + 1) | 0) & 0xFF)) {
        this.XACTSound$DSPCodes$value[j] = (reader.ReadUInt32() >>> 0);
      }
    }
    if (complex) {

      for (var k = 0; k < (this.INTERNAL_clips.length | 0); k = ((k + 1) | 0)) {
        var clipVolume = +$T05().ParseDecibel(reader.ReadByte());
        var offset = (reader.ReadUInt32() >>> 0);
        reader.ReadUInt32();
        var curPos = (reader.get_BaseStream()).get_Position();
        (reader.get_BaseStream()).Seek(($T0E().FromNumber(offset)).ToInt64(), $T0F().Begin);
        this.INTERNAL_clips[k] = $S02().Construct(reader, clipVolume);
        (reader.get_BaseStream()).Seek(curPos, $T0F().Begin);
      }
    }
    this.XACTSound$HasLoadedTracks$value = false;
  };

  function XACTSound_GenerateInstances (result, volumeResult, pitchResult) {
    var $temp00;
    var iNTERNAL_clips = this.INTERNAL_clips;

    for (var i = 0; i < (iNTERNAL_clips.length | 0); i = ((i + 1) | 0)) {
      var curClip = iNTERNAL_clips[i];
      curClip.GenerateInstances(result, this.XACTSound$Volume$value, this.XACTSound$Pitch$value);
    }

    for (var a$0 = result._items, i$0 = 0, l$0 = (result._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var sfi = a$0[i$0];
      volumeResult.Add(sfi.get_Volume());
      pitchResult.Add(sfi.get_Pitch());
    }
    return result;
  };

  function XACTSound_get_Category () {
    return this.XACTSound$Category$value;
  };

  function XACTSound_get_DSPCodes () {
    return this.XACTSound$DSPCodes$value;
  };

  function XACTSound_get_HasLoadedTracks () {
    return this.XACTSound$HasLoadedTracks$value;
  };

  function XACTSound_get_Pitch () {
    return this.XACTSound$Pitch$value;
  };

  function XACTSound_get_RPCCodes () {
    return this.XACTSound$RPCCodes$value;
  };

  function XACTSound_get_Volume () {
    return this.XACTSound$Volume$value;
  };

  function XACTSound_LoadTracks (audioEngine, waveBankNames) {
    var iNTERNAL_clips = this.INTERNAL_clips;

    for (var i = 0; i < (iNTERNAL_clips.length | 0); i = ((i + 1) | 0)) {
      var curClip = iNTERNAL_clips[i];
      curClip.LoadTracks(audioEngine, waveBankNames);
    }
    this.XACTSound$HasLoadedTracks$value = true;
  };

  function XACTSound_set_Category (value) {
    this.XACTSound$Category$value = (value | 0);
  };

  function XACTSound_set_DSPCodes (value) {
    this.XACTSound$DSPCodes$value = value;
  };

  function XACTSound_set_HasLoadedTracks (value) {
    this.XACTSound$HasLoadedTracks$value = value;
  };

  function XACTSound_set_Pitch (value) {
    this.XACTSound$Pitch$value = +value;
  };

  function XACTSound_set_RPCCodes (value) {
    this.XACTSound$RPCCodes$value = value;
  };

  function XACTSound_set_Volume (value) {
    this.XACTSound$Volume$value = +value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.XACTSound", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt16, $.Byte]), 
      XACTSound__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IO.BinaryReader")), 
      XACTSound__ctor$01
    );

    $.Method({Static:false, Public:true }, "GenerateInstances", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")]), [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")]), $asm01.TypeRef("System.Collections.Generic.List`1", [$.Single]), 
          $asm01.TypeRef("System.Collections.Generic.List`1", [$.Single])
        ]), 
      XACTSound_GenerateInstances
    );

    $.Method({Static:false, Public:true }, "get_Category", 
      JSIL.MethodSignature.Return($.UInt16), 
      XACTSound_get_Category
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DSPCodes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.UInt32])), 
      XACTSound_get_DSPCodes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasLoadedTracks", 
      JSIL.MethodSignature.Return($.Boolean), 
      XACTSound_get_HasLoadedTracks
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Pitch", 
      JSIL.MethodSignature.Return($.Single), 
      XACTSound_get_Pitch
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RPCCodes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.UInt32])), 
      XACTSound_get_RPCCodes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Volume", 
      JSIL.MethodSignature.Return($.Double), 
      XACTSound_get_Volume
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "LoadTracks", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $asm01.TypeRef("System.Collections.Generic.List`1", [$.String])]), 
      XACTSound_LoadTracks
    );

    $.Method({Static:false, Public:false}, "set_Category", 
      JSIL.MethodSignature.Action($.UInt16), 
      XACTSound_set_Category
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_DSPCodes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.UInt32])), 
      XACTSound_set_DSPCodes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasLoadedTracks", 
      JSIL.MethodSignature.Action($.Boolean), 
      XACTSound_set_HasLoadedTracks
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Pitch", 
      JSIL.MethodSignature.Action($.Single), 
      XACTSound_set_Pitch
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RPCCodes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.UInt32])), 
      XACTSound_set_RPCCodes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Volume", 
      JSIL.MethodSignature.Action($.Double), 
      XACTSound_set_Volume
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "INTERNAL_clips", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTClip")])); 
    $.Field({Static:false, Public:false}, "XACTSound$Volume$value", $.Double)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "XACTSound$Pitch$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "XACTSound$Category$value", $.UInt16)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "XACTSound$HasLoadedTracks$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "XACTSound$RPCCodes$value", $jsilcore.TypeRef("System.Array", [$.UInt32]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "XACTSound$DSPCodes$value", $jsilcore.TypeRef("System.Array", [$.UInt32]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Volume", $.Double);

    $.Property({Static:false, Public:true }, "Pitch", $.Single);

    $.Property({Static:false, Public:true }, "Category", $.UInt16);

    $.Property({Static:false, Public:true }, "HasLoadedTracks", $.Boolean);

    $.Property({Static:false, Public:true }, "RPCCodes", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Property({Static:false, Public:true }, "DSPCodes", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.XACTClip */ 

(function XACTClip$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTEvent)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.PlayWaveEvent)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IO.BinaryReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.XACTEvent))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm01.System.UInt16))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTCalculator)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SetVolumeEvent)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioEngine)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.String))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")]), null))) ();
  };

  function XACTClip__ctor$00 (track, waveBank) {
    this.INTERNAL_events = JSIL.Array.New($T02(), 1);
    this.INTERNAL_events[0] = new ($T03())(0, JSIL.Array.New($T00(), [track]), JSIL.Array.New($T01(), [waveBank]), 0, 0, 1, 1, -1, 0, 0, JSIL.Array.New($T01(), [255]));
  };

  function XACTClip__ctor$01 (reader, clipVolume) {
    this.INTERNAL_events = JSIL.Array.New($T02(), reader.ReadByte());

    for (var i = 0; i < (this.INTERNAL_events.length | 0); i = ((i + 1) | 0)) {
      var eventInfo = (reader.ReadUInt32() >>> 0);
      var eventType = eventInfo & 31;
      var eventTimestamp = (eventInfo >>> 5) & 65535;
      reader.ReadUInt16();
      if (eventType !== 0) {
        if (eventType === 1) {
          reader.ReadByte();
          reader.ReadByte();
          var track = (reader.ReadUInt16() | 0);
          var waveBank = (reader.ReadByte() | 0);
          var loopCount = (reader.ReadByte() | 0);
          reader.ReadUInt16();
          reader.ReadUInt16();
          this.INTERNAL_events[i] = new ($T03())(eventTimestamp, JSIL.Array.New($T00(), [track]), JSIL.Array.New($T01(), [waveBank]), 0, 0, clipVolume, clipVolume, -1, loopCount, 0, JSIL.Array.New($T01(), [255]));
        } else if (eventType === 3) {
          reader.ReadByte();
          reader.ReadByte();
          loopCount = (reader.ReadByte() | 0);
          reader.ReadUInt16();
          reader.ReadUInt16();
          var numTracks = (reader.ReadUInt16() | 0);
          var variationType = (reader.ReadUInt16() | 0) & 15;
          reader.ReadBytes(4);
          var tracks = JSIL.Array.New($T00(), numTracks);
          var waveBanks = JSIL.Array.New($T01(), numTracks);
          var weights = JSIL.Array.New($T01(), numTracks);

          for (var j = 0; j < numTracks; j = (((j + 1) >>> 0) & 0xFFFF)) {
            tracks[j] = (reader.ReadUInt16() | 0);
            waveBanks[j] = (reader.ReadByte() | 0);
            var minWeight = (reader.ReadByte() | 0);
            var maxWeight = (reader.ReadByte() | 0);
            weights[j] = ((maxWeight - minWeight) & 0xFF);
          }
          this.INTERNAL_events[i] = new ($T03())(eventTimestamp, tracks, waveBanks, 0, 0, clipVolume, clipVolume, -1, loopCount, variationType, weights);
        } else if (eventType === 4) {
          reader.ReadByte();
          reader.ReadByte();
          track = (reader.ReadUInt16() | 0);
          waveBank = (reader.ReadByte() | 0);
          loopCount = (reader.ReadByte() | 0);
          reader.ReadUInt16();
          reader.ReadUInt16();
          var minPitch = (reader.ReadInt16() | 0);
          var maxPitch = (reader.ReadInt16() | 0);
          var minVolume = +$T0C().ParseDecibel(reader.ReadByte());
          var maxVolume = +$T0C().ParseDecibel(reader.ReadByte());
          reader.ReadSingle();
          reader.ReadSingle();
          reader.ReadSingle();
          reader.ReadSingle();
          var filterType = (reader.ReadByte() | 0);
          this.INTERNAL_events[i] = new ($T03())(eventTimestamp, JSIL.Array.New($T00(), [track]), JSIL.Array.New($T01(), [waveBank]), minPitch, maxPitch, minVolume, maxVolume, filterType, loopCount, 0, JSIL.Array.New($T01(), [255]));
        } else if (eventType === 6) {
          reader.ReadByte();
          reader.ReadByte();
          loopCount = (reader.ReadByte() | 0);
          reader.ReadUInt16();
          reader.ReadUInt16();
          minPitch = (reader.ReadInt16() | 0);
          maxPitch = (reader.ReadInt16() | 0);
          minVolume = +$T0C().ParseDecibel(reader.ReadByte());
          maxVolume = +$T0C().ParseDecibel(reader.ReadByte());
          reader.ReadSingle();
          reader.ReadSingle();
          reader.ReadSingle();
          reader.ReadSingle();
          filterType = (reader.ReadByte() | 0);
          var varFlags = (reader.ReadByte() | 0);
          if ((varFlags & 32) !== 32) {
            minVolume = +clipVolume;
            maxVolume = +clipVolume;
          }
          if ((varFlags & 16) !== 16) {
            minPitch = 0;
            maxPitch = 0;
          }
          numTracks = (reader.ReadUInt16() | 0);
          variationType = (reader.ReadUInt16() | 0) & 15;
          reader.ReadBytes(4);
          tracks = JSIL.Array.New($T00(), numTracks);
          waveBanks = JSIL.Array.New($T01(), numTracks);
          weights = JSIL.Array.New($T01(), numTracks);

          for (j = 0; j < numTracks; j = (((j + 1) >>> 0) & 0xFFFF)) {
            tracks[j] = (reader.ReadUInt16() | 0);
            waveBanks[j] = (reader.ReadByte() | 0);
            minWeight = (reader.ReadByte() | 0);
            maxWeight = (reader.ReadByte() | 0);
            weights[j] = ((maxWeight - minWeight) & 0xFF);
          }
          this.INTERNAL_events[i] = new ($T03())(eventTimestamp, tracks, waveBanks, minPitch, maxPitch, minVolume, maxVolume, filterType, loopCount, variationType, weights);
        } else if (eventType !== 7) {
          if (eventType === 8) {
            reader.ReadBytes(2);
            var addVolume = ((reader.ReadByte() | 0) & 1) === 1;
            var constant = +((+reader.ReadSingle() / 100));
            if (addVolume) {
              constant += Math.fround(clipVolume);
            }
            reader.ReadBytes(8);
            this.INTERNAL_events[i] = new ($T0F())(eventTimestamp, $T0C().CalculateAmplitudeRatio(constant));
          } else if (eventType !== 15) {
            if (eventType !== 17) {
              throw $S00().Construct(("EVENT TYPE " + (eventType).toString() + " NOT IMPLEMENTED!"));
            }
          }
        }
      }
    }
  };

  function XACTClip_GenerateInstances (result, soundVolume, soundPitch) {
    var $temp00, $temp01;
    var wavs = $S01().Construct();
    var eventVolume = 1;
    var iNTERNAL_events = this.INTERNAL_events;

    for (var i = 0; i < (iNTERNAL_events.length | 0); i = ((i + 1) | 0)) {
      var curEvent = iNTERNAL_events[i];
      if ((curEvent.XACTEvent$Type$value >>> 0) === 1) {
        wavs.Add(($T03().$Cast(curEvent)).GenerateInstance(soundVolume, soundPitch));
      } else if ((curEvent.XACTEvent$Type$value >>> 0) === 2) {
        eventVolume *= +($T0F().$Cast(curEvent)).GetVolume();
      }
    }

    for (var a$0 = wavs._items, i$0 = 0, l$0 = (wavs._size | 0); i$0 < l$0; ($temp01 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp01)) {
      var wav = a$0[i$0];
      ($temp00 = +wav.get_Volume() * eventVolume, 
        wav.set_Volume($temp00), 
        $temp00);
    }
    $T12().prototype.AddRange.call(result, wavs);
  };

  function XACTClip_LoadTracks (audioEngine, waveBankNames) {
    var iNTERNAL_events = this.INTERNAL_events;

    for (var i = 0; i < (iNTERNAL_events.length | 0); i = ((i + 1) | 0)) {
      var curEvent = iNTERNAL_events[i];
      if ((curEvent.XACTEvent$Type$value >>> 0) === 1) {
        ($T03().$Cast(curEvent)).LoadTracks(audioEngine, waveBankNames);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.XACTClip", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt16, $.Byte]), 
      XACTClip__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.BinaryReader"), $.Double]), 
      XACTClip__ctor$01
    );

    $.Method({Static:false, Public:true }, "GenerateInstances", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")]), $.Double, 
          $.Single
        ]), 
      XACTClip_GenerateInstances
    );

    $.Method({Static:false, Public:true }, "LoadTracks", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $asm01.TypeRef("System.Collections.Generic.List`1", [$.String])]), 
      XACTClip_LoadTracks
    );

    $.Field({Static:false, Public:false}, "INTERNAL_events", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTEvent")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.XACTEvent */ 

(function XACTEvent$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function XACTEvent__ctor (type, timestamp) {
    this.XACTEvent$Type$value = (type >>> 0);
    this.XACTEvent$Timestamp$value = (timestamp >>> 0);
  };

  function XACTEvent_get_Timestamp () {
    return this.XACTEvent$Timestamp$value;
  };

  function XACTEvent_get_Type () {
    return this.XACTEvent$Type$value;
  };

  function XACTEvent_set_Timestamp (value) {
    this.XACTEvent$Timestamp$value = (value >>> 0);
  };

  function XACTEvent_set_Type (value) {
    this.XACTEvent$Type$value = (value >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.XACTEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32, $.UInt32]), 
      XACTEvent__ctor
    );

    $.Method({Static:false, Public:true }, "get_Timestamp", 
      JSIL.MethodSignature.Return($.UInt32), 
      XACTEvent_get_Timestamp
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.UInt32), 
      XACTEvent_get_Type
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Timestamp", 
      JSIL.MethodSignature.Action($.UInt32), 
      XACTEvent_set_Timestamp
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Type", 
      JSIL.MethodSignature.Action($.UInt32), 
      XACTEvent_set_Type
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XACTEvent$Type$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "XACTEvent$Timestamp$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Type", $.UInt32);

    $.Property({Static:false, Public:true }, "Timestamp", $.UInt32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.PlayWaveEvent */ 

(function PlayWaveEvent$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Random)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm01.System.UInt16))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTEvent)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.PlayWaveEvent_VariationPlaylistType)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTCalculator)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.SoundEffect))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioEngine)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.String))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Random"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };

  function PlayWaveEvent__ctor (timestamp, tracks, waveBanks, minPitch, maxPitch, minVolume, maxVolume, filterType, loopCount, variationType, weights) {
    $T09().prototype._ctor.call(this, 1, timestamp);
    this.INTERNAL_tracks = tracks;
    this.INTERNAL_waveBanks = waveBanks;
    this.INTERNAL_minPitch = (minPitch | 0);
    this.INTERNAL_maxPitch = (maxPitch | 0);
    this.INTERNAL_minVolume = +minVolume;
    this.INTERNAL_maxVolume = +maxVolume;
    this.INTERNAL_filterType = (filterType | 0);
    this.INTERNAL_loopCount = (loopCount | 0);
    this.INTERNAL_variationType = $T0A().$Cast(variationType);
    this.INTERNAL_weights = weights;
    this.INTERNAL_waves = JSIL.Array.New($T0B(), tracks.length);
    this.INTERNAL_curWave = -1;
  };

  function PlayWaveEvent_GenerateInstance (soundVolume, soundPitch) {
    this.INTERNAL_getNextSound();
    var result = (this.INTERNAL_waves[this.INTERNAL_curWave]).CreateInstance();
    result.INTERNAL_isXACTSource = true;
    result.INTERNAL_delayMS = (this.XACTEvent$Timestamp$value >>> 0);
    result.set_Volume($T0E().CalculateAmplitudeRatio((+soundVolume + (+$thisType.random.NextDouble() * (+this.INTERNAL_maxVolume - +this.INTERNAL_minVolume))) + +this.INTERNAL_minVolume));
    result.set_Pitch(+((+($thisType.random.Next(this.INTERNAL_minPitch, this.INTERNAL_maxPitch)) / 1000)) + +soundPitch);
    result.SoundEffectInstance$FilterType$value = (this.INTERNAL_filterType | 0);
    result.set_IsLooped((this.INTERNAL_loopCount | 0) === 255);
    return result;
  };

  function PlayWaveEvent_INTERNAL_getNextSound () {
    if (this.INTERNAL_variationType === $T0A().Ordered) {
      this.INTERNAL_curWave = (((this.INTERNAL_curWave | 0) + 1) | 0);
      if ((this.INTERNAL_curWave | 0) >= (this.INTERNAL_waves.length | 0)) {
        this.INTERNAL_curWave = 0;
      }
    } else if (this.INTERNAL_variationType === $T0A().OrderedFromRandom) {
      this.INTERNAL_curWave = (((this.INTERNAL_curWave | 0) + 1) | 0);
      if ((this.INTERNAL_curWave | 0) >= (this.INTERNAL_waves.length | 0)) {
        this.INTERNAL_curWave = 0;
      }
    } else if (this.INTERNAL_variationType === $T0A().Random) {
      var max = 0;

      for (var i = 0; i < (this.INTERNAL_weights.length | 0); i = ((i + 1) | 0)) {
        max += +(this.INTERNAL_weights[i]);
      }
      var next = +$thisType.random.NextDouble() * max;

    $loop3: 
      for (i = (((this.INTERNAL_weights.length | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
        if (next > (max - +(this.INTERNAL_weights[i]))) {
          this.INTERNAL_curWave = i;
          break $loop3;
        }
        max -= +(this.INTERNAL_weights[i]);
      }
    } else {
      if ((this.INTERNAL_variationType !== $T0A().RandomNoImmediateRepeats) && (this.INTERNAL_variationType !== $T0A().Shuffle)) {
        throw $S01().Construct(JSIL.ConcatString("Variation Playlist Type unhandled: ", (this.INTERNAL_variationType).toString()));
      }
      max = 0;

      for (i = 0; i < (this.INTERNAL_weights.length | 0); i = ((i + 1) | 0)) {
        if (i !== (this.INTERNAL_curWave | 0)) {
          max += +(this.INTERNAL_weights[i]);
        }
      }
      next = +$thisType.random.NextDouble() * max;

    $loop1: 
      for (i = (((this.INTERNAL_weights.length | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
        if (i !== (this.INTERNAL_curWave | 0)) {
          if (next > (max - +(this.INTERNAL_weights[i]))) {
            this.INTERNAL_curWave = i;
            break $loop1;
          }
          max -= +(this.INTERNAL_weights[i]);
        }
      }
    }
  };

  function PlayWaveEvent_LoadTracks (audioEngine, waveBankNames) {

    for (var i = 0; i < (this.INTERNAL_waves.length | 0); i = ((i + 1) | 0)) {
      this.INTERNAL_waves[i] = audioEngine.INTERNAL_getWaveBankTrack(waveBankNames.get_Item(this.INTERNAL_waveBanks[i]), this.INTERNAL_tracks[i]);
    }
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTEvent"), 
      Name: "Microsoft.Xna.Framework.Audio.PlayWaveEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 11, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.UInt16]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int16, 
          $.Int16, $.Double, 
          $.Double, $.Int32, 
          $.Byte, $.UInt16, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      PlayWaveEvent__ctor
    );

    $.Method({Static:false, Public:true }, "GenerateInstance", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance"), [$.Double, $.Single]), 
      PlayWaveEvent_GenerateInstance
    );

    $.Method({Static:false, Public:false}, "INTERNAL_getNextSound", 
      JSIL.MethodSignature.Void, 
      PlayWaveEvent_INTERNAL_getNextSound
    );

    $.Method({Static:false, Public:true }, "LoadTracks", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $asm01.TypeRef("System.Collections.Generic.List`1", [$.String])]), 
      PlayWaveEvent_LoadTracks
    );

    $.Field({Static:false, Public:false}, "INTERNAL_tracks", $jsilcore.TypeRef("System.Array", [$.UInt16])); 
    $.Field({Static:false, Public:false}, "INTERNAL_waveBanks", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "INTERNAL_minPitch", $.Int16); 
    $.Field({Static:false, Public:false}, "INTERNAL_maxPitch", $.Int16); 
    $.Field({Static:false, Public:false}, "INTERNAL_minVolume", $.Double); 
    $.Field({Static:false, Public:false}, "INTERNAL_maxVolume", $.Double); 
    $.Field({Static:false, Public:false}, "INTERNAL_filterType", $.Int32); 
    $.Field({Static:false, Public:false}, "INTERNAL_loopCount", $.Byte); 
    $.Field({Static:false, Public:false}, "INTERNAL_variationType", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.PlayWaveEvent+VariationPlaylistType")); 
    $.Field({Static:false, Public:false}, "INTERNAL_weights", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "INTERNAL_curWave", $.Int32); 
    $.Field({Static:false, Public:false}, "INTERNAL_waves", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")])); 
    $.Field({Static:true , Public:false}, "random", $asm01.TypeRef("System.Random")); 
    function PlayWaveEvent__cctor () {
      $thisType.random = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      PlayWaveEvent__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.PlayWaveEvent+VariationPlaylistType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Audio.PlayWaveEvent+VariationPlaylistType", 
    BaseType: $asm01.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Ordered: 0, 
    OrderedFromRandom: 1, 
    Random: 2, 
    RandomNoImmediateRepeats: 3, 
    Shuffle: 4, 
  }
);

/* class Microsoft.Xna.Framework.Audio.SetVolumeEvent */ 

(function SetVolumeEvent$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTEvent)) ();
  };

  function SetVolumeEvent__ctor (timestamp, constant) {
    $T02().prototype._ctor.call(this, 2, timestamp);
    this.INTERNAL_constant = +constant;
  };

  function SetVolumeEvent_GetVolume () {
    return this.INTERNAL_constant;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Audio.XACTEvent"), 
      Name: "Microsoft.Xna.Framework.Audio.SetVolumeEvent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Single]), 
      SetVolumeEvent__ctor
    );

    $.Method({Static:false, Public:true }, "GetVolume", 
      JSIL.MethodSignature.Return($.Single), 
      SetVolumeEvent_GetVolume
    );

    $.Field({Static:false, Public:false}, "INTERNAL_constant", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.XACTCalculator */ 

(function XACTCalculator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Byte)) ();
  };

  function XACTCalculator_CalculateAmplitudeRatio (decibel) {
    return Math.fround(Math.pow(10, +((+decibel / 20))));
  };

  function XACTCalculator_CalculateVolume (binaryValue) {
    return $thisType.CalculateAmplitudeRatio($thisType.ParseDecibel(binaryValue));
  };

  function XACTCalculator_ParseDecibel (binaryValue) {
    return (+((-163.7385212334047 / (1 + (Math.pow(+((+binaryValue / 80.1748600297963)), 0.432254984608615))))) + 67.7385212334047);
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Audio.XACTCalculator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "CalculateAmplitudeRatio", 
      new JSIL.MethodSignature($.Single, [$.Double]), 
      XACTCalculator_CalculateAmplitudeRatio
    );

    $.Method({Static:true , Public:true }, "CalculateVolume", 
      new JSIL.MethodSignature($.Single, [$.Byte]), 
      XACTCalculator_CalculateVolume
    );

    $.Method({Static:true , Public:true }, "ParseDecibel", 
      new JSIL.MethodSignature($.Double, [$.Byte]), 
      XACTCalculator_ParseDecibel
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.MaxInstanceBehavior */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Audio.MaxInstanceBehavior", 
    BaseType: $asm01.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Fail: 0, 
    Queue: 1, 
    ReplaceOldest: 2, 
    ReplaceQuietest: 3, 
    ReplaceLowestPriority: 4, 
  }
);

/* class Microsoft.Xna.Framework.Audio.Variable */ 

(function Variable$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function Variable__ctor (name, varIsPublic, varIsReadOnly, varIsGlobal, varIsReserved, varInitialValue, varMinValue, varMaxValue) {
    this.Variable$Name$value = name;
    this.Variable$IsPublic$value = varIsPublic;
    this.Variable$IsReadOnly$value = varIsReadOnly;
    this.Variable$IsGlobal$value = varIsGlobal;
    this.Variable$IsReserved$value = varIsReserved;
    this.value = +varInitialValue;
    this.minValue = +varMinValue;
    this.maxValue = +varMaxValue;
  };

  function Variable_Clone () {
    return new $thisType(this.Variable$Name$value, this.Variable$IsPublic$value, this.Variable$IsReadOnly$value, this.Variable$IsGlobal$value, this.Variable$IsReserved$value, this.value, this.minValue, this.maxValue);
  };

  function Variable_get_IsGlobal () {
    return this.Variable$IsGlobal$value;
  };

  function Variable_get_IsPublic () {
    return this.Variable$IsPublic$value;
  };

  function Variable_get_IsReadOnly () {
    return this.Variable$IsReadOnly$value;
  };

  function Variable_get_IsReserved () {
    return this.Variable$IsReserved$value;
  };

  function Variable_get_Name () {
    return this.Variable$Name$value;
  };

  function Variable_GetValue () {
    return this.value;
  };

  function Variable_set_IsGlobal (value) {
    this.Variable$IsGlobal$value = value;
  };

  function Variable_set_IsPublic (value) {
    this.Variable$IsPublic$value = value;
  };

  function Variable_set_IsReadOnly (value) {
    this.Variable$IsReadOnly$value = value;
  };

  function Variable_set_IsReserved (value) {
    this.Variable$IsReserved$value = value;
  };

  function Variable_set_Name (value) {
    this.Variable$Name$value = value;
  };

  function Variable_SetValue (newValue) {
    if (+newValue < +this.minValue) {
      this.value = +this.minValue;
    } else if (+newValue > +this.maxValue) {
      this.value = +this.maxValue;
    } else {
      this.value = +newValue;
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.Variable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Single, 
          $.Single, $.Single
        ]), 
      Variable__ctor
    );

    $.Method({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type), 
      Variable_Clone
    );

    $.Method({Static:false, Public:true }, "get_IsGlobal", 
      JSIL.MethodSignature.Return($.Boolean), 
      Variable_get_IsGlobal
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsPublic", 
      JSIL.MethodSignature.Return($.Boolean), 
      Variable_get_IsPublic
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      Variable_get_IsReadOnly
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsReserved", 
      JSIL.MethodSignature.Return($.Boolean), 
      Variable_get_IsReserved
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      Variable_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetValue", 
      JSIL.MethodSignature.Return($.Single), 
      Variable_GetValue
    );

    $.Method({Static:false, Public:false}, "set_IsGlobal", 
      JSIL.MethodSignature.Action($.Boolean), 
      Variable_set_IsGlobal
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsPublic", 
      JSIL.MethodSignature.Action($.Boolean), 
      Variable_set_IsPublic
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsReadOnly", 
      JSIL.MethodSignature.Action($.Boolean), 
      Variable_set_IsReadOnly
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsReserved", 
      JSIL.MethodSignature.Action($.Boolean), 
      Variable_set_IsReserved
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      Variable_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($.Single), 
      Variable_SetValue
    );

    $.Field({Static:false, Public:false}, "value", $.Single); 
    $.Field({Static:false, Public:false}, "minValue", $.Single); 
    $.Field({Static:false, Public:false}, "maxValue", $.Single); 
    $.Field({Static:false, Public:false}, "Variable$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Variable$IsPublic$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Variable$IsReadOnly$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Variable$IsGlobal$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Variable$IsReserved$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IsPublic", $.Boolean);

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "IsGlobal", $.Boolean);

    $.Property({Static:false, Public:true }, "IsReserved", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.RPCPointType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Audio.RPCPointType", 
    BaseType: $asm01.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Linear: 0, 
    Fast: 1, 
    Slow: 2, 
    SinCos: 3, 
  }
);

/* enum Microsoft.Xna.Framework.Audio.RPCParameter */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Audio.RPCParameter", 
    BaseType: $asm01.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Volume: 0, 
    Pitch: 1, 
    ReverbSend: 2, 
    FilterFrequency: 3, 
    FilterQFactor: 4, 
    NUM_PARAMETERS: 5, 
  }
);

/* class Microsoft.Xna.Framework.Audio.RPCPoint */ 

(function RPCPoint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.RPCPointType)) ();
  };

  function RPCPoint__ctor (x, y, type) {
    this.RPCPoint$X$value = +x;
    this.RPCPoint$Y$value = +y;
    this.RPCPoint$Type$value = type;
  };

  function RPCPoint_get_Type () {
    return this.RPCPoint$Type$value;
  };

  function RPCPoint_get_X () {
    return this.RPCPoint$X$value;
  };

  function RPCPoint_get_Y () {
    return this.RPCPoint$Y$value;
  };

  function RPCPoint_set_Type (value) {
    this.RPCPoint$Type$value = value;
  };

  function RPCPoint_set_X (value) {
    this.RPCPoint$X$value = +value;
  };

  function RPCPoint_set_Y (value) {
    this.RPCPoint$Y$value = +value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.RPCPoint", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPCPointType")
        ]), 
      RPCPoint__ctor
    );

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPCPointType")), 
      RPCPoint_get_Type
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_X", 
      JSIL.MethodSignature.Return($.Single), 
      RPCPoint_get_X
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Y", 
      JSIL.MethodSignature.Return($.Single), 
      RPCPoint_get_Y
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Type", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPCPointType")), 
      RPCPoint_set_Type
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_X", 
      JSIL.MethodSignature.Action($.Single), 
      RPCPoint_set_X
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Y", 
      JSIL.MethodSignature.Action($.Single), 
      RPCPoint_set_Y
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "RPCPoint$X$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RPCPoint$Y$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RPCPoint$Type$value", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPCPointType"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "X", $.Single);

    $.Property({Static:false, Public:true }, "Y", $.Single);

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPCPointType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.RPC */ 

(function RPC$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.RPCPoint))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.RPCParameter)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.RPCPoint)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function RPC__ctor (rpcVariable, rpcParameter, rpcPoints) {
    this.RPC$Variable$value = rpcVariable;
    this.RPC$Parameter$value = $T03().$Cast(rpcParameter);
    this.Points = rpcPoints;
  };

  function RPC_CalculateRPC (varInput) {
    if (+varInput === 0) {
      if (+this.Points[0].RPCPoint$X$value === 0) {
        var result2 = +this.Points[0].RPCPoint$Y$value;
      } else {
        result2 = 0;
      }
    } else if (+varInput <= +this.Points[0].RPCPoint$X$value) {
      result2 = +((+this.Points[0].RPCPoint$Y$value / +((+varInput / +this.Points[0].RPCPoint$X$value))));
    } else if (+varInput >= +this.Points[(((this.Points.length | 0) - 1) | 0)].RPCPoint$X$value) {
      result2 = +((+this.Points[(((this.Points.length | 0) - 1) | 0)].RPCPoint$Y$value / +((+this.Points[(((this.Points.length | 0) - 1) | 0)].RPCPoint$X$value / +varInput))));
    } else {
      var result = 0;

    $loop0: 
      for (var i = 0; i < (((this.Points.length | 0) - 1) | 0); i = ((i + 1) | 0)) {
        result = +this.Points[i].RPCPoint$Y$value;
        if (!((+varInput < +this.Points[i].RPCPoint$X$value) || (+varInput > +this.Points[((i + 1) | 0)].RPCPoint$X$value))) {
          result += +(((+this.Points[((i + 1) | 0)].RPCPoint$Y$value - +this.Points[i].RPCPoint$Y$value) / (+this.Points[((i + 1) | 0)].RPCPoint$X$value - +this.Points[i].RPCPoint$X$value))) * (+varInput - +this.Points[i].RPCPoint$X$value);
          break $loop0;
        }
      }
      result2 = result;
    }
    return result2;
  };

  function RPC_get_Parameter () {
    return this.RPC$Parameter$value;
  };

  function RPC_get_Variable () {
    return this.RPC$Variable$value;
  };

  function RPC_set_Parameter (value) {
    this.RPC$Parameter$value = value;
  };

  function RPC_set_Variable (value) {
    this.RPC$Variable$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.RPC", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.UInt16, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPCPoint")])
        ]), 
      RPC__ctor
    );

    $.Method({Static:false, Public:true }, "CalculateRPC", 
      new JSIL.MethodSignature($.Single, [$.Single]), 
      RPC_CalculateRPC
    );

    $.Method({Static:false, Public:true }, "get_Parameter", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPCParameter")), 
      RPC_get_Parameter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Variable", 
      JSIL.MethodSignature.Return($.String), 
      RPC_get_Variable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Parameter", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPCParameter")), 
      RPC_set_Parameter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Variable", 
      JSIL.MethodSignature.Action($.String), 
      RPC_set_Variable
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Points", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPCPoint")])); 
    $.Field({Static:false, Public:false}, "RPC$Variable$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RPC$Parameter$value", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPCParameter"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Variable", $.String);

    $.Property({Static:false, Public:true }, "Parameter", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.RPCParameter"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.DSPParameter */ 

(function DSPParameter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function DSPParameter__ctor (type, val, min, max) {
    this.DSPParameter$Type$value = (type | 0);
    this.DSPParameter$Minimum$value = +min;
    this.DSPParameter$Maximum$value = +max;
    this.INTERNAL_value = +val;
  };

  function DSPParameter_get_Maximum () {
    return this.DSPParameter$Maximum$value;
  };

  function DSPParameter_get_Minimum () {
    return this.DSPParameter$Minimum$value;
  };

  function DSPParameter_get_Type () {
    return this.DSPParameter$Type$value;
  };

  function DSPParameter_get_Value () {
    return this.INTERNAL_value;
  };

  function DSPParameter_set_Maximum (value) {
    this.DSPParameter$Maximum$value = +value;
  };

  function DSPParameter_set_Minimum (value) {
    this.DSPParameter$Minimum$value = +value;
  };

  function DSPParameter_set_Type (value) {
    this.DSPParameter$Type$value = (value | 0);
  };

  function DSPParameter_set_Value (value) {
    if (+value < +this.DSPParameter$Minimum$value) {
      this.INTERNAL_value = +this.DSPParameter$Minimum$value;
    } else if (+value > +this.DSPParameter$Maximum$value) {
      this.INTERNAL_value = +this.DSPParameter$Maximum$value;
    } else {
      this.INTERNAL_value = +value;
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.DSPParameter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Single, 
          $.Single, $.Single
        ]), 
      DSPParameter__ctor
    );

    $.Method({Static:false, Public:true }, "get_Maximum", 
      JSIL.MethodSignature.Return($.Single), 
      DSPParameter_get_Maximum
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Minimum", 
      JSIL.MethodSignature.Return($.Single), 
      DSPParameter_get_Minimum
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.Byte), 
      DSPParameter_get_Type
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Single), 
      DSPParameter_get_Value
    );

    $.Method({Static:false, Public:false}, "set_Maximum", 
      JSIL.MethodSignature.Action($.Single), 
      DSPParameter_set_Maximum
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Minimum", 
      JSIL.MethodSignature.Action($.Single), 
      DSPParameter_set_Minimum
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Type", 
      JSIL.MethodSignature.Action($.Byte), 
      DSPParameter_set_Type
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Single), 
      DSPParameter_set_Value
    );

    $.Field({Static:false, Public:false}, "INTERNAL_value", $.Single); 
    $.Field({Static:false, Public:false}, "DSPParameter$Type$value", $.Byte)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DSPParameter$Minimum$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DSPParameter$Maximum$value", $.Single)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Type", $.Byte);

    $.Property({Static:false, Public:true }, "Minimum", $.Single);

    $.Property({Static:false, Public:true }, "Maximum", $.Single);

    $.Property({Static:false, Public:true }, "Value", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.DSPPreset */ 

(function DSPPreset$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.DSPParameter))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPReverbEffect)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPEffect)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPParameter)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };

  function DSPPreset__ctor (global, parameters) {
    this.DSPPreset$IsGlobal$value = global;
    this.DSPPreset$Parameters$value = parameters;
    this.DSPPreset$Effect$value = new ($T02())(this.DSPPreset$Parameters$value);
  };

  function DSPPreset_Dispose () {
    (this.DSPPreset$Effect$value).Dispose();
  };

  function DSPPreset_get_Effect () {
    return this.DSPPreset$Effect$value;
  };

  function DSPPreset_get_IsGlobal () {
    return this.DSPPreset$IsGlobal$value;
  };

  function DSPPreset_get_Parameters () {
    return this.DSPPreset$Parameters$value;
  };

  function DSPPreset_set_Effect (value) {
    this.DSPPreset$Effect$value = value;
  };

  function DSPPreset_set_IsGlobal (value) {
    this.DSPPreset$IsGlobal$value = value;
  };

  function DSPPreset_set_Parameters (value) {
    this.DSPPreset$Parameters$value = value;
  };

  function DSPPreset_SetParameter (index, value) {
    (this.DSPPreset$Parameters$value[index]).set_Value(value);
    var effect = $T02().$Cast(this.DSPPreset$Effect$value);
    if ((index | 0) === 0) {
      effect.SetReflectionsDelay((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 1) {
      effect.SetReverbDelay((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 2) {
      effect.SetPositionLeft((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 3) {
      effect.SetPositionRight((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 4) {
      effect.SetPositionLeftMatrix((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 5) {
      effect.SetPositionRightMatrix((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 6) {
      effect.SetEarlyDiffusion((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 7) {
      effect.SetLateDiffusion((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 8) {
      effect.SetLowEQGain((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 9) {
      effect.SetLowEQCutoff((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 10) {
      effect.SetHighEQGain((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 11) {
      effect.SetHighEQCutoff((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 12) {
      effect.SetRearDelay((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 13) {
      effect.SetRoomFilterFrequency((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 14) {
      effect.SetRoomFilterMain((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 15) {
      effect.SetRoomFilterHighFrequency((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 16) {
      effect.SetReflectionsGain((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 17) {
      effect.SetReverbGain((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 18) {
      effect.SetDecayTime((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 19) {
      effect.SetDensity((this.DSPPreset$Parameters$value[index]).get_Value());
    } else if ((index | 0) === 20) {
      effect.SetRoomSize((this.DSPPreset$Parameters$value[index]).get_Value());
    } else {
      if ((index | 0) !== 21) {
        throw $S00().Construct(JSIL.ConcatString("DSP parameter unhandled: ", (index).toString()));
      }
      effect.SetWetDryMix((this.DSPPreset$Parameters$value[index]).get_Value());
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.DSPPreset", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPParameter")])]), 
      DSPPreset__ctor
    );

    $.Method({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      DSPPreset_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Effect", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPEffect")), 
      DSPPreset_get_Effect
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsGlobal", 
      JSIL.MethodSignature.Return($.Boolean), 
      DSPPreset_get_IsGlobal
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPParameter")])), 
      DSPPreset_get_Parameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Effect", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPEffect")), 
      DSPPreset_set_Effect
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsGlobal", 
      JSIL.MethodSignature.Action($.Boolean), 
      DSPPreset_set_IsGlobal
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Parameters", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPParameter")])), 
      DSPPreset_set_Parameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetParameter", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single]), 
      DSPPreset_SetParameter
    );

    $.Field({Static:false, Public:false}, "DSPPreset$Effect$value", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPEffect"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DSPPreset$IsGlobal$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DSPPreset$Parameters$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPParameter")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Effect", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPEffect"));

    $.Property({Static:false, Public:true }, "IsGlobal", $.Boolean);

    $.Property({Static:false, Public:true }, "Parameters", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPParameter")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.DeviceLostException */ 

(function DeviceLostException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")]))) ();
  };

  function DeviceLostException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function DeviceLostException__ctor$01 (message) {
    $T00().prototype._ctor.call(this, message);
  };

  function DeviceLostException__ctor$02 (message, inner) {
    $S00().Call($T00().prototype, "_ctor", null, this, message, inner);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.Xna.Framework.Graphics.DeviceLostException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DeviceLostException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      DeviceLostException__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")]), 
      DeviceLostException__ctor$02
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.DeviceNotResetException */ 

(function DeviceNotResetException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")]))) ();
  };

  function DeviceNotResetException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function DeviceNotResetException__ctor$01 (message) {
    $T00().prototype._ctor.call(this, message);
  };

  function DeviceNotResetException__ctor$02 (message, inner) {
    $S00().Call($T00().prototype, "_ctor", null, this, message, inner);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.Xna.Framework.Graphics.DeviceNotResetException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DeviceNotResetException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      DeviceNotResetException__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")]), 
      DeviceNotResetException__ctor$02
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException */ 

(function NoSuitableGraphicsDeviceException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")]))) ();
  };

  function NoSuitableGraphicsDeviceException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function NoSuitableGraphicsDeviceException__ctor$01 (message) {
    $T00().prototype._ctor.call(this, message);
  };

  function NoSuitableGraphicsDeviceException__ctor$02 (message, inner) {
    $S00().Call($T00().prototype, "_ctor", null, this, message, inner);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NoSuitableGraphicsDeviceException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      NoSuitableGraphicsDeviceException__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")]), 
      NoSuitableGraphicsDeviceException__ctor$02
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.OpenGLDevice */ 

(function OpenGLDevice$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PresentationParameters)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BlendFunction)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Blend)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ColorWriteChannels)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CompareFunction)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.StencilOperation)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CullMode)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.FillMode)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DebugProc)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.SDL2.SDL)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_FauxBackbuffer)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLTexture)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLVertexAttribute)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthFormat)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.CullMode, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_XNAToGL)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.FillMode, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLIndexBuffer)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLVertexBuffer)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.ClearOptions)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.TextureAddressMode, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.TextureFilter, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureFilter)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize(System.Array.Of($asm01.System.UInt32))) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLVertexAttribute))) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.DepthFormat, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm01.System.Buffer)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandle)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm01.System.Runtime.InteropServices.GCHandleType)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GetString)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GetIntegerv)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_Enable)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_Disable)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_G_Viewport)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DepthRange)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_Scissor)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_BlendColor)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_BlendFuncSeparate)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_BlendEquationSeparate)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_ColorMask)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DepthMask)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DepthFunc)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_StencilMask)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_StencilFuncSeparate)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_StencilOpSeparate)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_StencilFunc)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_StencilOp)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_CullFace)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_FrontFace)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_PolygonMode)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_PolygonOffset)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GenTextures)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DeleteTextures)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_G_BindTexture)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_TexImage2D)) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_TexSubImage2D)) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_CompressedTexImage2D)) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_CompressedTexSubImage2D)) ();
  };
  var $T50 = function () {
    return ($T50 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_TexImage3D)) ();
  };
  var $T51 = function () {
    return ($T51 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_TexSubImage3D)) ();
  };
  var $T52 = function () {
    return ($T52 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GetTexImage)) ();
  };
  var $T53 = function () {
    return ($T53 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_TexParameteri)) ();
  };
  var $T54 = function () {
    return ($T54 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_TexParameterf)) ();
  };
  var $T55 = function () {
    return ($T55 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_ActiveTexture)) ();
  };
  var $T56 = function () {
    return ($T56 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GetTexLevelParameteriv)) ();
  };
  var $T57 = function () {
    return ($T57 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_PixelStorei)) ();
  };
  var $T58 = function () {
    return ($T58 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GenBuffers)) ();
  };
  var $T59 = function () {
    return ($T59 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DeleteBuffers)) ();
  };
  var $T5A = function () {
    return ($T5A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_BindBuffer)) ();
  };
  var $T5B = function () {
    return ($T5B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_BufferData)) ();
  };
  var $T5C = function () {
    return ($T5C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_BufferSubData)) ();
  };
  var $T5D = function () {
    return ($T5D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_MapBuffer)) ();
  };
  var $T5E = function () {
    return ($T5E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_UnmapBuffer)) ();
  };
  var $T5F = function () {
    return ($T5F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_EnableVertexAttribArray)) ();
  };
  var $T60 = function () {
    return ($T60 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DisableVertexAttribArray)) ();
  };
  var $T61 = function () {
    return ($T61 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_G_VertexAttribPointer)) ();
  };
  var $T62 = function () {
    return ($T62 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_ClearColor)) ();
  };
  var $T63 = function () {
    return ($T63 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_ClearDepth)) ();
  };
  var $T64 = function () {
    return ($T64 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_ClearStencil)) ();
  };
  var $T65 = function () {
    return ($T65 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_G_Clear)) ();
  };
  var $T66 = function () {
    return ($T66 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DrawBuffers)) ();
  };
  var $T67 = function () {
    return ($T67 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_ReadPixels)) ();
  };
  var $T68 = function () {
    return ($T68 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DrawRangeElements)) ();
  };
  var $T69 = function () {
    return ($T69 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DrawArrays)) ();
  };
  var $T6A = function () {
    return ($T6A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GenQueries)) ();
  };
  var $T6B = function () {
    return ($T6B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DeleteQueries)) ();
  };
  var $T6C = function () {
    return ($T6C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_BeginQuery)) ();
  };
  var $T6D = function () {
    return ($T6D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_EndQuery)) ();
  };
  var $T6E = function () {
    return ($T6E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GetQueryObjectiv)) ();
  };
  var $T6F = function () {
    return ($T6F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_CreateShader)) ();
  };
  var $T70 = function () {
    return ($T70 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DeleteShader)) ();
  };
  var $T71 = function () {
    return ($T71 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_ShaderSource)) ();
  };
  var $T72 = function () {
    return ($T72 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_CompileShader)) ();
  };
  var $T73 = function () {
    return ($T73 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_CreateProgram)) ();
  };
  var $T74 = function () {
    return ($T74 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DeleteProgram)) ();
  };
  var $T75 = function () {
    return ($T75 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_AttachShader)) ();
  };
  var $T76 = function () {
    return ($T76 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DetachShader)) ();
  };
  var $T77 = function () {
    return ($T77 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_LinkProgram)) ();
  };
  var $T78 = function () {
    return ($T78 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_UseProgram)) ();
  };
  var $T79 = function () {
    return ($T79 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_Uniform1i)) ();
  };
  var $T7A = function () {
    return ($T7A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_Uniform4fv)) ();
  };
  var $T7B = function () {
    return ($T7B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GetShaderiv)) ();
  };
  var $T7C = function () {
    return ($T7C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GetProgramiv)) ();
  };
  var $T7D = function () {
    return ($T7D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GetUniformLocation)) ();
  };
  var $T7E = function () {
    return ($T7E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GetAttribLocation)) ();
  };
  var $T7F = function () {
    return ($T7F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_BindAttribLocation)) ();
  };
  var $T80 = function () {
    return ($T80 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_IsShader)) ();
  };
  var $T81 = function () {
    return ($T81 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_IsProgram)) ();
  };
  var $T82 = function () {
    return ($T82 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GetShaderInfoLog)) ();
  };
  var $T83 = function () {
    return ($T83 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GetProgramInfoLog)) ();
  };
  var $T84 = function () {
    return ($T84 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_Flush)) ();
  };
  var $T85 = function () {
    return ($T85 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException)) ();
  };
  var $T86 = function () {
    return ($T86 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GenFramebuffers)) ();
  };
  var $T87 = function () {
    return ($T87 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DeleteFramebuffers)) ();
  };
  var $T88 = function () {
    return ($T88 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_G_BindFramebuffer)) ();
  };
  var $T89 = function () {
    return ($T89 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_FramebufferTexture2D)) ();
  };
  var $T8A = function () {
    return ($T8A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_FramebufferRenderbuffer)) ();
  };
  var $T8B = function () {
    return ($T8B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GenerateMipmap)) ();
  };
  var $T8C = function () {
    return ($T8C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GenRenderbuffers)) ();
  };
  var $T8D = function () {
    return ($T8D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DeleteRenderbuffers)) ();
  };
  var $T8E = function () {
    return ($T8E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_BindRenderbuffer)) ();
  };
  var $T8F = function () {
    return ($T8F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_RenderbufferStorage)) ();
  };
  var $T90 = function () {
    return ($T90 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_VertexAttribDivisor)) ();
  };
  var $T91 = function () {
    return ($T91 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DrawElementsInstanced)) ();
  };
  var $T92 = function () {
    return ($T92 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_ColorMaskIndexedEXT)) ();
  };
  var $T93 = function () {
    return ($T93 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DebugMessageCallback)) ();
  };
  var $T94 = function () {
    return ($T94 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_DebugMessageControl)) ();
  };
  var $T95 = function () {
    return ($T95 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_StringMarkerGREMEDY)) ();
  };
  var $T96 = function () {
    return ($T96 = JSIL.Memoize(System.Array.Of($asm01.System.Boolean))) ();
  };
  var $T97 = function () {
    return ($T97 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.CompareFunction, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T98 = function () {
    return ($T98 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_OpenGLTexture))) ();
  };
  var $T99 = function () {
    return ($T99 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T9A = function () {
    return ($T9A = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.Blend, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T9B = function () {
    return ($T9B = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.BlendFunction, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T9C = function () {
    return ($T9C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthStencilState)) ();
  };
  var $T9D = function () {
    return ($T9D = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.StencilOperation, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T9E = function () {
    return ($T9E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SetDataOptions)) ();
  };
  var $T9F = function () {
    return ($T9F = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $TA0 = function () {
    return ($TA0 = JSIL.Memoize($asm01.System.Text.Encoding)) ();
  };
  var $TA1 = function () {
    return ($TA1 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $TA2 = function () {
    return ($TA2 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture)) ();
  };
  var $TA3 = function () {
    return ($TA3 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $TA4 = function () {
    return ($TA4 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat)) ();
  };
  var $TA5 = function () {
    return ($TA5 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture"), [
        $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.Type"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"), $asm01.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Int64")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int64")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.String"), [$jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.SByte")])]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")]), [$asm01.TypeRef("System.IntPtr")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.NoSuitableGraphicsDeviceException"), null))) ();
  };

  function OpenGLDevice__ctor (presentationParameters) {
    var numSamplers = new JSIL.BoxedVariable(0);
    var numAttributes = new JSIL.BoxedVariable(0);
    var numAttachments = new JSIL.BoxedVariable(0);
    this.alphaBlendEnable = false;
    this.blendColor = $T02().Color$Transparent$value.MemberwiseClone();
    this.blendOp = $T03().Add;
    this.blendOpAlpha = $T03().Add;
    this.srcBlend = $T04().One;
    this.dstBlend = $T04().Zero;
    this.srcBlendAlpha = $T04().One;
    this.dstBlendAlpha = $T04().Zero;
    this.colorWriteEnable = $T05().All;
    this.colorWriteEnable1 = $T05().All;
    this.colorWriteEnable2 = $T05().All;
    this.colorWriteEnable3 = $T05().All;
    this.zEnable = false;
    this.zWriteEnable = false;
    this.depthFunc = $T06().Less;
    this.stencilEnable = false;
    this.stencilWriteMask = -1;
    this.separateStencilEnable = false;
    this.stencilRef = 0;
    this.stencilMask = -1;
    this.stencilFunc = $T06().Always;
    this.stencilFail = $T07().Keep;
    this.stencilZFail = $T07().Keep;
    this.stencilPass = $T07().Keep;
    this.ccwStencilFunc = $T06().Always;
    this.ccwStencilFail = $T07().Keep;
    this.ccwStencilZFail = $T07().Keep;
    this.ccwStencilPass = $T07().Keep;
    this.scissorTestEnable = false;
    this.cullFrontFace = $T08().None;
    this.fillMode = $T09().Solid;
    this.depthBias = 0;
    this.slopeScaleDepthBias = 0;
    this.scissorRectangle = new ($T0A())(0, 0, 0, 0);
    this.viewport = new ($T0A())(0, 0, 0, 0);
    this.depthRangeMin = 0;
    this.depthRangeMax = 1;
    this.currentVertexBuffer = 0;
    this.currentIndexBuffer = 0;
    this.currentReadFramebuffer = 0;
    this.currentDrawFramebuffer = 0;
    this.targetFramebuffer = 0;
    this.currentClearColor = $S00().Construct(0, 0, 0, 0);
    this.currentClearDepth = 1;
    this.currentClearStencil = 0;
    this.DebugCall = $T0C().New($thisType, $thisType.DebugCallback, function () { return JSIL.GetMethodInfo($thisType, "DebugCallback", new JSIL.MethodSignature(null, [
            $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum, 
            $asm01.System.UInt32, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum, 
            $asm01.System.Int32, $asm01.System.IntPtr, 
            $asm01.System.IntPtr
          ]), true); });
    this.glContext = $T0D().SDL_GL_CreateContext(presentationParameters.PresentationParameters$DeviceWindowHandle$value.MemberwiseClone()).MemberwiseClone();
    this.LoadGLEntryPoints();
    $T0E().WriteLine(JSIL.ConcatString("OpenGL Device: ", this.glGetString($T10().GL_RENDERER)));
    $T0E().WriteLine(JSIL.ConcatString("OpenGL Driver: ", this.glGetString($T10().GL_VERSION)));
    $T0E().WriteLine(JSIL.ConcatString("OpenGL Vendor: ", this.glGetString($T10().GL_VENDOR)));
    this.OpenGLDevice$Extensions$value = this.glGetString($T10().GL_EXTENSIONS);
    this.OpenGLDevice$SupportsS3tc$value = ((this.OpenGLDevice$Extensions$value.indexOf("GL_EXT_texture_compression_s3tc") != -1)) || 
    ((this.OpenGLDevice$Extensions$value.indexOf("GL_OES_texture_compression_S3TC") != -1)) || 
    ((this.OpenGLDevice$Extensions$value.indexOf("GL_EXT_texture_compression_dxt3") != -1)) || 
    ((this.OpenGLDevice$Extensions$value.indexOf("GL_EXT_texture_compression_dxt5") != -1));
    this.OpenGLDevice$SupportsDxt1$value = this.OpenGLDevice$SupportsS3tc$value || 
    ((this.OpenGLDevice$Extensions$value.indexOf("GL_EXT_texture_compression_dxt1") != -1));
    this.OpenGLDevice$Backbuffer$value = new ($T11())(this, $T12().DefaultBackBufferWidth, $T12().DefaultBackBufferHeight, presentationParameters.PresentationParameters$DepthStencilFormat$value);
    this.glGetIntegerv($T10().GL_MAX_TEXTURE_IMAGE_UNITS, /* ref */ numSamplers);
    this.OpenGLDevice$Textures$value = JSIL.Array.New($T13(), numSamplers.get());

    for (var i = 0; i < (numSamplers.get() | 0); i = ((i + 1) | 0)) {
      this.OpenGLDevice$Textures$value[i] = $T13().NullTexture;
    }
    this.OpenGLDevice$MaxTextureSlots$value = (numSamplers.get() | 0);
    this.glGetIntegerv($T10().GL_MAX_VERTEX_ATTRIBS, /* ref */ numAttributes);
    this.OpenGLDevice$Attributes$value = JSIL.Array.New($T14(), numAttributes.get());
    this.OpenGLDevice$AttributeEnabled$value = JSIL.Array.New($T15(), numAttributes.get());
    this.previousAttributeEnabled = JSIL.Array.New($T15(), numAttributes.get());
    this.previousAttributeDivisor = JSIL.Array.New($T01(), numAttributes.get());

    for (i = 0; i < (numAttributes.get() | 0); i = ((i + 1) | 0)) {
      this.OpenGLDevice$Attributes$value[i] = new ($T14())();
      this.OpenGLDevice$AttributeEnabled$value[i] = false;
      this.previousAttributeEnabled[i] = false;
      this.previousAttributeDivisor[i] = 0;
    }
    this.glGetIntegerv($T10().GL_MAX_DRAW_BUFFERS, /* ref */ numAttachments);
    this.currentAttachments = JSIL.Array.New($T16(), numAttachments.get());
    this.currentAttachmentFaces = JSIL.Array.New($T10(), numAttachments.get());
    this.drawBuffersArray = JSIL.Array.New($T10(), numAttachments.get());

    for (i = 0; i < (numAttachments.get() | 0); i = ((i + 1) | 0)) {
      this.currentAttachments[i] = 0;
      this.currentAttachmentFaces[i] = $T10().GL_TEXTURE_2D;
      this.drawBuffersArray[i] = $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T10().GL_COLOR_ATTACHMENT0 + i);
    }
    this.currentDrawBuffers = 0;
    this.currentRenderbuffer = 0;
    this.currentDepthStencilFormat = $T17().None;
    this.glGenFramebuffers(1, /* ref */ new JSIL.MemberReference(this, "targetFramebuffer"));
  };

  function OpenGLDevice_ApplyRasterizerState (rasterizerState, renderTargetBound) {
    if (rasterizerState.RasterizerState$ScissorTestEnable$value !== this.scissorTestEnable) {
      this.scissorTestEnable = rasterizerState.RasterizerState$ScissorTestEnable$value;
      this.ToggleGLState($T10().GL_SCISSOR_TEST, this.scissorTestEnable);
    }
    if (renderTargetBound) {
      var actualMode = rasterizerState.RasterizerState$CullMode$value;
    } else if (rasterizerState.RasterizerState$CullMode$value === $T08().None) {
      actualMode = rasterizerState.RasterizerState$CullMode$value;
    } else {
      actualMode = (
        (rasterizerState.RasterizerState$CullMode$value === $T08().CullClockwiseFace)
           ? $T08().CullCounterClockwiseFace
           : $T08().CullClockwiseFace)
      ;
    }
    if (actualMode !== this.cullFrontFace) {
      if ((actualMode === $T08().None) !== (this.cullFrontFace === $T08().None)) {
        this.ToggleGLState($T10().GL_CULL_FACE, actualMode !== $T08().None);
        if (actualMode !== $T08().None) {
          this.glCullFace($T10().GL_BACK);
        }
      }
      this.cullFrontFace = actualMode;
      if (this.cullFrontFace !== $T08().None) {
        this.glFrontFace($T1A().FrontFace.get_Item(this.cullFrontFace));
      }
    }
    if (rasterizerState.RasterizerState$FillMode$value !== this.fillMode) {
      this.fillMode = rasterizerState.RasterizerState$FillMode$value;
      this.glPolygonMode($T10().GL_FRONT_AND_BACK, $T1A().GLFillMode.get_Item(this.fillMode));
    }
    if (this.zEnable) {
      if (!((+rasterizerState.RasterizerState$DepthBias$value === +this.depthBias) && (+rasterizerState.RasterizerState$SlopeScaleDepthBias$value === +this.slopeScaleDepthBias))) {
        this.depthBias = +rasterizerState.RasterizerState$DepthBias$value;
        this.slopeScaleDepthBias = +rasterizerState.RasterizerState$SlopeScaleDepthBias$value;
        if (!((+this.depthBias !== 0) || (+this.slopeScaleDepthBias !== 0))) {
          this.glDisable($T10().GL_POLYGON_OFFSET_FILL);
        } else {
          this.glEnable($T10().GL_POLYGON_OFFSET_FILL);
          this.glPolygonOffset(this.slopeScaleDepthBias, this.depthBias);
        }
      }
    }
  };

  function OpenGLDevice_BindDrawFramebuffer (handle) {
    if ((handle >>> 0) !== (this.currentDrawFramebuffer >>> 0)) {
      this.glBindFramebuffer($T10().GL_DRAW_FRAMEBUFFER, handle);
      this.currentDrawFramebuffer = (handle >>> 0);
    }
  };

  function OpenGLDevice_BindFramebuffer (handle) {
    if (!(((this.currentReadFramebuffer >>> 0) === (handle >>> 0)) || ((this.currentDrawFramebuffer >>> 0) === (handle >>> 0)))) {
      this.glBindFramebuffer($T10().GL_FRAMEBUFFER, handle);
      this.currentReadFramebuffer = (handle >>> 0);
      this.currentDrawFramebuffer = (handle >>> 0);
    } else if ((this.currentReadFramebuffer >>> 0) !== (handle >>> 0)) {
      this.BindReadFramebuffer(handle);
    } else if ((this.currentDrawFramebuffer >>> 0) !== (handle >>> 0)) {
      this.BindDrawFramebuffer(handle);
    }
  };

  function OpenGLDevice_BindIndexBuffer (buffer) {
    if ((buffer.OpenGLIndexBuffer$Handle$value >>> 0) !== (this.currentIndexBuffer >>> 0)) {
      this.glBindBuffer($T10().GL_ELEMENT_ARRAY_BUFFER, buffer.OpenGLIndexBuffer$Handle$value);
      this.currentIndexBuffer = (buffer.OpenGLIndexBuffer$Handle$value >>> 0);
    }
  };

  function OpenGLDevice_BindReadFramebuffer (handle) {
    if ((handle >>> 0) !== (this.currentReadFramebuffer >>> 0)) {
      this.glBindFramebuffer($T10().GL_READ_FRAMEBUFFER, handle);
      this.currentReadFramebuffer = (handle >>> 0);
    }
  };

  function OpenGLDevice_BindTexture (texture) {
    if (texture.OpenGLTexture$Target$value !== this.OpenGLDevice$Textures$value[0].OpenGLTexture$Target$value) {
      this.glBindTexture(this.OpenGLDevice$Textures$value[0].OpenGLTexture$Target$value, 0);
    }
    if (texture !== this.OpenGLDevice$Textures$value[0]) {
      this.glBindTexture(texture.OpenGLTexture$Target$value, texture.OpenGLTexture$Handle$value);
    }
    this.OpenGLDevice$Textures$value[0] = texture;
  };

  function OpenGLDevice_BindVertexBuffer (buffer) {
    if ((buffer.OpenGLVertexBuffer$Handle$value >>> 0) !== (this.currentVertexBuffer >>> 0)) {
      this.glBindBuffer($T10().GL_ARRAY_BUFFER, buffer.OpenGLVertexBuffer$Handle$value);
      this.currentVertexBuffer = (buffer.OpenGLVertexBuffer$Handle$value >>> 0);
    }
  };

  function OpenGLDevice_Clear (options, color, depth, stencil) {
    if (this.scissorTestEnable) {
      this.glDisable($T10().GL_SCISSOR_TEST);
    }
    if (!this.zWriteEnable) {
      this.glDepthMask(true);
    }
    if ((this.stencilWriteMask | 0) !== -1) {
      this.glStencilMask(-1);
    }
    var clearMask = $T10().GL_ZERO;
    if ($T1E().$Cast(options & $T1E().Target) === $T1E().Target) {
      clearMask = $T10().$Cast(clearMask | $T10().GL_COLOR_BUFFER_BIT);
      if (!color.Equals(this.currentClearColor.MemberwiseClone())) {
        this.glClearColor(color.X, color.Y, color.Z, color.W);
        this.currentClearColor = color.MemberwiseClone();
      }
    }
    if ($T1E().$Cast(options & $T1E().DepthBuffer) === $T1E().DepthBuffer) {
      clearMask = $T10().$Cast(clearMask | $T10().GL_DEPTH_BUFFER_BIT);
      if (+depth !== +this.currentClearDepth) {
        this.glClearDepth(depth);
        this.currentClearDepth = +depth;
      }
    }
    if ($T1E().$Cast(options & $T1E().Stencil) === $T1E().Stencil) {
      clearMask = $T10().$Cast(clearMask | $T10().GL_STENCIL_BUFFER_BIT);
      if ((stencil | 0) !== (this.currentClearStencil | 0)) {
        this.glClearStencil(stencil);
        this.currentClearStencil = (stencil | 0);
      }
    }
    this.glClear(clearMask);
    if (this.scissorTestEnable) {
      this.glEnable($T10().GL_SCISSOR_TEST);
    }
    if (!this.zWriteEnable) {
      this.glDepthMask(false);
    }
    if ((this.stencilWriteMask | 0) !== -1) {
      this.glStencilMask(this.stencilWriteMask);
    }
  };

  function OpenGLDevice_CreateTexture (target, format, hasMipmaps) {
    var handle = new JSIL.BoxedVariable(0);
    this.glGenTextures(1, /* ref */ handle);
    var result = $S01().Construct(handle.get(), target, format, hasMipmaps);
    this.BindTexture(result);
    this.glTexParameteri(result.OpenGLTexture$Target$value, $T10().GL_TEXTURE_WRAP_S, ($T1A().Wrap.get_Item(result.WrapS)).valueOf());
    this.glTexParameteri(result.OpenGLTexture$Target$value, $T10().GL_TEXTURE_WRAP_T, ($T1A().Wrap.get_Item(result.WrapT)).valueOf());
    this.glTexParameteri(result.OpenGLTexture$Target$value, $T10().GL_TEXTURE_WRAP_R, ($T1A().Wrap.get_Item(result.WrapR)).valueOf());
    this.glTexParameteri(result.OpenGLTexture$Target$value, $T10().GL_TEXTURE_MAG_FILTER, ($T1A().MagFilter.get_Item(result.Filter)).valueOf());
    this.glTexParameteri(result.OpenGLTexture$Target$value, $T10().GL_TEXTURE_MIN_FILTER, ((
          result.OpenGLTexture$HasMipmaps$value
             ? $T1A().MinMipFilter.get_Item(result.Filter)
             : $T1A().MinFilter.get_Item(result.Filter))
      ).valueOf());
    this.glTexParameterf(result.OpenGLTexture$Target$value, $T10().GL_TEXTURE_MAX_ANISOTROPY_EXT, (
        (result.Filter === $T24().Anisotropic)
           ? $T25().Max(result.Anistropy, 1)
           : 1)
    );
    this.glTexParameteri(result.OpenGLTexture$Target$value, $T10().GL_TEXTURE_BASE_LEVEL, result.MaxMipmapLevel);
    this.glTexParameterf(result.OpenGLTexture$Target$value, $T10().GL_TEXTURE_LOD_BIAS, result.LODBias);
    return result;
  };

  function OpenGLDevice_DebugCallback (source, type, id, severity, length, message, userParam) {
    $T0E().WriteLine("{0}\n\tSource: {1}\n\tType: {2}\n\tSeverity: {3}", JSIL.Array.New($T27(), [$T28().PtrToStringAnsi(message.MemberwiseClone()), (source).toString(), (type).toString(), (severity).toString()]));
    if (type === $T10().GL_DEBUG_TYPE_ERROR_ARB) {
      throw $S02().Construct("ARB_debug_output found an error.");
    }
  };

  function OpenGLDevice_DeleteIndexBuffer (buffer) {
    if ((buffer.OpenGLIndexBuffer$Handle$value >>> 0) === (this.currentIndexBuffer >>> 0)) {
      this.glBindBuffer($T10().GL_ELEMENT_ARRAY_BUFFER, 0);
      this.currentIndexBuffer = 0;
    }
    var handle = new JSIL.BoxedVariable(buffer.OpenGLIndexBuffer$Handle$value);
    this.glDeleteBuffers(1, /* ref */ handle);
  };

  function OpenGLDevice_DeleteRenderbuffer ($renderbuffer) {
    var renderbuffer = new JSIL.BoxedVariable($renderbuffer);
    if ((renderbuffer.get() >>> 0) === (this.currentRenderbuffer >>> 0)) {
      this.currentRenderbuffer = 4294967295;
    }
    this.glDeleteRenderbuffers(1, /* ref */ renderbuffer);
  };

  function OpenGLDevice_DeleteTexture (texture) {

    for (var i = 0; i < (this.currentAttachments.length | 0); i = ((i + 1) | 0)) {
      if ((texture.OpenGLTexture$Handle$value >>> 0) === (this.currentAttachments[i] >>> 0)) {
        this.currentAttachments[i] = 4294967295;
      }
    }
    var handle = new JSIL.BoxedVariable(texture.OpenGLTexture$Handle$value);
    this.glDeleteTextures(1, /* ref */ handle);
  };

  function OpenGLDevice_DeleteVertexBuffer (buffer) {
    if ((buffer.OpenGLVertexBuffer$Handle$value >>> 0) === (this.currentVertexBuffer >>> 0)) {
      this.glBindBuffer($T10().GL_ARRAY_BUFFER, 0);
      this.currentVertexBuffer = 0;
    }
    var handle = new JSIL.BoxedVariable(buffer.OpenGLVertexBuffer$Handle$value);
    this.glDeleteBuffers(1, /* ref */ handle);
  };

  function OpenGLDevice_Dispose () {
    this.glDeleteFramebuffers(1, /* ref */ new JSIL.MemberReference(this, "targetFramebuffer"));
    this.targetFramebuffer = 0;
    (this.OpenGLDevice$Backbuffer$value).Dispose();
    this.OpenGLDevice$Backbuffer$value = null;
    $T0D().SDL_GL_DeleteContext(this.glContext.MemberwiseClone());
  };

  function OpenGLDevice_FlushGLVertexAttributes () {

    for (var i = 0; i < (this.OpenGLDevice$Attributes$value.length | 0); i = ((i + 1) | 0)) {
      if (this.OpenGLDevice$AttributeEnabled$value[i]) {
        this.OpenGLDevice$AttributeEnabled$value[i] = false;
        if (!this.previousAttributeEnabled[i]) {
          this.glEnableVertexAttribArray(i);
          this.previousAttributeEnabled[i] = true;
        }
      } else if (this.previousAttributeEnabled[i]) {
        this.glDisableVertexAttribArray(i);
        this.previousAttributeEnabled[i] = false;
      }
      if ((this.OpenGLDevice$Attributes$value[i].Divisor | 0) !== (this.previousAttributeDivisor[i] | 0)) {
        this.glVertexAttribDivisor(i, this.OpenGLDevice$Attributes$value[i].Divisor);
        this.previousAttributeDivisor[i] = (this.OpenGLDevice$Attributes$value[i].Divisor | 0);
      }
    }
  };

  function OpenGLDevice_GenerateTargetMipmaps (target) {
    var prevTex = this.OpenGLDevice$Textures$value[0];
    this.BindTexture(target);
    this.glGenerateMipmap(target.OpenGLTexture$Target$value);
    this.BindTexture(prevTex);
  };

  function OpenGLDevice_GenRenderbuffer (width, height, format) {
    var handle = new JSIL.BoxedVariable(0);
    this.glGenRenderbuffers(1, /* ref */ handle);
    this.glBindRenderbuffer($T10().GL_RENDERBUFFER, handle.get());
    this.glRenderbufferStorage($T10().GL_RENDERBUFFER, $T1A().DepthStorage.get_Item(format), width, height);
    this.glBindRenderbuffer($T10().GL_RENDERBUFFER, 0);
    return handle.get();
  };

  function OpenGLDevice_get_AttributeEnabled () {
    return this.OpenGLDevice$AttributeEnabled$value;
  };

  function OpenGLDevice_get_Attributes () {
    return this.OpenGLDevice$Attributes$value;
  };

  function OpenGLDevice_get_Backbuffer () {
    return this.OpenGLDevice$Backbuffer$value;
  };

  function OpenGLDevice_get_CurrentDrawFramebuffer () {
    return this.currentDrawFramebuffer;
  };

  function OpenGLDevice_get_CurrentReadFramebuffer () {
    return this.currentReadFramebuffer;
  };

  function OpenGLDevice_get_Extensions () {
    return this.OpenGLDevice$Extensions$value;
  };

  function OpenGLDevice_get_MaxTextureSlots () {
    return this.OpenGLDevice$MaxTextureSlots$value;
  };

  function OpenGLDevice_get_ReferenceStencil () {
    return this.stencilRef;
  };

  function OpenGLDevice_get_SupportsDxt1 () {
    return this.OpenGLDevice$SupportsDxt1$value;
  };

  function OpenGLDevice_get_SupportsHardwareInstancing () {
    return this.OpenGLDevice$SupportsHardwareInstancing$value;
  };

  function OpenGLDevice_get_SupportsS3tc () {
    return this.OpenGLDevice$SupportsS3tc$value;
  };

  function OpenGLDevice_get_Textures () {
    return this.OpenGLDevice$Textures$value;
  };

  function OpenGLDevice_GetIndexBufferData$b1 (T, handle, offsetInBytes, data, startIndex, elementCount) {
    this.BindIndexBuffer(handle);
    var ptr = this.glMapBuffer($T10().GL_ELEMENT_ARRAY_BUFFER, $T10().GL_READ_ONLY).MemberwiseClone();
    $S03().Call($T26().prototype, "_ctor", null, ptr, $T2D().op_Addition(
        ptr.ToInt64(), 
        $T2D().FromNumber(offsetInBytes)
      ));
    if ($T20().op_Equality(T, $T2E().__Type__)) {
      var buffer = $T2F().$As(data);
      $S04().CallStatic($T28(), "Copy", null, ptr.MemberwiseClone(), buffer, 0, buffer.length);
    } else {
      var elementSizeInBytes = ($S05().CallStatic($T28(), "SizeOf", null, T) | 0);
      buffer = JSIL.Array.New($T2E(), Math.imul(elementCount, elementSizeInBytes));
      $S04().CallStatic($T28(), "Copy", null, ptr.MemberwiseClone(), buffer, 0, buffer.length);
      $T30().BlockCopy(
        buffer, 
        0, 
        data, 
        Math.imul(startIndex, elementSizeInBytes), 
        Math.imul(elementCount, elementSizeInBytes)
      );
    }
    this.glUnmapBuffer($T10().GL_ELEMENT_ARRAY_BUFFER);
  };

  function OpenGLDevice_GetVertexBufferData$b1 (T, handle, offsetInBytes, data, startIndex, elementCount, vertexStride) {
    this.BindVertexBuffer(handle);
    var ptr = this.glMapBuffer($T10().GL_ARRAY_BUFFER, $T10().GL_READ_ONLY).MemberwiseClone();
    $S03().Call($T26().prototype, "_ctor", null, ptr, $T2D().op_Addition(
        ptr.ToInt64(), 
        $T2D().FromNumber(offsetInBytes)
      ));
    if ($T20().op_Equality(T, $T2E().__Type__)) {
      var buffer = $T2F().$As(data);
      $S04().CallStatic($T28(), "Copy", null, ptr.MemberwiseClone(), buffer, 0, buffer.length);
    } else {
      buffer = JSIL.Array.New($T2E(), ((Math.imul(elementCount, vertexStride) - (offsetInBytes | 0)) | 0));
      $S04().CallStatic($T28(), "Copy", null, ptr.MemberwiseClone(), buffer, 0, buffer.length);
      var dataHandle = $T31().Alloc(data, $T32().Pinned).MemberwiseClone();
      var dataPtr = $S06().CallStatic($T26(), "op_Explicit", null, $T2D().op_Addition(
          (dataHandle.AddrOfPinnedObject().MemberwiseClone()).ToInt64(), 
          $T2D().FromNumber(Math.imul(startIndex, $S05().CallStatic($T28(), "SizeOf", null, T)))
        )).MemberwiseClone();
      var dataSize = ($S05().CallStatic($T28(), "SizeOf", null, T) | 0);
      if (dataSize === (vertexStride | 0)) {
        $S07().CallStatic($T28(), "Copy", null, buffer, 0, dataPtr.MemberwiseClone(), buffer.length);
      } else {

        for (var i = 0; i < (elementCount | 0); i = ((i + 1) | 0)) {
          $S07().CallStatic($T28(), "Copy", null, buffer, Math.imul(i, vertexStride), dataPtr.MemberwiseClone(), dataSize);
          dataPtr = $S06().CallStatic($T26(), "op_Explicit", null, $T2D().op_Addition(
              dataPtr.ToInt64(), 
              $T2D().FromNumber(dataSize)
            )).MemberwiseClone();
        }
      }
      dataHandle.Free();
    }
    this.glUnmapBuffer($T10().GL_ARRAY_BUFFER);
  };

  function OpenGLDevice_glGetString (pname) {
    return $S08().Construct($S09().CallStatic($T26(), "op_Explicit", null, this.INTERNAL_glGetString(pname).MemberwiseClone()).cast(JSIL.Pointer.Of($asm01.System.SByte)));
  };

  function OpenGLDevice_LoadGLEntryPoints ($exception) {
    try {
      this.INTERNAL_glGetString = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGetString").MemberwiseClone(), $T33().__Type__);
      this.glGetIntegerv = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGetIntegerv").MemberwiseClone(), $T34().__Type__);
      this.glEnable = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glEnable").MemberwiseClone(), $T35().__Type__);
      this.glDisable = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDisable").MemberwiseClone(), $T36().__Type__);
      this.glViewport = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glViewport").MemberwiseClone(), $T37().__Type__);
      this.glDepthRange = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDepthRange").MemberwiseClone(), $T38().__Type__);
      this.glScissor = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glScissor").MemberwiseClone(), $T39().__Type__);
      this.glBlendColor = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glBlendColor").MemberwiseClone(), $T3A().__Type__);
      this.glBlendFuncSeparate = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glBlendFuncSeparate").MemberwiseClone(), $T3B().__Type__);
      this.glBlendEquationSeparate = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glBlendEquationSeparate").MemberwiseClone(), $T3C().__Type__);
      this.glColorMask = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glColorMask").MemberwiseClone(), $T3D().__Type__);
      this.glDepthMask = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDepthMask").MemberwiseClone(), $T3E().__Type__);
      this.glDepthFunc = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDepthFunc").MemberwiseClone(), $T3F().__Type__);
      this.glStencilMask = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glStencilMask").MemberwiseClone(), $T40().__Type__);
      this.glStencilFuncSeparate = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glStencilFuncSeparate").MemberwiseClone(), $T41().__Type__);
      this.glStencilOpSeparate = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glStencilOpSeparate").MemberwiseClone(), $T42().__Type__);
      this.glStencilFunc = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glStencilFunc").MemberwiseClone(), $T43().__Type__);
      this.glStencilOp = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glStencilOp").MemberwiseClone(), $T44().__Type__);
      this.glCullFace = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glCullFace").MemberwiseClone(), $T45().__Type__);
      this.glFrontFace = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glFrontFace").MemberwiseClone(), $T46().__Type__);
      this.glPolygonMode = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glPolygonMode").MemberwiseClone(), $T47().__Type__);
      this.glPolygonOffset = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glPolygonOffset").MemberwiseClone(), $T48().__Type__);
      this.glGenTextures = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGenTextures").MemberwiseClone(), $T49().__Type__);
      this.glDeleteTextures = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDeleteTextures").MemberwiseClone(), $T4A().__Type__);
      this.glBindTexture = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glBindTexture").MemberwiseClone(), $T4B().__Type__);
      this.glTexImage2D = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glTexImage2D").MemberwiseClone(), $T4C().__Type__);
      this.glTexSubImage2D = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glTexSubImage2D").MemberwiseClone(), $T4D().__Type__);
      this.glCompressedTexImage2D = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glCompressedTexImage2D").MemberwiseClone(), $T4E().__Type__);
      this.glCompressedTexSubImage2D = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glCompressedTexSubImage2D").MemberwiseClone(), $T4F().__Type__);
      this.glTexImage3D = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glTexImage3D").MemberwiseClone(), $T50().__Type__);
      this.glTexSubImage3D = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glTexSubImage3D").MemberwiseClone(), $T51().__Type__);
      this.glGetTexImage = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGetTexImage").MemberwiseClone(), $T52().__Type__);
      this.glTexParameteri = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glTexParameteri").MemberwiseClone(), $T53().__Type__);
      this.glTexParameterf = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glTexParameterf").MemberwiseClone(), $T54().__Type__);
      this.glActiveTexture = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glActiveTexture").MemberwiseClone(), $T55().__Type__);
      this.glGetTexLevelParameteriv = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGetTexLevelParameteriv").MemberwiseClone(), $T56().__Type__);
      this.glPixelStorei = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glPixelStorei").MemberwiseClone(), $T57().__Type__);
      this.glGenBuffers = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGenBuffers").MemberwiseClone(), $T58().__Type__);
      this.glDeleteBuffers = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDeleteBuffers").MemberwiseClone(), $T59().__Type__);
      this.glBindBuffer = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glBindBuffer").MemberwiseClone(), $T5A().__Type__);
      this.glBufferData = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glBufferData").MemberwiseClone(), $T5B().__Type__);
      this.glBufferSubData = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glBufferSubData").MemberwiseClone(), $T5C().__Type__);
      this.glMapBuffer = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glMapBuffer").MemberwiseClone(), $T5D().__Type__);
      this.glUnmapBuffer = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glUnmapBuffer").MemberwiseClone(), $T5E().__Type__);
      this.glEnableVertexAttribArray = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glEnableVertexAttribArray").MemberwiseClone(), $T5F().__Type__);
      this.glDisableVertexAttribArray = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDisableVertexAttribArray").MemberwiseClone(), $T60().__Type__);
      this.glVertexAttribPointer = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glVertexAttribPointer").MemberwiseClone(), $T61().__Type__);
      this.glClearColor = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glClearColor").MemberwiseClone(), $T62().__Type__);
      this.glClearDepth = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glClearDepth").MemberwiseClone(), $T63().__Type__);
      this.glClearStencil = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glClearStencil").MemberwiseClone(), $T64().__Type__);
      this.glClear = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glClear").MemberwiseClone(), $T65().__Type__);
      this.glDrawBuffers = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDrawBuffers").MemberwiseClone(), $T66().__Type__);
      this.glReadPixels = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glReadPixels").MemberwiseClone(), $T67().__Type__);
      this.glDrawRangeElements = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDrawRangeElements").MemberwiseClone(), $T68().__Type__);
      this.glDrawArrays = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDrawArrays").MemberwiseClone(), $T69().__Type__);
      this.glGenQueries = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGenQueries").MemberwiseClone(), $T6A().__Type__);
      this.glDeleteQueries = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDeleteQueries").MemberwiseClone(), $T6B().__Type__);
      this.glBeginQuery = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glBeginQuery").MemberwiseClone(), $T6C().__Type__);
      this.glEndQuery = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glEndQuery").MemberwiseClone(), $T6D().__Type__);
      this.glGetQueryObjectiv = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGetQueryObjectiv").MemberwiseClone(), $T6E().__Type__);
      this.glCreateShader = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glCreateShader").MemberwiseClone(), $T6F().__Type__);
      this.glDeleteShader = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDeleteShader").MemberwiseClone(), $T70().__Type__);
      this.glShaderSource = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glShaderSource").MemberwiseClone(), $T71().__Type__);
      this.glCompileShader = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glCompileShader").MemberwiseClone(), $T72().__Type__);
      this.glCreateProgram = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glCreateProgram").MemberwiseClone(), $T73().__Type__);
      this.glDeleteProgram = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDeleteProgram").MemberwiseClone(), $T74().__Type__);
      this.glAttachShader = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glAttachShader").MemberwiseClone(), $T75().__Type__);
      this.glDetachShader = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDetachShader").MemberwiseClone(), $T76().__Type__);
      this.glLinkProgram = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glLinkProgram").MemberwiseClone(), $T77().__Type__);
      this.glUseProgram = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glUseProgram").MemberwiseClone(), $T78().__Type__);
      this.glUniform1i = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glUniform1i").MemberwiseClone(), $T79().__Type__);
      this.glUniform4fv = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glUniform4fv").MemberwiseClone(), $T7A().__Type__);
      this.glGetShaderiv = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGetShaderiv").MemberwiseClone(), $T7B().__Type__);
      this.glGetProgramiv = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGetProgramiv").MemberwiseClone(), $T7C().__Type__);
      this.glGetUniformLocation = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGetUniformLocation").MemberwiseClone(), $T7D().__Type__);
      this.glGetAttribLocation = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGetAttribLocation").MemberwiseClone(), $T7E().__Type__);
      this.glBindAttribLocation = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glBindAttribLocation").MemberwiseClone(), $T7F().__Type__);
      this.glIsShader = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glIsShader").MemberwiseClone(), $T80().__Type__);
      this.glIsProgram = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glIsProgram").MemberwiseClone(), $T81().__Type__);
      this.glGetShaderInfoLog = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGetShaderInfoLog").MemberwiseClone(), $T82().__Type__);
      this.glGetProgramInfoLog = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glGetProgramInfoLog").MemberwiseClone(), $T83().__Type__);
      this.glFlush = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glFlush").MemberwiseClone(), $T84().__Type__);
    } catch ($exception) {
      throw $S0A().Construct("OpenGL 2.1 support is required!");
    }
    try {
      this.glGenFramebuffers = $T28().GetDelegateForFunctionPointer(this.TryGetFramebufferEP("glGenFramebuffers").MemberwiseClone(), $T86().__Type__);
      this.glDeleteFramebuffers = $T28().GetDelegateForFunctionPointer(this.TryGetFramebufferEP("glDeleteFramebuffers").MemberwiseClone(), $T87().__Type__);
      this.glBindFramebuffer = $T28().GetDelegateForFunctionPointer(this.TryGetFramebufferEP("glBindFramebuffer").MemberwiseClone(), $T88().__Type__);
      this.glFramebufferTexture2D = $T28().GetDelegateForFunctionPointer(this.TryGetFramebufferEP("glFramebufferTexture2D").MemberwiseClone(), $T89().__Type__);
      this.glFramebufferRenderbuffer = $T28().GetDelegateForFunctionPointer(this.TryGetFramebufferEP("glFramebufferRenderbuffer").MemberwiseClone(), $T8A().__Type__);
      this.glGenerateMipmap = $T28().GetDelegateForFunctionPointer(this.TryGetFramebufferEP("glGenerateMipmap").MemberwiseClone(), $T8B().__Type__);
      this.glGenRenderbuffers = $T28().GetDelegateForFunctionPointer(this.TryGetFramebufferEP("glGenRenderbuffers").MemberwiseClone(), $T8C().__Type__);
      this.glDeleteRenderbuffers = $T28().GetDelegateForFunctionPointer(this.TryGetFramebufferEP("glDeleteRenderbuffers").MemberwiseClone(), $T8D().__Type__);
      this.glBindRenderbuffer = $T28().GetDelegateForFunctionPointer(this.TryGetFramebufferEP("glBindRenderbuffer").MemberwiseClone(), $T8E().__Type__);
      this.glRenderbufferStorage = $T28().GetDelegateForFunctionPointer(this.TryGetFramebufferEP("glRenderbufferStorage").MemberwiseClone(), $T8F().__Type__);
    } catch ($exception) {
      throw $S0A().Construct("OpenGL framebuffer support is required!");
    }
    this.OpenGLDevice$SupportsHardwareInstancing$value = true;
    try {
      this.glVertexAttribDivisor = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glVertexAttribDivisor").MemberwiseClone(), $T90().__Type__);
      this.glDrawElementsInstanced = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glDrawElementsInstanced").MemberwiseClone(), $T91().__Type__);
    } catch ($exception) {
      this.OpenGLDevice$SupportsHardwareInstancing$value = false;
    }
    try {
      this.glColorMaskIndexedEXT = $T28().GetDelegateForFunctionPointer($T0D().SDL_GL_GetProcAddress("glColorMaskIndexedEXT").MemberwiseClone(), $T92().__Type__);
    } catch ($exception) {
    }
    var messageCallback = $T0D().SDL_GL_GetProcAddress("glDebugMessageCallbackARB").MemberwiseClone();
    var messageControl = $T0D().SDL_GL_GetProcAddress("glDebugMessageControlARB").MemberwiseClone();
    if (!(!$T26().op_Equality(messageCallback.MemberwiseClone(), $T26().Zero.MemberwiseClone()) && !$T26().op_Equality(messageControl.MemberwiseClone(), $T26().Zero.MemberwiseClone()))) {
      $T0E().WriteLine("ARB_debug_output not supported!");
    } else {
      this.glDebugMessageCallbackARB = $T28().GetDelegateForFunctionPointer(messageCallback.MemberwiseClone(), $T93().__Type__);
      this.glDebugMessageControlARB = $T28().GetDelegateForFunctionPointer(messageControl.MemberwiseClone(), $T94().__Type__);
      this.glDebugMessageCallbackARB(this.DebugCall, $T26().Zero.MemberwiseClone());
      this.glDebugMessageControlARB(
        $T10().GL_DONT_CARE, 
        $T10().GL_DONT_CARE, 
        $T10().GL_DONT_CARE, 
        0, 
        $T26().Zero.MemberwiseClone(), 
        true
      );
      this.glDebugMessageControlARB(
        $T10().GL_DONT_CARE, 
        $T10().GL_DEBUG_TYPE_OTHER_ARB, 
        $T10().GL_DEBUG_SEVERITY_LOW_ARB, 
        0, 
        $T26().Zero.MemberwiseClone(), 
        false
      );
    }
    var stringMarkerCallback = $T0D().SDL_GL_GetProcAddress("glStringMarkerGREMEDY").MemberwiseClone();
    if ($T26().op_Equality(stringMarkerCallback.MemberwiseClone(), $T26().Zero.MemberwiseClone())) {
      $T0E().WriteLine("GREMEDY_string_marker not supported!");
    } else {
      this.glStringMarkerGREMEDY = $T28().GetDelegateForFunctionPointer(stringMarkerCallback.MemberwiseClone(), $T95().__Type__);
    }
  };

  function OpenGLDevice_ReadTargetIfApplicable$b1 (T, texture, level, data, rect) {
    var width = new JSIL.BoxedVariable(0);
    var height = new JSIL.BoxedVariable(0);
    if (!(((this.currentDrawBuffers | 0) !== 1) || 
        (this.currentAttachments === null) || ((this.currentAttachments[0] >>> 0) !== (texture.OpenGLTexture$Handle$value >>> 0)))) {
      var oldReadFramebuffer = (this.get_CurrentReadFramebuffer() >>> 0);
      if (oldReadFramebuffer !== (this.targetFramebuffer >>> 0)) {
        this.BindReadFramebuffer(this.targetFramebuffer);
      }
      var handle = $T31().Alloc(data, $T32().Pinned).MemberwiseClone();
      if (rect !== null) {
        this.glReadPixels(
          (JSIL.Nullable_Value(rect)).get_Left(), 
          (JSIL.Nullable_Value(rect)).get_Top(), 
          JSIL.Nullable_Value(rect).Width, 
          JSIL.Nullable_Value(rect).Height, 
          $T10().GL_RGBA, 
          $T10().GL_UNSIGNED_BYTE, 
          handle.AddrOfPinnedObject().MemberwiseClone()
        );
      } else {
        width.set(0);
        height.set(0);
        this.BindTexture(texture);
        this.glGetTexLevelParameteriv(texture.OpenGLTexture$Target$value, level, $T10().GL_TEXTURE_WIDTH, /* ref */ width);
        this.glGetTexLevelParameteriv(texture.OpenGLTexture$Target$value, level, $T10().GL_TEXTURE_HEIGHT, /* ref */ height);
        this.glReadPixels(
          0, 
          0, 
          width.get(), 
          height.get(), 
          $T10().GL_RGBA, 
          $T10().GL_UNSIGNED_BYTE, 
          handle.AddrOfPinnedObject().MemberwiseClone()
        );
      }
      handle.Free();
      this.BindReadFramebuffer(oldReadFramebuffer);
      var result = true;
    } else {
      result = false;
    }
    return result;
  };

  function OpenGLDevice_set_AttributeEnabled (value) {
    this.OpenGLDevice$AttributeEnabled$value = value;
  };

  function OpenGLDevice_set_Attributes (value) {
    this.OpenGLDevice$Attributes$value = value;
  };

  function OpenGLDevice_set_Backbuffer (value) {
    this.OpenGLDevice$Backbuffer$value = value;
  };

  function OpenGLDevice_set_Extensions (value) {
    this.OpenGLDevice$Extensions$value = value;
  };

  function OpenGLDevice_set_MaxTextureSlots (value) {
    this.OpenGLDevice$MaxTextureSlots$value = (value | 0);
  };

  function OpenGLDevice_set_ReferenceStencil (value) {
    if ((value | 0) !== (this.stencilRef | 0)) {
      this.stencilRef = (value | 0);
      if (this.separateStencilEnable) {
        this.glStencilFuncSeparate($T10().GL_FRONT, $T1A().CompareFunc.get_Item(this.stencilFunc), this.stencilRef, this.stencilMask);
        this.glStencilFuncSeparate($T10().GL_BACK, $T1A().CompareFunc.get_Item(this.ccwStencilFunc), this.stencilRef, this.stencilMask);
      } else {
        this.glStencilFunc($T1A().CompareFunc.get_Item(this.stencilFunc), this.stencilRef, this.stencilMask);
      }
    }
  };

  function OpenGLDevice_set_SupportsDxt1 (value) {
    this.OpenGLDevice$SupportsDxt1$value = value;
  };

  function OpenGLDevice_set_SupportsHardwareInstancing (value) {
    this.OpenGLDevice$SupportsHardwareInstancing$value = value;
  };

  function OpenGLDevice_set_SupportsS3tc (value) {
    this.OpenGLDevice$SupportsS3tc$value = value;
  };

  function OpenGLDevice_set_Textures (value) {
    this.OpenGLDevice$Textures$value = value;
  };

  function OpenGLDevice_SetBlendState (blendState) {
    var newEnable = (((blendState.BlendState$ColorSourceBlend$value).valueOf() | 0) !== 0) || 
    (blendState.BlendState$ColorDestinationBlend$value !== $T04().Zero) || 
    (((blendState.BlendState$AlphaSourceBlend$value).valueOf() | 0) !== 0) || 
    (blendState.BlendState$AlphaDestinationBlend$value !== $T04().Zero);
    if (newEnable !== this.alphaBlendEnable) {
      this.alphaBlendEnable = newEnable;
      this.ToggleGLState($T10().GL_BLEND, this.alphaBlendEnable);
    }
    if (this.alphaBlendEnable) {
      if ($T02().op_Inequality(blendState.BlendState$BlendFactor$value, this.blendColor)) {
        this.blendColor = blendState.BlendState$BlendFactor$value.MemberwiseClone();
        this.glBlendColor(
          +((+((this.blendColor).get_R()) / 255)), 
          +((+((this.blendColor).get_G()) / 255)), 
          +((+((this.blendColor).get_B()) / 255)), 
          +((+((this.blendColor).get_A()) / 255))
        );
      }
      if (!(!((blendState.BlendState$ColorSourceBlend$value !== this.srcBlend) || 
            (blendState.BlendState$ColorDestinationBlend$value !== this.dstBlend) || 
            (blendState.BlendState$AlphaSourceBlend$value !== this.srcBlendAlpha)) && (blendState.BlendState$AlphaDestinationBlend$value === this.dstBlendAlpha))) {
        this.srcBlend = blendState.BlendState$ColorSourceBlend$value;
        this.dstBlend = blendState.BlendState$ColorDestinationBlend$value;
        this.srcBlendAlpha = blendState.BlendState$AlphaSourceBlend$value;
        this.dstBlendAlpha = blendState.BlendState$AlphaDestinationBlend$value;
        this.glBlendFuncSeparate(
          $T1A().BlendMode.get_Item(this.srcBlend), 
          $T1A().BlendMode.get_Item(this.dstBlend), 
          $T1A().BlendMode.get_Item(this.srcBlendAlpha), 
          $T1A().BlendMode.get_Item(this.dstBlendAlpha)
        );
      }
      if (!((blendState.BlendState$ColorBlendFunction$value === this.blendOp) && (blendState.BlendState$AlphaBlendFunction$value === this.blendOpAlpha))) {
        this.blendOp = blendState.BlendState$ColorBlendFunction$value;
        this.blendOpAlpha = blendState.BlendState$AlphaBlendFunction$value;
        this.glBlendEquationSeparate(
          $T1A().BlendEquation.get_Item(this.blendOp), 
          $T1A().BlendEquation.get_Item(this.blendOpAlpha)
        );
      }
    }
    if (blendState.BlendState$ColorWriteChannels$value !== this.colorWriteEnable) {
      this.colorWriteEnable = blendState.BlendState$ColorWriteChannels$value;
      this.glColorMask($T05().$Cast(this.colorWriteEnable & $T05().Red) !== $T05().None, $T05().$Cast(this.colorWriteEnable & $T05().Green) !== $T05().None, $T05().$Cast(this.colorWriteEnable & $T05().Blue) !== $T05().None, $T05().$Cast(this.colorWriteEnable & $T05().Alpha) !== $T05().None);
    }
    if (blendState.BlendState$ColorWriteChannels1$value !== this.colorWriteEnable1) {
      this.colorWriteEnable1 = blendState.BlendState$ColorWriteChannels1$value;
      this.glColorMaskIndexedEXT(
        1, 
        $T05().$Cast(this.colorWriteEnable1 & $T05().Red) !== $T05().None, 
        $T05().$Cast(this.colorWriteEnable1 & $T05().Green) !== $T05().None, 
        $T05().$Cast(this.colorWriteEnable1 & $T05().Blue) !== $T05().None, 
        $T05().$Cast(this.colorWriteEnable1 & $T05().Alpha) !== $T05().None
      );
    }
    if (blendState.BlendState$ColorWriteChannels2$value !== this.colorWriteEnable2) {
      this.colorWriteEnable2 = blendState.BlendState$ColorWriteChannels2$value;
      this.glColorMaskIndexedEXT(
        2, 
        $T05().$Cast(this.colorWriteEnable2 & $T05().Red) !== $T05().None, 
        $T05().$Cast(this.colorWriteEnable2 & $T05().Green) !== $T05().None, 
        $T05().$Cast(this.colorWriteEnable2 & $T05().Blue) !== $T05().None, 
        $T05().$Cast(this.colorWriteEnable2 & $T05().Alpha) !== $T05().None
      );
    }
    if (blendState.BlendState$ColorWriteChannels3$value !== this.colorWriteEnable3) {
      this.colorWriteEnable3 = blendState.BlendState$ColorWriteChannels3$value;
      this.glColorMaskIndexedEXT(
        3, 
        $T05().$Cast(this.colorWriteEnable3 & $T05().Red) !== $T05().None, 
        $T05().$Cast(this.colorWriteEnable3 & $T05().Green) !== $T05().None, 
        $T05().$Cast(this.colorWriteEnable3 & $T05().Blue) !== $T05().None, 
        $T05().$Cast(this.colorWriteEnable3 & $T05().Alpha) !== $T05().None
      );
    }
  };

  function OpenGLDevice_SetDepthStencilState (depthStencilState) {
    if (depthStencilState.DepthStencilState$DepthBufferEnable$value !== this.zEnable) {
      this.zEnable = depthStencilState.DepthStencilState$DepthBufferEnable$value;
      this.ToggleGLState($T10().GL_DEPTH_TEST, this.zEnable);
    }
    if (this.zEnable) {
      if (depthStencilState.DepthStencilState$DepthBufferWriteEnable$value !== this.zWriteEnable) {
        this.zWriteEnable = depthStencilState.DepthStencilState$DepthBufferWriteEnable$value;
        this.glDepthMask(this.zWriteEnable);
      }
      if (depthStencilState.DepthStencilState$DepthBufferFunction$value !== this.depthFunc) {
        this.depthFunc = depthStencilState.DepthStencilState$DepthBufferFunction$value;
        this.glDepthFunc($T1A().CompareFunc.get_Item(this.depthFunc));
      }
    }
    if (depthStencilState.DepthStencilState$StencilEnable$value !== this.stencilEnable) {
      this.stencilEnable = depthStencilState.DepthStencilState$StencilEnable$value;
      this.ToggleGLState($T10().GL_STENCIL_TEST, this.stencilEnable);
    }
    if (this.stencilEnable) {
      if ((depthStencilState.DepthStencilState$StencilWriteMask$value | 0) !== (this.stencilWriteMask | 0)) {
        this.stencilWriteMask = (depthStencilState.DepthStencilState$StencilWriteMask$value | 0);
        this.glStencilMask(this.stencilWriteMask);
      }
      if (!(!((depthStencilState.DepthStencilState$TwoSidedStencilMode$value !== this.separateStencilEnable) || 
            ((depthStencilState.DepthStencilState$ReferenceStencil$value | 0) !== (this.stencilRef | 0)) || 
            ((depthStencilState.DepthStencilState$StencilMask$value | 0) !== (this.stencilMask | 0)) || 
            (depthStencilState.DepthStencilState$StencilFunction$value !== this.stencilFunc) || 
            (depthStencilState.DepthStencilState$CounterClockwiseStencilFunction$value !== this.ccwStencilFunc) || 
            (depthStencilState.DepthStencilState$StencilFail$value !== this.stencilFail) || 
            (depthStencilState.DepthStencilState$StencilDepthBufferFail$value !== this.stencilZFail) || 
            (depthStencilState.DepthStencilState$StencilPass$value !== this.stencilPass) || 
            (depthStencilState.DepthStencilState$CounterClockwiseStencilFail$value !== this.ccwStencilFail) || 
            (depthStencilState.DepthStencilState$CounterClockwiseStencilDepthBufferFail$value !== this.ccwStencilZFail)) && (depthStencilState.DepthStencilState$CounterClockwiseStencilPass$value === this.ccwStencilPass))) {
        this.separateStencilEnable = depthStencilState.DepthStencilState$TwoSidedStencilMode$value;
        this.stencilRef = (depthStencilState.DepthStencilState$ReferenceStencil$value | 0);
        this.stencilMask = (depthStencilState.DepthStencilState$StencilMask$value | 0);
        this.stencilFunc = depthStencilState.DepthStencilState$StencilFunction$value;
        this.stencilFail = depthStencilState.DepthStencilState$StencilFail$value;
        this.stencilZFail = depthStencilState.DepthStencilState$StencilDepthBufferFail$value;
        this.stencilPass = depthStencilState.DepthStencilState$StencilPass$value;
        if (this.separateStencilEnable) {
          this.ccwStencilFunc = depthStencilState.DepthStencilState$CounterClockwiseStencilFunction$value;
          this.ccwStencilFail = depthStencilState.DepthStencilState$CounterClockwiseStencilFail$value;
          this.ccwStencilZFail = depthStencilState.DepthStencilState$CounterClockwiseStencilDepthBufferFail$value;
          this.ccwStencilPass = depthStencilState.DepthStencilState$CounterClockwiseStencilPass$value;
          this.glStencilFuncSeparate($T10().GL_FRONT, $T1A().CompareFunc.get_Item(this.stencilFunc), this.stencilRef, this.stencilMask);
          this.glStencilFuncSeparate($T10().GL_BACK, $T1A().CompareFunc.get_Item(this.ccwStencilFunc), this.stencilRef, this.stencilMask);
          this.glStencilOpSeparate(
            $T10().GL_FRONT, 
            $T1A().GLStencilOp.get_Item(this.stencilFail), 
            $T1A().GLStencilOp.get_Item(this.stencilZFail), 
            $T1A().GLStencilOp.get_Item(this.stencilPass)
          );
          this.glStencilOpSeparate(
            $T10().GL_BACK, 
            $T1A().GLStencilOp.get_Item(this.ccwStencilFail), 
            $T1A().GLStencilOp.get_Item(this.ccwStencilZFail), 
            $T1A().GLStencilOp.get_Item(this.ccwStencilPass)
          );
        } else {
          this.glStencilFunc($T1A().CompareFunc.get_Item(this.stencilFunc), this.stencilRef, this.stencilMask);
          this.glStencilOp(
            $T1A().GLStencilOp.get_Item(this.stencilFail), 
            $T1A().GLStencilOp.get_Item(this.stencilZFail), 
            $T1A().GLStencilOp.get_Item(this.stencilPass)
          );
        }
      }
    }
  };

  function OpenGLDevice_SetIndexBufferData$b1 (T, handle, offsetInBytes, data, startIndex, elementCount, options) {
    this.BindIndexBuffer(handle);
    if (options === $T9E().Discard) {
      this.glBufferData($T10().GL_ELEMENT_ARRAY_BUFFER, handle.OpenGLIndexBuffer$BufferSize$value.MemberwiseClone(), $T26().Zero.MemberwiseClone(), handle.OpenGLIndexBuffer$Dynamic$value);
    }
    var dataHandle = $T31().Alloc(data, $T32().Pinned).MemberwiseClone();
    var elementSizeInBytes = ($S05().CallStatic($T28(), "SizeOf", null, T) | 0);
    this.glBufferSubData(
      $T10().GL_ELEMENT_ARRAY_BUFFER, 
      $S0B().CallStatic($T26(), "op_Explicit", null, offsetInBytes).MemberwiseClone(), 
      $S0B().CallStatic($T26(), "op_Explicit", null, Math.imul(elementSizeInBytes, elementCount)).MemberwiseClone(), 
      $S06().CallStatic($T26(), "op_Explicit", null, $T2D().op_Addition(
          (dataHandle.AddrOfPinnedObject().MemberwiseClone()).ToInt64(), 
          $T2D().FromNumber(Math.imul(startIndex, elementSizeInBytes))
        )).MemberwiseClone()
    );
    dataHandle.Free();
  };

  function OpenGLDevice_SetRenderTargets (attachments, textureTargets, renderbuffer, depthFormat) {
    if (attachments === null) {
      this.BindFramebuffer(this.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Handle$value);
    } else {
      this.BindFramebuffer(this.targetFramebuffer);

      for (var i = 0; i < (attachments.length | 0); i = ((i + 1) | 0)) {
        if (!(((attachments[i] >>> 0) === (this.currentAttachments[i] >>> 0)) && (textureTargets[i] === this.currentAttachmentFaces[i]))) {
          this.glFramebufferTexture2D(
            $T10().GL_FRAMEBUFFER, 
            $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T10().GL_COLOR_ATTACHMENT0 + i), 
            textureTargets[i], 
            attachments[i], 
            0
          );
          this.currentAttachments[i] = (attachments[i] >>> 0);
          this.currentAttachmentFaces[i] = textureTargets[i];
        }
      }

      for (; i < (this.currentAttachments.length | 0); i = ((i + 1) | 0)) {
        if ((this.currentAttachments[i] >>> 0) !== 0) {
          this.glFramebufferTexture2D(
            $T10().GL_FRAMEBUFFER, 
            $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T10().GL_COLOR_ATTACHMENT0 + i), 
            $T10().GL_TEXTURE_2D, 
            0, 
            0
          );
          this.currentAttachments[i] = 0;
          this.currentAttachmentFaces[i] = $T10().GL_TEXTURE_2D;
        }
      }
      if ((attachments.length | 0) !== (this.currentDrawBuffers | 0)) {
        this.glDrawBuffers(attachments.length, this.drawBuffersArray);
        this.currentDrawBuffers = (attachments.length | 0);
      }
      if ((renderbuffer >>> 0) !== (this.currentRenderbuffer >>> 0)) {
        if (this.currentDepthStencilFormat === $T17().Depth24Stencil8) {
          this.glFramebufferRenderbuffer($T10().GL_FRAMEBUFFER, $T10().GL_STENCIL_ATTACHMENT, $T10().GL_RENDERBUFFER, 0);
        }
        this.currentDepthStencilFormat = depthFormat;
        this.glFramebufferRenderbuffer($T10().GL_FRAMEBUFFER, $T10().GL_DEPTH_ATTACHMENT, $T10().GL_RENDERBUFFER, renderbuffer);
        if (this.currentDepthStencilFormat === $T17().Depth24Stencil8) {
          this.glFramebufferRenderbuffer($T10().GL_FRAMEBUFFER, $T10().GL_STENCIL_ATTACHMENT, $T10().GL_RENDERBUFFER, renderbuffer);
        }
        this.currentRenderbuffer = (renderbuffer >>> 0);
      }
    }
  };

  function OpenGLDevice_SetScissorRect (scissorRect, renderTargetBound) {
    if (!renderTargetBound) {
      scissorRect.Y = (((((this.viewport.Height | 0) - (scissorRect.Y | 0)) | 0) - (scissorRect.Height | 0)) | 0);
    }
    if ($T0A().op_Inequality(scissorRect, this.scissorRectangle)) {
      this.scissorRectangle = scissorRect.MemberwiseClone();
      this.glScissor(this.scissorRectangle.X, this.scissorRectangle.Y, this.scissorRectangle.Width, this.scissorRectangle.Height);
    }
  };

  function OpenGLDevice_SetStringMarker (text) {
    var chars = $S0C().CallVirtual("GetBytes", null, $TA0().get_ASCII(), text);
    this.glStringMarkerGREMEDY(chars.length, chars);
  };

  function OpenGLDevice_SetVertexBufferData$b1 (T, handle, elementSizeInBytes, offsetInBytes, data, startIndex, elementCount, options) {
    this.BindVertexBuffer(handle);
    if (options === $T9E().Discard) {
      this.glBufferData($T10().GL_ARRAY_BUFFER, $S0B().CallStatic($T26(), "op_Explicit", null, handle.OpenGLVertexBuffer$BufferSize$value).MemberwiseClone(), $T26().Zero.MemberwiseClone(), handle.OpenGLVertexBuffer$Dynamic$value);
    }
    var dataHandle = $T31().Alloc(data, $T32().Pinned).MemberwiseClone();
    this.glBufferSubData(
      $T10().GL_ARRAY_BUFFER, 
      $S0B().CallStatic($T26(), "op_Explicit", null, offsetInBytes).MemberwiseClone(), 
      $S0B().CallStatic($T26(), "op_Explicit", null, Math.imul(elementSizeInBytes, elementCount)).MemberwiseClone(), 
      $S06().CallStatic($T26(), "op_Explicit", null, $T2D().op_Addition(
          (dataHandle.AddrOfPinnedObject().MemberwiseClone()).ToInt64(), 
          $T2D().FromNumber(Math.imul(startIndex, elementSizeInBytes))
        )).MemberwiseClone()
    );
    dataHandle.Free();
  };

  function OpenGLDevice_SetViewport (vp, renderTargetBound) {
    if (!renderTargetBound) {
      vp.set_Y((((((this.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Height$value | 0) - (vp.get_Y() | 0)) | 0) - (vp.get_Height() | 0)) | 0));
    }
    if ($T0A().op_Inequality(vp.get_Bounds(), this.viewport)) {
      this.viewport = vp.get_Bounds().MemberwiseClone();
      this.glViewport(this.viewport.X, this.viewport.Y, this.viewport.Width, this.viewport.Height);
    }
    if (!((+vp.get_MinDepth() === +this.depthRangeMin) && (+vp.get_MaxDepth() === +this.depthRangeMax))) {
      this.depthRangeMin = +vp.get_MinDepth();
      this.depthRangeMax = +vp.get_MaxDepth();
      this.glDepthRange(this.depthRangeMin, this.depthRangeMax);
    }
  };

  function OpenGLDevice_SwapBuffers (overrideWindowHandle) {
    $T0D().SDL_GL_SwapWindow(overrideWindowHandle.MemberwiseClone());
    this.BindFramebuffer(this.OpenGLDevice$Backbuffer$value.FauxBackbuffer$Handle$value);
  };

  function OpenGLDevice_ToggleGLState (feature, enable) {
    if (enable) {
      this.glEnable(feature);
    } else {
      this.glDisable(feature);
    }
  };

  function OpenGLDevice_TryGetFramebufferEP (ep) {
    var result = $T0D().SDL_GL_GetProcAddress(ep).MemberwiseClone();
    if ($T26().op_Equality(result.MemberwiseClone(), $T26().Zero.MemberwiseClone())) {
      result = $T0D().SDL_GL_GetProcAddress(JSIL.ConcatString(ep, "EXT")).MemberwiseClone();
      if ($T26().op_Equality(result.MemberwiseClone(), $T26().Zero.MemberwiseClone())) {
        throw $S0D().Construct();
      }
    }
    return result;
  };

  function OpenGLDevice_VerifySampler (index, texture, sampler) {
    if (texture === null) {
      if (this.OpenGLDevice$Textures$value[index] !== $T13().NullTexture) {
        if ((index | 0) !== 0) {
          this.glActiveTexture($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T10().GL_TEXTURE0 + (index | 0)));
        }
        this.glBindTexture(this.OpenGLDevice$Textures$value[index].OpenGLTexture$Target$value, 0);
        if ((index | 0) !== 0) {
          this.glActiveTexture($T10().GL_TEXTURE0);
        }
        this.OpenGLDevice$Textures$value[index] = $T13().NullTexture;
      }
    } else if ((texture.texture !== this.OpenGLDevice$Textures$value[index]) || 
      (sampler.SamplerState$AddressU$value !== texture.texture.WrapS) || 
      (sampler.SamplerState$AddressV$value !== texture.texture.WrapT) || 
      (sampler.SamplerState$AddressW$value !== texture.texture.WrapR) || 
      (sampler.SamplerState$Filter$value !== texture.texture.Filter) || 
      (+(sampler.SamplerState$MaxAnisotropy$value) !== +texture.texture.Anistropy) || 
      ((sampler.SamplerState$MaxMipLevel$value | 0) !== (texture.texture.MaxMipmapLevel | 0)) || (+sampler.SamplerState$MipMapLevelOfDetailBias$value !== +texture.texture.LODBias)) {
      if ((index | 0) !== 0) {
        this.glActiveTexture($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum.$Cast($T10().GL_TEXTURE0 + (index | 0)));
      }
      if (texture.texture !== this.OpenGLDevice$Textures$value[index]) {
        if (texture.texture.OpenGLTexture$Target$value !== this.OpenGLDevice$Textures$value[index].OpenGLTexture$Target$value) {
          this.glBindTexture(this.OpenGLDevice$Textures$value[index].OpenGLTexture$Target$value, 0);
        }
        this.glBindTexture(texture.texture.OpenGLTexture$Target$value, texture.texture.OpenGLTexture$Handle$value);
        this.OpenGLDevice$Textures$value[index] = texture.texture;
      }
      if (sampler.SamplerState$AddressU$value !== texture.texture.WrapS) {
        texture.texture.WrapS = sampler.SamplerState$AddressU$value;
        this.glTexParameteri(texture.texture.OpenGLTexture$Target$value, $T10().GL_TEXTURE_WRAP_S, ($T1A().Wrap.get_Item(texture.texture.WrapS)).valueOf());
      }
      if (sampler.SamplerState$AddressV$value !== texture.texture.WrapT) {
        texture.texture.WrapT = sampler.SamplerState$AddressV$value;
        this.glTexParameteri(texture.texture.OpenGLTexture$Target$value, $T10().GL_TEXTURE_WRAP_T, ($T1A().Wrap.get_Item(texture.texture.WrapT)).valueOf());
      }
      if (sampler.SamplerState$AddressW$value !== texture.texture.WrapR) {
        texture.texture.WrapR = sampler.SamplerState$AddressW$value;
        this.glTexParameteri(texture.texture.OpenGLTexture$Target$value, $T10().GL_TEXTURE_WRAP_R, ($T1A().Wrap.get_Item(texture.texture.WrapR)).valueOf());
      }
      if (!((sampler.SamplerState$Filter$value === texture.texture.Filter) && (+(sampler.SamplerState$MaxAnisotropy$value) === +texture.texture.Anistropy))) {
        texture.texture.Filter = sampler.SamplerState$Filter$value;
        texture.texture.Anistropy = +(sampler.SamplerState$MaxAnisotropy$value);
        this.glTexParameteri(texture.texture.OpenGLTexture$Target$value, $T10().GL_TEXTURE_MAG_FILTER, ($T1A().MagFilter.get_Item(texture.texture.Filter)).valueOf());
        this.glTexParameteri(texture.texture.OpenGLTexture$Target$value, $T10().GL_TEXTURE_MIN_FILTER, ((
              texture.texture.OpenGLTexture$HasMipmaps$value
                 ? $T1A().MinMipFilter.get_Item(texture.texture.Filter)
                 : $T1A().MinFilter.get_Item(texture.texture.Filter))
          ).valueOf());
        this.glTexParameterf(texture.texture.OpenGLTexture$Target$value, $T10().GL_TEXTURE_MAX_ANISOTROPY_EXT, (
            (texture.texture.Filter === $T24().Anisotropic)
               ? $T25().Max(texture.texture.Anistropy, 1)
               : 1)
        );
      }
      if ((sampler.SamplerState$MaxMipLevel$value | 0) !== (texture.texture.MaxMipmapLevel | 0)) {
        texture.texture.MaxMipmapLevel = (sampler.SamplerState$MaxMipLevel$value | 0);
        this.glTexParameteri(texture.texture.OpenGLTexture$Target$value, $T10().GL_TEXTURE_BASE_LEVEL, texture.texture.MaxMipmapLevel);
      }
      if (+sampler.SamplerState$MipMapLevelOfDetailBias$value !== +texture.texture.LODBias) {
        texture.texture.LODBias = +sampler.SamplerState$MipMapLevelOfDetailBias$value;
        this.glTexParameterf(texture.texture.OpenGLTexture$Target$value, $T10().GL_TEXTURE_LOD_BIAS, texture.texture.LODBias);
      }
      if ((index | 0) !== 0) {
        this.glActiveTexture($T10().GL_TEXTURE0);
      }
    }
  };

  function OpenGLDevice_VertexAttribPointer (location, size, type, normalized, stride, pointer) {
    if (!(!(((this.OpenGLDevice$Attributes$value[location].CurrentBuffer >>> 0) !== (this.currentVertexBuffer >>> 0)) || 
          $T26().op_Inequality(this.OpenGLDevice$Attributes$value[location].CurrentPointer.MemberwiseClone(), pointer.MemberwiseClone()) || 
          ((this.OpenGLDevice$Attributes$value[location].CurrentSize | 0) !== (size | 0)) || 
          (this.OpenGLDevice$Attributes$value[location].CurrentType !== type) || 
          (this.OpenGLDevice$Attributes$value[location].CurrentNormalized !== normalized)) && ((this.OpenGLDevice$Attributes$value[location].CurrentStride | 0) === (stride | 0)))) {
      this.glVertexAttribPointer(
        location, 
        size, 
        $T1A().PointerType.get_Item(type), 
        normalized, 
        stride, 
        pointer.MemberwiseClone()
      );
      this.OpenGLDevice$Attributes$value[location].CurrentBuffer = (this.currentVertexBuffer >>> 0);
      this.OpenGLDevice$Attributes$value[location].CurrentPointer = pointer.MemberwiseClone();
      this.OpenGLDevice$Attributes$value[location].CurrentSize = (size | 0);
      this.OpenGLDevice$Attributes$value[location].CurrentType = type;
      this.OpenGLDevice$Attributes$value[location].CurrentNormalized = normalized;
      this.OpenGLDevice$Attributes$value[location].CurrentStride = (stride | 0);
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.OpenGLDevice", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.PresentationParameters")), 
      OpenGLDevice__ctor
    );

    $.Method({Static:false, Public:true }, "ApplyRasterizerState", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState"), $.Boolean]), 
      OpenGLDevice_ApplyRasterizerState
    );

    $.Method({Static:false, Public:true }, "BindDrawFramebuffer", 
      JSIL.MethodSignature.Action($.UInt32), 
      OpenGLDevice_BindDrawFramebuffer
    );

    $.Method({Static:false, Public:true }, "BindFramebuffer", 
      JSIL.MethodSignature.Action($.UInt32), 
      OpenGLDevice_BindFramebuffer
    );

    $.Method({Static:false, Public:true }, "BindIndexBuffer", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer")), 
      OpenGLDevice_BindIndexBuffer
    );

    $.Method({Static:false, Public:true }, "BindReadFramebuffer", 
      JSIL.MethodSignature.Action($.UInt32), 
      OpenGLDevice_BindReadFramebuffer
    );

    $.Method({Static:false, Public:true }, "BindTexture", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture")), 
      OpenGLDevice_BindTexture
    );

    $.Method({Static:false, Public:true }, "BindVertexBuffer", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer")), 
      OpenGLDevice_BindVertexBuffer
    );

    $.Method({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ClearOptions"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), 
          $.Single, $.Int32
        ]), 
      OpenGLDevice_Clear
    );

    $.Method({Static:false, Public:true }, "CreateTexture", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture"), [
          $asm01.TypeRef("System.Type"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"), 
          $.Boolean
        ]), 
      OpenGLDevice_CreateTexture
    );

    $.Method({Static:true , Public:false}, "DebugCallback", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
          $.UInt32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
          $.Int32, $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr")
        ]), 
      OpenGLDevice_DebugCallback
    );

    $.Method({Static:false, Public:true }, "DeleteIndexBuffer", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer")), 
      OpenGLDevice_DeleteIndexBuffer
    );

    $.Method({Static:false, Public:true }, "DeleteRenderbuffer", 
      JSIL.MethodSignature.Action($.UInt32), 
      OpenGLDevice_DeleteRenderbuffer
    );

    $.Method({Static:false, Public:true }, "DeleteTexture", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture")), 
      OpenGLDevice_DeleteTexture
    );

    $.Method({Static:false, Public:true }, "DeleteVertexBuffer", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer")), 
      OpenGLDevice_DeleteVertexBuffer
    );

    $.Method({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      OpenGLDevice_Dispose
    );

    $.Method({Static:false, Public:true }, "FlushGLVertexAttributes", 
      JSIL.MethodSignature.Void, 
      OpenGLDevice_FlushGLVertexAttributes
    );

    $.Method({Static:false, Public:true }, "GenerateTargetMipmaps", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture")), 
      OpenGLDevice_GenerateTargetMipmaps
    );

    $.Method({Static:false, Public:true }, "GenRenderbuffer", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int32, $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")
        ]), 
      OpenGLDevice_GenRenderbuffer
    );

    $.Method({Static:false, Public:true }, "get_AttributeEnabled", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Boolean])), 
      OpenGLDevice_get_AttributeEnabled
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexAttribute")])), 
      OpenGLDevice_get_Attributes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Backbuffer", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+FauxBackbuffer")), 
      OpenGLDevice_get_Backbuffer
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CurrentDrawFramebuffer", 
      JSIL.MethodSignature.Return($.UInt32), 
      OpenGLDevice_get_CurrentDrawFramebuffer
    );

    $.Method({Static:false, Public:true }, "get_CurrentReadFramebuffer", 
      JSIL.MethodSignature.Return($.UInt32), 
      OpenGLDevice_get_CurrentReadFramebuffer
    );

    $.Method({Static:false, Public:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($.String), 
      OpenGLDevice_get_Extensions
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MaxTextureSlots", 
      JSIL.MethodSignature.Return($.Int32), 
      OpenGLDevice_get_MaxTextureSlots
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ReferenceStencil", 
      JSIL.MethodSignature.Return($.Int32), 
      OpenGLDevice_get_ReferenceStencil
    );

    $.Method({Static:false, Public:true }, "get_SupportsDxt1", 
      JSIL.MethodSignature.Return($.Boolean), 
      OpenGLDevice_get_SupportsDxt1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SupportsHardwareInstancing", 
      JSIL.MethodSignature.Return($.Boolean), 
      OpenGLDevice_get_SupportsHardwareInstancing
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SupportsS3tc", 
      JSIL.MethodSignature.Return($.Boolean), 
      OpenGLDevice_get_SupportsS3tc
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Textures", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture")])), 
      OpenGLDevice_get_Textures
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetIndexBufferData", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer"), $.Int32, 
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      OpenGLDevice_GetIndexBufferData$b1
    );

    $.Method({Static:false, Public:true }, "GetVertexBufferData", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer"), $.Int32, 
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32, $.Int32
        ], ["T"]), 
      OpenGLDevice_GetVertexBufferData$b1
    );

    $.Method({Static:false, Public:false}, "glGetString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), 
      OpenGLDevice_glGetString
    );

    $.Method({Static:false, Public:true }, "LoadGLEntryPoints", 
      JSIL.MethodSignature.Void, 
      OpenGLDevice_LoadGLEntryPoints
    );

    $.Method({Static:false, Public:true }, "ReadTargetIfApplicable", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture"), $.Int32, 
          $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")])
        ], ["T"]), 
      OpenGLDevice_ReadTargetIfApplicable$b1
    );

    $.Method({Static:false, Public:false}, "set_AttributeEnabled", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Boolean])), 
      OpenGLDevice_set_AttributeEnabled
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Attributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexAttribute")])), 
      OpenGLDevice_set_Attributes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Backbuffer", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+FauxBackbuffer")), 
      OpenGLDevice_set_Backbuffer
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Extensions", 
      JSIL.MethodSignature.Action($.String), 
      OpenGLDevice_set_Extensions
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_MaxTextureSlots", 
      JSIL.MethodSignature.Action($.Int32), 
      OpenGLDevice_set_MaxTextureSlots
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ReferenceStencil", 
      JSIL.MethodSignature.Action($.Int32), 
      OpenGLDevice_set_ReferenceStencil
    );

    $.Method({Static:false, Public:false}, "set_SupportsDxt1", 
      JSIL.MethodSignature.Action($.Boolean), 
      OpenGLDevice_set_SupportsDxt1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SupportsHardwareInstancing", 
      JSIL.MethodSignature.Action($.Boolean), 
      OpenGLDevice_set_SupportsHardwareInstancing
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SupportsS3tc", 
      JSIL.MethodSignature.Action($.Boolean), 
      OpenGLDevice_set_SupportsS3tc
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Textures", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture")])), 
      OpenGLDevice_set_Textures
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetBlendState", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendState")), 
      OpenGLDevice_SetBlendState
    );

    $.Method({Static:false, Public:true }, "SetDepthStencilState", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthStencilState")), 
      OpenGLDevice_SetDepthStencilState
    );

    $.Method({Static:false, Public:true }, "SetIndexBufferData", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer"), $.Int32, 
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SetDataOptions")
        ], ["T"]), 
      OpenGLDevice_SetIndexBufferData$b1
    );

    $.Method({Static:false, Public:true }, "SetRenderTargets", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), 
          $.UInt32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")
        ]), 
      OpenGLDevice_SetRenderTargets
    );

    $.Method({Static:false, Public:true }, "SetScissorRect", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"), $.Boolean]), 
      OpenGLDevice_SetScissorRect
    );

    $.Method({Static:false, Public:true }, "SetStringMarker", 
      JSIL.MethodSignature.Action($.String), 
      OpenGLDevice_SetStringMarker
    );

    $.Method({Static:false, Public:true }, "SetVertexBufferData", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", ["!!0"]), 
          $.Int32, $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SetDataOptions")
        ], ["T"]), 
      OpenGLDevice_SetVertexBufferData$b1
    );

    $.Method({Static:false, Public:true }, "SetViewport", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport"), $.Boolean]), 
      OpenGLDevice_SetViewport
    );

    $.Method({Static:false, Public:true }, "SwapBuffers", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      OpenGLDevice_SwapBuffers
    );

    $.Method({Static:false, Public:false}, "ToggleGLState", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $.Boolean]), 
      OpenGLDevice_ToggleGLState
    );

    $.Method({Static:false, Public:false}, "TryGetFramebufferEP", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.String]), 
      OpenGLDevice_TryGetFramebufferEP
    );

    $.Method({Static:false, Public:true }, "VerifySampler", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SamplerState")
        ]), 
      OpenGLDevice_VerifySampler
    );

    $.Method({Static:false, Public:true }, "VertexAttribPointer", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat"), $.Boolean, 
          $.Int32, $asm01.TypeRef("System.IntPtr")
        ]), 
      OpenGLDevice_VertexAttribPointer
    );

    $.Field({Static:false, Public:false}, "alphaBlendEnable", $.Boolean); 
    $.Field({Static:false, Public:false}, "blendColor", $asm00.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false}, "blendOp", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction")); 
    $.Field({Static:false, Public:false}, "blendOpAlpha", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction")); 
    $.Field({Static:false, Public:false}, "srcBlend", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")); 
    $.Field({Static:false, Public:false}, "dstBlend", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")); 
    $.Field({Static:false, Public:false}, "srcBlendAlpha", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")); 
    $.Field({Static:false, Public:false}, "dstBlendAlpha", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend")); 
    $.Field({Static:false, Public:false}, "colorWriteEnable", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")); 
    $.Field({Static:false, Public:false}, "colorWriteEnable1", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")); 
    $.Field({Static:false, Public:false}, "colorWriteEnable2", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")); 
    $.Field({Static:false, Public:false}, "colorWriteEnable3", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.ColorWriteChannels")); 
    $.Field({Static:false, Public:false}, "zEnable", $.Boolean); 
    $.Field({Static:false, Public:false}, "zWriteEnable", $.Boolean); 
    $.Field({Static:false, Public:false}, "depthFunc", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")); 
    $.Field({Static:false, Public:false}, "stencilEnable", $.Boolean); 
    $.Field({Static:false, Public:false}, "stencilWriteMask", $.Int32); 
    $.Field({Static:false, Public:false}, "separateStencilEnable", $.Boolean); 
    $.Field({Static:false, Public:false}, "stencilRef", $.Int32); 
    $.Field({Static:false, Public:false}, "stencilMask", $.Int32); 
    $.Field({Static:false, Public:false}, "stencilFunc", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")); 
    $.Field({Static:false, Public:false}, "stencilFail", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")); 
    $.Field({Static:false, Public:false}, "stencilZFail", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")); 
    $.Field({Static:false, Public:false}, "stencilPass", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")); 
    $.Field({Static:false, Public:false}, "ccwStencilFunc", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction")); 
    $.Field({Static:false, Public:false}, "ccwStencilFail", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")); 
    $.Field({Static:false, Public:false}, "ccwStencilZFail", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")); 
    $.Field({Static:false, Public:false}, "ccwStencilPass", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation")); 
    $.Field({Static:false, Public:false}, "scissorTestEnable", $.Boolean); 
    $.Field({Static:false, Public:false}, "cullFrontFace", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CullMode")); 
    $.Field({Static:false, Public:false}, "fillMode", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.FillMode")); 
    $.Field({Static:false, Public:false}, "depthBias", $.Single); 
    $.Field({Static:false, Public:false}, "slopeScaleDepthBias", $.Single); 
    $.Field({Static:false, Public:false}, "scissorRectangle", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:false, Public:false}, "viewport", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:false, Public:false}, "depthRangeMin", $.Single); 
    $.Field({Static:false, Public:false}, "depthRangeMax", $.Single); 
    $.Field({Static:false, Public:false}, "previousAttributeEnabled", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false}, "previousAttributeDivisor", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "currentVertexBuffer", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentIndexBuffer", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentReadFramebuffer", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentDrawFramebuffer", $.UInt32); 
    $.Field({Static:false, Public:false}, "targetFramebuffer", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentAttachments", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Field({Static:false, Public:false}, "currentAttachmentFaces", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:false, Public:false}, "currentDrawBuffers", $.Int32); 
    $.Field({Static:false, Public:false}, "drawBuffersArray", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:false, Public:false}, "currentRenderbuffer", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentDepthStencilFormat", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")); 
    $.Field({Static:false, Public:false}, "currentClearColor", $asm00.TypeRef("Microsoft.Xna.Framework.Vector4")); 
    $.Field({Static:false, Public:false}, "currentClearDepth", $.Single); 
    $.Field({Static:false, Public:false}, "currentClearStencil", $.Int32); 
    $.Field({Static:false, Public:false}, "glContext", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "INTERNAL_glGetString", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetString")); 
    $.Field({Static:false, Public:true }, "glGetIntegerv", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetIntegerv")); 
    $.Field({Static:false, Public:true }, "glEnable", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Enable")); 
    $.Field({Static:false, Public:true }, "glDisable", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Disable")); 
    $.Field({Static:false, Public:true }, "glViewport", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_Viewport")); 
    $.Field({Static:false, Public:false}, "glDepthRange", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DepthRange")); 
    $.Field({Static:false, Public:false}, "glScissor", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Scissor")); 
    $.Field({Static:false, Public:false}, "glBlendColor", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BlendColor")); 
    $.Field({Static:false, Public:false}, "glBlendFuncSeparate", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BlendFuncSeparate")); 
    $.Field({Static:false, Public:false}, "glBlendEquationSeparate", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BlendEquationSeparate")); 
    $.Field({Static:false, Public:false}, "glColorMask", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ColorMask")); 
    $.Field({Static:false, Public:false}, "glColorMaskIndexedEXT", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ColorMaskIndexedEXT")); 
    $.Field({Static:false, Public:false}, "glDepthMask", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DepthMask")); 
    $.Field({Static:false, Public:false}, "glDepthFunc", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DepthFunc")); 
    $.Field({Static:false, Public:false}, "glStencilMask", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilMask")); 
    $.Field({Static:false, Public:false}, "glStencilFuncSeparate", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilFuncSeparate")); 
    $.Field({Static:false, Public:false}, "glStencilOpSeparate", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilOpSeparate")); 
    $.Field({Static:false, Public:false}, "glStencilFunc", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilFunc")); 
    $.Field({Static:false, Public:false}, "glStencilOp", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilOp")); 
    $.Field({Static:false, Public:false}, "glCullFace", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CullFace")); 
    $.Field({Static:false, Public:false}, "glFrontFace", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+FrontFace")); 
    $.Field({Static:false, Public:false}, "glPolygonMode", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+PolygonMode")); 
    $.Field({Static:false, Public:false}, "glPolygonOffset", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+PolygonOffset")); 
    $.Field({Static:false, Public:true }, "glGenTextures", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenTextures")); 
    $.Field({Static:false, Public:true }, "glDeleteTextures", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteTextures")); 
    $.Field({Static:false, Public:true }, "glBindTexture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_BindTexture")); 
    $.Field({Static:false, Public:true }, "glTexImage2D", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexImage2D")); 
    $.Field({Static:false, Public:true }, "glTexSubImage2D", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexSubImage2D")); 
    $.Field({Static:false, Public:true }, "glCompressedTexImage2D", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CompressedTexImage2D")); 
    $.Field({Static:false, Public:true }, "glCompressedTexSubImage2D", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CompressedTexSubImage2D")); 
    $.Field({Static:false, Public:true }, "glTexImage3D", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexImage3D")); 
    $.Field({Static:false, Public:true }, "glTexSubImage3D", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexSubImage3D")); 
    $.Field({Static:false, Public:true }, "glGetTexImage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetTexImage")); 
    $.Field({Static:false, Public:true }, "glTexParameteri", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexParameteri")); 
    $.Field({Static:false, Public:false}, "glTexParameterf", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexParameterf")); 
    $.Field({Static:false, Public:true }, "glActiveTexture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ActiveTexture")); 
    $.Field({Static:false, Public:false}, "glGetTexLevelParameteriv", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetTexLevelParameteriv")); 
    $.Field({Static:false, Public:true }, "glPixelStorei", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+PixelStorei")); 
    $.Field({Static:false, Public:true }, "glGenBuffers", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenBuffers")); 
    $.Field({Static:false, Public:false}, "glDeleteBuffers", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteBuffers")); 
    $.Field({Static:false, Public:false}, "glBindBuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BindBuffer")); 
    $.Field({Static:false, Public:true }, "glBufferData", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BufferData")); 
    $.Field({Static:false, Public:false}, "glBufferSubData", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BufferSubData")); 
    $.Field({Static:false, Public:false}, "glMapBuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+MapBuffer")); 
    $.Field({Static:false, Public:false}, "glUnmapBuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+UnmapBuffer")); 
    $.Field({Static:false, Public:false}, "glEnableVertexAttribArray", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+EnableVertexAttribArray")); 
    $.Field({Static:false, Public:false}, "glDisableVertexAttribArray", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DisableVertexAttribArray")); 
    $.Field({Static:false, Public:false}, "glVertexAttribDivisor", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+VertexAttribDivisor")); 
    $.Field({Static:false, Public:false}, "glVertexAttribPointer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_VertexAttribPointer")); 
    $.Field({Static:false, Public:false}, "glClearColor", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ClearColor")); 
    $.Field({Static:false, Public:false}, "glClearDepth", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ClearDepth")); 
    $.Field({Static:false, Public:false}, "glClearStencil", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ClearStencil")); 
    $.Field({Static:false, Public:false}, "glClear", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_Clear")); 
    $.Field({Static:false, Public:false}, "glDrawBuffers", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawBuffers")); 
    $.Field({Static:false, Public:true }, "glReadPixels", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ReadPixels")); 
    $.Field({Static:false, Public:true }, "glGenerateMipmap", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenerateMipmap")); 
    $.Field({Static:false, Public:true }, "glGenFramebuffers", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenFramebuffers")); 
    $.Field({Static:false, Public:true }, "glDeleteFramebuffers", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteFramebuffers")); 
    $.Field({Static:false, Public:true }, "glBindFramebuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_BindFramebuffer")); 
    $.Field({Static:false, Public:true }, "glFramebufferTexture2D", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+FramebufferTexture2D")); 
    $.Field({Static:false, Public:true }, "glFramebufferRenderbuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+FramebufferRenderbuffer")); 
    $.Field({Static:false, Public:true }, "glGenRenderbuffers", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenRenderbuffers")); 
    $.Field({Static:false, Public:true }, "glDeleteRenderbuffers", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteRenderbuffers")); 
    $.Field({Static:false, Public:true }, "glBindRenderbuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BindRenderbuffer")); 
    $.Field({Static:false, Public:true }, "glRenderbufferStorage", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+RenderbufferStorage")); 
    $.Field({Static:false, Public:true }, "glDrawElementsInstanced", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawElementsInstanced")); 
    $.Field({Static:false, Public:true }, "glDrawRangeElements", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawRangeElements")); 
    $.Field({Static:false, Public:true }, "glDrawArrays", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawArrays")); 
    $.Field({Static:false, Public:true }, "glGenQueries", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenQueries")); 
    $.Field({Static:false, Public:true }, "glDeleteQueries", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteQueries")); 
    $.Field({Static:false, Public:true }, "glBeginQuery", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BeginQuery")); 
    $.Field({Static:false, Public:true }, "glEndQuery", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+EndQuery")); 
    $.Field({Static:false, Public:true }, "glGetQueryObjectiv", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetQueryObjectiv")); 
    $.Field({Static:false, Public:true }, "glCreateShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CreateShader")); 
    $.Field({Static:false, Public:true }, "glDeleteShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteShader")); 
    $.Field({Static:false, Public:true }, "glShaderSource", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ShaderSource")); 
    $.Field({Static:false, Public:true }, "glCompileShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CompileShader")); 
    $.Field({Static:false, Public:true }, "glCreateProgram", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CreateProgram")); 
    $.Field({Static:false, Public:true }, "glDeleteProgram", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteProgram")); 
    $.Field({Static:false, Public:true }, "glAttachShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+AttachShader")); 
    $.Field({Static:false, Public:true }, "glDetachShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DetachShader")); 
    $.Field({Static:false, Public:true }, "glLinkProgram", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+LinkProgram")); 
    $.Field({Static:false, Public:true }, "glUseProgram", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+UseProgram")); 
    $.Field({Static:false, Public:true }, "glUniform1i", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Uniform1i")); 
    $.Field({Static:false, Public:true }, "glUniform4fv", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Uniform4fv")); 
    $.Field({Static:false, Public:true }, "glGetShaderiv", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetShaderiv")); 
    $.Field({Static:false, Public:true }, "glGetProgramiv", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetProgramiv")); 
    $.Field({Static:false, Public:true }, "glGetUniformLocation", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetUniformLocation")); 
    $.Field({Static:false, Public:true }, "glGetAttribLocation", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetAttribLocation")); 
    $.Field({Static:false, Public:true }, "glBindAttribLocation", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BindAttribLocation")); 
    $.Field({Static:false, Public:true }, "glIsShader", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+IsShader")); 
    $.Field({Static:false, Public:true }, "glIsProgram", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+IsProgram")); 
    $.Field({Static:false, Public:true }, "glGetShaderInfoLog", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetShaderInfoLog")); 
    $.Field({Static:false, Public:true }, "glGetProgramInfoLog", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetProgramInfoLog")); 
    $.Field({Static:false, Public:true }, "glFlush", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Flush")); 
    $.Field({Static:false, Public:false}, "glDebugMessageCallbackARB", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DebugMessageCallback")); 
    $.Field({Static:false, Public:false}, "glDebugMessageControlARB", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DebugMessageControl")); 
    $.Field({Static:false, Public:false}, "DebugCall", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DebugProc")); 
    $.Field({Static:false, Public:false}, "glStringMarkerGREMEDY", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StringMarkerGREMEDY")); 
    $.Field({Static:false, Public:false}, "OpenGLDevice$Textures$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLDevice$Attributes$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexAttribute")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLDevice$AttributeEnabled$value", $jsilcore.TypeRef("System.Array", [$.Boolean]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLDevice$Backbuffer$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+FauxBackbuffer"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLDevice$Extensions$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLDevice$SupportsDxt1$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLDevice$SupportsS3tc$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLDevice$SupportsHardwareInstancing$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLDevice$MaxTextureSlots$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "ReferenceStencil", $.Int32);

    $.Property({Static:false, Public:true }, "Textures", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture")]));

    $.Property({Static:false, Public:true }, "Attributes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexAttribute")]));

    $.Property({Static:false, Public:true }, "AttributeEnabled", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Property({Static:false, Public:true }, "CurrentReadFramebuffer", $.UInt32);

    $.Property({Static:false, Public:true }, "CurrentDrawFramebuffer", $.UInt32);

    $.Property({Static:false, Public:true }, "Backbuffer", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+FauxBackbuffer"));

    $.Property({Static:false, Public:true }, "Extensions", $.String);

    $.Property({Static:false, Public:true }, "SupportsDxt1", $.Boolean);

    $.Property({Static:false, Public:true }, "SupportsS3tc", $.Boolean);

    $.Property({Static:false, Public:true }, "SupportsHardwareInstancing", $.Boolean);

    $.Property({Static:false, Public:true }, "MaxTextureSlots", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture */ 

(function OpenGLTexture$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Type, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_XNAToGL)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureAddressMode)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureFilter)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture"), null))) ();
  };

  function OpenGLTexture__ctor$00 (handle, target, format, hasMipmaps) {
    this.OpenGLTexture$Handle$value = (handle >>> 0);
    this.OpenGLTexture$Target$value = $T05().TextureType.get_Item(target);
    this.OpenGLTexture$Format$value = format;
    this.OpenGLTexture$HasMipmaps$value = hasMipmaps;
    this.WrapS = $T06().Wrap;
    this.WrapT = $T06().Wrap;
    this.WrapR = $T06().Wrap;
    this.Filter = $T07().Linear;
    this.Anistropy = 4;
    this.MaxMipmapLevel = 0;
    this.LODBias = 0;
  };

  function OpenGLTexture__ctor$01 () {
    this.OpenGLTexture$Handle$value = 0;
    this.OpenGLTexture$Target$value = $T08().GL_TEXTURE_2D;
  };

  function OpenGLTexture_get_Format () {
    return this.OpenGLTexture$Format$value;
  };

  function OpenGLTexture_get_Handle () {
    return this.OpenGLTexture$Handle$value;
  };

  function OpenGLTexture_get_HasMipmaps () {
    return this.OpenGLTexture$HasMipmaps$value;
  };

  function OpenGLTexture_get_Target () {
    return this.OpenGLTexture$Target$value;
  };

  function OpenGLTexture_set_Format (value) {
    this.OpenGLTexture$Format$value = value;
  };

  function OpenGLTexture_set_Handle (value) {
    this.OpenGLTexture$Handle$value = (value >>> 0);
  };

  function OpenGLTexture_set_HasMipmaps (value) {
    this.OpenGLTexture$HasMipmaps$value = value;
  };

  function OpenGLTexture_set_Target (value) {
    this.OpenGLTexture$Target$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLTexture", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $asm01.TypeRef("System.Type"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"), $.Boolean
        ]), 
      OpenGLTexture__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      OpenGLTexture__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_Format", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")), 
      OpenGLTexture_get_Format
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Handle", 
      JSIL.MethodSignature.Return($.UInt32), 
      OpenGLTexture_get_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasMipmaps", 
      JSIL.MethodSignature.Return($.Boolean), 
      OpenGLTexture_get_HasMipmaps
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")), 
      OpenGLTexture_get_Target
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Format", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")), 
      OpenGLTexture_set_Format
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Handle", 
      JSIL.MethodSignature.Action($.UInt32), 
      OpenGLTexture_set_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HasMipmaps", 
      JSIL.MethodSignature.Action($.Boolean), 
      OpenGLTexture_set_HasMipmaps
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Target", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")), 
      OpenGLTexture_set_Target
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:true }, "WrapS", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode")); 
    $.Field({Static:false, Public:true }, "WrapT", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode")); 
    $.Field({Static:false, Public:true }, "WrapR", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode")); 
    $.Field({Static:false, Public:true }, "Filter", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureFilter")); 
    $.Field({Static:false, Public:true }, "Anistropy", $.Single); 
    $.Field({Static:false, Public:true }, "MaxMipmapLevel", $.Int32); 
    $.Field({Static:false, Public:true }, "LODBias", $.Single); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NullTexture", $.Type); 
    $.Field({Static:false, Public:false}, "OpenGLTexture$Handle$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLTexture$Target$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLTexture$Format$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLTexture$HasMipmaps$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function OpenGLTexture__cctor () {
      $thisType.NullTexture = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OpenGLTexture__cctor
    );

    $.Property({Static:false, Public:true }, "Handle", $.UInt32);

    $.Property({Static:false, Public:true }, "Target", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"));

    $.Property({Static:false, Public:true }, "Format", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat"));

    $.Property({Static:false, Public:true }, "HasMipmaps", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer */ 

(function OpenGLVertexBuffer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int32")]))) ();
  };

  function OpenGLVertexBuffer__ctor$00 (graphicsDevice, dynamic, vertexCount, vertexStride) {
    var handle = new JSIL.BoxedVariable(0);
    graphicsDevice.GraphicsDevice$GLDevice$value.glGenBuffers(1, /* ref */ handle);
    this.OpenGLVertexBuffer$Handle$value = (handle.get() >>> 0);
    this.OpenGLVertexBuffer$BufferSize$value = Math.imul(vertexStride, vertexCount);
    this.OpenGLVertexBuffer$Dynamic$value = (
      dynamic
         ? $T04().GL_STREAM_DRAW
         : $T04().GL_STATIC_DRAW)
    ;
    (graphicsDevice.GraphicsDevice$GLDevice$value).BindVertexBuffer(this);
    graphicsDevice.GraphicsDevice$GLDevice$value.glBufferData($T04().GL_ARRAY_BUFFER, $S01().CallStatic($T06(), "op_Explicit", null, this.OpenGLVertexBuffer$BufferSize$value).MemberwiseClone(), $T06().Zero.MemberwiseClone(), this.OpenGLVertexBuffer$Dynamic$value);
  };

  function OpenGLVertexBuffer__ctor$01 () {
    this.OpenGLVertexBuffer$Handle$value = 0;
  };

  function OpenGLVertexBuffer_get_BufferSize () {
    return this.OpenGLVertexBuffer$BufferSize$value;
  };

  function OpenGLVertexBuffer_get_Dynamic () {
    return this.OpenGLVertexBuffer$Dynamic$value;
  };

  function OpenGLVertexBuffer_get_Handle () {
    return this.OpenGLVertexBuffer$Handle$value;
  };

  function OpenGLVertexBuffer_set_BufferSize (value) {
    this.OpenGLVertexBuffer$BufferSize$value = (value | 0);
  };

  function OpenGLVertexBuffer_set_Dynamic (value) {
    this.OpenGLVertexBuffer$Dynamic$value = value;
  };

  function OpenGLVertexBuffer_set_Handle (value) {
    this.OpenGLVertexBuffer$Handle$value = (value >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Boolean, 
          $.Int32, $.Int32
        ]), 
      OpenGLVertexBuffer__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      OpenGLVertexBuffer__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_BufferSize", 
      JSIL.MethodSignature.Return($.Int32), 
      OpenGLVertexBuffer_get_BufferSize
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Dynamic", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")), 
      OpenGLVertexBuffer_get_Dynamic
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Handle", 
      JSIL.MethodSignature.Return($.UInt32), 
      OpenGLVertexBuffer_get_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_BufferSize", 
      JSIL.MethodSignature.Action($.Int32), 
      OpenGLVertexBuffer_set_BufferSize
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Dynamic", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")), 
      OpenGLVertexBuffer_set_Dynamic
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Handle", 
      JSIL.MethodSignature.Action($.UInt32), 
      OpenGLVertexBuffer_set_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "NullBuffer", $.Type); 
    $.Field({Static:false, Public:false}, "OpenGLVertexBuffer$Handle$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLVertexBuffer$BufferSize$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLVertexBuffer$Dynamic$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function OpenGLVertexBuffer__cctor () {
      $thisType.NullBuffer = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OpenGLVertexBuffer__cctor
    );

    $.Property({Static:false, Public:true }, "Handle", $.UInt32);

    $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

    $.Property({Static:false, Public:true }, "Dynamic", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer */ 

(function OpenGLIndexBuffer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.IndexElementSize)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int32")]))) ();
  };

  function OpenGLIndexBuffer__ctor$00 (graphicsDevice, dynamic, indexCount, elementSize) {
    var handle = new JSIL.BoxedVariable(0);
    graphicsDevice.GraphicsDevice$GLDevice$value.glGenBuffers(1, /* ref */ handle);
    this.OpenGLIndexBuffer$Handle$value = (handle.get() >>> 0);
    this.OpenGLIndexBuffer$Dynamic$value = (
      dynamic
         ? $T05().GL_STREAM_DRAW
         : $T05().GL_STATIC_DRAW)
    ;
    (this.OpenGLIndexBuffer$BufferSize$value = $S01().CallStatic($T06(), "op_Explicit", null, Math.imul(indexCount, (
            ((elementSize.valueOf() | 0) === 0)
               ? 2
               : 4)
        )).MemberwiseClone());
    (graphicsDevice.GraphicsDevice$GLDevice$value).BindIndexBuffer(this);
    graphicsDevice.GraphicsDevice$GLDevice$value.glBufferData($T05().GL_ELEMENT_ARRAY_BUFFER, this.OpenGLIndexBuffer$BufferSize$value.MemberwiseClone(), $T06().Zero.MemberwiseClone(), this.OpenGLIndexBuffer$Dynamic$value);
  };

  function OpenGLIndexBuffer__ctor$01 () {
    this.OpenGLIndexBuffer$Handle$value = 0;
  };

  function OpenGLIndexBuffer_get_BufferSize () {
    return this.OpenGLIndexBuffer$BufferSize$value;
  };

  function OpenGLIndexBuffer_get_Dynamic () {
    return this.OpenGLIndexBuffer$Dynamic$value;
  };

  function OpenGLIndexBuffer_get_Handle () {
    return this.OpenGLIndexBuffer$Handle$value;
  };

  function OpenGLIndexBuffer_set_BufferSize (value) {
    this.OpenGLIndexBuffer$BufferSize$value = value.MemberwiseClone();
  };

  function OpenGLIndexBuffer_set_Dynamic (value) {
    this.OpenGLIndexBuffer$Dynamic$value = value;
  };

  function OpenGLIndexBuffer_set_Handle (value) {
    this.OpenGLIndexBuffer$Handle$value = (value >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLIndexBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Boolean, 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.IndexElementSize")
        ]), 
      OpenGLIndexBuffer__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      OpenGLIndexBuffer__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_BufferSize", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      OpenGLIndexBuffer_get_BufferSize
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Dynamic", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")), 
      OpenGLIndexBuffer_get_Dynamic
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Handle", 
      JSIL.MethodSignature.Return($.UInt32), 
      OpenGLIndexBuffer_get_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_BufferSize", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      OpenGLIndexBuffer_set_BufferSize
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Dynamic", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")), 
      OpenGLIndexBuffer_set_Dynamic
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Handle", 
      JSIL.MethodSignature.Action($.UInt32), 
      OpenGLIndexBuffer_set_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "NullBuffer", $.Type); 
    $.Field({Static:false, Public:false}, "OpenGLIndexBuffer$Handle$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLIndexBuffer$Dynamic$value", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "OpenGLIndexBuffer$BufferSize$value", $asm01.TypeRef("System.IntPtr"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function OpenGLIndexBuffer__cctor () {
      $thisType.NullBuffer = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      OpenGLIndexBuffer__cctor
    );

    $.Property({Static:false, Public:true }, "Handle", $.UInt32);

    $.Property({Static:false, Public:true }, "Dynamic", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"));

    $.Property({Static:false, Public:true }, "BufferSize", $asm01.TypeRef("System.IntPtr"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexAttribute */ 

(function OpenGLVertexAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };

  function OpenGLVertexAttribute__ctor () {
    this.Divisor = 0;
    this.CurrentBuffer = 0;
    this.CurrentSize = 4;
    this.CurrentType = $T00().Single;
    this.CurrentNormalized = false;
    this.CurrentStride = 0;
    this.CurrentPointer = $T01().Zero.MemberwiseClone();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.OpenGLDevice+OpenGLVertexAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OpenGLVertexAttribute__ctor
    );

    $.Field({Static:false, Public:true }, "Divisor", $.Int32); 
    $.Field({Static:false, Public:true }, "CurrentBuffer", $.UInt32); 
    $.Field({Static:false, Public:true }, "CurrentSize", $.Int32); 
    $.Field({Static:false, Public:true }, "CurrentType", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat")); 
    $.Field({Static:false, Public:true }, "CurrentNormalized", $.Boolean); 
    $.Field({Static:false, Public:true }, "CurrentStride", $.Int32); 
    $.Field({Static:false, Public:true }, "CurrentPointer", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.OpenGLDevice+XNAToGL */ 

(function XNAToGL$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Type, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture3D)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureCube)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.Blend, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Blend)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.BlendFunction, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.BlendFunction)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.CompareFunction, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CompareFunction)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.StencilOperation, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.StencilOperation)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.CullMode, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.CullMode)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.FillMode, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.FillMode)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.TextureAddressMode, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureAddressMode)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.TextureFilter, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.TextureFilter)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.DepthFormat, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthFormat)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat, $asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.VertexElementFormat)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CullMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.FillMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureFilter"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), null))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]), null))) ();
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Graphics.OpenGLDevice+XNAToGL", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:true , ReadOnly:true }, "TextureType", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "BlendMode", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Blend"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "BlendEquation", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.BlendFunction"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "CompareFunc", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CompareFunction"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "GLStencilOp", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.StencilOperation"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "FrontFace", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.CullMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "GLFillMode", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.FillMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Wrap", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureAddressMode"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MagFilter", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureFilter"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MinMipFilter", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureFilter"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MinFilter", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.TextureFilter"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DepthStencilAttachment", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DepthStorage", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "GLDepthFormat", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DepthType", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "PointerType", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.VertexElementFormat"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])); 
    function XNAToGL__cctor () {
      var dictionary = $S00().Construct();
      dictionary.Add($T01().__Type__, $T02().GL_TEXTURE_2D);
      dictionary.Add($T03().__Type__, $T02().GL_TEXTURE_3D);
      dictionary.Add($T04().__Type__, $T02().GL_TEXTURE_CUBE_MAP);
      $thisType.TextureType = dictionary;
      var dictionary2 = $S01().Construct();
      dictionary2.Add($T06().DestinationAlpha, $T02().GL_DST_ALPHA);
      dictionary2.Add($T06().DestinationColor, $T02().GL_DST_COLOR);
      dictionary2.Add($T06().InverseDestinationAlpha, $T02().GL_ONE_MINUS_DST_ALPHA);
      dictionary2.Add($T06().InverseDestinationColor, $T02().GL_ONE_MINUS_DST_COLOR);
      dictionary2.Add($T06().InverseSourceAlpha, $T02().GL_ONE_MINUS_SRC_ALPHA);
      dictionary2.Add($T06().InverseSourceColor, $T02().GL_ONE_MINUS_SRC_COLOR);
      dictionary2.Add($T06().One, $T02().GL_LINES);
      dictionary2.Add($T06().SourceAlpha, $T02().GL_SRC_ALPHA);
      dictionary2.Add($T06().SourceAlphaSaturation, $T02().GL_SRC_ALPHA_SATURATE);
      dictionary2.Add($T06().SourceColor, $T02().GL_SRC_COLOR);
      dictionary2.Add($T06().Zero, $T02().GL_ZERO);
      $thisType.BlendMode = dictionary2;
      var dictionary3 = $S02().Construct();
      dictionary3.Add($T08().Add, $T02().GL_FUNC_ADD);
      dictionary3.Add($T08().Max, $T02().GL_MAX);
      dictionary3.Add($T08().Min, $T02().GL_MIN);
      dictionary3.Add($T08().ReverseSubtract, $T02().GL_FUNC_REVERSE_SUBTRACT);
      dictionary3.Add($T08().Subtract, $T02().GL_FUNC_SUBTRACT);
      $thisType.BlendEquation = dictionary3;
      var dictionary4 = $S03().Construct();
      dictionary4.Add($T0A().Always, $T02().GL_ALWAYS);
      dictionary4.Add($T0A().Equal, $T02().GL_EQUAL);
      dictionary4.Add($T0A().Greater, $T02().GL_GREATER);
      dictionary4.Add($T0A().GreaterEqual, $T02().GL_GEQUAL);
      dictionary4.Add($T0A().Less, $T02().GL_LESS);
      dictionary4.Add($T0A().LessEqual, $T02().GL_LEQUAL);
      dictionary4.Add($T0A().Never, $T02().GL_NEVER);
      dictionary4.Add($T0A().NotEqual, $T02().GL_NOTEQUAL);
      $thisType.CompareFunc = dictionary4;
      var dictionary5 = $S04().Construct();
      dictionary5.Add($T0C().Decrement, $T02().GL_DECR_WRAP);
      dictionary5.Add($T0C().DecrementSaturation, $T02().GL_DECR);
      dictionary5.Add($T0C().Increment, $T02().GL_INCR_WRAP);
      dictionary5.Add($T0C().IncrementSaturation, $T02().GL_INCR);
      dictionary5.Add($T0C().Invert, $T02().GL_INVERT);
      dictionary5.Add($T0C().Keep, $T02().GL_KEEP);
      dictionary5.Add($T0C().Replace, $T02().GL_REPLACE);
      dictionary5.Add($T0C().Zero, $T02().GL_ZERO);
      $thisType.GLStencilOp = dictionary5;
      var dictionary6 = $S05().Construct();
      dictionary6.Add($T0E().CullClockwiseFace, $T02().GL_CW);
      dictionary6.Add($T0E().CullCounterClockwiseFace, $T02().GL_CCW);
      $thisType.FrontFace = dictionary6;
      var dictionary7 = $S06().Construct();
      dictionary7.Add($T10().Solid, $T02().GL_FILL);
      dictionary7.Add($T10().WireFrame, $T02().GL_LINE);
      $thisType.GLFillMode = dictionary7;
      var dictionary8 = $S07().Construct();
      dictionary8.Add($T12().Clamp, $T02().GL_CLAMP_TO_EDGE);
      dictionary8.Add($T12().Mirror, $T02().GL_MIRRORED_REPEAT);
      dictionary8.Add($T12().Wrap, $T02().GL_REPEAT);
      $thisType.Wrap = dictionary8;
      var dictionary9 = $S08().Construct();
      dictionary9.Add($T14().Point, $T02().GL_NEAREST);
      dictionary9.Add($T14().Linear, $T02().GL_LINEAR);
      dictionary9.Add($T14().Anisotropic, $T02().GL_LINEAR);
      dictionary9.Add($T14().LinearMipPoint, $T02().GL_LINEAR);
      dictionary9.Add($T14().MinPointMagLinearMipPoint, $T02().GL_LINEAR);
      dictionary9.Add($T14().MinPointMagLinearMipLinear, $T02().GL_LINEAR);
      dictionary9.Add($T14().MinLinearMagPointMipPoint, $T02().GL_NEAREST);
      dictionary9.Add($T14().MinLinearMagPointMipLinear, $T02().GL_NEAREST);
      $thisType.MagFilter = dictionary9;
      var dictionary10 = $S08().Construct();
      dictionary10.Add($T14().Point, $T02().GL_NEAREST_MIPMAP_NEAREST);
      dictionary10.Add($T14().Linear, $T02().GL_LINEAR_MIPMAP_LINEAR);
      dictionary10.Add($T14().Anisotropic, $T02().GL_LINEAR_MIPMAP_LINEAR);
      dictionary10.Add($T14().LinearMipPoint, $T02().GL_LINEAR_MIPMAP_NEAREST);
      dictionary10.Add($T14().MinPointMagLinearMipPoint, $T02().GL_NEAREST_MIPMAP_NEAREST);
      dictionary10.Add($T14().MinPointMagLinearMipLinear, $T02().GL_NEAREST_MIPMAP_LINEAR);
      dictionary10.Add($T14().MinLinearMagPointMipPoint, $T02().GL_LINEAR_MIPMAP_NEAREST);
      dictionary10.Add($T14().MinLinearMagPointMipLinear, $T02().GL_LINEAR_MIPMAP_LINEAR);
      $thisType.MinMipFilter = dictionary10;
      var dictionary11 = $S08().Construct();
      dictionary11.Add($T14().Point, $T02().GL_NEAREST);
      dictionary11.Add($T14().Linear, $T02().GL_LINEAR);
      dictionary11.Add($T14().Anisotropic, $T02().GL_LINEAR);
      dictionary11.Add($T14().LinearMipPoint, $T02().GL_LINEAR);
      dictionary11.Add($T14().MinPointMagLinearMipPoint, $T02().GL_NEAREST);
      dictionary11.Add($T14().MinPointMagLinearMipLinear, $T02().GL_NEAREST);
      dictionary11.Add($T14().MinLinearMagPointMipPoint, $T02().GL_LINEAR);
      dictionary11.Add($T14().MinLinearMagPointMipLinear, $T02().GL_LINEAR);
      $thisType.MinFilter = dictionary11;
      var dictionary12 = $S09().Construct();
      dictionary12.Add($T16().Depth16, $T02().GL_DEPTH_ATTACHMENT);
      dictionary12.Add($T16().Depth24, $T02().GL_DEPTH_ATTACHMENT);
      dictionary12.Add($T16().Depth24Stencil8, $T02().GL_DEPTH_STENCIL_ATTACHMENT);
      $thisType.DepthStencilAttachment = dictionary12;
      var dictionary13 = $S09().Construct();
      dictionary13.Add($T16().Depth16, $T02().GL_DEPTH_COMPONENT16);
      dictionary13.Add($T16().Depth24, $T02().GL_DEPTH_COMPONENT24);
      dictionary13.Add($T16().Depth24Stencil8, $T02().GL_DEPTH24_STENCIL8);
      $thisType.DepthStorage = dictionary13;
      var dictionary14 = $S09().Construct();
      dictionary14.Add($T16().Depth16, $T02().GL_DEPTH_COMPONENT);
      dictionary14.Add($T16().Depth24, $T02().GL_DEPTH_COMPONENT);
      dictionary14.Add($T16().Depth24Stencil8, $T02().GL_DEPTH_STENCIL);
      $thisType.GLDepthFormat = dictionary14;
      var dictionary15 = $S09().Construct();
      dictionary15.Add($T16().Depth16, $T02().GL_UNSIGNED_BYTE);
      dictionary15.Add($T16().Depth24, $T02().GL_UNSIGNED_BYTE);
      dictionary15.Add($T16().Depth24Stencil8, $T02().GL_UNSIGNED_INT_24_8);
      $thisType.DepthType = dictionary15;
      var dictionary16 = $S0A().Construct();
      dictionary16.Add($T18().Single, $T02().GL_FLOAT);
      dictionary16.Add($T18().Vector2, $T02().GL_FLOAT);
      dictionary16.Add($T18().Vector3, $T02().GL_FLOAT);
      dictionary16.Add($T18().Vector4, $T02().GL_FLOAT);
      dictionary16.Add($T18().Color, $T02().GL_UNSIGNED_BYTE);
      dictionary16.Add($T18().Byte4, $T02().GL_UNSIGNED_BYTE);
      dictionary16.Add($T18().Short2, $T02().GL_SHORT);
      dictionary16.Add($T18().Short4, $T02().GL_SHORT);
      dictionary16.Add($T18().NormalizedShort2, $T02().GL_SHORT);
      dictionary16.Add($T18().NormalizedShort4, $T02().GL_SHORT);
      dictionary16.Add($T18().HalfVector2, $T02().GL_HALF_FLOAT);
      dictionary16.Add($T18().HalfVector4, $T02().GL_HALF_FLOAT);
      $thisType.PointerType = dictionary16;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      XNAToGL__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.OpenGLDevice+FauxBackbuffer */ 

(function FauxBackbuffer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.DepthFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function FauxBackbuffer__ctor (device, width, height, depthFormat) {
    this.FauxBackbuffer$Width$value = (width | 0);
    this.FauxBackbuffer$Height$value = (height | 0);
    this.FauxBackbuffer$Handle$value = 0;
  };

  function FauxBackbuffer_Dispose () {
  };

  function FauxBackbuffer_get_Handle () {
    return this.FauxBackbuffer$Handle$value;
  };

  function FauxBackbuffer_get_Height () {
    return this.FauxBackbuffer$Height$value;
  };

  function FauxBackbuffer_get_Width () {
    return this.FauxBackbuffer$Width$value;
  };

  function FauxBackbuffer_ResetFramebuffer (graphicsDevice, width, height, depthFormat) {
    this.FauxBackbuffer$Width$value = (width | 0);
    this.FauxBackbuffer$Height$value = (height | 0);
  };

  function FauxBackbuffer_set_Handle (value) {
    this.FauxBackbuffer$Handle$value = (value >>> 0);
  };

  function FauxBackbuffer_set_Height (value) {
    this.FauxBackbuffer$Height$value = (value | 0);
  };

  function FauxBackbuffer_set_Width (value) {
    this.FauxBackbuffer$Width$value = (value | 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Graphics.OpenGLDevice+FauxBackbuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice"), $.Int32, 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")
        ]), 
      FauxBackbuffer__ctor
    );

    $.Method({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      FauxBackbuffer_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Handle", 
      JSIL.MethodSignature.Return($.UInt32), 
      FauxBackbuffer_get_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      FauxBackbuffer_get_Height
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      FauxBackbuffer_get_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "ResetFramebuffer", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $.Int32, 
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.DepthFormat")
        ]), 
      FauxBackbuffer_ResetFramebuffer
    );

    $.Method({Static:false, Public:false}, "set_Handle", 
      JSIL.MethodSignature.Action($.UInt32), 
      FauxBackbuffer_set_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Height", 
      JSIL.MethodSignature.Action($.Int32), 
      FauxBackbuffer_set_Height
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Width", 
      JSIL.MethodSignature.Action($.Int32), 
      FauxBackbuffer_set_Width
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "FauxBackbuffer$Handle$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "FauxBackbuffer$Width$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "FauxBackbuffer$Height$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Handle", $.UInt32);

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    GL_ZERO: 0, 
    GL_LINES: 1, 
    GL_ONE: 1, 
    GL_LINE_STRIP: 3, 
    GL_TRIANGLES: 4, 
    GL_TRIANGLE_STRIP: 5, 
    GL_DEPTH_BUFFER_BIT: 256, 
    GL_NEVER: 512, 
    GL_LESS: 513, 
    GL_EQUAL: 514, 
    GL_LEQUAL: 515, 
    GL_GREATER: 516, 
    GL_NOTEQUAL: 517, 
    GL_GEQUAL: 518, 
    GL_ALWAYS: 519, 
    GL_SRC_COLOR: 768, 
    GL_ONE_MINUS_SRC_COLOR: 769, 
    GL_SRC_ALPHA: 770, 
    GL_ONE_MINUS_SRC_ALPHA: 771, 
    GL_DST_ALPHA: 772, 
    GL_ONE_MINUS_DST_ALPHA: 773, 
    GL_DST_COLOR: 774, 
    GL_ONE_MINUS_DST_COLOR: 775, 
    GL_SRC_ALPHA_SATURATE: 776, 
    GL_STENCIL_BUFFER_BIT: 1024, 
    GL_FRONT: 1028, 
    GL_BACK: 1029, 
    GL_FRONT_AND_BACK: 1032, 
    GL_CW: 2304, 
    GL_CCW: 2305, 
    GL_CULL_FACE: 2884, 
    GL_DEPTH_TEST: 2929, 
    GL_STENCIL_TEST: 2960, 
    GL_BLEND: 3042, 
    GL_SCISSOR_TEST: 3089, 
    GL_UNPACK_ALIGNMENT: 3317, 
    GL_TEXTURE_2D: 3553, 
    GL_TEXTURE_WIDTH: 4096, 
    GL_TEXTURE_HEIGHT: 4097, 
    GL_DONT_CARE: 4352, 
    GL_BYTE: 5120, 
    GL_UNSIGNED_BYTE: 5121, 
    GL_SHORT: 5122, 
    GL_UNSIGNED_SHORT: 5123, 
    GL_UNSIGNED_INT: 5125, 
    GL_FLOAT: 5126, 
    GL_HALF_FLOAT: 5131, 
    GL_INVERT: 5386, 
    GL_DEPTH_COMPONENT: 6402, 
    GL_RED: 6403, 
    GL_RGB: 6407, 
    GL_RGBA: 6408, 
    GL_LUMINANCE: 6409, 
    GL_LINE: 6913, 
    GL_FILL: 6914, 
    GL_KEEP: 7680, 
    GL_REPLACE: 7681, 
    GL_INCR: 7682, 
    GL_DECR: 7683, 
    GL_VENDOR: 7936, 
    GL_RENDERER: 7937, 
    GL_VERSION: 7938, 
    GL_EXTENSIONS: 7939, 
    GL_NEAREST: 9728, 
    GL_LINEAR: 9729, 
    GL_NEAREST_MIPMAP_NEAREST: 9984, 
    GL_LINEAR_MIPMAP_NEAREST: 9985, 
    GL_NEAREST_MIPMAP_LINEAR: 9986, 
    GL_LINEAR_MIPMAP_LINEAR: 9987, 
    GL_TEXTURE_MAG_FILTER: 10240, 
    GL_TEXTURE_MIN_FILTER: 10241, 
    GL_TEXTURE_WRAP_S: 10242, 
    GL_TEXTURE_WRAP_T: 10243, 
    GL_REPEAT: 10497, 
    GL_COLOR_BUFFER_BIT: 16384, 
    GL_FUNC_ADD: 32774, 
    GL_MIN: 32775, 
    GL_MAX: 32776, 
    GL_FUNC_SUBTRACT: 32778, 
    GL_FUNC_REVERSE_SUBTRACT: 32779, 
    GL_UNSIGNED_SHORT_4_4_4_4: 32819, 
    GL_UNSIGNED_SHORT_5_5_5_1: 32820, 
    GL_UNSIGNED_INT_10_10_10_2: 32822, 
    GL_POLYGON_OFFSET_FILL: 32823, 
    GL_RGBA4: 32854, 
    GL_RGB10_A2_EXT: 32857, 
    GL_RGBA16: 32859, 
    GL_TEXTURE_3D: 32879, 
    GL_TEXTURE_WRAP_R: 32882, 
    GL_BGRA: 32993, 
    GL_CLAMP_TO_EDGE: 33071, 
    GL_TEXTURE_BASE_LEVEL: 33084, 
    GL_TEXTURE_MAX_LEVEL: 33085, 
    GL_DEPTH_COMPONENT16: 33189, 
    GL_DEPTH_COMPONENT24: 33190, 
    GL_DEPTH_STENCIL_ATTACHMENT: 33306, 
    GL_RG: 33319, 
    GL_RG16: 33324, 
    GL_R16F: 33325, 
    GL_R32F: 33326, 
    GL_RG16F: 33327, 
    GL_RG32F: 33328, 
    GL_RG8I: 33335, 
    GL_DEBUG_SOURCE_API_ARB: 33350, 
    GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB: 33351, 
    GL_DEBUG_SOURCE_SHADER_COMPILER_ARB: 33352, 
    GL_DEBUG_SOURCE_THIRD_PARTY_ARB: 33353, 
    GL_DEBUG_SOURCE_APPLICATION_ARB: 33354, 
    GL_DEBUG_SOURCE_OTHER_ARB: 33355, 
    GL_DEBUG_TYPE_ERROR_ARB: 33356, 
    GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB: 33357, 
    GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB: 33358, 
    GL_DEBUG_TYPE_PORTABILITY_ARB: 33359, 
    GL_DEBUG_TYPE_PERFORMANCE_ARB: 33360, 
    GL_DEBUG_TYPE_OTHER_ARB: 33361, 
    GL_UNSIGNED_SHORT_5_6_5: 33635, 
    GL_MIRRORED_REPEAT: 33648, 
    GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: 33777, 
    GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: 33778, 
    GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: 33779, 
    GL_TEXTURE0: 33984, 
    GL_DEPTH_STENCIL: 34041, 
    GL_UNSIGNED_INT_24_8: 34042, 
    GL_TEXTURE_MAX_ANISOTROPY_EXT: 34046, 
    GL_TEXTURE_LOD_BIAS: 34049, 
    GL_INCR_WRAP: 34055, 
    GL_DECR_WRAP: 34056, 
    GL_TEXTURE_CUBE_MAP: 34067, 
    GL_TEXTURE_CUBE_MAP_POSITIVE_X: 34069, 
    GL_COMPRESSED_TEXTURE_FORMATS: 34467, 
    GL_RGBA32F: 34836, 
    GL_RGBA16F: 34842, 
    GL_MAX_DRAW_BUFFERS: 34852, 
    GL_QUERY_RESULT: 34918, 
    GL_QUERY_RESULT_AVAILABLE: 34919, 
    GL_MAX_VERTEX_ATTRIBS: 34921, 
    GL_MAX_TEXTURE_IMAGE_UNITS: 34930, 
    GL_ARRAY_BUFFER: 34962, 
    GL_ELEMENT_ARRAY_BUFFER: 34963, 
    GL_READ_ONLY: 35000, 
    GL_STREAM_DRAW: 35040, 
    GL_STATIC_DRAW: 35044, 
    GL_DEPTH24_STENCIL8: 35056, 
    GL_SAMPLES_PASSED: 35092, 
    GL_FRAGMENT_SHADER: 35632, 
    GL_VERTEX_SHADER: 35633, 
    GL_COMPILE_STATUS: 35713, 
    GL_LINK_STATUS: 35714, 
    GL_CURRENT_PROGRAM: 35725, 
    GL_READ_FRAMEBUFFER: 36008, 
    GL_DRAW_FRAMEBUFFER: 36009, 
    GL_COLOR_ATTACHMENT0: 36064, 
    GL_DEPTH_ATTACHMENT: 36096, 
    GL_STENCIL_ATTACHMENT: 36128, 
    GL_FRAMEBUFFER: 36160, 
    GL_RENDERBUFFER: 36161, 
    GL_RGBA8I: 36238, 
    GL_DEBUG_SEVERITY_HIGH_ARB: 37190, 
    GL_DEBUG_SEVERITY_MEDIUM_ARB: 37191, 
    GL_DEBUG_SEVERITY_LOW_ARB: 37192, 
  }
);

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetString */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetString", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetIntegerv */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetIntegerv", false, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+Enable */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Enable", false, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+Disable */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Disable", false, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_Viewport */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_Viewport", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DepthRange */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DepthRange", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Double"), $asm01.TypeRef("System.Double")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+Scissor */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Scissor", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+BlendColor */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BlendColor", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
      $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+BlendFuncSeparate */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BlendFuncSeparate", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+BlendEquationSeparate */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BlendEquationSeparate", false, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+ColorMask */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ColorMask", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.Boolean"), $asm01.TypeRef("System.Boolean"), 
      $asm01.TypeRef("System.Boolean"), $asm01.TypeRef("System.Boolean")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+ColorMaskIndexedEXT */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ColorMaskIndexedEXT", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.Boolean"), 
      $asm01.TypeRef("System.Boolean"), $asm01.TypeRef("System.Boolean"), 
      $asm01.TypeRef("System.Boolean")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DepthMask */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DepthMask", false, [], 
  JSIL.MethodSignature.Action($asm01.TypeRef("System.Boolean")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DepthFunc */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DepthFunc", false, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilMask */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilMask", false, [], 
  JSIL.MethodSignature.Action($asm01.TypeRef("System.Int32")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilFuncSeparate */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilFuncSeparate", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilOpSeparate */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilOpSeparate", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilFunc */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilFunc", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilOp */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StencilOp", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+CullFace */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CullFace", false, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+FrontFace */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+FrontFace", false, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+PolygonMode */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+PolygonMode", false, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+PolygonOffset */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+PolygonOffset", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenTextures */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenTextures", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteTextures */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteTextures", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_BindTexture */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_BindTexture", false, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.UInt32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexImage2D */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexImage2D", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexSubImage2D */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexSubImage2D", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+CompressedTexImage2D */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CompressedTexImage2D", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+CompressedTexSubImage2D */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CompressedTexSubImage2D", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexImage3D */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexImage3D", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexSubImage3D */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexSubImage3D", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetTexImage */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetTexImage", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexParameteri */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexParameteri", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm01.TypeRef("System.Int32")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexParameterf */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+TexParameterf", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm01.TypeRef("System.Single")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+ActiveTexture */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ActiveTexture", false, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetTexLevelParameteriv */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetTexLevelParameteriv", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+PixelStorei */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+PixelStorei", false, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenBuffers */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenBuffers", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteBuffers */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteBuffers", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+BindBuffer */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BindBuffer", false, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.UInt32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+BufferData */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BufferData", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.IntPtr"), 
      $asm01.TypeRef("System.IntPtr"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+BufferSubData */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BufferSubData", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.IntPtr"), 
      $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+MapBuffer */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+MapBuffer", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+UnmapBuffer */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+UnmapBuffer", false, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+EnableVertexAttribArray */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+EnableVertexAttribArray", false, [], 
  JSIL.MethodSignature.Action($asm01.TypeRef("System.Int32")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DisableVertexAttribArray */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DisableVertexAttribArray", false, [], 
  JSIL.MethodSignature.Action($asm01.TypeRef("System.Int32")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+VertexAttribDivisor */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+VertexAttribDivisor", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_VertexAttribPointer */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_VertexAttribPointer", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Boolean"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+ClearColor */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ClearColor", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
      $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+ClearDepth */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ClearDepth", false, [], 
  JSIL.MethodSignature.Action($asm01.TypeRef("System.Double")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+ClearStencil */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ClearStencil", false, [], 
  JSIL.MethodSignature.Action($asm01.TypeRef("System.Int32")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_Clear */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_Clear", false, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawBuffers */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawBuffers", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+ReadPixels */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ReadPixels", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenerateMipmap */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenerateMipmap", false, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenFramebuffers */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenFramebuffers", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteFramebuffers */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteFramebuffers", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_BindFramebuffer */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+G_BindFramebuffer", false, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.UInt32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+FramebufferTexture2D */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+FramebufferTexture2D", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.UInt32"), 
      $asm01.TypeRef("System.Int32")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+FramebufferRenderbuffer */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+FramebufferRenderbuffer", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.UInt32")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenRenderbuffers */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenRenderbuffers", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteRenderbuffers */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteRenderbuffers", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+BindRenderbuffer */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BindRenderbuffer", false, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.UInt32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+RenderbufferStorage */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+RenderbufferStorage", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawElementsInstanced */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawElementsInstanced", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.IntPtr"), 
      $asm01.TypeRef("System.Int32")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawRangeElements */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawRangeElements", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawArrays */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DrawArrays", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.Int32")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenQueries */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GenQueries", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteQueries */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteQueries", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+BeginQuery */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BeginQuery", false, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.UInt32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+EndQuery */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+EndQuery", false, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetQueryObjectiv */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetQueryObjectiv", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.UInt32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+CreateShader */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CreateShader", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.UInt32"), [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteShader */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteShader", false, [], 
  JSIL.MethodSignature.Action($asm01.TypeRef("System.UInt32")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+ShaderSource */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+ShaderSource", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.String")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+CompileShader */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CompileShader", false, [], 
  JSIL.MethodSignature.Action($asm01.TypeRef("System.UInt32")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+CreateProgram */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+CreateProgram", false, [], 
  JSIL.MethodSignature.Return($asm01.TypeRef("System.UInt32")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteProgram */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DeleteProgram", false, [], 
  JSIL.MethodSignature.Action($asm01.TypeRef("System.UInt32")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+AttachShader */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+AttachShader", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.UInt32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DetachShader */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DetachShader", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.UInt32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+LinkProgram */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+LinkProgram", false, [], 
  JSIL.MethodSignature.Action($asm01.TypeRef("System.UInt32")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+UseProgram */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+UseProgram", false, [], 
  JSIL.MethodSignature.Action($asm01.TypeRef("System.UInt32")));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+Uniform1i */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Uniform1i", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+Uniform4fv */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Uniform4fv", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetShaderiv */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetShaderiv", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.UInt32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetProgramiv */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetProgramiv", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.UInt32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetUniformLocation */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetUniformLocation", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.String")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetAttribLocation */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetAttribLocation", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.String")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+BindAttribLocation */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+BindAttribLocation", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.UInt32"), 
      $asm01.TypeRef("System.String")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+IsShader */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+IsShader", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.UInt32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+IsProgram */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+IsProgram", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.UInt32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetShaderInfoLog */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetShaderInfoLog", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.UInt32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetProgramInfoLog */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GetProgramInfoLog", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.UInt32")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+Flush */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+Flush", false, [], 
  JSIL.MethodSignature.Void);

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DebugMessageCallback */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DebugMessageCallback", false, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DebugProc"), $asm01.TypeRef("System.IntPtr")]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DebugMessageControl */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DebugMessageControl", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm01.TypeRef("System.Int32"), 
      $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.Boolean")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+DebugProc */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+DebugProc", false, [], 
  new JSIL.MethodSignature(null, [
      $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm01.TypeRef("System.UInt32"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.OpenGLDevice+GLenum"), 
      $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.IntPtr"), 
      $asm01.TypeRef("System.IntPtr")
    ]));

/* delegate Microsoft.Xna.Framework.Graphics.OpenGLDevice+StringMarkerGREMEDY */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Graphics.OpenGLDevice+StringMarkerGREMEDY", false, [], 
  new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")])]));

/* class Microsoft.Xna.Framework.Graphics.OcclusionQuery */ 

(function OcclusionQuery$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.OpenGLDevice_GLenum)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function OcclusionQuery__ctor (graphicsDevice) {
    $T01().prototype._ctor.call(this);
    this.GraphicsResource$GraphicsDevice$value = graphicsDevice;
    this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGenQueries(1, /* ref */ new JSIL.MemberReference(this, "glQueryId"));
  };

  function OcclusionQuery_$lDispose$gb__0 () {
    this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glDeleteQueries(1, /* ref */ new JSIL.MemberReference(this, "glQueryId"));
  };

  function OcclusionQuery_Begin () {
    this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glBeginQuery($T02().GL_SAMPLES_PASSED, this.glQueryId);
  };

  function OcclusionQuery_Dispose$00 (disposing) {
    if (!this.GraphicsResource$IsDisposed$value) {
      $T00().AddDisposeAction($T04().New(this, $thisType.prototype.$lDispose$gb__0, function () { return JSIL.GetMethodInfo($thisType, "$lDispose$gb__0", JSIL.MethodSignature.Void, false); }));
    }
    $T01().prototype.Dispose.call(this, disposing);
  };

  function OcclusionQuery_End () {
    this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glEndQuery($T02().GL_SAMPLES_PASSED);
  };

  function OcclusionQuery_get_IsComplete () {
    var resultReady = new JSIL.BoxedVariable(0);
    this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetQueryObjectiv(this.glQueryId, $T02().GL_QUERY_RESULT_AVAILABLE, /* ref */ resultReady);
    return ((resultReady.get() | 0) !== 0);
  };

  function OcclusionQuery_get_PixelCount () {
    var result = new JSIL.BoxedVariable(0);
    this.GraphicsResource$GraphicsDevice$value.GraphicsDevice$GLDevice$value.glGetQueryObjectiv(this.glQueryId, $T02().GL_QUERY_RESULT, /* ref */ result);
    return result.get();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsResource"), 
      Name: "Microsoft.Xna.Framework.Graphics.OcclusionQuery", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")), 
      OcclusionQuery__ctor
    );

    $.Method({Static:false, Public:false}, "$lDispose$gb__0", 
      JSIL.MethodSignature.Void, 
      OcclusionQuery_$lDispose$gb__0
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "Begin", 
      JSIL.MethodSignature.Void, 
      OcclusionQuery_Begin
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      OcclusionQuery_Dispose$00
    );

    $.Method({Static:false, Public:true }, "End", 
      JSIL.MethodSignature.Void, 
      OcclusionQuery_End
    );

    $.Method({Static:false, Public:true }, "get_IsComplete", 
      JSIL.MethodSignature.Return($.Boolean), 
      OcclusionQuery_get_IsComplete
    );

    $.Method({Static:false, Public:true }, "get_PixelCount", 
      JSIL.MethodSignature.Return($.Int32), 
      OcclusionQuery_get_PixelCount
    );

    $.Field({Static:false, Public:false}, "glQueryId", $.UInt32); 
    $.Property({Static:false, Public:true }, "IsComplete", $.Boolean);

    $.Property({Static:false, Public:true }, "PixelCount", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.Touch.TouchPanelState */ 

(function TouchPanelState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm03.System.Collections.Generic.Queue$b1.Of($asm00.Microsoft.Xna.Framework.Input.Touch.GestureSample))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocation))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Point)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocation)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.GestureType)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocationState)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchCollection)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.GestureSample)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocation))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.DisplayOrientation)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm03.TypeRef("System.Collections.Generic.Queue`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureSample")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation"), [
        $asm01.TypeRef("System.Int32"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("System.TimeSpan")
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };

  function TouchPanelState__ctor (window) {
    this.GestureList = $S00().Construct();
    this.touchState = $S01().Construct();
    this.gestureState = $S01().Construct();
    this.touchScale = $T04().get_One().MemberwiseClone();
    this.displaySize = $T05().get_Zero().MemberwiseClone();
    this.nextTouchId = 2;
    this.touchIds = $S02().Construct();
    this.capabilities = new ($T07())();
    this.pinchTouch = JSIL.Array.New($T08(), 2);
    this.dragGestureStarted = $T09().None;
    this.Window = window;
  };

  function TouchPanelState_AddEvent$00 (id, state, position) {
    this.AddEvent(id, state, position.MemberwiseClone(), false);
  };

  function TouchPanelState_AddEvent$01 (id, state, position, isMouse) {
    var touchId = new JSIL.BoxedVariable(0);
    var evt = new ($T08())();
    if (state === $T0B().Pressed) {
      if (isMouse) {
        (this.touchIds).set_Item(id, 1);
      } else {
        (this.touchIds).set_Item(id, this.nextTouchId = (((this.nextTouchId | 0) + 1) | 0));
      }
    }
    if ((this.touchIds).TryGetValue(id, /* ref */ touchId)) {
      if (!(!(!isMouse || 
            this.TouchPanelState$EnableMouseTouchPoint$value) && !this.TouchPanelState$EnableMouseGestures$value)) {
        $T08().prototype._ctor.call(evt, touchId.get(), state, $S03().CallStatic($T04(), "op_Multiply", null, position.MemberwiseClone(), this.touchScale).MemberwiseClone(), $thisType.TouchPanelState$CurrentTimestamp$value.MemberwiseClone());
        if (!(isMouse && !this.TouchPanelState$EnableMouseTouchPoint$value)) {
          this.ApplyTouch(this.touchState, evt.MemberwiseClone());
        }
        if (!(((((this.TouchPanelState$EnabledGestures$value).valueOf() | 0) === 0) && 
              (((this.gestureState).get_Count() | 0) <= 0)) || (isMouse && 
              !this.TouchPanelState$EnableMouseGestures$value))) {
          this.ApplyTouch(this.gestureState, evt.MemberwiseClone());
          if (this.TouchPanelState$EnabledGestures$value !== $T09().None) {
            this.UpdateGestures(true);
          }
          this.AgeTouches(this.gestureState);
        }
      }
      if (state === $T0B().Released) {
        (this.touchIds).Remove(id);
      }
    }
  };

  function TouchPanelState_AgeTouches (state) {

    for (var i = (((state.get_Count() | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
      var touch = state.get_Item(i).MemberwiseClone();
      if (touch.get_State() === $T0B().Released) {
        state.RemoveAt(i);
      } else if (touch.get_State() === $T0B().Pressed) {
        touch.AgeState();
        state.set_Item(i, touch.MemberwiseClone());
      }
    }
  };

  function TouchPanelState_ApplyTouch (state, touch) {
    if (touch.get_State() === $T0B().Pressed) {
      state.Add(touch.MemberwiseClone());
    } else {

    $loop0: 
      for (var i = 0; i < (state.get_Count() | 0); i = ((i + 1) | 0)) {
        var existingTouch = state.get_Item(i).MemberwiseClone();
        if ((existingTouch.get_Id() | 0) === (touch.get_Id() | 0)) {
          if (!((existingTouch.get_State() !== $T0B().Pressed) || (touch.get_State() !== $T0B().Released))) {
            state.RemoveAt(i);
          } else {
            existingTouch.UpdateState(touch.MemberwiseClone());
            state.set_Item(i, existingTouch.MemberwiseClone());
          }
          break $loop0;
        }
      }
    }
  };

  function TouchPanelState_GestureIsEnabled (gestureType) {
    return ($T09().$Cast(this.TouchPanelState$EnabledGestures$value & gestureType) !== $T09().None);
  };

  function TouchPanelState_get_CurrentTimestamp () {
    return $thisType.TouchPanelState$CurrentTimestamp$value;
  };

  function TouchPanelState_get_DisplayHeight () {
    return this.displaySize.Y;
  };

  function TouchPanelState_get_DisplayOrientation () {
    return this.TouchPanelState$DisplayOrientation$value;
  };

  function TouchPanelState_get_DisplayWidth () {
    return this.displaySize.X;
  };

  function TouchPanelState_get_EnabledGestures () {
    return this.TouchPanelState$EnabledGestures$value;
  };

  function TouchPanelState_get_EnableMouseGestures () {
    return this.TouchPanelState$EnableMouseGestures$value;
  };

  function TouchPanelState_get_EnableMouseTouchPoint () {
    return this.TouchPanelState$EnableMouseTouchPoint$value;
  };

  function TouchPanelState_get_IsGestureAvailable () {
    this.UpdateGestures(false);
    return (((this.GestureList).get_Count() | 0) > 0);
  };

  function TouchPanelState_get_WindowHandle () {
    return this.TouchPanelState$WindowHandle$value;
  };

  function TouchPanelState_GetCapabilities () {
    (this.capabilities).Initialize();
    return this.capabilities;
  };

  function TouchPanelState_GetState () {

    for (var i = ((((this.touchState).get_Count() | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
      var touch = (this.touchState).get_Item(i).MemberwiseClone();
      if (!(!touch.SameFrameReleased || 
          !$T00().op_LessThan(touch.get_Timestamp().MemberwiseClone(), $thisType.TouchPanelState$CurrentTimestamp$value.MemberwiseClone()) || (touch.get_State() !== $T0B().Pressed))) {
        (this.touchState).RemoveAt(i);
      }
    }
    var result = (
      (((this.touchState).get_Count() | 0) > 0)
         ? new ($T0D())($T03().prototype.ToArray.call(this.touchState))
         : $T0D().Empty)
    .MemberwiseClone();
    this.AgeTouches(this.touchState);
    return result;
  };

  function TouchPanelState_ProcessDoubleTap (touch) {
    if (!(!(!this.GestureIsEnabled($T09().DoubleTap) || 
          this.tapDisabled) && ((this.lastTap).get_State() !== $T0B().Invalid))) {
      var result = false;
    } else {
      var dist = +$T04().Distance(
        touch.get_Position(), 
        (this.lastTap).get_Position()
      );
      if (dist > 35) {
        result = false;
      } else if (+($T00().op_Subtraction(
            touch.get_Timestamp(), 
            (this.lastTap).get_Timestamp()
          )).get_TotalMilliseconds() > 300) {
        result = false;
      } else {
        $T02().prototype.Enqueue.call(this.GestureList, new ($T0F())($T09().DoubleTap, touch.get_Timestamp().MemberwiseClone(), touch.get_Position().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone()));
        this.tapDisabled = true;
        result = true;
      }
    }
    return result;
  };

  function TouchPanelState_ProcessDrag (touch) {
    var prevTouch = new JSIL.BoxedVariable(new ($T08())());
    var dragH = this.GestureIsEnabled($T09().HorizontalDrag);
    var dragV = this.GestureIsEnabled($T09().VerticalDrag);
    var dragF = this.GestureIsEnabled($T09().FreeDrag);
    if (dragH || 
      dragV || dragF) {
      if ((touch.get_State() === $T0B().Moved) && touch.TryGetPreviousLocation(/* ref */ prevTouch)) {
        var delta = $T04().op_Subtraction(
          touch.get_Position().MemberwiseClone(), 
          (prevTouch.get()).get_Position()
        );
        if (this.dragGestureStarted !== $T09().FreeDrag) {
          var isHorizontalDelta = (Math.abs(delta.X)) > (Math.abs((+delta.Y * 2)));
          var isVerticalDelta = (Math.abs(delta.Y)) > (Math.abs((+delta.X * 2)));
          var classify = this.dragGestureStarted === $T09().None;
          if (!(!dragH || (!(classify && 
                  isHorizontalDelta) && 
                (this.dragGestureStarted !== $T09().HorizontalDrag)))) {
            delta.Y = 0;
            this.dragGestureStarted = $T09().HorizontalDrag;
          } else if (!(!dragV || (!(classify && 
                  isVerticalDelta) && 
                (this.dragGestureStarted !== $T09().VerticalDrag)))) {
            delta.X = 0;
            this.dragGestureStarted = $T09().VerticalDrag;
          } else if (!(!dragF || !classify)) {
            this.dragGestureStarted = $T09().FreeDrag;
          } else {
            this.dragGestureStarted = $T09().DragComplete;
          }
        }
        if ((((this.dragGestureStarted).valueOf() | 0) !== 0) && (this.dragGestureStarted !== $T09().DragComplete)) {
          this.tapDisabled = true;
          this.holdDisabled = true;
          $T02().prototype.Enqueue.call(this.GestureList, new ($T0F())(this.dragGestureStarted, touch.get_Timestamp().MemberwiseClone(), touch.get_Position().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), delta.MemberwiseClone(), $T04().get_Zero().MemberwiseClone()));
        }
      }
    }
  };

  function TouchPanelState_ProcessHold (touch) {
    if (this.GestureIsEnabled($T09().Hold) && !this.holdDisabled) {
      var elapsed = $T00().op_Subtraction($thisType.TouchPanelState$CurrentTimestamp$value, touch.get_PressTimestamp()).MemberwiseClone();
      if (!$T00().op_LessThan(elapsed.MemberwiseClone(), $thisType.TimeRequiredForHold.MemberwiseClone())) {
        this.holdDisabled = true;
        $T02().prototype.Enqueue.call(this.GestureList, new ($T0F())($T09().Hold, touch.get_Timestamp().MemberwiseClone(), touch.get_Position().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone()));
      }
    }
  };

  function TouchPanelState_ProcessPinch (touches) {
    var prevPos0 = new JSIL.BoxedVariable(new ($T08())());
    var prevPos = new JSIL.BoxedVariable(new ($T08())());
    if (!(touches[0]).TryGetPreviousLocation(/* ref */ prevPos0)) {
      prevPos0.set(touches[0].MemberwiseClone());
    }
    if (!(touches[1]).TryGetPreviousLocation(/* ref */ prevPos)) {
      prevPos.set(touches[1].MemberwiseClone());
    }
    var delta0 = $T04().op_Subtraction(
      (touches[0]).get_Position().MemberwiseClone(), 
      (prevPos0.get()).get_Position()
    );
    var delta = $T04().op_Subtraction(
      (touches[1]).get_Position().MemberwiseClone(), 
      (prevPos.get()).get_Position()
    );
    var timestamp = (
      $T00().op_GreaterThan(
        (touches[0]).get_Timestamp().MemberwiseClone(), 
        (touches[1]).get_Timestamp().MemberwiseClone()
      )
         ? (touches[0]).get_Timestamp()
         : (touches[1]).get_Timestamp())
    .MemberwiseClone();
    if (this.dragGestureStarted !== $T09().None) {
      if (this.GestureIsEnabled($T09().DragComplete)) {
        $T02().prototype.Enqueue.call(this.GestureList, new ($T0F())($T09().DragComplete, timestamp.MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone()));
      }
      this.dragGestureStarted = $T09().None;
    }
    $T02().prototype.Enqueue.call(this.GestureList, new ($T0F())($T09().Pinch, timestamp.MemberwiseClone(), (touches[0]).get_Position().MemberwiseClone(), (touches[1]).get_Position().MemberwiseClone(), delta0.MemberwiseClone(), delta.MemberwiseClone()));
    this.pinchGestureStarted = true;
    this.tapDisabled = true;
    this.holdDisabled = true;
  };

  function TouchPanelState_ProcessTap (touch) {
    var tap = new ($T0F())();
    if (!this.tapDisabled) {
      var dist = +$T04().Distance(
        touch.get_PressPosition(), 
        touch.get_Position()
      );
      if (dist <= 35) {
        var elapsed = $T00().op_Subtraction($thisType.TouchPanelState$CurrentTimestamp$value, touch.get_PressTimestamp()).MemberwiseClone();
        if (!$T00().op_GreaterThan(elapsed.MemberwiseClone(), $thisType.TimeRequiredForHold.MemberwiseClone())) {
          this.lastTap = touch.MemberwiseClone();
          if (this.GestureIsEnabled($T09().Tap)) {
            $T0F().prototype._ctor.call(tap, 
              $T09().Tap, 
              touch.get_Timestamp().MemberwiseClone(), 
              touch.get_Position().MemberwiseClone(), 
              $T04().get_Zero().MemberwiseClone(), 
              $T04().get_Zero().MemberwiseClone(), 
              $T04().get_Zero().MemberwiseClone()
            );
            $T02().prototype.Enqueue.call(this.GestureList, tap.MemberwiseClone());
          }
        }
      }
    }
  };

  function TouchPanelState_ReadGesture () {
    return $T02().prototype.Dequeue.call(this.GestureList);
  };

  function TouchPanelState_ReleaseAllTouches () {
    var $temp00, $temp01;
    var mostToRemove = ($T10().Max(
      (this.touchState).get_Count(), 
      (this.gestureState).get_Count()
    ) | 0);
    if (mostToRemove > 0) {
      var temp = $S04().Construct(mostToRemove);
      $T03().prototype.AddRange.call(temp, this.touchState);

      for (var a$0 = temp._items, i$0 = 0, l$0 = (temp._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var touch = a$0[i$0].MemberwiseClone();
        if (touch.get_State() !== $T0B().Released) {
          this.ApplyTouch(this.touchState, $S05().Construct(touch.get_Id(), $T0B().Released, touch.get_Position().MemberwiseClone(), $thisType.TouchPanelState$CurrentTimestamp$value.MemberwiseClone()));
        }
      }
      temp.Clear();
      $T03().prototype.AddRange.call(temp, this.gestureState);

      for (var a$1 = temp._items, i$1 = 0, l$1 = (temp._size | 0); i$1 < l$1; ($temp01 = i$1, 
          i$1 = ((i$1 + 1) | 0), 
          $temp01)) {
        touch = a$1[i$1].MemberwiseClone();
        if (touch.get_State() !== $T0B().Released) {
          this.ApplyTouch(this.gestureState, $S05().Construct(touch.get_Id(), $T0B().Released, touch.get_Position().MemberwiseClone(), $thisType.TouchPanelState$CurrentTimestamp$value.MemberwiseClone()));
        }
      }
    }
  };

  function TouchPanelState_set_CurrentTimestamp (value) {
    $thisType.TouchPanelState$CurrentTimestamp$value = value.MemberwiseClone();
  };

  function TouchPanelState_set_DisplayHeight (value) {
    this.displaySize.Y = (value | 0);
    this.UpdateTouchScale();
  };

  function TouchPanelState_set_DisplayOrientation (value) {
    this.TouchPanelState$DisplayOrientation$value = value;
  };

  function TouchPanelState_set_DisplayWidth (value) {
    this.displaySize.X = (value | 0);
    this.UpdateTouchScale();
  };

  function TouchPanelState_set_EnabledGestures (value) {
    this.TouchPanelState$EnabledGestures$value = value;
  };

  function TouchPanelState_set_EnableMouseGestures (value) {
    this.TouchPanelState$EnableMouseGestures$value = value;
  };

  function TouchPanelState_set_EnableMouseTouchPoint (value) {
    this.TouchPanelState$EnableMouseTouchPoint$value = value;
  };

  function TouchPanelState_set_WindowHandle (value) {
    this.TouchPanelState$WindowHandle$value = value.MemberwiseClone();
  };

  function TouchPanelState_UpdateGestures (stateChanged) {
    var $temp00, $temp01;
    var heldLocations = 0;

    for (var a$0 = this.gestureState._items, i$0 = 0, l$0 = (this.gestureState._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var touch = a$0[i$0].MemberwiseClone();
      heldLocations = ((heldLocations + ((
          (touch.get_State() !== $T0B().Released)
             ? 1
             : 0)
         | 0)) | 0);
    }
    if (heldLocations > 1) {
      this.tapDisabled = true;
      this.holdDisabled = true;
    }

    for (var a$1 = this.gestureState._items, i$1 = 0, l$1 = (this.gestureState._size | 0); i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      touch = a$1[i$1].MemberwiseClone();
      switch ((touch.get_State()).valueOf()) {
        case 1: 
        case 2: 
          if ((touch.get_State() !== $T0B().Pressed) || !this.ProcessDoubleTap(touch.MemberwiseClone())) {
            if (!(!this.GestureIsEnabled($T09().Pinch) || (heldLocations <= 1))) {
              if (!(((((this.pinchTouch[0]).get_State()).valueOf() | 0) !== 0) && (((this.pinchTouch[0]).get_Id() | 0) !== (touch.get_Id() | 0)))) {
                this.pinchTouch[0] = touch.MemberwiseClone();
              } else if (!(((((this.pinchTouch[1]).get_State()).valueOf() | 0) !== 0) && (((this.pinchTouch[1]).get_Id() | 0) !== (touch.get_Id() | 0)))) {
                this.pinchTouch[1] = touch.MemberwiseClone();
              }
            } else {
              var dist = +$T04().Distance(
                touch.get_Position(), 
                touch.get_PressPosition()
              );
              if (!((((this.dragGestureStarted).valueOf() | 0) !== 0) || (dist >= 35))) {
                this.ProcessHold(touch.MemberwiseClone());
              } else if (stateChanged) {
                this.ProcessDrag(touch.MemberwiseClone());
              }
            }
          }
          break;

        case 3: 
          if (stateChanged) {
            if (!(!this.pinchGestureStarted || (((touch.get_Id() | 0) !== ((this.pinchTouch[0]).get_Id() | 0)) && 
                  ((touch.get_Id() | 0) !== ((this.pinchTouch[1]).get_Id() | 0))))) {
              if (this.GestureIsEnabled($T09().PinchComplete)) {
                $T02().prototype.Enqueue.call(this.GestureList, new ($T0F())($T09().PinchComplete, touch.get_Timestamp().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone()));
              }
              this.pinchGestureStarted = false;
              this.pinchTouch[0] = $T08().Invalid.MemberwiseClone();
              this.pinchTouch[1] = $T08().Invalid.MemberwiseClone();
            } else if (heldLocations === 0) {
              dist = +$T04().Distance(
                touch.get_Position(), 
                touch.get_PressPosition()
              );
              if (!((dist <= 35) || 
                  (+(touch.get_Velocity().MemberwiseClone()).Length() <= 100) || !this.GestureIsEnabled($T09().Flick))) {
                $T02().prototype.Enqueue.call(this.GestureList, new ($T0F())($T09().Flick, touch.get_Timestamp().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), touch.get_Velocity().MemberwiseClone(), $T04().get_Zero().MemberwiseClone()));
              }
              if (this.dragGestureStarted !== $T09().None) {
                if (this.GestureIsEnabled($T09().DragComplete)) {
                  $T02().prototype.Enqueue.call(this.GestureList, new ($T0F())($T09().DragComplete, touch.get_Timestamp().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone(), $T04().get_Zero().MemberwiseClone()));
                }
                this.dragGestureStarted = $T09().None;
              } else {
                this.ProcessTap(touch.MemberwiseClone());
              }
            }
          }
          break;

      }
    }
    if (stateChanged) {
      if (!(!this.GestureIsEnabled($T09().Pinch) || 
          ((((this.pinchTouch[0]).get_State()).valueOf() | 0) === 0) || ((this.pinchTouch[1]).get_State() === $T0B().Invalid))) {
        this.ProcessPinch(this.pinchTouch);
      } else {
        this.pinchGestureStarted = false;
        this.pinchTouch[0] = $T08().Invalid.MemberwiseClone();
        this.pinchTouch[1] = $T08().Invalid.MemberwiseClone();
      }
      if (heldLocations === 0) {
        this.tapDisabled = false;
        this.holdDisabled = false;
        this.dragGestureStarted = $T09().None;
      }
    }
  };

  function TouchPanelState_UpdateTouchScale () {
    var windowSize = $S06().Construct(+((this.Window).get_ClientBounds().Width), +((this.Window).get_ClientBounds().Height));
    this.touchScale = $S06().Construct(+((+(this.displaySize.X) / +windowSize.X)), +((+(this.displaySize.Y) / +windowSize.Y)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Input.Touch.TouchPanelState", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameWindow")), 
      TouchPanelState__ctor
    );

    $.Method({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")
        ]), 
      TouchPanelState_AddEvent$00
    );

    $.Method({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocationState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Boolean
        ]), 
      TouchPanelState_AddEvent$01
    );

    $.Method({Static:false, Public:false}, "AgeTouches", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])), 
      TouchPanelState_AgeTouches
    );

    $.Method({Static:false, Public:false}, "ApplyTouch", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      TouchPanelState_ApplyTouch
    );

    $.Method({Static:false, Public:false}, "GestureIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType")]), 
      TouchPanelState_GestureIsEnabled
    );

    $.Method({Static:true , Public:false}, "get_CurrentTimestamp", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      TouchPanelState_get_CurrentTimestamp
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DisplayHeight", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchPanelState_get_DisplayHeight
    );

    $.Method({Static:false, Public:true }, "get_DisplayOrientation", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")), 
      TouchPanelState_get_DisplayOrientation
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DisplayWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      TouchPanelState_get_DisplayWidth
    );

    $.Method({Static:false, Public:true }, "get_EnabledGestures", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType")), 
      TouchPanelState_get_EnabledGestures
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_EnableMouseGestures", 
      JSIL.MethodSignature.Return($.Boolean), 
      TouchPanelState_get_EnableMouseGestures
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_EnableMouseTouchPoint", 
      JSIL.MethodSignature.Return($.Boolean), 
      TouchPanelState_get_EnableMouseTouchPoint
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsGestureAvailable", 
      JSIL.MethodSignature.Return($.Boolean), 
      TouchPanelState_get_IsGestureAvailable
    );

    $.Method({Static:false, Public:true }, "get_WindowHandle", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      TouchPanelState_get_WindowHandle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetCapabilities", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities")), 
      TouchPanelState_GetCapabilities
    );

    $.Method({Static:false, Public:true }, "GetState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection")), 
      TouchPanelState_GetState
    );

    $.Method({Static:false, Public:false}, "ProcessDoubleTap", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")]), 
      TouchPanelState_ProcessDoubleTap
    );

    $.Method({Static:false, Public:false}, "ProcessDrag", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")), 
      TouchPanelState_ProcessDrag
    );

    $.Method({Static:false, Public:false}, "ProcessHold", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")), 
      TouchPanelState_ProcessHold
    );

    $.Method({Static:false, Public:false}, "ProcessPinch", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])), 
      TouchPanelState_ProcessPinch
    );

    $.Method({Static:false, Public:false}, "ProcessTap", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")), 
      TouchPanelState_ProcessTap
    );

    $.Method({Static:false, Public:true }, "ReadGesture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureSample")), 
      TouchPanelState_ReadGesture
    );

    $.Method({Static:false, Public:false}, "ReleaseAllTouches", 
      JSIL.MethodSignature.Void, 
      TouchPanelState_ReleaseAllTouches
    );

    $.Method({Static:true , Public:false}, "set_CurrentTimestamp", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.TimeSpan")), 
      TouchPanelState_set_CurrentTimestamp
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DisplayHeight", 
      JSIL.MethodSignature.Action($.Int32), 
      TouchPanelState_set_DisplayHeight
    );

    $.Method({Static:false, Public:true }, "set_DisplayOrientation", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")), 
      TouchPanelState_set_DisplayOrientation
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DisplayWidth", 
      JSIL.MethodSignature.Action($.Int32), 
      TouchPanelState_set_DisplayWidth
    );

    $.Method({Static:false, Public:true }, "set_EnabledGestures", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType")), 
      TouchPanelState_set_EnabledGestures
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_EnableMouseGestures", 
      JSIL.MethodSignature.Action($.Boolean), 
      TouchPanelState_set_EnableMouseGestures
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_EnableMouseTouchPoint", 
      JSIL.MethodSignature.Action($.Boolean), 
      TouchPanelState_set_EnableMouseTouchPoint
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_WindowHandle", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      TouchPanelState_set_WindowHandle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "UpdateGestures", 
      JSIL.MethodSignature.Action($.Boolean), 
      TouchPanelState_UpdateGestures
    );

    $.Method({Static:false, Public:false}, "UpdateTouchScale", 
      JSIL.MethodSignature.Void, 
      TouchPanelState_UpdateTouchScale
    );

    $.Constant({Static:true , Public:false}, "TapJitterTolerance", 35); 
    $.Constant({Static:true , Public:false}, "MouseTouchId", 1); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TimeRequiredForHold", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "GestureList", $asm03.TypeRef("System.Collections.Generic.Queue`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureSample")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Window", $asm00.TypeRef("Microsoft.Xna.Framework.GameWindow")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "touchState", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "gestureState", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])); 
    $.Field({Static:false, Public:false}, "touchScale", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "displaySize", $asm00.TypeRef("Microsoft.Xna.Framework.Point")); 
    $.Field({Static:false, Public:false}, "nextTouchId", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "touchIds", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Int32])); 
    $.Field({Static:false, Public:false}, "capabilities", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchPanelCapabilities")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "pinchTouch", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")])); 
    $.Field({Static:false, Public:false}, "pinchGestureStarted", $.Boolean); 
    $.Field({Static:false, Public:false}, "tapDisabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "holdDisabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "lastTap", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchLocation")); 
    $.Field({Static:false, Public:false}, "dragGestureStarted", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType")); 
    $.Field({Static:false, Public:false}, "TouchPanelState$WindowHandle$value", $asm01.TypeRef("System.IntPtr"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TouchPanelState$DisplayOrientation$value", $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TouchPanelState$EnabledGestures$value", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TouchPanelState$EnableMouseTouchPoint$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TouchPanelState$EnableMouseGestures$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "TouchPanelState$CurrentTimestamp$value", $asm01.TypeRef("System.TimeSpan"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function TouchPanelState__cctor () {
      $thisType.TimeRequiredForHold = new $asm01.System.TimeSpan();
      $thisType.TouchPanelState$CurrentTimestamp$value = new $asm01.System.TimeSpan();
      $thisType.TimeRequiredForHold = $T00().FromMilliseconds(1024).MemberwiseClone();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TouchPanelState__cctor
    );

    $.Property({Static:false, Public:true }, "WindowHandle", $asm01.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "DisplayHeight", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayOrientation", $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"));

    $.Property({Static:false, Public:true }, "DisplayWidth", $.Int32);

    $.Property({Static:false, Public:true }, "EnabledGestures", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.GestureType"));

    $.Property({Static:false, Public:true }, "EnableMouseTouchPoint", $.Boolean);

    $.Property({Static:false, Public:true }, "EnableMouseGestures", $.Boolean);

    $.Property({Static:false, Public:true }, "IsGestureAvailable", $.Boolean);

    $.Property({Static:true , Public:false}, "CurrentTimestamp", $asm01.TypeRef("System.TimeSpan"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance */ 

(function DynamicSoundEffectInstance$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Xna.Framework.Audio.AudioChannels, $asm01.System.Int32))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.AudioChannels)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.System.Collections.Generic.Queue$b1.Of($asm01.System.UInt32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.EventHandler$b1.Of($asm01.System.EventArgs))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.OpenAL.AL10)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundState)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Console)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.OpenALDevice)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize(System.Array.Of($asm01.System.UInt32))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), $asm01.TypeRef("System.Int32")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm03.TypeRef("System.Collections.Generic.Queue`1", [$asm01.TypeRef("System.UInt32")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.IntPtr"), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.IntPtr"), 
        $asm01.TypeRef("System.IntPtr")
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Single")]), $asm01.TypeRef("System.IntPtr"), 
        $asm01.TypeRef("System.IntPtr")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.IntPtr"), 
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.UInt32")])
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };

  function DynamicSoundEffectInstance__ctor (sampleRate, channels) {
    $T03().prototype._ctor.call(this, null);
    this.sampleRate = (sampleRate | 0);
    this.channels = channels;
    this.DynamicSoundEffectInstance$PendingBufferCount$value = 0;
    this.queuedBuffers = $S01().Construct();
    this.buffersToQueue = $S01().Construct();
    this.availableBuffers = $S01().Construct();
  };

  function DynamicSoundEffectInstance_add_BufferNeeded (value) {
    var eventHandler = this.BufferNeeded;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T06().Combine(eventHandler2, value);
      eventHandler = $T07().CompareExchange$b1($T05())(/* ref */ new JSIL.MemberReference(this, "BufferNeeded"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function DynamicSoundEffectInstance_Dispose () {
    var qBuffer = new JSIL.BoxedVariable(0);
    if (!this.SoundEffectInstance$IsDisposed$value) {
      $T03().prototype.Dispose.call(this);

      while (((this.queuedBuffers).get_Count() | 0) > 0) {
        qBuffer.set($T04().prototype.Dequeue.call(this.queuedBuffers));
        $S02().CallStatic($T09(), "alDeleteBuffers", null, $S03().CallStatic($T0A(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ qBuffer);
      }
      this.queuedBuffers = null;

      while (((this.availableBuffers).get_Count() | 0) > 0) {
        qBuffer.set($T04().prototype.Dequeue.call(this.availableBuffers));
        $S02().CallStatic($T09(), "alDeleteBuffers", null, $S03().CallStatic($T0A(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ qBuffer);
      }
      this.availableBuffers = null;

      while (((this.buffersToQueue).get_Count() | 0) > 0) {
        qBuffer.set($T04().prototype.Dequeue.call(this.buffersToQueue));
        $S02().CallStatic($T09(), "alDeleteBuffers", null, $S03().CallStatic($T0A(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ qBuffer);
      }
      this.buffersToQueue = null;
      this.SoundEffectInstance$IsDisposed$value = true;
    }
  };

  function DynamicSoundEffectInstance_Finalize () {
    try {
      this.Dispose();
    } finally {
      $T03().prototype.Finalize.call(this);
    }
  };

  function DynamicSoundEffectInstance_get_PendingBufferCount () {
    return this.DynamicSoundEffectInstance$PendingBufferCount$value;
  };

  function DynamicSoundEffectInstance_GetSampleDuration (sizeInBytes) {
    return $T0B().GetSampleDuration(sizeInBytes, this.sampleRate, this.channels);
  };

  function DynamicSoundEffectInstance_GetSampleSizeInBytes (duration) {
    return $T0B().GetSampleSizeInBytes(duration, this.sampleRate, this.channels);
  };

  function DynamicSoundEffectInstance_Play$00 () {
    this.Play(true);
  };

  function DynamicSoundEffectInstance_Play$01 (isManaged) {
    var nextBuf = new JSIL.BoxedVariable(0);
    if (this.get_State() === $T0E().Stopped) {
      if ((this.INTERNAL_alSource >>> 0) !== 0) {
        $T09().alSourceStop(this.INTERNAL_alSource);
        $S04().CallStatic($T09(), "alDeleteSources", null, $S03().CallStatic($T0A(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ new JSIL.MemberReference(this, "INTERNAL_alSource"));
        this.INTERNAL_alSource = 0;
      }

      while (((this.queuedBuffers).get_Count() | 0) > 0) {
        $T04().prototype.Enqueue.call(this.availableBuffers, $T04().prototype.Dequeue.call(this.queuedBuffers));
      }
      $S05().CallStatic($T09(), "alGenSources", null, $S03().CallStatic($T0A(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ new JSIL.MemberReference(this, "INTERNAL_alSource"));
      if ((this.INTERNAL_alSource >>> 0) === 0) {
        $T0F().WriteLine("WARNING: AL SOURCE WAS NOT AVAILABLE. SKIPPING.");
      } else {

        while (((this.buffersToQueue).get_Count() | 0) > 0) {
          nextBuf.set($T04().prototype.Dequeue.call(this.buffersToQueue));
          $T04().prototype.Enqueue.call(this.queuedBuffers, nextBuf.get());
          $S06().CallStatic($T09(), "alSourceQueueBuffers", null, this.INTERNAL_alSource, $S03().CallStatic($T0A(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ nextBuf);
        }
        if (this.INTERNAL_positionalAudio) {
          this.INTERNAL_positionalAudio = false;
          $T09().alSource3f(
            this.INTERNAL_alSource, 
            4100, 
            this.position.X, 
            this.position.Y, 
            this.position.Z
          );
        } else {
          this.set_Pan(this.get_Pan());
        }
        this.set_Volume(this.get_Volume());
        this.set_IsLooped(this.get_IsLooped());
        this.set_Pitch(this.get_Pitch());
        $T09().alSourcePlay(this.INTERNAL_alSource);
        if (isManaged) {
          $T11().OpenALDevice$Instance$value.dynamicInstancePool.Add(this);
        }
        if (!(((this.DynamicSoundEffectInstance$PendingBufferCount$value | 0) > 2) || (this.BufferNeeded === null))) {
          this.BufferNeeded(this, null);
        }
      }
    }
  };

  function DynamicSoundEffectInstance_remove_BufferNeeded (value) {
    var eventHandler = this.BufferNeeded;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T06().Remove(eventHandler2, value);
      eventHandler = $T07().CompareExchange$b1($T05())(/* ref */ new JSIL.MemberReference(this, "BufferNeeded"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function DynamicSoundEffectInstance_set_PendingBufferCount (value) {
    this.DynamicSoundEffectInstance$PendingBufferCount$value = (value | 0);
  };

  function DynamicSoundEffectInstance_SubmitBuffer$02 (buffer) {
    this.SubmitBuffer(buffer, 0, buffer.length);
  };

  function DynamicSoundEffectInstance_SubmitBuffer$03 (buffer, offset, count) {
    var buf = new JSIL.BoxedVariable(0);
    if (((this.availableBuffers).get_Count() | 0) === 0) {
      $S07().CallStatic($T09(), "alGenBuffers", null, $S03().CallStatic($T0A(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ buf);
      $T04().prototype.Enqueue.call(this.availableBuffers, buf.get());
    }
    var newBuf = new JSIL.BoxedVariable($T04().prototype.Dequeue.call(this.availableBuffers));
    $S08().CallStatic($T09(), "alBufferData", null, 
      newBuf.get(), 
      $thisType.XNAToShort.get_Item(this.channels), 
      buffer, 
      $S03().CallStatic($T0A(), "op_Explicit", null, count).MemberwiseClone(), 
      $S03().CallStatic($T0A(), "op_Explicit", null, this.sampleRate).MemberwiseClone()
    );
    if (this.get_State() === $T0E().Playing) {
      $S06().CallStatic($T09(), "alSourceQueueBuffers", null, this.INTERNAL_alSource, $S03().CallStatic($T0A(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ newBuf);
      $T04().prototype.Enqueue.call(this.queuedBuffers, newBuf.get());
    } else {
      $T04().prototype.Enqueue.call(this.buffersToQueue, newBuf.get());
    }
    this.DynamicSoundEffectInstance$PendingBufferCount$value = (((this.DynamicSoundEffectInstance$PendingBufferCount$value | 0) + 1) | 0);
  };

  function DynamicSoundEffectInstance_SubmitFloatBufferEXT (buffer) {
    var buf = new JSIL.BoxedVariable(0);
    if (((this.availableBuffers).get_Count() | 0) === 0) {
      $S07().CallStatic($T09(), "alGenBuffers", null, $S03().CallStatic($T0A(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ buf);
      $T04().prototype.Enqueue.call(this.availableBuffers, buf.get());
    }
    var newBuf = new JSIL.BoxedVariable($T04().prototype.Dequeue.call(this.availableBuffers));
    $S09().CallStatic($T09(), "alBufferData", null, 
      newBuf.get(), 
      $thisType.XNAToFloat.get_Item(this.channels), 
      buffer, 
      $S03().CallStatic($T0A(), "op_Explicit", null, Math.imul(buffer.length, 4)).MemberwiseClone(), 
      $S03().CallStatic($T0A(), "op_Explicit", null, this.sampleRate).MemberwiseClone()
    );
    if (this.get_State() === $T0E().Playing) {
      $S06().CallStatic($T09(), "alSourceQueueBuffers", null, this.INTERNAL_alSource, $S03().CallStatic($T0A(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ newBuf);
      $T04().prototype.Enqueue.call(this.queuedBuffers, newBuf.get());
    } else {
      $T04().prototype.Enqueue.call(this.buffersToQueue, newBuf.get());
    }
    this.DynamicSoundEffectInstance$PendingBufferCount$value = (((this.DynamicSoundEffectInstance$PendingBufferCount$value | 0) + 1) | 0);
  };

  function DynamicSoundEffectInstance_Update () {
    var $temp00;
    var finishedBuffers = new JSIL.BoxedVariable(0);
    if (this.get_State() === $T0E().Stopped) {
      var result = false;
    } else {
      $T09().alGetSourcei(this.INTERNAL_alSource, 4118, /* ref */ finishedBuffers);
      if ((finishedBuffers.get() | 0) === 0) {
        result = true;
      } else {
        var bufs = JSIL.Array.New($T08(), finishedBuffers.get());
        $S0A().CallStatic($T09(), "alSourceUnqueueBuffers", null, this.INTERNAL_alSource, $S03().CallStatic($T0A(), "op_Explicit", null, finishedBuffers.get()).MemberwiseClone(), bufs);
        ($temp00 = (((this.DynamicSoundEffectInstance$PendingBufferCount$value | 0) - (finishedBuffers.get() | 0)) | 0), 
          this.DynamicSoundEffectInstance$PendingBufferCount$value = ($temp00 | 0), 
          $temp00);
        if (this.BufferNeeded !== null) {
          this.BufferNeeded(this, null);
        }

        for (var i = 0; i < (finishedBuffers.get() | 0); i = ((i + 1) | 0)) {
          var newBuf = ($T04().prototype.Dequeue.call(this.queuedBuffers) >>> 0);
          if (newBuf !== (bufs[i] >>> 0)) {
            throw $S0B().Construct("Buffer desync!");
          }
          $T04().prototype.Enqueue.call(this.availableBuffers, newBuf);
        }
        if (!(((this.DynamicSoundEffectInstance$PendingBufferCount$value | 0) > 2) || (this.BufferNeeded === null))) {
          this.BufferNeeded(this, null);
        }
        result = true;
      }
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance"), 
      Name: "Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")]), 
      DynamicSoundEffectInstance__ctor
    );

    $.Method({Static:false, Public:true }, "add_BufferNeeded", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      DynamicSoundEffectInstance_add_BufferNeeded
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      DynamicSoundEffectInstance_Dispose
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void, 
      DynamicSoundEffectInstance_Finalize
    );

    $.Method({Static:false, Public:true }, "get_PendingBufferCount", 
      JSIL.MethodSignature.Return($.Int32), 
      DynamicSoundEffectInstance_get_PendingBufferCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetSampleDuration", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$.Int32]), 
      DynamicSoundEffectInstance_GetSampleDuration
    );

    $.Method({Static:false, Public:true }, "GetSampleSizeInBytes", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.TimeSpan")]), 
      DynamicSoundEffectInstance_GetSampleSizeInBytes
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Play", 
      JSIL.MethodSignature.Void, 
      DynamicSoundEffectInstance_Play$00
    );

    $.Method({Static:false, Public:false}, "Play", 
      JSIL.MethodSignature.Action($.Boolean), 
      DynamicSoundEffectInstance_Play$01
    );

    $.Method({Static:false, Public:true }, "remove_BufferNeeded", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])), 
      DynamicSoundEffectInstance_remove_BufferNeeded
    );

    $.Method({Static:false, Public:false}, "set_PendingBufferCount", 
      JSIL.MethodSignature.Action($.Int32), 
      DynamicSoundEffectInstance_set_PendingBufferCount
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SubmitBuffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte])), 
      DynamicSoundEffectInstance_SubmitBuffer$02
    );

    $.Method({Static:false, Public:true }, "SubmitBuffer", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]), 
      DynamicSoundEffectInstance_SubmitBuffer$03
    );

    $.Method({Static:false, Public:true }, "SubmitFloatBufferEXT", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Single])), 
      DynamicSoundEffectInstance_SubmitFloatBufferEXT
    );

    $.Method({Static:false, Public:false}, "Update", 
      JSIL.MethodSignature.Return($.Boolean), 
      DynamicSoundEffectInstance_Update
    );

    $.Field({Static:false, Public:false}, "sampleRate", $.Int32); 
    $.Field({Static:false, Public:false}, "channels", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")); 
    $.Field({Static:false, Public:false}, "queuedBuffers", $asm03.TypeRef("System.Collections.Generic.Queue`1", [$.UInt32])); 
    $.Field({Static:false, Public:false}, "buffersToQueue", $asm03.TypeRef("System.Collections.Generic.Queue`1", [$.UInt32])); 
    $.Field({Static:false, Public:false}, "availableBuffers", $asm03.TypeRef("System.Collections.Generic.Queue`1", [$.UInt32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "XNAToShort", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), $.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "XNAToFloat", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), $.Int32])); 
    $.Field({Static:false, Public:false}, "BufferNeeded", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")])); 
    $.Field({Static:false, Public:false}, "DynamicSoundEffectInstance$PendingBufferCount$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function DynamicSoundEffectInstance__cctor () {
      var dictionary = $S00().Construct();
      dictionary.Add($T01().Mono, 4353);
      dictionary.Add($T01().Stereo, 4355);
      $thisType.XNAToShort = dictionary;
      var dictionary2 = $S00().Construct();
      dictionary2.Add($T01().Mono, 65552);
      dictionary2.Add($T01().Stereo, 65553);
      $thisType.XNAToFloat = dictionary2;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DynamicSoundEffectInstance__cctor
    );

    $.Property({Static:false, Public:true }, "PendingBufferCount", $.Int32);

    $.Event({Static:false, Public:true }, "BufferNeeded", $asm01.TypeRef("System.EventHandler`1", [$asm01.TypeRef("System.EventArgs")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.FrameworkDispatcher */ 

(function FrameworkDispatcher$Members () {
  var $, $thisType;
  function FrameworkDispatcher_Update () {
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.FrameworkDispatcher", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Update", 
      JSIL.MethodSignature.Void, 
      FrameworkDispatcher_Update
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.DSPEffect */ 

(function DSPEffect$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.OpenAL.EFX)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };

  function DSPEffect__ctor () {
    var handle = new JSIL.BoxedVariable(0);
    $S00().CallStatic($T01(), "alGenAuxiliaryEffectSlots", null, $S01().CallStatic($T02(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ handle);
    this.DSPEffect$Handle$value = (handle.get() >>> 0);
    $S02().CallStatic($T01(), "alGenEffects", null, $S01().CallStatic($T02(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ new JSIL.MemberReference(this, "effectHandle"));
  };

  function DSPEffect_CommitChanges () {
    $T01().alAuxiliaryEffectSloti(this.DSPEffect$Handle$value, 1, (this.effectHandle | 0));
  };

  function DSPEffect_Dispose () {
    var handle = new JSIL.BoxedVariable(this.DSPEffect$Handle$value);
    $S03().CallStatic($T01(), "alDeleteAuxiliaryEffectSlots", null, $S01().CallStatic($T02(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ handle);
    $S04().CallStatic($T01(), "alDeleteEffects", null, $S01().CallStatic($T02(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ new JSIL.MemberReference(this, "effectHandle"));
  };

  function DSPEffect_get_Handle () {
    return this.DSPEffect$Handle$value;
  };

  function DSPEffect_set_Handle (value) {
    this.DSPEffect$Handle$value = (value >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.DSPEffect", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DSPEffect__ctor
    );

    $.Method({Static:false, Public:true }, "CommitChanges", 
      JSIL.MethodSignature.Void, 
      DSPEffect_CommitChanges
    );

    $.Method({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      DSPEffect_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Handle", 
      JSIL.MethodSignature.Return($.UInt32), 
      DSPEffect_get_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Handle", 
      JSIL.MethodSignature.Action($.UInt32), 
      DSPEffect_set_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "effectHandle", $.UInt32); 
    $.Field({Static:false, Public:false}, "DSPEffect$Handle$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Handle", $.UInt32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.DSPReverbEffect */ 

(function DSPReverbEffect$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Audio.DSPParameter))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPEffect)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.OpenAL.EFX)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.DSPParameter)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.XACTCalculator)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Math)) ();
  };

  function DSPReverbEffect__ctor (parameters) {
    $T01().prototype._ctor.call(this);
    $T02().alEffecti(this.effectHandle, 32769, 32768);
    this.SetReflectionsDelay((parameters[0]).get_Value());
    this.SetReverbDelay((parameters[1]).get_Value());
    this.SetPositionLeft((parameters[2]).get_Value());
    this.SetPositionRight((parameters[3]).get_Value());
    this.SetPositionLeftMatrix((parameters[4]).get_Value());
    this.SetPositionRightMatrix((parameters[5]).get_Value());
    this.SetEarlyDiffusion((parameters[6]).get_Value());
    this.SetLateDiffusion((parameters[7]).get_Value());
    this.SetLowEQGain((parameters[8]).get_Value());
    this.SetLowEQCutoff((parameters[9]).get_Value());
    this.SetHighEQGain((parameters[10]).get_Value());
    this.SetHighEQCutoff((parameters[11]).get_Value());
    this.SetRearDelay((parameters[12]).get_Value());
    this.SetRoomFilterFrequency((parameters[13]).get_Value());
    this.SetRoomFilterMain((parameters[14]).get_Value());
    this.SetRoomFilterHighFrequency((parameters[15]).get_Value());
    this.SetReflectionsGain((parameters[16]).get_Value());
    this.SetReverbGain((parameters[17]).get_Value());
    this.SetDecayTime((parameters[18]).get_Value());
    this.SetDensity((parameters[19]).get_Value());
    this.SetRoomSize((parameters[20]).get_Value());
    this.SetWetDryMix((parameters[21]).get_Value());
    $T02().alAuxiliaryEffectSloti(this.DSPEffect$Handle$value, 1, (this.effectHandle | 0));
  };

  function DSPReverbEffect_SetDecayTime (value) {
  };

  function DSPReverbEffect_SetDensity (value) {
    $T02().alEffectf(this.effectHandle, 1, +((+value / 100)));
  };

  function DSPReverbEffect_SetEarlyDiffusion (value) {
    $T02().alEffectf(this.effectHandle, 2, +((+value / 15)));
  };

  function DSPReverbEffect_SetHighEQCutoff (value) {
    $T02().alEffectf(this.effectHandle, 20, (+value * 500) + 1000);
  };

  function DSPReverbEffect_SetHighEQGain (value) {
    $T02().alEffectf(this.effectHandle, 4, $T06().CalculateAmplitudeRatio(+value - 8));
  };

  function DSPReverbEffect_SetLateDiffusion (value) {
    $T02().alEffectf(this.effectHandle, 2, +((+value / 15)));
  };

  function DSPReverbEffect_SetLowEQCutoff (value) {
    $T02().alEffectf(this.effectHandle, 21, (+value * 50) + 50);
  };

  function DSPReverbEffect_SetLowEQGain (value) {
    $T02().alEffectf(this.effectHandle, 5, $T07().Min($T06().CalculateAmplitudeRatio(+value - 8), 1));
  };

  function DSPReverbEffect_SetPositionLeft (value) {
  };

  function DSPReverbEffect_SetPositionLeftMatrix (value) {
  };

  function DSPReverbEffect_SetPositionRight (value) {
  };

  function DSPReverbEffect_SetPositionRightMatrix (value) {
  };

  function DSPReverbEffect_SetRearDelay (value) {
  };

  function DSPReverbEffect_SetReflectionsDelay (value) {
    $T02().alEffectf(this.effectHandle, 10, +((+value / 1000)));
  };

  function DSPReverbEffect_SetReflectionsGain (value) {
    $T02().alEffectf(this.effectHandle, 9, $T07().Min($T06().CalculateAmplitudeRatio(value), 3.16));
  };

  function DSPReverbEffect_SetReverbDelay (value) {
    $T02().alEffectf(this.effectHandle, 13, +((+value / 1000)));
  };

  function DSPReverbEffect_SetReverbGain (value) {
    $T02().alEffectf(this.effectHandle, 3, $T07().Min($T06().CalculateAmplitudeRatio(value), 1));
  };

  function DSPReverbEffect_SetRoomFilterFrequency (value) {
  };

  function DSPReverbEffect_SetRoomFilterHighFrequency (value) {
  };

  function DSPReverbEffect_SetRoomFilterMain (value) {
  };

  function DSPReverbEffect_SetRoomSize (value) {
  };

  function DSPReverbEffect_SetWetDryMix (value) {
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPEffect"), 
      Name: "Microsoft.Xna.Framework.Audio.DSPReverbEffect", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Audio.DSPParameter")])), 
      DSPReverbEffect__ctor
    );

    $.Method({Static:false, Public:true }, "SetDecayTime", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetDecayTime
    );

    $.Method({Static:false, Public:true }, "SetDensity", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetDensity
    );

    $.Method({Static:false, Public:true }, "SetEarlyDiffusion", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetEarlyDiffusion
    );

    $.Method({Static:false, Public:true }, "SetHighEQCutoff", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetHighEQCutoff
    );

    $.Method({Static:false, Public:true }, "SetHighEQGain", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetHighEQGain
    );

    $.Method({Static:false, Public:true }, "SetLateDiffusion", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetLateDiffusion
    );

    $.Method({Static:false, Public:true }, "SetLowEQCutoff", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetLowEQCutoff
    );

    $.Method({Static:false, Public:true }, "SetLowEQGain", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetLowEQGain
    );

    $.Method({Static:false, Public:true }, "SetPositionLeft", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetPositionLeft
    );

    $.Method({Static:false, Public:true }, "SetPositionLeftMatrix", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetPositionLeftMatrix
    );

    $.Method({Static:false, Public:true }, "SetPositionRight", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetPositionRight
    );

    $.Method({Static:false, Public:true }, "SetPositionRightMatrix", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetPositionRightMatrix
    );

    $.Method({Static:false, Public:true }, "SetRearDelay", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetRearDelay
    );

    $.Method({Static:false, Public:true }, "SetReflectionsDelay", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetReflectionsDelay
    );

    $.Method({Static:false, Public:true }, "SetReflectionsGain", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetReflectionsGain
    );

    $.Method({Static:false, Public:true }, "SetReverbDelay", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetReverbDelay
    );

    $.Method({Static:false, Public:true }, "SetReverbGain", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetReverbGain
    );

    $.Method({Static:false, Public:true }, "SetRoomFilterFrequency", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetRoomFilterFrequency
    );

    $.Method({Static:false, Public:true }, "SetRoomFilterHighFrequency", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetRoomFilterHighFrequency
    );

    $.Method({Static:false, Public:true }, "SetRoomFilterMain", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetRoomFilterMain
    );

    $.Method({Static:false, Public:true }, "SetRoomSize", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetRoomSize
    );

    $.Method({Static:false, Public:true }, "SetWetDryMix", 
      JSIL.MethodSignature.Action($.Single), 
      DSPReverbEffect_SetWetDryMix
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.DSPFilter */ 

(function DSPFilter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.OpenAL.EFX)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.UInt32")])]))) ();
  };

  function DSPFilter__ctor () {
    var handle = new JSIL.BoxedVariable(0);
    $S00().CallStatic($T01(), "alGenFilters", null, $S01().CallStatic($T02(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ handle);
    this.DSPFilter$Handle$value = (handle.get() >>> 0);
  };

  function DSPFilter_ApplyBandPassFilter (source, hfGain, lfGain) {
    $T01().alFilteri(this.DSPFilter$Handle$value, 32769, 3);
    $T01().alFilterf(this.DSPFilter$Handle$value, 3, hfGain);
    $T01().alFilterf(this.DSPFilter$Handle$value, 2, lfGain);
  };

  function DSPFilter_ApplyHighPassFilter (source, lfGain) {
    $T01().alFilteri(this.DSPFilter$Handle$value, 32769, 2);
    $T01().alFilterf(this.DSPFilter$Handle$value, 2, lfGain);
  };

  function DSPFilter_ApplyLowPassFilter (source, hfGain) {
    $T01().alFilteri(this.DSPFilter$Handle$value, 32769, 1);
    $T01().alFilterf(this.DSPFilter$Handle$value, 2, hfGain);
  };

  function DSPFilter_Dispose () {
    var handle = new JSIL.BoxedVariable(this.DSPFilter$Handle$value);
    $S02().CallStatic($T01(), "alDeleteFilters", null, $S01().CallStatic($T02(), "op_Explicit", null, 1).MemberwiseClone(), /* ref */ handle);
  };

  function DSPFilter_get_Handle () {
    return this.DSPFilter$Handle$value;
  };

  function DSPFilter_set_Handle (value) {
    this.DSPFilter$Handle$value = (value >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.DSPFilter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DSPFilter__ctor
    );

    $.Method({Static:false, Public:true }, "ApplyBandPassFilter", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Single, 
          $.Single
        ]), 
      DSPFilter_ApplyBandPassFilter
    );

    $.Method({Static:false, Public:true }, "ApplyHighPassFilter", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Single]), 
      DSPFilter_ApplyHighPassFilter
    );

    $.Method({Static:false, Public:true }, "ApplyLowPassFilter", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Single]), 
      DSPFilter_ApplyLowPassFilter
    );

    $.Method({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      DSPFilter_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Handle", 
      JSIL.MethodSignature.Return($.UInt32), 
      DSPFilter_get_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Handle", 
      JSIL.MethodSignature.Action($.UInt32), 
      DSPFilter_set_Handle
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "DSPFilter$Handle$value", $.UInt32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Handle", $.UInt32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MonoGame.Utilities.AssemblyHelper */ 

(function AssemblyHelper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.Assembly)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Reflection.AssemblyTitleAttribute)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Reflection.AssemblyName)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Attribute"), [$asm01.TypeRef("System.Reflection.Assembly"), $asm01.TypeRef("System.Type")]))) ();
  };

  function AssemblyHelper_GetDefaultWindowTitle () {
    var windowTitle = $T00().Empty;
    var assembly = $T01().GetEntryAssembly();
    if ($T01().op_Inequality(assembly, null)) {
      var assemblyTitleAtt = $T02().$Cast($S00().CallStatic($T03(), "GetCustomAttribute", null, assembly, $T02().__Type__));
      if (assemblyTitleAtt !== null) {
        windowTitle = assemblyTitleAtt.get_Title();
      }
      if ($T00().IsNullOrEmpty(windowTitle)) {
        windowTitle = (assembly.GetName()).get_Name();
      }
    }
    return windowTitle;
  };

  JSIL.MakeStaticClass("MonoGame.Utilities.AssemblyHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "GetDefaultWindowTitle", 
      JSIL.MethodSignature.Return($.String), 
      AssemblyHelper_GetDefaultWindowTitle
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Utilities");
/* class Microsoft.Xna.Framework.Utilities.FileHelpers */ 

(function FileHelpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.System.Uri)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm03.TypeRef("System.Uri"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm03.TypeRef("System.Uri"), [$asm03.TypeRef("System.Uri"), $asm01.TypeRef("System.String")]))) ();
  };

  function FileHelpers_NormalizeFilePathSeparators (name) {
    return System.String.Replace(name, $thisType.NotSeparator, $thisType.Separator);
  };

  function FileHelpers_ResolveRelativePath (filePath, relativeFile) {
    filePath = (System.String.Replace(filePath, $thisType.BackwardSlash, $thisType.ForwardSlash));
    var hasForwardSlash = (System.String.StartsWith(filePath, $thisType.ForwardSlashString));
    if (!hasForwardSlash) {
      filePath = (JSIL.ConcatString($thisType.ForwardSlashString, filePath));
    }
    var src = $S01().Construct(JSIL.ConcatString("file://", filePath));
    var dst = $S02().Construct(src, relativeFile);
    var localPath = dst.get_LocalPath();
    if (!(hasForwardSlash || !(System.String.StartsWith(localPath, "/")))) {
      localPath = (localPath.substr(1));
    }
    return $thisType.NormalizeFilePathSeparators(localPath);
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Utilities.FileHelpers", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "NormalizeFilePathSeparators", 
      new JSIL.MethodSignature($.String, [$.String]), 
      FileHelpers_NormalizeFilePathSeparators
    );

    $.Method({Static:true , Public:true }, "ResolveRelativePath", 
      new JSIL.MethodSignature($.String, [$.String, $.String]), 
      FileHelpers_ResolveRelativePath
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "ForwardSlash", $.Char, "/"); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ForwardSlashString", $.String); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "BackwardSlash", $.Char, "\\"); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NotSeparator", $.Char); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Separator", $.Char, function ($pi) {
        return $asm01.System.IO.Path.DirectorySeparatorChar;
      }); 
    function FileHelpers__cctor () {
      $thisType.ForwardSlash = "/";
      $thisType.ForwardSlashString = $S00().Construct($thisType.ForwardSlash, 1);
      $thisType.BackwardSlash = "\\";
      $thisType.NotSeparator = (
        (($T01().DirectorySeparatorChar.charCodeAt(0) | 0) === ($thisType.BackwardSlash.charCodeAt(0) | 0))
           ? $thisType.ForwardSlash
           : $thisType.BackwardSlash)
      ;
      $thisType.Separator = $T01().DirectorySeparatorChar;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      FileHelpers__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute */ 

(function ContentSerializerRuntimeTypeAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  function ContentSerializerRuntimeTypeAttribute__ctor (runtimeType) {
    $T01().prototype._ctor.call(this);
    this.ContentSerializerRuntimeTypeAttribute$RuntimeType$value = runtimeType;
  };

  function ContentSerializerRuntimeTypeAttribute_get_RuntimeType () {
    return this.ContentSerializerRuntimeTypeAttribute$RuntimeType$value;
  };

  function ContentSerializerRuntimeTypeAttribute_set_RuntimeType (value) {
    this.ContentSerializerRuntimeTypeAttribute$RuntimeType$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      ContentSerializerRuntimeTypeAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_RuntimeType", 
      JSIL.MethodSignature.Return($.String), 
      ContentSerializerRuntimeTypeAttribute_get_RuntimeType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RuntimeType", 
      JSIL.MethodSignature.Action($.String), 
      ContentSerializerRuntimeTypeAttribute_set_RuntimeType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ContentSerializerRuntimeTypeAttribute$RuntimeType$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "RuntimeType", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Struct")]; });

})();

/* class Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute */ 

(function ContentSerializerTypeVersionAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  function ContentSerializerTypeVersionAttribute__ctor (typeVersion) {
    $T01().prototype._ctor.call(this);
    this.ContentSerializerTypeVersionAttribute$TypeVersion$value = (typeVersion | 0);
  };

  function ContentSerializerTypeVersionAttribute_get_TypeVersion () {
    return this.ContentSerializerTypeVersionAttribute$TypeVersion$value;
  };

  function ContentSerializerTypeVersionAttribute_set_TypeVersion (value) {
    this.ContentSerializerTypeVersionAttribute$TypeVersion$value = (value | 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      ContentSerializerTypeVersionAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_TypeVersion", 
      JSIL.MethodSignature.Return($.Int32), 
      ContentSerializerTypeVersionAttribute_get_TypeVersion
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TypeVersion", 
      JSIL.MethodSignature.Action($.Int32), 
      ContentSerializerTypeVersionAttribute_set_TypeVersion
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ContentSerializerTypeVersionAttribute$TypeVersion$value", $.Int32)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "TypeVersion", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Struct")]; });

})();

/* class Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute */ 

(function ContentSerializerCollectionItemNameAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  function ContentSerializerCollectionItemNameAttribute__ctor (collectionItemName) {
    $T01().prototype._ctor.call(this);
    this.ContentSerializerCollectionItemNameAttribute$CollectionItemName$value = collectionItemName;
  };

  function ContentSerializerCollectionItemNameAttribute_get_CollectionItemName () {
    return this.ContentSerializerCollectionItemNameAttribute$CollectionItemName$value;
  };

  function ContentSerializerCollectionItemNameAttribute_set_CollectionItemName (value) {
    this.ContentSerializerCollectionItemNameAttribute$CollectionItemName$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      ContentSerializerCollectionItemNameAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_CollectionItemName", 
      JSIL.MethodSignature.Return($.String), 
      ContentSerializerCollectionItemNameAttribute_get_CollectionItemName
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_CollectionItemName", 
      JSIL.MethodSignature.Action($.String), 
      ContentSerializerCollectionItemNameAttribute_set_CollectionItemName
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ContentSerializerCollectionItemNameAttribute$CollectionItemName$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "CollectionItemName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Class]; });

})();

/* class Microsoft.Xna.Framework.Media.Album */ 

(function Album$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.SongCollection)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Artist)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Genre)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };

  function Album__ctor (songCollection, name, artist, genre) {
    this.Album$Songs$value = songCollection;
    this.Album$Name$value = name;
    this.Album$Artist$value = artist;
    this.Album$Genre$value = genre;
    this.Album$IsDisposed$value = false;
  };

  function Album_Dispose () {
    this.Album$IsDisposed$value = true;
  };

  function Album_get_Artist () {
    return this.Album$Artist$value;
  };

  function Album_get_Duration () {
    throw $S00().Construct();
  };

  function Album_get_Genre () {
    return this.Album$Genre$value;
  };

  function Album_get_HasArt () {
    throw $S00().Construct();
  };

  function Album_get_IsDisposed () {
    return this.Album$IsDisposed$value;
  };

  function Album_get_Name () {
    return this.Album$Name$value;
  };

  function Album_get_Songs () {
    return this.Album$Songs$value;
  };

  function Album_GetAlbumArt () {
    throw $S00().Construct();
  };

  function Album_GetHashCode () {
    return (this.Album$Name$value).GetHashCode();
  };

  function Album_GetThumbnail () {
    throw $S00().Construct();
  };

  function Album_set_Artist (value) {
    this.Album$Artist$value = value;
  };

  function Album_set_Genre (value) {
    this.Album$Genre$value = value;
  };

  function Album_set_IsDisposed (value) {
    this.Album$IsDisposed$value = value;
  };

  function Album_set_Name (value) {
    this.Album$Name$value = value;
  };

  function Album_set_Songs (value) {
    this.Album$Songs$value = value;
  };

  function Album_toString () {
    return this.Album$Name$value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Album", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), $.String, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Media.Artist"), $asm00.TypeRef("Microsoft.Xna.Framework.Media.Genre")
        ]), 
      Album__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Album_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Artist", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.Artist")), 
      Album_get_Artist
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Duration", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      Album_get_Duration
    );

    $.Method({Static:false, Public:true }, "get_Genre", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.Genre")), 
      Album_get_Genre
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HasArt", 
      JSIL.MethodSignature.Return($.Boolean), 
      Album_get_HasArt
    );

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      Album_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      Album_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Songs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")), 
      Album_get_Songs
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetAlbumArt", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IO.Stream")), 
      Album_GetAlbumArt
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Album_GetHashCode
    );

    $.Method({Static:false, Public:true }, "GetThumbnail", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IO.Stream")), 
      Album_GetThumbnail
    );

    $.Method({Static:false, Public:false}, "set_Artist", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.Artist")), 
      Album_set_Artist
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Genre", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.Genre")), 
      Album_set_Genre
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      Album_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      Album_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Songs", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")), 
      Album_set_Songs
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Album_toString
    );

    $.Field({Static:false, Public:false}, "Album$Artist$value", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Artist"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Album$Genre$value", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Genre"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Album$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Album$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Album$Songs$value", $asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Artist", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Artist"));

    $.Property({Static:false, Public:true }, "Duration", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "Genre", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Genre"));

    $.Property({Static:false, Public:true }, "HasArt", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Songs", $asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.AlbumCollection */ 

(function AlbumCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Xna.Framework.Media.Album))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Album)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function AlbumCollection__ctor (albums) {
    this.albumCollection = albums;
    this.AlbumCollection$IsDisposed$value = false;
  };

  function AlbumCollection_Dispose () {
    var $temp00;

    for (var a$0 = this.albumCollection._items, i$0 = 0, l$0 = (this.albumCollection._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var album = a$0[i$0];
      album.Dispose();
    }
    this.AlbumCollection$IsDisposed$value = true;
  };

  function AlbumCollection_get_Count () {
    return (this.albumCollection).get_Count();
  };

  function AlbumCollection_get_IsDisposed () {
    return this.AlbumCollection$IsDisposed$value;
  };

  function AlbumCollection_get_Item (index) {
    return (this.albumCollection).get_Item(index);
  };

  function AlbumCollection_set_IsDisposed (value) {
    this.AlbumCollection$IsDisposed$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.AlbumCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Album")])), 
      AlbumCollection__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      AlbumCollection_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      AlbumCollection_get_Count
    );

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      AlbumCollection_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Media.Album"), [$.Int32]), 
      AlbumCollection_get_Item
    );

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      AlbumCollection_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "albumCollection", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Media.Album")])); 
    $.Field({Static:false, Public:false}, "AlbumCollection$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm00.TypeRef("Microsoft.Xna.Framework.Media.Album"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Media.Artist */ 

(function Artist$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };

  function Artist__ctor (artist) {
    this.Artist$Name$value = artist;
    this.Artist$IsDisposed$value = false;
  };

  function Artist_Dispose () {
    this.Artist$IsDisposed$value = true;
  };

  function Artist_get_Albums () {
    throw $S00().Construct();
  };

  function Artist_get_IsDisposed () {
    return this.Artist$IsDisposed$value;
  };

  function Artist_get_Name () {
    return this.Artist$Name$value;
  };

  function Artist_get_Songs () {
    throw $S00().Construct();
  };

  function Artist_GetHashCode () {
    return (this.Artist$Name$value).GetHashCode();
  };

  function Artist_set_IsDisposed (value) {
    this.Artist$IsDisposed$value = value;
  };

  function Artist_set_Name (value) {
    this.Artist$Name$value = value;
  };

  function Artist_toString () {
    return this.Artist$Name$value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Artist", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      Artist__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Artist_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Albums", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection")), 
      Artist_get_Albums
    );

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      Artist_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      Artist_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Songs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")), 
      Artist_get_Songs
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Artist_GetHashCode
    );

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      Artist_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      Artist_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Artist_toString
    );

    $.Field({Static:false, Public:false}, "Artist$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Artist$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Albums", $asm00.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"));

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Songs", $asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.Genre */ 

(function Genre$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };

  function Genre__ctor (genre) {
    this.Genre$Name$value = genre;
    this.Genre$IsDisposed$value = false;
  };

  function Genre_Dispose () {
    this.Genre$IsDisposed$value = true;
  };

  function Genre_get_Albums () {
    throw $S00().Construct();
  };

  function Genre_get_IsDisposed () {
    return this.Genre$IsDisposed$value;
  };

  function Genre_get_Name () {
    return this.Genre$Name$value;
  };

  function Genre_get_Songs () {
    throw $S00().Construct();
  };

  function Genre_GetHashCode () {
    return (this.Genre$Name$value).GetHashCode();
  };

  function Genre_set_IsDisposed (value) {
    this.Genre$IsDisposed$value = value;
  };

  function Genre_set_Name (value) {
    this.Genre$Name$value = value;
  };

  function Genre_toString () {
    return this.Genre$Name$value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Genre", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      Genre__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Genre_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Albums", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection")), 
      Genre_get_Albums
    );

    $.Method({Static:false, Public:true }, "get_IsDisposed", 
      JSIL.MethodSignature.Return($.Boolean), 
      Genre_get_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      Genre_get_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Songs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")), 
      Genre_get_Songs
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Genre_GetHashCode
    );

    $.Method({Static:false, Public:false}, "set_IsDisposed", 
      JSIL.MethodSignature.Action($.Boolean), 
      Genre_set_IsDisposed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      Genre_set_Name
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Genre_toString
    );

    $.Field({Static:false, Public:false}, "Genre$IsDisposed$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Genre$Name$value", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Albums", $asm00.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"));

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Songs", $asm00.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Design");
/* class Microsoft.Xna.Framework.Design.ColorConverter */ 

(function ColorConverter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.System.ComponentModel.TypeConverter)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.System.ComponentModel.ITypeDescriptorContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Globalization.NumberFormatInfo)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Color"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.IFormatProvider")]))) ();
  };

  function ColorConverter__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ColorConverter_CanConvertFrom$00 (context, sourceType) {
    return ($T02().op_Equality(sourceType, $T03().__Type__) || $T00().prototype.CanConvertFrom.call(this, context, sourceType));
  };

  function ColorConverter_ConvertFrom$01 (context, culture, value) {
    var s = $T03().$As(value);
    if (s !== null) {
      var v = (JSIL.SplitString(s, JSIL.StringToCharArray((culture.get_NumberFormat()).get_NumberGroupSeparator())));
      var result = $S00().Construct($S01().CallStatic($T0B(), "Parse", null, v[0], culture), $S01().CallStatic($T0B(), "Parse", null, v[1], culture), $S01().CallStatic($T0B(), "Parse", null, v[2], culture), $S01().CallStatic($T0B(), "Parse", null, v[3], culture));
    } else {
      result = $T00().prototype.ConvertFrom.call(this, context, culture, value);
    }
    return result;
  };

  function ColorConverter_ConvertTo$02 (context, culture, value, destinationType) {
    if ($T02().op_Equality(destinationType, $T03().__Type__)) {
      var src = $T0A().$Cast(value).MemberwiseClone();
      var sep = (culture.get_NumberFormat()).get_NumberGroupSeparator();
      var result = (JSIL.ConcatString.apply(null, JSIL.Array.New($T03(), [$S02().CallVirtual("ToString", null, src.get_R(), culture), sep, $S02().CallVirtual("ToString", null, src.get_B(), culture), sep, $S02().CallVirtual("ToString", null, src.get_B(), culture), sep, $S02().CallVirtual("ToString", null, src.get_A(), culture)])));
    } else {
      result = $T00().prototype.ConvertTo.call(this, context, culture, value, destinationType);
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.ColorConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ColorConverter__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")]), 
      ColorConverter_CanConvertFrom$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ]), 
      ColorConverter_ConvertFrom$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ]), 
      ColorConverter_ConvertTo$02
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.PointConverter */ 

(function PointConverter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.System.ComponentModel.TypeConverter)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.System.ComponentModel.ITypeDescriptorContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Globalization.NumberFormatInfo)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Point)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.IFormatProvider")]))) ();
  };

  function PointConverter__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function PointConverter_CanConvertFrom$00 (context, sourceType) {
    return ($T02().op_Equality(sourceType, $T03().__Type__) || $T00().prototype.CanConvertFrom.call(this, context, sourceType));
  };

  function PointConverter_ConvertFrom$01 (context, culture, value) {
    var s = $T03().$As(value);
    if (s !== null) {
      var v = (JSIL.SplitString(s, JSIL.StringToCharArray((culture.get_NumberFormat()).get_NumberGroupSeparator())));
      var result = new ($T0A())($S00().CallStatic($T0B(), "Parse", null, v[0], culture), $S00().CallStatic($T0B(), "Parse", null, v[1], culture));
    } else {
      result = $T00().prototype.ConvertFrom.call(this, context, culture, value);
    }
    return result;
  };

  function PointConverter_ConvertTo$02 (context, culture, value, destinationType) {
    if ($T02().op_Equality(destinationType, $T03().__Type__)) {
      var src = $T0A().$Cast(value).MemberwiseClone();
      var result = (($S01().CallVirtual("ToString", null, src.X, culture) + (culture.get_NumberFormat()).get_NumberGroupSeparator() + $S01().CallVirtual("ToString", null, src.Y, culture)));
    } else {
      result = $T00().prototype.ConvertTo.call(this, context, culture, value, destinationType);
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.PointConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      PointConverter__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")]), 
      PointConverter_CanConvertFrom$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ]), 
      PointConverter_ConvertFrom$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ]), 
      PointConverter_ConvertTo$02
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.Vector2Converter */ 

(function Vector2Converter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.System.ComponentModel.TypeConverter)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.System.ComponentModel.ITypeDescriptorContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Design.VectorConversion)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Globalization.NumberFormatInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.IFormatProvider")]))) ();
  };

  function Vector2Converter__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Vector2Converter_CanConvertFrom$00 (context, sourceType) {
    return ($T02().op_Equality(sourceType, $T03().__Type__) || $T00().prototype.CanConvertFrom.call(this, context, sourceType));
  };

  function Vector2Converter_CanConvertTo$01 (context, destinationType) {
    return ($T04().CanConvertTo(context, destinationType) || 
      $T02().op_Equality(destinationType, $T03().__Type__) || $T00().prototype.CanConvertTo.call(this, context, destinationType));
  };

  function Vector2Converter_ConvertFrom$02 (context, culture, value) {
    var vec = $T07().get_Zero().MemberwiseClone();
    if ($T02().op_Equality(JSIL.GetType(value), $T03().__Type__)) {
      var str = $T03().$Cast(value);
      var words = (JSIL.SplitString(str, JSIL.StringToCharArray((culture.get_NumberFormat()).get_NumberGroupSeparator())));
      vec.X = +$S00().CallStatic($T0C(), "Parse", null, words[0], culture);
      vec.Y = +$S00().CallStatic($T0C(), "Parse", null, words[1], culture);
      var result = vec.MemberwiseClone();
    } else {
      result = $T00().prototype.ConvertFrom.call(this, context, culture, value);
    }
    return result;
  };

  function Vector2Converter_ConvertTo$03 (context, culture, value, destinationType) {
    var vec2 = new ($T0D())();
    var vec = $T07().$Cast(value).MemberwiseClone();
    if ($T04().CanConvertTo(context, destinationType)) {
      $T0D().prototype._ctor.call(vec2, vec.X, vec.Y, 0, 0);
      var result = $T04().ConvertToFromVector4(context, culture, vec2.MemberwiseClone(), destinationType);
    } else if ($T02().op_Equality(destinationType, $T03().__Type__)) {
      var terms = JSIL.Array.New($T03(), [$S01().CallVirtual("ToString", null, vec.X, culture), $S01().CallVirtual("ToString", null, vec.Y, culture)]);
      result = (JSIL.JoinStrings((culture.get_NumberFormat()).get_NumberGroupSeparator(), terms));
    } else {
      result = $T00().prototype.ConvertTo.call(this, context, culture, value, destinationType);
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.Vector2Converter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Vector2Converter__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")]), 
      Vector2Converter_CanConvertFrom$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")]), 
      Vector2Converter_CanConvertTo$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ]), 
      Vector2Converter_ConvertFrom$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ]), 
      Vector2Converter_ConvertTo$03
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.Vector3Converter */ 

(function Vector3Converter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.System.ComponentModel.TypeConverter)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.System.ComponentModel.ITypeDescriptorContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Design.VectorConversion)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Globalization.NumberFormatInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.IFormatProvider")]))) ();
  };

  function Vector3Converter__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Vector3Converter_CanConvertFrom$00 (context, sourceType) {
    return ($T02().op_Equality(sourceType, $T03().__Type__) || $T00().prototype.CanConvertFrom.call(this, context, sourceType));
  };

  function Vector3Converter_CanConvertTo$01 (context, destinationType) {
    return ($T04().CanConvertTo(context, destinationType) || 
      $T02().op_Equality(destinationType, $T03().__Type__) || $T00().prototype.CanConvertTo.call(this, context, destinationType));
  };

  function Vector3Converter_ConvertFrom$02 (context, culture, value) {
    var vec = $T07().get_Zero().MemberwiseClone();
    if ($T02().op_Equality(JSIL.GetType(value), $T03().__Type__)) {
      var str = $T03().$Cast(value);
      var words = (JSIL.SplitString(str, JSIL.StringToCharArray((culture.get_NumberFormat()).get_NumberGroupSeparator())));
      vec.X = +$S00().CallStatic($T0C(), "Parse", null, words[0], culture);
      vec.Y = +$S00().CallStatic($T0C(), "Parse", null, words[1], culture);
      vec.Z = +$S00().CallStatic($T0C(), "Parse", null, words[2], culture);
      var result = vec.MemberwiseClone();
    } else {
      result = $T00().prototype.ConvertFrom.call(this, context, culture, value);
    }
    return result;
  };

  function Vector3Converter_ConvertTo$03 (context, culture, value, destinationType) {
    var vec2 = new ($T0D())();
    var vec = $T07().$Cast(value).MemberwiseClone();
    if ($T04().CanConvertTo(context, destinationType)) {
      $T0D().prototype._ctor.call(vec2, vec.X, vec.Y, vec.Z, 0);
      var result = $T04().ConvertToFromVector4(context, culture, vec2.MemberwiseClone(), destinationType);
    } else if ($T02().op_Equality(destinationType, $T03().__Type__)) {
      var terms = JSIL.Array.New($T03(), [$S01().CallVirtual("ToString", null, vec.X, culture), $S01().CallVirtual("ToString", null, vec.Y, culture), $S01().CallVirtual("ToString", null, vec.Z, culture)]);
      result = (JSIL.JoinStrings((culture.get_NumberFormat()).get_NumberGroupSeparator(), terms));
    } else {
      result = $T00().prototype.ConvertTo.call(this, context, culture, value, destinationType);
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.Vector3Converter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Vector3Converter__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")]), 
      Vector3Converter_CanConvertFrom$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")]), 
      Vector3Converter_CanConvertTo$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ]), 
      Vector3Converter_ConvertFrom$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ]), 
      Vector3Converter_ConvertTo$03
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.Vector4Converter */ 

(function Vector4Converter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.System.ComponentModel.TypeConverter)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm03.System.ComponentModel.ITypeDescriptorContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Design.VectorConversion)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Globalization.NumberFormatInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm01.System.Char))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.IFormatProvider")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.IFormatProvider")]))) ();
  };

  function Vector4Converter__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function Vector4Converter_CanConvertFrom$00 (context, sourceType) {
    return ($T02().op_Equality(sourceType, $T03().__Type__) || $T00().prototype.CanConvertFrom.call(this, context, sourceType));
  };

  function Vector4Converter_CanConvertTo$01 (context, destinationType) {
    return ($T04().CanConvertTo(context, destinationType) || 
      $T02().op_Equality(destinationType, $T03().__Type__) || $T00().prototype.CanConvertTo.call(this, context, destinationType));
  };

  function Vector4Converter_ConvertFrom$02 (context, culture, value) {
    var vec = $T07().get_Zero().MemberwiseClone();
    if ($T02().op_Equality(JSIL.GetType(value), $T03().__Type__)) {
      var str = $T03().$Cast(value);
      var words = (JSIL.SplitString(str, JSIL.StringToCharArray((culture.get_NumberFormat()).get_NumberGroupSeparator())));
      vec.X = +$S00().CallStatic($T0C(), "Parse", null, words[0], culture);
      vec.Y = +$S00().CallStatic($T0C(), "Parse", null, words[1], culture);
      vec.Z = +$S00().CallStatic($T0C(), "Parse", null, words[2], culture);
      vec.W = +$S00().CallStatic($T0C(), "Parse", null, words[3], culture);
      var result = vec.MemberwiseClone();
    } else {
      result = $T00().prototype.ConvertFrom.call(this, context, culture, value);
    }
    return result;
  };

  function Vector4Converter_ConvertTo$03 (context, culture, value, destinationType) {
    var vec = $T07().$Cast(value).MemberwiseClone();
    if ($T04().CanConvertTo(context, destinationType)) {
      var result = $T04().ConvertToFromVector4(context, culture, vec.MemberwiseClone(), destinationType);
    } else if ($T02().op_Equality(destinationType, $T03().__Type__)) {
      var terms = JSIL.Array.New($T03(), 3);
      terms[0] = $S01().CallVirtual("ToString", null, vec.X, culture);
      terms[1] = $S01().CallVirtual("ToString", null, vec.Y, culture);
      terms[2] = $S01().CallVirtual("ToString", null, vec.Z, culture);
      terms[3] = $S01().CallVirtual("ToString", null, vec.W, culture);
      result = (JSIL.JoinStrings((culture.get_NumberFormat()).get_NumberGroupSeparator(), terms));
    } else {
      result = $T00().prototype.ConvertTo.call(this, context, culture, value, destinationType);
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.Vector4Converter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Vector4Converter__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")]), 
      Vector4Converter_CanConvertFrom$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")]), 
      Vector4Converter_CanConvertTo$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ]), 
      Vector4Converter_ConvertFrom$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ]), 
      Vector4Converter_ConvertTo$03
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.VectorConversion */ 

(function VectorConversion$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.System.ComponentModel.ITypeDescriptorContext)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Activator)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4)) ();
  };

  function VectorConversion_CanConvertTo (context, destinationType) {
    return ($T01().op_Equality(destinationType, $T02().__Type__) || 
      $T01().op_Equality(destinationType, $T03().__Type__) || 
      $T01().op_Equality(destinationType, $T04().__Type__) || 
      $T01().op_Equality(destinationType, $T05().__Type__) || $T01().op_Inequality(destinationType.GetInterface("IPackedVector"), null));
  };

  function VectorConversion_ConvertToFromVector4 (context, culture, value, destinationType) {
    if ($T01().op_Equality(destinationType, $T02().__Type__)) {
      var result = value.X;
    } else if ($T01().op_Equality(destinationType, $T03().__Type__)) {
      result = $S00().Construct(value.X, value.Y);
    } else if ($T01().op_Equality(destinationType, $T04().__Type__)) {
      result = $S01().Construct(value.X, value.Y, value.Z);
    } else if ($T01().op_Equality(destinationType, $T05().__Type__)) {
      result = $S02().Construct(value.X, value.Y, value.Z, value.W);
    } else if ($T01().op_Inequality(destinationType.GetInterface("IPackedVector"), null)) {
      var packedVec = $T08().$Cast($S03().CallStatic($T09(), "CreateInstance", null, destinationType));
      $IM00().Call(packedVec, null, value.MemberwiseClone());
      result = packedVec;
    } else {
      result = null;
    }
    return result;
  };

  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Design.VectorConversion", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")]), 
      VectorConversion_CanConvertTo
    );

    $.Method({Static:true , Public:true }, "ConvertToFromVector4", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector4"), $asm01.TypeRef("System.Type")
        ]), 
      VectorConversion_ConvertToFromVector4
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.NamespaceDoc */ 

(function NamespaceDoc$Members () {
  var $, $thisType;
  function NamespaceDoc__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Input.NamespaceDoc", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NamespaceDoc__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Audio.NamespaceDoc */ 

(function NamespaceDoc$Members () {
  var $, $thisType;
  function NamespaceDoc__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.NamespaceDoc", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NamespaceDoc__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Content.NamespaceDoc */ 

(function NamespaceDoc$Members () {
  var $, $thisType;
  function NamespaceDoc__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.NamespaceDoc", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NamespaceDoc__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("SDL2");
/* class SDL2.SDL */ 

(function SDL$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.SDL2.SDL_SDL_PIXELTYPE_ENUM)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.SDL2.SDL_SDL_PIXELORDER_ENUM)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.SDL2.SDL_SDL_PACKEDLAYOUT_ENUM)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.BitConverter)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.SDL2.SDL_SDL_EventType)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.SDL2.SDL_SDL_AudioSpec)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.SDL2.SDL_SDL_Surface)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.SDL2.SDL_SDL_Scancode)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.SDL2.SDL_SDL_Keycode)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.SDL2.SDL_SDL_MessageBoxData)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Runtime.InteropServices.ICustomMarshaler)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.SDL2.LPUtf8StrMarshaler)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.SDL2.SDL_INTERNAL_SDL_MessageBoxData)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm00.SDL2.SDL_INTERNAL_SDL_MessageBoxButtonData))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.SDL2.SDL_INTERNAL_SDL_MessageBoxButtonData)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.SDL2.SDL_SDL_MessageBoxColorScheme)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.SDL2.SDL_SDL_version)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.Type")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")])]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData)) ();
  };

  function SDL_SDL_AUDIO_BITSIZE (x) {
    return ((x | 0) & 255);
  };

  function SDL_SDL_AUDIO_ISBIGENDIAN (x) {
    return (((x | 0) & 4096) !== 0);
  };

  function SDL_SDL_AUDIO_ISFLOAT (x) {
    return (((x | 0) & 256) !== 0);
  };

  function SDL_SDL_AUDIO_ISINT (x) {
    return (((x | 0) & 256) === 0);
  };

  function SDL_SDL_AUDIO_ISLITTLEENDIAN (x) {
    return (((x | 0) & 4096) === 0);
  };

  function SDL_SDL_AUDIO_ISSIGNED (x) {
    return (((x | 0) & 32768) !== 0);
  };

  function SDL_SDL_AUDIO_ISUNSIGNED (x) {
    return (((x | 0) & 32768) === 0);
  };

  function SDL_SDL_BITSPERPIXEL (X) {
    return (((X >>> 0) << 16) & 15 & 0xFF);
  };

  function SDL_SDL_BUTTON (X) {
    return (1 << ((((X >>> 0) - 1) >>> 0) | 0));
  };

  function SDL_SDL_BYTESPERPIXEL (X) {
    if ($thisType.SDL_ISPIXELFORMAT_FOURCC(X)) {
      if (!(!(((X >>> 0) === ($thisType.SDL_PIXELFORMAT_YUY2 >>> 0)) || 
            ((X >>> 0) === ($thisType.SDL_PIXELFORMAT_UYVY >>> 0))) && ((X >>> 0) !== ($thisType.SDL_PIXELFORMAT_YVYU >>> 0)))) {
        var result = 2;
      } else {
        result = 1;
      }
    } else {
      result = ((X >>> 0) & 255 & 0xFF);
    }
    return result;
  };

  function SDL_SDL_DEFINE_PIXELFORMAT (type, order, layout, bits, bytes) {
    return (((((268435456 | ((type.valueOf() | 0) << 24)) | ((order.valueOf() | 0) << 20)) | ((layout.valueOf() | 0) << 16)) | ((bits | 0) << 8)) | (bytes | 0) >>> 0);
  };

  function SDL_SDL_DEFINE_PIXELFOURCC (A, B, C, D) {
    return $thisType.SDL_FOURCC(A, B, C, D);
  };

  function SDL_SDL_FOURCC (A, B, C, D) {
    return ((((A | 0) | ((B | 0) << 8)) | ((C | 0) << 16)) | ((D | 0) << 24) >>> 0);
  };

  function SDL_SDL_GameControllerAddMappingsFromFile (file) {
    var rwops = $thisType.INTERNAL_SDL_RWFromFile(file, "rb").MemberwiseClone();
    return $thisType.INTERNAL_SDL_GameControllerAddMappingsFromRW(rwops.MemberwiseClone(), 1);
  };

  function SDL_SDL_GetEventState (type) {
    return $thisType.SDL_EventState(type, -1);
  };

  function SDL_SDL_ISPIXELFORMAT_ALPHA (format) {
    if ($thisType.SDL_ISPIXELFORMAT_FOURCC(format)) {
      var result = false;
    } else {
      var pOrder = $T01().$Cast($thisType.SDL_PIXELORDER(format));
      result = (pOrder === $T01().SDL_ARRAYORDER_ARGB) || 
      (pOrder === $T01().SDL_ARRAYORDER_BGR) || 
      (pOrder === $T01().SDL_PACKEDORDER_ABGR) || 
      (pOrder === $T01().SDL_PACKEDORDER_BGRA);
    }
    return result;
  };

  function SDL_SDL_ISPIXELFORMAT_FOURCC (format) {
    return (((format >>> 0) === 0) && (($thisType.SDL_PIXELFLAG(format) | 0) !== 1));
  };

  function SDL_SDL_ISPIXELFORMAT_INDEXED (format) {
    if ($thisType.SDL_ISPIXELFORMAT_FOURCC(format)) {
      var result = false;
    } else {
      var pType = $T00().$Cast($thisType.SDL_PIXELTYPE(format));
      result = (pType === $T00().SDL_PIXELTYPE_INDEX1) || 
      (pType === $T00().SDL_PIXELTYPE_INDEX4) || 
      (pType === $T00().SDL_PIXELTYPE_INDEX8);
    }
    return result;
  };

  function SDL_SDL_LoadBMP (file) {
    var rwops = $thisType.INTERNAL_SDL_RWFromFile(file, "rb").MemberwiseClone();
    return $thisType.INTERNAL_SDL_LoadBMP_RW(rwops.MemberwiseClone(), 1);
  };

  function SDL_SDL_LoadWAV (file, /* ref */ spec, /* ref */ audio_buf, /* ref */ audio_len) {
    var rwops = $thisType.INTERNAL_SDL_RWFromFile(file, "rb").MemberwiseClone();
    var result_ptr = $thisType.INTERNAL_SDL_LoadWAV_RW(
      rwops.MemberwiseClone(), 
      1, 
      /* ref */ spec, 
      /* ref */ audio_buf, 
      /* ref */ audio_len
    ).MemberwiseClone();
    return $T0C().$Cast($S00().CallStatic($T0D(), "PtrToStructure", null, result_ptr.MemberwiseClone(), $T0C().__Type__));
  };

  function SDL_SDL_MUSTLOCK (surface) {
    return ((($T0E().$Cast($S00().CallStatic($T0D(), "PtrToStructure", null, surface.MemberwiseClone(), $T0E().__Type__)).flags >>> 0) & 2) !== 0);
  };

  function SDL_SDL_PIXELFLAG (X) {
    return (((X >>> 0) >>> 28) & 15 & 0xFF);
  };

  function SDL_SDL_PIXELORDER (X) {
    return (((X >>> 0) >>> 20) & 15 & 0xFF);
  };

  function SDL_SDL_PIXELTYPE (X) {
    return (((X >>> 0) >>> 24) & 15 & 0xFF);
  };

  function SDL_SDL_SaveBMP (surface, file) {
    var rwops = $thisType.INTERNAL_SDL_RWFromFile(file, "wb").MemberwiseClone();
    return $thisType.INTERNAL_SDL_SaveBMP_RW(surface.MemberwiseClone(), rwops.MemberwiseClone(), 1);
  };

  function SDL_SDL_SCANCODE_TO_KEYCODE (X) {
    return $T10().$Cast($T0F().$Cast(X | $T0F().$Cast(1073741824)));
  };

  function SDL_SDL_ShowMessageBox (/* ref */ messageboxdata, /* ref */ buttonid) {
    var utf8 = $T13().GetInstance(null);
    var iNTERNAL_SDL_MessageBoxData = new ($T14())();
    iNTERNAL_SDL_MessageBoxData.flags = messageboxdata.get().flags;
    iNTERNAL_SDL_MessageBoxData.window = messageboxdata.get().window.MemberwiseClone();
    iNTERNAL_SDL_MessageBoxData.title = $IM00().Call(utf8, null, messageboxdata.get().title).MemberwiseClone();
    iNTERNAL_SDL_MessageBoxData.message = $IM00().Call(utf8, null, messageboxdata.get().message).MemberwiseClone();
    iNTERNAL_SDL_MessageBoxData.numbuttons = (messageboxdata.get().numbuttons | 0);
    var data = new JSIL.BoxedVariable(iNTERNAL_SDL_MessageBoxData.MemberwiseClone());
    var buttons = JSIL.Array.New($T16(), messageboxdata.get().numbuttons);

    for (var i = 0; i < (messageboxdata.get().numbuttons | 0); i = ((i + 1) | 0)) {
      var arg_D0_0_cp_0 = buttons;
      var arg_D0_0_cp_1 = i;
      var iNTERNAL_SDL_MessageBoxButtonData = new ($T16())();
      iNTERNAL_SDL_MessageBoxButtonData.flags = messageboxdata.get().buttons[i].flags;
      iNTERNAL_SDL_MessageBoxButtonData.buttonid = (messageboxdata.get().buttons[i].buttonid | 0);
      iNTERNAL_SDL_MessageBoxButtonData.text = $IM00().Call(utf8, null, messageboxdata.get().buttons[i].text).MemberwiseClone();
      arg_D0_0_cp_0[arg_D0_0_cp_1] = iNTERNAL_SDL_MessageBoxButtonData;
    }
    if (messageboxdata.get().colorScheme !== null) {
      data.get().colorScheme = $S01().CallStatic($T0D(), "AllocHGlobal", null, $S02().CallStatic($T0D(), "SizeOf", null, $T17().__Type__)).MemberwiseClone();
      $T0D().StructureToPtr(JSIL.Nullable_Value(messageboxdata.get().colorScheme).MemberwiseClone(), data.get().colorScheme.MemberwiseClone(), false);
    }
    var buttonsPtr = JSIL.PinAndGetPointer(buttons, 0);
    data.get().buttons = $S03().CallStatic($T09(), "op_Explicit", null, buttonsPtr.cast(JSIL.Pointer.Of($asm01.System.Void))).MemberwiseClone();
    var result = ($thisType.INTERNAL_SDL_ShowMessageBox(/* ref */ data, /* ref */ buttonid) | 0);
    $T0D().FreeHGlobal(data.get().colorScheme.MemberwiseClone());

    for (i = 0; i < (messageboxdata.get().numbuttons | 0); i = ((i + 1) | 0)) {
      $IM01().Call(utf8, null, buttons[i].text.MemberwiseClone());
    }
    $IM01().Call(utf8, null, data.get().message.MemberwiseClone());
    $IM01().Call(utf8, null, data.get().title.MemberwiseClone());
    return result;
  };

  function SDL_SDL_TICKS_PASSED (A, B) {
    return ((((B >>> 0) - (A >>> 0)) >>> 0) <= 0);
  };

  function SDL_SDL_VERSION (/* ref */ x) {
    x.get().major = 2;
    x.get().minor = 0;
    x.get().patch = 3;
  };

  function SDL_SDL_VERSION_ATLEAST (X, Y, Z) {
    return (($thisType.SDL_COMPILEDVERSION | 0) >= ($thisType.SDL_VERSIONNUM(X, Y, Z) | 0));
  };

  function SDL_SDL_VERSIONNUM (X, Y, Z) {
    return ((((Math.imul(X, 1000) + Math.imul(Y, 100)) | 0) + (Z | 0)) | 0);
  };

  function SDL_SDL_WINDOWPOS_CENTERED_DISPLAY (X) {
    return (805240832 | (X | 0));
  };

  function SDL_SDL_WINDOWPOS_ISCENTERED (X) {
    return $T19().op_Equality(
      $T19().op_BitwiseAnd(
        $T19().FromNumber(X), 
        ($T1A().FromNumber(-65536)).ToInt64()
      ), 
      $T19().Create(16711680, 47, 0)
    );
  };

  function SDL_SDL_WINDOWPOS_ISUNDEFINED (X) {
    return $T19().op_Equality(
      $T19().op_BitwiseAnd(
        $T19().FromNumber(X), 
        ($T1A().FromNumber(-65536)).ToInt64()
      ), 
      $T19().Create(16711680, 31, 0)
    );
  };

  function SDL_SDL_WINDOWPOS_UNDEFINED_DISPLAY (X) {
    return (536805376 | (X | 0));
  };

  JSIL.MakeStaticClass("SDL2.SDL", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.PInvokeMethod({Static:true , Public:false}, "INTERNAL_SDL_GameControllerAddMappingsFromRW", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_GameControllerAddMappingsFromRW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "INTERNAL_SDL_LoadBMP_RW", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_LoadBMP_RW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "INTERNAL_SDL_LoadWAV_RW", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_AudioSpec")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.IntPtr")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_LoadWAV_RW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "INTERNAL_SDL_RWFromFile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.String, $.String]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_RWFromFile", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }, 
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "INTERNAL_SDL_SaveBMP_RW", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_SaveBMP_RW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "INTERNAL_SDL_ShowMessageBox", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+INTERNAL_SDL_MessageBoxData")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_ShowMessageBox", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_AddEventWatch", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("SDL2.SDL+SDL_EventFilter"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_AddTimer", 
      new JSIL.MethodSignature($.Int32, [
          $.UInt32, $asm00.TypeRef("SDL2.SDL+SDL_TimerCallback"), 
          $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_AllocFormat", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.UInt32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_AllocPalette", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_AUDIO_BITSIZE", 
      new JSIL.MethodSignature($.UInt16, [$.UInt16]), 
      SDL_SDL_AUDIO_BITSIZE
    );

    $.Method({Static:true , Public:true }, "SDL_AUDIO_ISBIGENDIAN", 
      new JSIL.MethodSignature($.Boolean, [$.UInt16]), 
      SDL_SDL_AUDIO_ISBIGENDIAN
    );

    $.Method({Static:true , Public:true }, "SDL_AUDIO_ISFLOAT", 
      new JSIL.MethodSignature($.Boolean, [$.UInt16]), 
      SDL_SDL_AUDIO_ISFLOAT
    );

    $.Method({Static:true , Public:true }, "SDL_AUDIO_ISINT", 
      new JSIL.MethodSignature($.Boolean, [$.UInt16]), 
      SDL_SDL_AUDIO_ISINT
    );

    $.Method({Static:true , Public:true }, "SDL_AUDIO_ISLITTLEENDIAN", 
      new JSIL.MethodSignature($.Boolean, [$.UInt16]), 
      SDL_SDL_AUDIO_ISLITTLEENDIAN
    );

    $.Method({Static:true , Public:true }, "SDL_AUDIO_ISSIGNED", 
      new JSIL.MethodSignature($.Boolean, [$.UInt16]), 
      SDL_SDL_AUDIO_ISSIGNED
    );

    $.Method({Static:true , Public:true }, "SDL_AUDIO_ISUNSIGNED", 
      new JSIL.MethodSignature($.Boolean, [$.UInt16]), 
      SDL_SDL_AUDIO_ISUNSIGNED
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_AudioDeviceConnected", 
      new JSIL.MethodSignature($.Int32, [$.UInt32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_AudioInit", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_AudioQuit", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_BITSPERPIXEL", 
      new JSIL.MethodSignature($.Byte, [$.UInt32]), 
      SDL_SDL_BITSPERPIXEL
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_BlitScaled", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_UpperBlitScaled", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_BlitScaled", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_UpperBlitScaled", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_BlitScaled", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_UpperBlitScaled", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_BlitScaled", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_UpperBlitScaled", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_BlitSurface", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_UpperBlit", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_BlitSurface", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_UpperBlit", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_BlitSurface", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_UpperBlit", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_BlitSurface", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "SDL2.dll", 
        EntryPoint: "SDL_UpperBlit", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_BUTTON", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32]), 
      SDL_SDL_BUTTON
    );

    $.Method({Static:true , Public:true }, "SDL_BYTESPERPIXEL", 
      new JSIL.MethodSignature($.Byte, [$.UInt32]), 
      SDL_SDL_BYTESPERPIXEL
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CalculateGammaRamp", 
      new JSIL.MethodSignature(null, [$.Single, $jsilcore.TypeRef("System.Array", [$.UInt16])]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_ClearError", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_ClearHints", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CloseAudio", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CloseAudioDevice", 
      JSIL.MethodSignature.Action($.UInt32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_ConvertPixels", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.UInt32, $asm01.TypeRef("System.IntPtr"), 
          $.Int32, $.UInt32, 
          $asm01.TypeRef("System.IntPtr"), $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_ConvertSurface", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $.UInt32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_ConvertSurfaceFormat", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $.UInt32, 
          $.UInt32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateColorCursor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateCursor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateRenderer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.UInt32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateRGBSurface", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $.UInt32, $.Int32, 
          $.Int32, $.Int32, 
          $.UInt32, $.UInt32, 
          $.UInt32, $.UInt32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateRGBSurfaceFrom", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.UInt32, 
          $.UInt32, $.UInt32, 
          $.UInt32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateSoftwareRenderer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateSystemCursor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm00.TypeRef("SDL2.SDL+SDL_SystemCursor")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateTexture", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $.UInt32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateTextureFromSurface", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateWindow", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm00.TypeRef("SDL2.SDL+SDL_WindowFlags")
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateWindowAndRenderer", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $asm00.TypeRef("SDL2.SDL+SDL_WindowFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.IntPtr")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.IntPtr")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_CreateWindowFrom", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_DEFINE_PIXELFORMAT", 
      new JSIL.MethodSignature($.UInt32, [
          $asm00.TypeRef("SDL2.SDL+SDL_PIXELTYPE_ENUM"), $asm00.TypeRef("SDL2.SDL+SDL_PIXELORDER_ENUM"), 
          $asm00.TypeRef("SDL2.SDL+SDL_PACKEDLAYOUT_ENUM"), $.Byte, 
          $.Byte
        ]), 
      SDL_SDL_DEFINE_PIXELFORMAT
    );

    $.Method({Static:true , Public:true }, "SDL_DEFINE_PIXELFOURCC", 
      new JSIL.MethodSignature($.UInt32, [
          $.Byte, $.Byte, 
          $.Byte, $.Byte
        ]), 
      SDL_SDL_DEFINE_PIXELFOURCC
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_Delay", 
      JSIL.MethodSignature.Action($.UInt32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_DelEventWatch", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("SDL2.SDL+SDL_EventFilter"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_DestroyRenderer", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_DestroyTexture", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_DestroyWindow", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_DisableScreenSaver", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_EnableScreenSaver", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_EnclosePoints", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("SDL2.SDL+SDL_Point")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_EventState", 
      new JSIL.MethodSignature($.Byte, [$asm00.TypeRef("SDL2.SDL+SDL_EventType"), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_FillRect", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $.UInt32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_FillRects", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $.Int32, $.UInt32
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_FilterEvents", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("SDL2.SDL+SDL_EventFilter"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_FlushEvent", 
      JSIL.MethodSignature.Action($asm00.TypeRef("SDL2.SDL+SDL_EventType")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_FlushEvents", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("SDL2.SDL+SDL_EventType"), $asm00.TypeRef("SDL2.SDL+SDL_EventType")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_FOURCC", 
      new JSIL.MethodSignature($.UInt32, [
          $.Byte, $.Byte, 
          $.Byte, $.Byte
        ]), 
      SDL_SDL_FOURCC
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_FreeCursor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_FreeFormat", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_FreePalette", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_FreeSurface", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_FreeWAV", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerAddMapping", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.Method({Static:true , Public:true }, "SDL_GameControllerAddMappingsFromFile", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      SDL_SDL_GameControllerAddMappingsFromFile
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerClose", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerEventState", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerGetAttached", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerGetAxis", 
      new JSIL.MethodSignature($.Int16, [$asm01.TypeRef("System.IntPtr"), $asm00.TypeRef("SDL2.SDL+SDL_GameControllerAxis")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerGetAxisFromString", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_GameControllerAxis"), [$.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerGetBindForAxis", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_GameControllerButtonBind"), [$asm01.TypeRef("System.IntPtr"), $asm00.TypeRef("SDL2.SDL+SDL_GameControllerAxis")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerGetBindForButton", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_GameControllerButtonBind"), [$asm01.TypeRef("System.IntPtr"), $asm00.TypeRef("SDL2.SDL+SDL_GameControllerButton")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerGetButton", 
      new JSIL.MethodSignature($.Byte, [$asm01.TypeRef("System.IntPtr"), $asm00.TypeRef("SDL2.SDL+SDL_GameControllerButton")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerGetButtonFromString", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_GameControllerButton"), [$.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerGetJoystick", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerGetStringForAxis", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("SDL2.SDL+SDL_GameControllerAxis")]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerGetStringForButton", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("SDL2.SDL+SDL_GameControllerButton")]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerMapping", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerMappingForGUID", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Guid")]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerNameForIndex", 
      new JSIL.MethodSignature($.String, [$.Int32]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerOpen", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GameControllerUpdate", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetAudioDeviceName", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetAudioDeviceStatus", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_AudioStatus"), [$.UInt32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetAudioDriver", 
      new JSIL.MethodSignature($.String, [$.Int32]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetAudioStatus", 
      JSIL.MethodSignature.Return($asm00.TypeRef("SDL2.SDL+SDL_AudioStatus")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetBasePath", 
      JSIL.MethodSignature.Return($.String), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetClipboardText", 
      JSIL.MethodSignature.Return($.String), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetClipRect", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetClosestDisplayMode", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_DisplayMode")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_DisplayMode")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetColorKey", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetCPUCount", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetCurrentAudioDriver", 
      JSIL.MethodSignature.Return($.String), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetCurrentDisplayMode", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_DisplayMode")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetCurrentVideoDriver", 
      JSIL.MethodSignature.Return($.String), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetCursor", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetDesktopDisplayMode", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_DisplayMode")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetDisplayBounds", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetDisplayMode", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_DisplayMode")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetError", 
      JSIL.MethodSignature.Return($.String), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetEventFilter", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_EventFilter")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.IntPtr")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_GetEventState", 
      new JSIL.MethodSignature($.Byte, [$asm00.TypeRef("SDL2.SDL+SDL_EventType")]), 
      SDL_SDL_GetEventState
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetHint", 
      new JSIL.MethodSignature($.String, [$.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
        , Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetKeyboardFocus", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetKeyboardState", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetKeyFromName", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_Keycode"), [$.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetKeyFromScancode", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_Keycode"), [$asm00.TypeRef("SDL2.SDL+SDL_Scancode")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetKeyName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("SDL2.SDL+SDL_Keycode")]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetModState", 
      JSIL.MethodSignature.Return($asm00.TypeRef("SDL2.SDL+SDL_Keymod")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetMouseFocus", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetMouseState", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetMouseState", 
      new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetMouseState", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetMouseState", 
      new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetNumAudioDevices", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetNumAudioDrivers", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetNumDisplayModes", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetNumRenderDrivers", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetNumTouchDevices", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetNumTouchFingers", 
      new JSIL.MethodSignature($.Int32, [$.Int64]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetNumVideoDisplays", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetNumVideoDrivers", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetPerformanceCounter", 
      JSIL.MethodSignature.Return($.UInt64), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetPerformanceFrequency", 
      JSIL.MethodSignature.Return($.UInt64), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetPixelFormatName", 
      new JSIL.MethodSignature($.String, [$.UInt32]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetPlatform", 
      JSIL.MethodSignature.Return($.String), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetPrefPath", 
      new JSIL.MethodSignature($.String, [$.String, $.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }, 
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
        , Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRelativeMouseMode", 
      JSIL.MethodSignature.Return($asm00.TypeRef("SDL2.SDL+SDL_bool")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRelativeMouseState", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRenderDrawBlendMode", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_BlendMode")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRenderDrawColor", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Byte])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRenderDriverInfo", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_RendererInfo")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRenderer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRendererInfo", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_RendererInfo")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRendererOutputSize", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRenderTarget", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRevision", 
      JSIL.MethodSignature.Return($.String), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRevisionNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRGB", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Byte])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetRGBA", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Byte])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetScancodeFromKey", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_Scancode"), [$asm00.TypeRef("SDL2.SDL+SDL_Keycode")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetScancodeFromName", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_Scancode"), [$.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetScancodeName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("SDL2.SDL+SDL_Scancode")]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetSurfaceAlphaMod", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Byte])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetSurfaceBlendMode", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_BlendMode")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetSurfaceColorMod", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Byte])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetSystemRAM", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetTextureAlphaMod", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Byte])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetTextureBlendMode", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_BlendMode")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetTextureColorMod", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Byte])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetTicks", 
      JSIL.MethodSignature.Return($.UInt32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetTouchDevice", 
      new JSIL.MethodSignature($.Int64, [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetTouchFinger", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.Int64, $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetVersion", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_version")])), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetVideoDriver", 
      new JSIL.MethodSignature($.String, [$.Int32]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowBrightness", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowData", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr"), $.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowDisplayIndex", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowDisplayMode", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_DisplayMode")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowFlags", 
      new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowFromID", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.UInt32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowGammaRamp", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt16]), 
          $jsilcore.TypeRef("System.Array", [$.UInt16]), $jsilcore.TypeRef("System.Array", [$.UInt16])
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, 
          {
            NativeType: "Array", 
            Out: true
          }, 
          {
            NativeType: "Array", 
            Out: true
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowGrab", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowID", 
      new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowMaximumSize", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowMinimumSize", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowPixelFormat", 
      new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowPosition", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowSize", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowSurface", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowTitle", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GetWindowWMInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_SysWMinfo")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_BindTexture", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Single]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_CreateContext", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_DeleteContext", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_ExtensionSupported", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$.String]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_GetAttribute", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("SDL2.SDL+SDL_GLattr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_GetCurrentContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_GetCurrentWindow", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_GetDrawableSize", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_GetProcAddress", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.String]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_GetSwapInterval", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_MakeCurrent", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_ResetAttributes", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_SetAttribute", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("SDL2.SDL+SDL_GLattr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_SetSwapInterval", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_SwapWindow", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_GL_UnbindTexture", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticClose", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticDestroyEffect", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticEffectSupported", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_HapticEffect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticGetEffectStatus", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticIndex", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticName", 
      new JSIL.MethodSignature($.String, [$.Int32]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticNewEffect", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_HapticEffect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticNumAxes", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticNumEffects", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticNumEffectsPlaying", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticOpen", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticOpened", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticOpenFromJoystick", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticOpenFromMouse", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticPause", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticQuery", 
      new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticRumbleInit", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticRumblePlay", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Single, 
          $.UInt32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticRumbleStop", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticRumbleSupported", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticRunEffect", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.UInt32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticSetAutocenter", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticSetGain", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticStopAll", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticStopEffect", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticUnpause", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HapticUpdateEffect", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_HapticEffect")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HasClipboardText", 
      JSIL.MethodSignature.Return($asm00.TypeRef("SDL2.SDL+SDL_bool")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HasEvent", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$asm00.TypeRef("SDL2.SDL+SDL_EventType")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HasEvents", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$asm00.TypeRef("SDL2.SDL+SDL_EventType"), $asm00.TypeRef("SDL2.SDL+SDL_EventType")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HasIntersection", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HasScreenKeyboardSupport", 
      JSIL.MethodSignature.Return($asm00.TypeRef("SDL2.SDL+SDL_bool")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_HideWindow", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_Init", 
      new JSIL.MethodSignature($.Int32, [$.UInt32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_InitSubSystem", 
      new JSIL.MethodSignature($.Int32, [$.UInt32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_IntersectRect", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_IntersectRectAndLine", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_IsGameController", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_ISPIXELFORMAT_ALPHA", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32]), 
      SDL_SDL_ISPIXELFORMAT_ALPHA
    );

    $.Method({Static:true , Public:true }, "SDL_ISPIXELFORMAT_FOURCC", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32]), 
      SDL_SDL_ISPIXELFORMAT_FOURCC
    );

    $.Method({Static:true , Public:true }, "SDL_ISPIXELFORMAT_INDEXED", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32]), 
      SDL_SDL_ISPIXELFORMAT_INDEXED
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_IsScreenKeyboardShown", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_IsScreenSaverEnabled", 
      JSIL.MethodSignature.Return($asm00.TypeRef("SDL2.SDL+SDL_bool")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_IsTextInputActive", 
      JSIL.MethodSignature.Return($asm00.TypeRef("SDL2.SDL+SDL_bool")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickClose", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickEventState", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickGetAttached", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickGetAxis", 
      new JSIL.MethodSignature($.Int16, [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickGetBall", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickGetButton", 
      new JSIL.MethodSignature($.Byte, [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickGetDeviceGUID", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Guid"), [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickGetGUID", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Guid"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickGetGUIDFromString", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Guid"), [$.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickGetGUIDString", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Guid"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickGetHat", 
      new JSIL.MethodSignature($.Byte, [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickInstanceID", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickIsHaptic", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickNameForIndex", 
      new JSIL.MethodSignature($.String, [$.Int32]), 
      {
        Module: "SDL2.dll", 
        Result: {
          CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: "LeaveAllocated"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickNumAxes", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickNumBalls", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickNumButtons", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickNumHats", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickOpen", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickOpened", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_JoystickUpdate", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_LoadBMP", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.String]), 
      SDL_SDL_LoadBMP
    );

    $.Method({Static:true , Public:true }, "SDL_LoadWAV", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_AudioSpec"), [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_AudioSpec")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.IntPtr")]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      SDL_SDL_LoadWAV
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LockAudio", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LockAudioDevice", 
      JSIL.MethodSignature.Action($.UInt32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LockSurface", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LockTexture", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.IntPtr")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LockTexture", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.IntPtr")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_Log", 
      JSIL.MethodSignature.Action($.String), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogCritical", 
      new JSIL.MethodSignature(null, [$.Int32, $.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogDebug", 
      new JSIL.MethodSignature(null, [$.Int32, $.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogError", 
      new JSIL.MethodSignature(null, [$.Int32, $.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogGetOutputFunction", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_LogOutputFunction")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.IntPtr")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogGetPriority", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_LogPriority"), [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogMessage", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("SDL2.SDL+SDL_LogPriority"), 
          $.String
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogMessageV", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("SDL2.SDL+SDL_LogPriority"), 
          $.String
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogResetPriorities", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogSetAllPriority", 
      JSIL.MethodSignature.Action($asm00.TypeRef("SDL2.SDL+SDL_LogPriority")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogSetOutputFunction", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("SDL2.SDL+SDL_LogOutputFunction"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogSetPriority", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("SDL2.SDL+SDL_LogPriority")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogVerbose", 
      new JSIL.MethodSignature(null, [$.Int32, $.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LogWarn", 
      new JSIL.MethodSignature(null, [$.Int32, $.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LowerBlit", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_LowerBlitScaled", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_MapRGB", 
      new JSIL.MethodSignature($.UInt32, [
          $asm01.TypeRef("System.IntPtr"), $.Byte, 
          $.Byte, $.Byte
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_MapRGBA", 
      new JSIL.MethodSignature($.UInt32, [
          $asm01.TypeRef("System.IntPtr"), $.Byte, 
          $.Byte, $.Byte, 
          $.Byte
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_MasksToPixelFormatEnum", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int32, $.UInt32, 
          $.UInt32, $.UInt32, 
          $.UInt32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_MaximizeWindow", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_MinimizeWindow", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_MixAudio", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, 
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_MixAudioFormat", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt16, $.UInt32, 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, 
          {
            NativeType: "Array"
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_MouseIsHaptic", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_MUSTLOCK", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IntPtr")]), 
      SDL_SDL_MUSTLOCK
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_NumHaptics", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_NumJoysticks", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_OpenAudio", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_AudioSpec")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_AudioSpec")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_OpenAudioDevice", 
      new JSIL.MethodSignature($.UInt32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_AudioSpec")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_AudioSpec")]), 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }, null
          , null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_PauseAudio", 
      JSIL.MethodSignature.Action($.Int32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_PauseAudioDevice", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_PeepEvents", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("SDL2.SDL+SDL_Event")]), $.Int32, 
          $asm00.TypeRef("SDL2.SDL+SDL_eventaction"), $asm00.TypeRef("SDL2.SDL+SDL_EventType"), 
          $asm00.TypeRef("SDL2.SDL+SDL_EventType")
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null
          , null

        ]
      }
    );

    $.Method({Static:true , Public:true }, "SDL_PIXELFLAG", 
      new JSIL.MethodSignature($.Byte, [$.UInt32]), 
      SDL_SDL_PIXELFLAG
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_PixelFormatEnumToMasks", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_PIXELORDER", 
      new JSIL.MethodSignature($.Byte, [$.UInt32]), 
      SDL_SDL_PIXELORDER
    );

    $.Method({Static:true , Public:true }, "SDL_PIXELTYPE", 
      new JSIL.MethodSignature($.Byte, [$.UInt32]), 
      SDL_SDL_PIXELTYPE
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_PollEvent", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Event")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_PumpEvents", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_PushEvent", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Event")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_QueryTexture", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_QueryTexturePixels", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.IntPtr")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_Quit", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_QuitSubSystem", 
      JSIL.MethodSignature.Action($.UInt32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RaiseWindow", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RectEmpty", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RectEquals", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RegisterEvents", 
      new JSIL.MethodSignature($.UInt32, [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RemoveTimer", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderClear", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderCopy", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderCopy", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderCopy", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderCopy", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderCopyEx", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $.Double, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Point")]), 
          $asm00.TypeRef("SDL2.SDL+SDL_RendererFlip")
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderDrawLine", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderDrawLines", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("SDL2.SDL+SDL_Point")]), 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderDrawPoint", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderDrawPoints", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("SDL2.SDL+SDL_Point")]), 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderDrawRect", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderDrawRect", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderDrawRects", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderFillRect", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderFillRect", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderFillRects", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderGetClipRect", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderGetLogicalSize", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderGetScale", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Single]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderGetViewport", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderPresent", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderReadPixels", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $.UInt32, $asm01.TypeRef("System.IntPtr"), 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderSetClipRect", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderSetClipRect", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderSetLogicalSize", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderSetScale", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Single, 
          $.Single
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderSetViewport", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RenderTargetSupported", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RestoreWindow", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_RWFromMem", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_SaveBMP", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.String]), 
      SDL_SDL_SaveBMP
    );

    $.Method({Static:true , Public:true }, "SDL_SCANCODE_TO_KEYCODE", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_Keycode"), [$asm00.TypeRef("SDL2.SDL+SDL_Scancode")]), 
      SDL_SDL_SCANCODE_TO_KEYCODE
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetClipboardText", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetClipRect", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetColorKey", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.UInt32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetCursor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetError", 
      JSIL.MethodSignature.Action($.String), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetEventFilter", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("SDL2.SDL+SDL_EventFilter"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetHint", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [$.String, $.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }, 
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetHintWithPriority", 
      new JSIL.MethodSignature($asm00.TypeRef("SDL2.SDL+SDL_bool"), [
          $.String, $.String, 
          $asm00.TypeRef("SDL2.SDL+SDL_HintPriority")
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }, 
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetMainReady", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetModState", 
      JSIL.MethodSignature.Action($asm00.TypeRef("SDL2.SDL+SDL_Keymod")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetPaletteColors", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("SDL2.SDL+SDL_Color")]), 
          $.Int32, $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetPixelFormatPalette", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetRelativeMouseMode", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("SDL2.SDL+SDL_bool")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetRenderDrawBlendMode", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $asm00.TypeRef("SDL2.SDL+SDL_BlendMode")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetRenderDrawColor", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Byte, 
          $.Byte, $.Byte, 
          $.Byte
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetRenderTarget", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetSurfaceAlphaMod", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.Byte]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetSurfaceBlendMode", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $asm00.TypeRef("SDL2.SDL+SDL_BlendMode")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetSurfaceColorMod", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Byte, 
          $.Byte, $.Byte
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetSurfacePalette", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetSurfaceRLE", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetTextInputRect", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetTextureAlphaMod", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.Byte]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetTextureBlendMode", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $asm00.TypeRef("SDL2.SDL+SDL_BlendMode")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetTextureColorMod", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $.Byte, 
          $.Byte, $.Byte
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowBordered", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $asm00.TypeRef("SDL2.SDL+SDL_bool")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowBrightness", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.Single]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowData", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $.String, 
          $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowDisplayMode", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_DisplayMode")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowFullscreen", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.UInt32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowGammaRamp", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt16]), 
          $jsilcore.TypeRef("System.Array", [$.UInt16]), $jsilcore.TypeRef("System.Array", [$.UInt16])
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, 
          {
            NativeType: "Array"
          }, 
          {
            NativeType: "Array"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowGrab", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $asm00.TypeRef("SDL2.SDL+SDL_bool")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowIcon", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowMaximumSize", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowMinimumSize", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowPosition", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowSize", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SetWindowTitle", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_ShowCursor", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_ShowMessageBox", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_MessageBoxData")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      SDL_SDL_ShowMessageBox
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_ShowSimpleMessageBox", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("SDL2.SDL+SDL_MessageBoxFlags"), $.String, 
          $.String, $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }, 
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_ShowWindow", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_SoftStretch", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_StartTextInput", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_StopTextInput", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_TICKS_PASSED", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32, $.UInt32]), 
      SDL_SDL_TICKS_PASSED
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_UnionRect", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_UnlockAudio", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_UnlockAudioDevice", 
      JSIL.MethodSignature.Action($.UInt32), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_UnlockSurface", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_UnlockTexture", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_UpdateTexture", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $asm01.TypeRef("System.IntPtr"), $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_UpdateWindowSurface", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_UpdateWindowSurfaceRects", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_UpperBlit", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_UpperBlitScaled", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")]), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Rect")])
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_VERSION", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_version")])), 
      SDL_SDL_VERSION
    );

    $.Method({Static:true , Public:true }, "SDL_VERSION_ATLEAST", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      SDL_SDL_VERSION_ATLEAST
    );

    $.Method({Static:true , Public:true }, "SDL_VERSIONNUM", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      SDL_SDL_VERSIONNUM
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_VideoInit", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      {
        Module: "SDL2.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_VideoQuit", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_WaitEvent", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Event")])]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_WaitEventTimeout", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_Event")]), $.Int32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_WarpMouseInWindow", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SDL_WasInit", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32]), 
      {
        Module: "SDL2.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_WINDOWPOS_CENTERED_DISPLAY", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      SDL_SDL_WINDOWPOS_CENTERED_DISPLAY
    );

    $.Method({Static:true , Public:true }, "SDL_WINDOWPOS_ISCENTERED", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      SDL_SDL_WINDOWPOS_ISCENTERED
    );

    $.Method({Static:true , Public:true }, "SDL_WINDOWPOS_ISUNDEFINED", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      SDL_SDL_WINDOWPOS_ISUNDEFINED
    );

    $.Method({Static:true , Public:true }, "SDL_WINDOWPOS_UNDEFINED_DISPLAY", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      SDL_SDL_WINDOWPOS_UNDEFINED_DISPLAY
    );

    $.Constant({Static:true , Public:false}, "nativeLibName", "SDL2.dll"); 
    $.Constant({Static:true , Public:true }, "SDL_INIT_TIMER", 1); 
    $.Constant({Static:true , Public:true }, "SDL_INIT_AUDIO", 16); 
    $.Constant({Static:true , Public:true }, "SDL_INIT_VIDEO", 32); 
    $.Constant({Static:true , Public:true }, "SDL_INIT_JOYSTICK", 512); 
    $.Constant({Static:true , Public:true }, "SDL_INIT_HAPTIC", 4096); 
    $.Constant({Static:true , Public:true }, "SDL_INIT_GAMECONTROLLER", 8192); 
    $.Constant({Static:true , Public:true }, "SDL_INIT_NOPARACHUTE", 1048576); 
    $.Constant({Static:true , Public:true }, "SDL_INIT_EVERYTHING", 12849); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_FRAMEBUFFER_ACCELERATION", "SDL_FRAMEBUFFER_ACCELERATION"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_RENDER_DRIVER", "SDL_RENDER_DRIVER"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_RENDER_OPENGL_SHADERS", "SDL_RENDER_OPENGL_SHADERS"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_RENDER_DIRECT3D_THREADSAFE", "SDL_RENDER_DIRECT3D_THREADSAFE"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_RENDER_VSYNC", "SDL_RENDER_VSYNC"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_VIDEO_X11_XVIDMODE", "SDL_VIDEO_X11_XVIDMODE"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_VIDEO_X11_XINERAMA", "SDL_VIDEO_X11_XINERAMA"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_VIDEO_X11_XRANDR", "SDL_VIDEO_X11_XRANDR"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_GRAB_KEYBOARD", "SDL_GRAB_KEYBOARD"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS", "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_IDLE_TIMER_DISABLED", "SDL_IOS_IDLE_TIMER_DISABLED"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_ORIENTATIONS", "SDL_IOS_ORIENTATIONS"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_XINPUT_ENABLED", "SDL_XINPUT_ENABLED"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_GAMECONTROLLERCONFIG", "SDL_GAMECONTROLLERCONFIG"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS", "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_ALLOW_TOPMOST", "SDL_ALLOW_TOPMOST"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_TIMER_RESOLUTION", "SDL_TIMER_RESOLUTION"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_RENDER_SCALE_QUALITY", "SDL_RENDER_SCALE_QUALITY"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_VIDEO_HIGHDPI_DISABLED", "SDL_VIDEO_HIGHDPI_DISABLED"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_CTRL_CLICK_EMULATE_RIGHT_CLICK", "SDL_CTRL_CLICK_EMULATE_RIGHT_CLICK"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_VIDEO_WIN_D3DCOMPILER", "SDL_VIDEO_WIN_D3DCOMPILER"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_MOUSE_RELATIVE_MODE_WARP", "SDL_MOUSE_RELATIVE_MODE_WARP"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT", "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_VIDEO_ALLOW_SCREENSAVER", "SDL_VIDEO_ALLOW_SCREENSAVER"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_ACCELEROMETER_AS_JOYSTICK", "SDL_ACCELEROMETER_AS_JOYSTICK"); 
    $.Constant({Static:true , Public:true }, "SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES", "SDL_VIDEO_MAC_FULLSCREEN_SPACES"); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_APPLICATION", 0); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_ERROR", 1); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_ASSERT", 2); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_SYSTEM", 3); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_AUDIO", 4); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_VIDEO", 5); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_RENDER", 6); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_INPUT", 7); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_TEST", 8); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_RESERVED1", 9); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_RESERVED2", 10); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_RESERVED3", 11); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_RESERVED4", 12); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_RESERVED5", 13); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_RESERVED6", 14); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_RESERVED7", 15); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_RESERVED8", 16); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_RESERVED9", 17); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_RESERVED10", 18); 
    $.Constant({Static:true , Public:true }, "SDL_LOG_CATEGORY_CUSTOM", 19); 
    $.Constant({Static:true , Public:true }, "SDL_MAJOR_VERSION", 2); 
    $.Constant({Static:true , Public:true }, "SDL_MINOR_VERSION", 0); 
    $.Constant({Static:true , Public:true }, "SDL_PATCHLEVEL", 3); 
    $.Constant({Static:true , Public:true }, "SDL_WINDOWPOS_UNDEFINED_MASK", 536805376); 
    $.Constant({Static:true , Public:true }, "SDL_WINDOWPOS_CENTERED_MASK", 805240832); 
    $.Constant({Static:true , Public:true }, "SDL_WINDOWPOS_UNDEFINED", 536805376); 
    $.Constant({Static:true , Public:true }, "SDL_WINDOWPOS_CENTERED", 805240832); 
    $.Constant({Static:true , Public:true }, "SDL_SWSURFACE", 0); 
    $.Constant({Static:true , Public:true }, "SDL_PREALLOC", 1); 
    $.Constant({Static:true , Public:true }, "SDL_RLEACCEL", 2); 
    $.Constant({Static:true , Public:true }, "SDL_DONTFREE", 4); 
    $.Constant({Static:true , Public:true }, "SDL_PRESSED", 1); 
    $.Constant({Static:true , Public:true }, "SDL_RELEASED", 0); 
    $.Constant({Static:true , Public:true }, "SDL_TEXTEDITINGEVENT_TEXT_SIZE", 32); 
    $.Constant({Static:true , Public:true }, "SDL_TEXTINPUTEVENT_TEXT_SIZE", 32); 
    $.Constant({Static:true , Public:true }, "SDL_QUERY", -1); 
    $.Constant({Static:true , Public:true }, "SDL_IGNORE", 0); 
    $.Constant({Static:true , Public:true }, "SDL_DISABLE", 0); 
    $.Constant({Static:true , Public:true }, "SDL_ENABLE", 1); 
    $.Constant({Static:true , Public:true }, "SDLK_SCANCODE_MASK", 1073741824); 
    $.Constant({Static:true , Public:true }, "SDL_BUTTON_LEFT", 1); 
    $.Constant({Static:true , Public:true }, "SDL_BUTTON_MIDDLE", 2); 
    $.Constant({Static:true , Public:true }, "SDL_BUTTON_RIGHT", 3); 
    $.Constant({Static:true , Public:true }, "SDL_BUTTON_X1", 4); 
    $.Constant({Static:true , Public:true }, "SDL_BUTTON_X2", 5); 
    $.Constant({Static:true , Public:true }, "SDL_TOUCH_MOUSEID", 4294967295); 
    $.Constant({Static:true , Public:true }, "SDL_HAT_CENTERED", 0); 
    $.Constant({Static:true , Public:true }, "SDL_HAT_UP", 1); 
    $.Constant({Static:true , Public:true }, "SDL_HAT_RIGHT", 2); 
    $.Constant({Static:true , Public:true }, "SDL_HAT_DOWN", 4); 
    $.Constant({Static:true , Public:true }, "SDL_HAT_LEFT", 8); 
    $.Constant({Static:true , Public:true }, "SDL_HAT_RIGHTUP", 3); 
    $.Constant({Static:true , Public:true }, "SDL_HAT_RIGHTDOWN", 6); 
    $.Constant({Static:true , Public:true }, "SDL_HAT_LEFTUP", 9); 
    $.Constant({Static:true , Public:true }, "SDL_HAT_LEFTDOWN", 12); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_CONSTANT", 1); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_SINE", 2); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_LEFTRIGHT", 4); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_TRIANGLE", 8); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_SAWTOOTHUP", 16); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_SAWTOOTHDOWN", 32); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_SPRING", 128); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_DAMPER", 256); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_INERTIA", 512); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_FRICTION", 1024); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_CUSTOM", 2048); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_GAIN", 4096); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_AUTOCENTER", 8192); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_STATUS", 16384); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_PAUSE", 32768); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_POLAR", 0); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_CARTESIAN", 1); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_SPHERICAL", 2); 
    $.Constant({Static:true , Public:true }, "SDL_HAPTIC_INFINITY", 4292967295); 
    $.Constant({Static:true , Public:true }, "SDL_AUDIO_MASK_BITSIZE", 255); 
    $.Constant({Static:true , Public:true }, "SDL_AUDIO_MASK_DATATYPE", 256); 
    $.Constant({Static:true , Public:true }, "SDL_AUDIO_MASK_ENDIAN", 4096); 
    $.Constant({Static:true , Public:true }, "SDL_AUDIO_MASK_SIGNED", 32768); 
    $.Constant({Static:true , Public:true }, "AUDIO_U8", 8); 
    $.Constant({Static:true , Public:true }, "AUDIO_S8", 32776); 
    $.Constant({Static:true , Public:true }, "AUDIO_U16LSB", 16); 
    $.Constant({Static:true , Public:true }, "AUDIO_S16LSB", 32784); 
    $.Constant({Static:true , Public:true }, "AUDIO_U16MSB", 4112); 
    $.Constant({Static:true , Public:true }, "AUDIO_S16MSB", 36880); 
    $.Constant({Static:true , Public:true }, "AUDIO_U16", 16); 
    $.Constant({Static:true , Public:true }, "AUDIO_S16", 32784); 
    $.Constant({Static:true , Public:true }, "AUDIO_S32LSB", 32800); 
    $.Constant({Static:true , Public:true }, "AUDIO_S32MSB", 36896); 
    $.Constant({Static:true , Public:true }, "AUDIO_S32", 32800); 
    $.Constant({Static:true , Public:true }, "AUDIO_F32LSB", 33056); 
    $.Constant({Static:true , Public:true }, "AUDIO_F32MSB", 37152); 
    $.Constant({Static:true , Public:true }, "AUDIO_F32", 33056); 
    $.Constant({Static:true , Public:true }, "SDL_AUDIO_ALLOW_FREQUENCY_CHANGE", 1); 
    $.Constant({Static:true , Public:true }, "SDL_AUDIO_ALLOW_FORMAT_CHANGE", 1); 
    $.Constant({Static:true , Public:true }, "SDL_AUDIO_ALLOW_CHANNELS_CHANGE", 1); 
    $.Constant({Static:true , Public:true }, "SDL_AUDIO_ALLOW_ANY_CHANGE", 1); 
    $.Constant({Static:true , Public:true }, "SDL_MIX_MAXVOLUME", 128); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_COMPILEDVERSION", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_UNKNOWN", $.UInt32, 0); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_INDEX1LSB", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_INDEX1MSB", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_INDEX4LSB", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_INDEX4MSB", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_INDEX8", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_RGB332", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_RGB444", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_RGB555", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_BGR555", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_ARGB4444", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_RGBA4444", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_ABGR4444", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_BGRA4444", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_ARGB1555", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_RGBA5551", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_ABGR1555", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_BGRA5551", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_RGB565", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_BGR565", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_RGB24", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_BGR24", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_RGB888", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_RGBX8888", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_BGR888", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_BGRX8888", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_ARGB8888", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_RGBA8888", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_ABGR8888", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_BGRA8888", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_ARGB2101010", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_YV12", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_IYUV", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_YUY2", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_UYVY", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_PIXELFORMAT_YVYU", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_BUTTON_LMASK", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_BUTTON_MMASK", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_BUTTON_RMASK", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_BUTTON_X1MASK", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SDL_BUTTON_X2MASK", $.UInt32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "AUDIO_U16SYS", $.UInt16); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "AUDIO_S16SYS", $.UInt16); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "AUDIO_S32SYS", $.UInt16); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "AUDIO_F32SYS", $.UInt16); 
    function SDL__cctor () {
      $thisType.SDL_COMPILEDVERSION = ($thisType.SDL_VERSIONNUM(2, 0, 3) | 0);
      $thisType.SDL_PIXELFORMAT_UNKNOWN = 0;
      $thisType.SDL_PIXELFORMAT_INDEX1LSB = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_INDEX1, 
        $T01().SDL_ARRAYORDER_RGB, 
        $T02().SDL_PACKEDLAYOUT_NONE, 
        1, 
        0
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_INDEX1MSB = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_INDEX1, 
        $T01().SDL_ARRAYORDER_RGBA, 
        $T02().SDL_PACKEDLAYOUT_NONE, 
        1, 
        0
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_INDEX4LSB = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_INDEX4, 
        $T01().SDL_ARRAYORDER_RGB, 
        $T02().SDL_PACKEDLAYOUT_NONE, 
        4, 
        0
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_INDEX4MSB = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_INDEX4, 
        $T01().SDL_ARRAYORDER_RGBA, 
        $T02().SDL_PACKEDLAYOUT_NONE, 
        4, 
        0
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_INDEX8 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_INDEX8, 
        $T01().SDL_ARRAYORDER_NONE, 
        $T02().SDL_PACKEDLAYOUT_NONE, 
        8, 
        1
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_RGB332 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED8, 
        $T01().SDL_ARRAYORDER_RGB, 
        $T02().SDL_PACKEDLAYOUT_332, 
        8, 
        1
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_RGB444 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_ARRAYORDER_RGB, 
        $T02().SDL_PACKEDLAYOUT_4444, 
        12, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_RGB555 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_ARRAYORDER_RGB, 
        $T02().SDL_PACKEDLAYOUT_1555, 
        15, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_BGR555 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_INDEX1, 
        $T01().SDL_ARRAYORDER_RGB, 
        $T02().SDL_PACKEDLAYOUT_1555, 
        15, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_ARGB4444 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_ARRAYORDER_ARGB, 
        $T02().SDL_PACKEDLAYOUT_4444, 
        16, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_RGBA4444 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_ARRAYORDER_BGR, 
        $T02().SDL_PACKEDLAYOUT_4444, 
        16, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_ABGR4444 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_PACKEDORDER_ABGR, 
        $T02().SDL_PACKEDLAYOUT_4444, 
        16, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_BGRA4444 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_PACKEDORDER_BGRA, 
        $T02().SDL_PACKEDLAYOUT_4444, 
        16, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_ARGB1555 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_ARRAYORDER_ARGB, 
        $T02().SDL_PACKEDLAYOUT_1555, 
        16, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_RGBA5551 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_ARRAYORDER_BGR, 
        $T02().SDL_PACKEDLAYOUT_5551, 
        16, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_ABGR1555 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_PACKEDORDER_ABGR, 
        $T02().SDL_PACKEDLAYOUT_1555, 
        16, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_BGRA5551 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_PACKEDORDER_BGRA, 
        $T02().SDL_PACKEDLAYOUT_5551, 
        16, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_RGB565 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_ARRAYORDER_RGB, 
        $T02().SDL_PACKEDLAYOUT_565, 
        16, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_BGR565 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED16, 
        $T01().SDL_ARRAYORDER_BGRA, 
        $T02().SDL_PACKEDLAYOUT_565, 
        16, 
        2
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_RGB24 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_ARRAYU8, 
        $T01().SDL_ARRAYORDER_RGB, 
        $T02().SDL_PACKEDLAYOUT_NONE, 
        24, 
        3
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_BGR24 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_ARRAYU8, 
        $T01().SDL_ARRAYORDER_BGR, 
        $T02().SDL_PACKEDLAYOUT_NONE, 
        24, 
        3
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_RGB888 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED32, 
        $T01().SDL_ARRAYORDER_RGB, 
        $T02().SDL_PACKEDLAYOUT_8888, 
        24, 
        4
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_RGBX8888 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED32, 
        $T01().SDL_ARRAYORDER_RGBA, 
        $T02().SDL_PACKEDLAYOUT_8888, 
        24, 
        4
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_BGR888 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED32, 
        $T01().SDL_ARRAYORDER_BGRA, 
        $T02().SDL_PACKEDLAYOUT_8888, 
        24, 
        4
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_BGRX8888 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED32, 
        $T01().SDL_ARRAYORDER_ABGR, 
        $T02().SDL_PACKEDLAYOUT_8888, 
        24, 
        4
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_ARGB8888 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED32, 
        $T01().SDL_ARRAYORDER_ARGB, 
        $T02().SDL_PACKEDLAYOUT_8888, 
        32, 
        4
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_RGBA8888 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED32, 
        $T01().SDL_ARRAYORDER_BGR, 
        $T02().SDL_PACKEDLAYOUT_8888, 
        32, 
        4
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_ABGR8888 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED32, 
        $T01().SDL_PACKEDORDER_ABGR, 
        $T02().SDL_PACKEDLAYOUT_8888, 
        32, 
        4
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_BGRA8888 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED32, 
        $T01().SDL_PACKEDORDER_BGRA, 
        $T02().SDL_PACKEDLAYOUT_8888, 
        32, 
        4
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_ARGB2101010 = ($thisType.SDL_DEFINE_PIXELFORMAT(
        $T00().SDL_PIXELTYPE_PACKED32, 
        $T01().SDL_ARRAYORDER_ARGB, 
        $T02().SDL_PACKEDLAYOUT_2101010, 
        32, 
        4
      ) >>> 0);
      $thisType.SDL_PIXELFORMAT_YV12 = ($thisType.SDL_DEFINE_PIXELFOURCC(89, 86, 49, 50) >>> 0);
      $thisType.SDL_PIXELFORMAT_IYUV = ($thisType.SDL_DEFINE_PIXELFOURCC(73, 89, 85, 86) >>> 0);
      $thisType.SDL_PIXELFORMAT_YUY2 = ($thisType.SDL_DEFINE_PIXELFOURCC(89, 85, 89, 50) >>> 0);
      $thisType.SDL_PIXELFORMAT_UYVY = ($thisType.SDL_DEFINE_PIXELFOURCC(85, 89, 86, 89) >>> 0);
      $thisType.SDL_PIXELFORMAT_YVYU = ($thisType.SDL_DEFINE_PIXELFOURCC(89, 86, 89, 85) >>> 0);
      $thisType.SDL_BUTTON_LMASK = ($thisType.SDL_BUTTON(1) >>> 0);
      $thisType.SDL_BUTTON_MMASK = ($thisType.SDL_BUTTON(2) >>> 0);
      $thisType.SDL_BUTTON_RMASK = ($thisType.SDL_BUTTON(3) >>> 0);
      $thisType.SDL_BUTTON_X1MASK = ($thisType.SDL_BUTTON(4) >>> 0);
      $thisType.SDL_BUTTON_X2MASK = ($thisType.SDL_BUTTON(5) >>> 0);
      $thisType.AUDIO_U16SYS = ((
        $T03().IsLittleEndian
           ? 16
           : 4112)
       | 0);
      $thisType.AUDIO_S16SYS = ((
        $T03().IsLittleEndian
           ? 32784
           : 36880)
       | 0);
      $thisType.AUDIO_S32SYS = ((
        $T03().IsLittleEndian
           ? 32800
           : 36896)
       | 0);
      $thisType.AUDIO_F32SYS = ((
        $T03().IsLittleEndian
           ? 33056
           : 37152)
       | 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SDL__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SDL2.SDL+SDL_bool */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_bool", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_FALSE: 0, 
    SDL_TRUE: 1, 
  }
);

/* enum SDL2.SDL+SDL_HintPriority */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_HintPriority", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_HINT_DEFAULT: 0, 
    SDL_HINT_NORMAL: 1, 
    SDL_HINT_OVERRIDE: 2, 
  }
);

/* enum SDL2.SDL+SDL_LogPriority */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_LogPriority", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_LOG_PRIORITY_VERBOSE: 1, 
    SDL_LOG_PRIORITY_DEBUG: 2, 
    SDL_LOG_PRIORITY_INFO: 3, 
    SDL_LOG_PRIORITY_WARN: 4, 
    SDL_LOG_PRIORITY_ERROR: 5, 
    SDL_LOG_PRIORITY_CRITICAL: 6, 
    SDL_NUM_LOG_PRIORITIES: 7, 
  }
);

/* delegate SDL2.SDL+SDL_LogOutputFunction */ 

JSIL.MakeDelegate("SDL2.SDL+SDL_LogOutputFunction", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.Int32"), 
      $asm00.TypeRef("SDL2.SDL+SDL_LogPriority"), $asm01.TypeRef("System.IntPtr")
    ]));

/* enum SDL2.SDL+SDL_MessageBoxFlags */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_MessageBoxFlags", 
    BaseType: $asm01.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    SDL_MESSAGEBOX_ERROR: 16, 
    SDL_MESSAGEBOX_WARNING: 32, 
    SDL_MESSAGEBOX_INFORMATION: 64, 
  }
);

/* enum SDL2.SDL+SDL_MessageBoxButtonFlags */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_MessageBoxButtonFlags", 
    BaseType: $asm01.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT: 1, 
    SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT: 2, 
  }
);

/* struct SDL2.SDL+INTERNAL_SDL_MessageBoxButtonData */ 

(function INTERNAL_SDL_MessageBoxButtonData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+INTERNAL_SDL_MessageBoxButtonData", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "flags", $asm00.TypeRef("SDL2.SDL+SDL_MessageBoxButtonFlags")); 
    $.Field({Static:false, Public:true }, "buttonid", $.Int32); 
    $.Field({Static:false, Public:true }, "text", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_MessageBoxButtonData */ 

(function SDL_MessageBoxButtonData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_MessageBoxButtonData", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "flags", $asm00.TypeRef("SDL2.SDL+SDL_MessageBoxButtonFlags")); 
    $.Field({Static:false, Public:true }, "buttonid", $.Int32); 
    $.Field({Static:false, Public:true }, "text", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_MessageBoxColor */ 

(function SDL_MessageBoxColor$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_MessageBoxColor", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "r", $.Byte); 
    $.Field({Static:false, Public:true }, "g", $.Byte); 
    $.Field({Static:false, Public:true }, "b", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SDL2.SDL+SDL_MessageBoxColorType */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_MessageBoxColorType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_MESSAGEBOX_COLOR_BACKGROUND: 0, 
    SDL_MESSAGEBOX_COLOR_TEXT: 1, 
    SDL_MESSAGEBOX_COLOR_BUTTON_BORDER: 2, 
    SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND: 3, 
    SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED: 4, 
    SDL_MESSAGEBOX_COLOR_MAX: 5, 
  }
);

/* struct SDL2.SDL+SDL_MessageBoxColorScheme */ 

(function SDL_MessageBoxColorScheme$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_MessageBoxColorScheme", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "colors", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("SDL2.SDL+SDL_MessageBoxColor")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+INTERNAL_SDL_MessageBoxData */ 

(function INTERNAL_SDL_MessageBoxData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+INTERNAL_SDL_MessageBoxData", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "flags", $asm00.TypeRef("SDL2.SDL+SDL_MessageBoxFlags")); 
    $.Field({Static:false, Public:true }, "window", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "title", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "message", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "numbuttons", $.Int32); 
    $.Field({Static:false, Public:true }, "buttons", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "colorScheme", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_MessageBoxData */ 

(function SDL_MessageBoxData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_MessageBoxData", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "flags", $asm00.TypeRef("SDL2.SDL+SDL_MessageBoxFlags")); 
    $.Field({Static:false, Public:true }, "window", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "title", $.String); 
    $.Field({Static:false, Public:true }, "message", $.String); 
    $.Field({Static:false, Public:true }, "numbuttons", $.Int32); 
    $.Field({Static:false, Public:true }, "buttons", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("SDL2.SDL+SDL_MessageBoxButtonData")])); 
    $.Field({Static:false, Public:true }, "colorScheme", $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("SDL2.SDL+SDL_MessageBoxColorScheme")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_version */ 

(function SDL_version$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_version", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "major", $.Byte); 
    $.Field({Static:false, Public:true }, "minor", $.Byte); 
    $.Field({Static:false, Public:true }, "patch", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SDL2.SDL+SDL_BlendMode */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_BlendMode", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    SDL_BLENDMODE_NONE: 0, 
    SDL_BLENDMODE_BLEND: 1, 
    SDL_BLENDMODE_ADD: 2, 
    SDL_BLENDMODE_MOD: 4, 
  }
);

/* enum SDL2.SDL+SDL_GLattr */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_GLattr", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_GL_RED_SIZE: 0, 
    SDL_GL_GREEN_SIZE: 1, 
    SDL_GL_BLUE_SIZE: 2, 
    SDL_GL_ALPHA_SIZE: 3, 
    SDL_GL_BUFFER_SIZE: 4, 
    SDL_GL_DOUBLEBUFFER: 5, 
    SDL_GL_DEPTH_SIZE: 6, 
    SDL_GL_STENCIL_SIZE: 7, 
    SDL_GL_ACCUM_RED_SIZE: 8, 
    SDL_GL_ACCUM_GREEN_SIZE: 9, 
    SDL_GL_ACCUM_BLUE_SIZE: 10, 
    SDL_GL_ACCUM_ALPHA_SIZE: 11, 
    SDL_GL_STEREO: 12, 
    SDL_GL_MULTISAMPLEBUFFERS: 13, 
    SDL_GL_MULTISAMPLESAMPLES: 14, 
    SDL_GL_ACCELERATED_VISUAL: 15, 
    SDL_GL_RETAINED_BACKING: 16, 
    SDL_GL_CONTEXT_MAJOR_VERSION: 17, 
    SDL_GL_CONTEXT_MINOR_VERSION: 18, 
    SDL_GL_CONTEXT_EGL: 19, 
    SDL_GL_CONTEXT_FLAGS: 20, 
    SDL_GL_CONTEXT_PROFILE_MASK: 21, 
    SDL_GL_SHARE_WITH_CURRENT_CONTEXT: 22, 
    SDL_GL_FRAMEBUFFER_SRGB_CAPABLE: 23, 
  }
);

/* enum SDL2.SDL+SDL_GLprofile */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_GLprofile", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    SDL_GL_CONTEXT_PROFILE_CORE: 1, 
    SDL_GL_CONTEXT_PROFILE_COMPATIBILITY: 2, 
    SDL_GL_CONTEXT_PROFILE_ES: 4, 
  }
);

/* enum SDL2.SDL+SDL_GLcontext */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_GLcontext", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    SDL_GL_CONTEXT_DEBUG_FLAG: 1, 
    SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG: 2, 
    SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG: 4, 
    SDL_GL_CONTEXT_RESET_ISOLATION_FLAG: 8, 
  }
);

/* enum SDL2.SDL+SDL_WindowEventID */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_WindowEventID", 
    BaseType: $asm01.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_WINDOWEVENT_NONE: 0, 
    SDL_WINDOWEVENT_SHOWN: 1, 
    SDL_WINDOWEVENT_HIDDEN: 2, 
    SDL_WINDOWEVENT_EXPOSED: 3, 
    SDL_WINDOWEVENT_MOVED: 4, 
    SDL_WINDOWEVENT_RESIZED: 5, 
    SDL_WINDOWEVENT_SIZE_CHANGED: 6, 
    SDL_WINDOWEVENT_MINIMIZED: 7, 
    SDL_WINDOWEVENT_MAXIMIZED: 8, 
    SDL_WINDOWEVENT_RESTORED: 9, 
    SDL_WINDOWEVENT_ENTER: 10, 
    SDL_WINDOWEVENT_LEAVE: 11, 
    SDL_WINDOWEVENT_FOCUS_GAINED: 12, 
    SDL_WINDOWEVENT_FOCUS_LOST: 13, 
    SDL_WINDOWEVENT_CLOSE: 14, 
  }
);

/* enum SDL2.SDL+SDL_WindowFlags */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_WindowFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    SDL_WINDOW_FULLSCREEN: 1, 
    SDL_WINDOW_OPENGL: 2, 
    SDL_WINDOW_SHOWN: 4, 
    SDL_WINDOW_HIDDEN: 8, 
    SDL_WINDOW_BORDERLESS: 16, 
    SDL_WINDOW_RESIZABLE: 32, 
    SDL_WINDOW_MINIMIZED: 64, 
    SDL_WINDOW_MAXIMIZED: 128, 
    SDL_WINDOW_INPUT_GRABBED: 256, 
    SDL_WINDOW_INPUT_FOCUS: 512, 
    SDL_WINDOW_MOUSE_FOCUS: 1024, 
    SDL_WINDOW_FOREIGN: 2048, 
    SDL_WINDOW_FULLSCREEN_DESKTOP: 4097, 
    SDL_WINDOW_ALLOW_HIGHDPI: 8192, 
  }
);

/* struct SDL2.SDL+SDL_DisplayMode */ 

(function SDL_DisplayMode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_DisplayMode", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "format", $.UInt32); 
    $.Field({Static:false, Public:true }, "w", $.Int32); 
    $.Field({Static:false, Public:true }, "h", $.Int32); 
    $.Field({Static:false, Public:true }, "refresh_rate", $.Int32); 
    $.Field({Static:false, Public:true }, "driverdata", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SDL2.SDL+SDL_RendererFlags */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_RendererFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    SDL_RENDERER_SOFTWARE: 1, 
    SDL_RENDERER_ACCELERATED: 2, 
    SDL_RENDERER_PRESENTVSYNC: 4, 
    SDL_RENDERER_TARGETTEXTURE: 8, 
  }
);

/* enum SDL2.SDL+SDL_RendererFlip */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_RendererFlip", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    SDL_FLIP_NONE: 0, 
    SDL_FLIP_HORIZONTAL: 1, 
    SDL_FLIP_VERTICAL: 2, 
  }
);

/* enum SDL2.SDL+SDL_TextureAccess */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_TextureAccess", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_TEXTUREACCESS_STATIC: 0, 
    SDL_TEXTUREACCESS_STREAMING: 1, 
    SDL_TEXTUREACCESS_TARGET: 2, 
  }
);

/* enum SDL2.SDL+SDL_TextureModulate */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_TextureModulate", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    SDL_TEXTUREMODULATE_NONE: 0, 
    SDL_TEXTUREMODULATE_HORIZONTAL: 1, 
    SDL_TEXTUREMODULATE_VERTICAL: 2, 
  }
);

/* struct SDL2.SDL+SDL_RendererInfo */ 

(function SDL_RendererInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_RendererInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "$name", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "flags", $.UInt32); 
    $.Field({Static:false, Public:true }, "num_texture_formats", $.UInt32); 
    $.Field({Static:false, Public:true }, "max_texture_width", $.Int32); 
    $.Field({Static:false, Public:true }, "max_texture_height", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SDL2.SDL+SDL_PIXELTYPE_ENUM */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_PIXELTYPE_ENUM", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_PIXELTYPE_UNKNOWN: 0, 
    SDL_PIXELTYPE_INDEX1: 1, 
    SDL_PIXELTYPE_INDEX4: 2, 
    SDL_PIXELTYPE_INDEX8: 3, 
    SDL_PIXELTYPE_PACKED8: 4, 
    SDL_PIXELTYPE_PACKED16: 5, 
    SDL_PIXELTYPE_PACKED32: 6, 
    SDL_PIXELTYPE_ARRAYU8: 7, 
    SDL_PIXELTYPE_ARRAYU16: 8, 
    SDL_PIXELTYPE_ARRAYU32: 9, 
    SDL_PIXELTYPE_ARRAYF16: 10, 
    SDL_PIXELTYPE_ARRAYF32: 11, 
  }
);

/* enum SDL2.SDL+SDL_PIXELORDER_ENUM */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_PIXELORDER_ENUM", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_PACKEDORDER_NONE: 0, 
    SDL_BITMAPORDER_NONE: 0, 
    SDL_ARRAYORDER_NONE: 0, 
    SDL_BITMAPORDER_4321: 1, 
    SDL_ARRAYORDER_RGB: 1, 
    SDL_PACKEDORDER_XRGB: 1, 
    SDL_BITMAPORDER_1234: 2, 
    SDL_ARRAYORDER_RGBA: 2, 
    SDL_PACKEDORDER_RGBX: 2, 
    SDL_PACKEDORDER_ARGB: 3, 
    SDL_ARRAYORDER_ARGB: 3, 
    SDL_ARRAYORDER_BGR: 4, 
    SDL_PACKEDORDER_RGBA: 4, 
    SDL_ARRAYORDER_BGRA: 5, 
    SDL_PACKEDORDER_XBGR: 5, 
    SDL_ARRAYORDER_ABGR: 6, 
    SDL_PACKEDORDER_BGRX: 6, 
    SDL_PACKEDORDER_ABGR: 7, 
    SDL_PACKEDORDER_BGRA: 8, 
  }
);

/* enum SDL2.SDL+SDL_PACKEDLAYOUT_ENUM */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_PACKEDLAYOUT_ENUM", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_PACKEDLAYOUT_NONE: 0, 
    SDL_PACKEDLAYOUT_332: 1, 
    SDL_PACKEDLAYOUT_4444: 2, 
    SDL_PACKEDLAYOUT_1555: 3, 
    SDL_PACKEDLAYOUT_5551: 4, 
    SDL_PACKEDLAYOUT_565: 5, 
    SDL_PACKEDLAYOUT_8888: 6, 
    SDL_PACKEDLAYOUT_2101010: 7, 
    SDL_PACKEDLAYOUT_1010102: 8, 
  }
);

/* struct SDL2.SDL+SDL_Color */ 

(function SDL_Color$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_Color", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "r", $.Byte); 
    $.Field({Static:false, Public:true }, "g", $.Byte); 
    $.Field({Static:false, Public:true }, "b", $.Byte); 
    $.Field({Static:false, Public:true }, "a", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_Palette */ 

(function SDL_Palette$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_Palette", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "ncolors", $.Int32); 
    $.Field({Static:false, Public:true }, "colors", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "version", $.Int32); 
    $.Field({Static:false, Public:true }, "refcount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_PixelFormat */ 

(function SDL_PixelFormat$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_PixelFormat", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "format", $.UInt32); 
    $.Field({Static:false, Public:true }, "palette", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "BitsPerPixel", $.Byte); 
    $.Field({Static:false, Public:true }, "BytesPerPixel", $.Byte); 
    $.Field({Static:false, Public:true }, "Rmask", $.UInt32); 
    $.Field({Static:false, Public:true }, "Gmask", $.UInt32); 
    $.Field({Static:false, Public:true }, "Bmask", $.UInt32); 
    $.Field({Static:false, Public:true }, "Amask", $.UInt32); 
    $.Field({Static:false, Public:true }, "Rloss", $.Byte); 
    $.Field({Static:false, Public:true }, "Gloss", $.Byte); 
    $.Field({Static:false, Public:true }, "Bloss", $.Byte); 
    $.Field({Static:false, Public:true }, "Aloss", $.Byte); 
    $.Field({Static:false, Public:true }, "Rshift", $.Byte); 
    $.Field({Static:false, Public:true }, "Gshift", $.Byte); 
    $.Field({Static:false, Public:true }, "Bshift", $.Byte); 
    $.Field({Static:false, Public:true }, "Ashift", $.Byte); 
    $.Field({Static:false, Public:true }, "refcount", $.Int32); 
    $.Field({Static:false, Public:true }, "next", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_Point */ 

(function SDL_Point$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_Point", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "x", $.Int32); 
    $.Field({Static:false, Public:true }, "y", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_Rect */ 

(function SDL_Rect$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_Rect", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "x", $.Int32); 
    $.Field({Static:false, Public:true }, "y", $.Int32); 
    $.Field({Static:false, Public:true }, "w", $.Int32); 
    $.Field({Static:false, Public:true }, "h", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_Surface */ 

(function SDL_Surface$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_Surface", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "flags", $.UInt32); 
    $.Field({Static:false, Public:true }, "format", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "w", $.Int32); 
    $.Field({Static:false, Public:true }, "h", $.Int32); 
    $.Field({Static:false, Public:true }, "pitch", $.Int32); 
    $.Field({Static:false, Public:true }, "pixels", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "userdata", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "locked", $.Int32); 
    $.Field({Static:false, Public:true }, "lock_data", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "clip_rect", $asm00.TypeRef("SDL2.SDL+SDL_Rect")); 
    $.Field({Static:false, Public:true }, "map", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "refcount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SDL2.SDL+SDL_EventType */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_EventType", 
    BaseType: $asm01.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_FIRSTEVENT: 0, 
    SDL_QUIT: 256, 
    SDL_WINDOWEVENT: 512, 
    SDL_SYSWMEVENT: 513, 
    SDL_KEYDOWN: 768, 
    SDL_KEYUP: 769, 
    SDL_TEXTEDITING: 770, 
    SDL_TEXTINPUT: 771, 
    SDL_MOUSEMOTION: 1024, 
    SDL_MOUSEBUTTONDOWN: 1025, 
    SDL_MOUSEBUTTONUP: 1026, 
    SDL_MOUSEWHEEL: 1027, 
    SDL_JOYAXISMOTION: 1536, 
    SDL_JOYBALLMOTION: 1537, 
    SDL_JOYHATMOTION: 1538, 
    SDL_JOYBUTTONDOWN: 1539, 
    SDL_JOYBUTTONUP: 1540, 
    SDL_JOYDEVICEADDED: 1541, 
    SDL_JOYDEVICEREMOVED: 1542, 
    SDL_CONTROLLERAXISMOTION: 1616, 
    SDL_CONTROLLERBUTTONDOWN: 1617, 
    SDL_CONTROLLERBUTTONUP: 1618, 
    SDL_CONTROLLERDEVICEADDED: 1619, 
    SDL_CONTROLLERDEVICEREMOVED: 1620, 
    SDL_CONTROLLERDEVICEREMAPPED: 1621, 
    SDL_FINGERDOWN: 1792, 
    SDL_FINGERUP: 1793, 
    SDL_FINGERMOTION: 1794, 
    SDL_DOLLARGESTURE: 2048, 
    SDL_DOLLARRECORD: 2049, 
    SDL_MULTIGESTURE: 2050, 
    SDL_CLIPBOARDUPDATE: 2304, 
    SDL_DROPFILE: 4096, 
    SDL_RENDER_TARGETS_RESET: 8192, 
    SDL_USEREVENT: 32768, 
    SDL_LASTEVENT: 65535, 
  }
);

/* struct SDL2.SDL+SDL_GenericEvent */ 

(function SDL_GenericEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_GenericEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_WindowEvent */ 

(function SDL_WindowEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_WindowEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "windowID", $.UInt32); 
    $.Field({Static:false, Public:true }, "windowEvent", $asm00.TypeRef("SDL2.SDL+SDL_WindowEventID")); 
    $.Field({Static:false, Public:false}, "padding1", $.Byte); 
    $.Field({Static:false, Public:false}, "padding2", $.Byte); 
    $.Field({Static:false, Public:false}, "padding3", $.Byte); 
    $.Field({Static:false, Public:true }, "data1", $.Int32); 
    $.Field({Static:false, Public:true }, "data2", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_KeyboardEvent */ 

(function SDL_KeyboardEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_KeyboardEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "windowID", $.UInt32); 
    $.Field({Static:false, Public:true }, "state", $.Byte); 
    $.Field({Static:false, Public:true }, "repeat", $.Byte); 
    $.Field({Static:false, Public:false}, "padding2", $.Byte); 
    $.Field({Static:false, Public:false}, "padding3", $.Byte); 
    $.Field({Static:false, Public:true }, "keysym", $asm00.TypeRef("SDL2.SDL+SDL_Keysym")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_TextEditingEvent */ 

(function SDL_TextEditingEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_TextEditingEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "windowID", $.UInt32); 
    $.Field({Static:false, Public:true }, "start", $.Int32); 
    $.Field({Static:false, Public:true }, "$length", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_TextInputEvent */ 

(function SDL_TextInputEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_TextInputEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "windowID", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_MouseMotionEvent */ 

(function SDL_MouseMotionEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_MouseMotionEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "windowID", $.UInt32); 
    $.Field({Static:false, Public:true }, "which", $.UInt32); 
    $.Field({Static:false, Public:true }, "state", $.Byte); 
    $.Field({Static:false, Public:false}, "padding1", $.Byte); 
    $.Field({Static:false, Public:false}, "padding2", $.Byte); 
    $.Field({Static:false, Public:false}, "padding3", $.Byte); 
    $.Field({Static:false, Public:true }, "x", $.Int32); 
    $.Field({Static:false, Public:true }, "y", $.Int32); 
    $.Field({Static:false, Public:true }, "xrel", $.Int32); 
    $.Field({Static:false, Public:true }, "yrel", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_MouseButtonEvent */ 

(function SDL_MouseButtonEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_MouseButtonEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "windowID", $.UInt32); 
    $.Field({Static:false, Public:true }, "which", $.UInt32); 
    $.Field({Static:false, Public:true }, "button", $.Byte); 
    $.Field({Static:false, Public:true }, "state", $.Byte); 
    $.Field({Static:false, Public:true }, "clicks", $.Byte); 
    $.Field({Static:false, Public:false}, "padding1", $.Byte); 
    $.Field({Static:false, Public:true }, "x", $.Int32); 
    $.Field({Static:false, Public:true }, "y", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_MouseWheelEvent */ 

(function SDL_MouseWheelEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_MouseWheelEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "windowID", $.UInt32); 
    $.Field({Static:false, Public:true }, "which", $.UInt32); 
    $.Field({Static:false, Public:true }, "x", $.Int32); 
    $.Field({Static:false, Public:true }, "y", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_JoyAxisEvent */ 

(function SDL_JoyAxisEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_JoyAxisEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "which", $.Int32); 
    $.Field({Static:false, Public:true }, "axis", $.Byte); 
    $.Field({Static:false, Public:false}, "padding1", $.Byte); 
    $.Field({Static:false, Public:false}, "padding2", $.Byte); 
    $.Field({Static:false, Public:false}, "padding3", $.Byte); 
    $.Field({Static:false, Public:true }, "axisValue", $.Int16); 
    $.Field({Static:false, Public:true }, "padding4", $.UInt16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_JoyBallEvent */ 

(function SDL_JoyBallEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_JoyBallEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "which", $.Int32); 
    $.Field({Static:false, Public:true }, "ball", $.Byte); 
    $.Field({Static:false, Public:false}, "padding1", $.Byte); 
    $.Field({Static:false, Public:false}, "padding2", $.Byte); 
    $.Field({Static:false, Public:false}, "padding3", $.Byte); 
    $.Field({Static:false, Public:true }, "xrel", $.Int16); 
    $.Field({Static:false, Public:true }, "yrel", $.Int16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_JoyHatEvent */ 

(function SDL_JoyHatEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_JoyHatEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "which", $.Int32); 
    $.Field({Static:false, Public:true }, "hat", $.Byte); 
    $.Field({Static:false, Public:true }, "hatValue", $.Byte); 
    $.Field({Static:false, Public:false}, "padding1", $.Byte); 
    $.Field({Static:false, Public:false}, "padding2", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_JoyButtonEvent */ 

(function SDL_JoyButtonEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_JoyButtonEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "which", $.Int32); 
    $.Field({Static:false, Public:true }, "button", $.Byte); 
    $.Field({Static:false, Public:true }, "state", $.Byte); 
    $.Field({Static:false, Public:false}, "padding1", $.Byte); 
    $.Field({Static:false, Public:false}, "padding2", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_JoyDeviceEvent */ 

(function SDL_JoyDeviceEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_JoyDeviceEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "which", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_ControllerAxisEvent */ 

(function SDL_ControllerAxisEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_ControllerAxisEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "which", $.Int32); 
    $.Field({Static:false, Public:true }, "axis", $.Byte); 
    $.Field({Static:false, Public:false}, "padding1", $.Byte); 
    $.Field({Static:false, Public:false}, "padding2", $.Byte); 
    $.Field({Static:false, Public:false}, "padding3", $.Byte); 
    $.Field({Static:false, Public:true }, "axisValue", $.Int16); 
    $.Field({Static:false, Public:false}, "padding4", $.UInt16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_ControllerButtonEvent */ 

(function SDL_ControllerButtonEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_ControllerButtonEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "which", $.Int32); 
    $.Field({Static:false, Public:true }, "button", $.Byte); 
    $.Field({Static:false, Public:true }, "state", $.Byte); 
    $.Field({Static:false, Public:false}, "padding1", $.Byte); 
    $.Field({Static:false, Public:false}, "padding2", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_ControllerDeviceEvent */ 

(function SDL_ControllerDeviceEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_ControllerDeviceEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "which", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_TouchFingerEvent */ 

(function SDL_TouchFingerEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_TouchFingerEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.UInt32); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "touchId", $.Int64); 
    $.Field({Static:false, Public:true }, "fingerId", $.Int64); 
    $.Field({Static:false, Public:true }, "x", $.Single); 
    $.Field({Static:false, Public:true }, "y", $.Single); 
    $.Field({Static:false, Public:true }, "dx", $.Single); 
    $.Field({Static:false, Public:true }, "dy", $.Single); 
    $.Field({Static:false, Public:true }, "pressure", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_MultiGestureEvent */ 

(function SDL_MultiGestureEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_MultiGestureEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.UInt32); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "touchId", $.Int64); 
    $.Field({Static:false, Public:true }, "dTheta", $.Single); 
    $.Field({Static:false, Public:true }, "dDist", $.Single); 
    $.Field({Static:false, Public:true }, "x", $.Single); 
    $.Field({Static:false, Public:true }, "y", $.Single); 
    $.Field({Static:false, Public:true }, "numFingers", $.UInt16); 
    $.Field({Static:false, Public:true }, "padding", $.UInt16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_DollarGestureEvent */ 

(function SDL_DollarGestureEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_DollarGestureEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.UInt32); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "touchId", $.Int64); 
    $.Field({Static:false, Public:true }, "gestureId", $.Int64); 
    $.Field({Static:false, Public:true }, "numFingers", $.UInt32); 
    $.Field({Static:false, Public:true }, "error", $.Single); 
    $.Field({Static:false, Public:true }, "x", $.Single); 
    $.Field({Static:false, Public:true }, "y", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_DropEvent */ 

(function SDL_DropEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_DropEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "file", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_QuitEvent */ 

(function SDL_QuitEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_QuitEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_UserEvent */ 

(function SDL_UserEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_UserEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.UInt32); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "windowID", $.UInt32); 
    $.Field({Static:false, Public:true }, "code", $.Int32); 
    $.Field({Static:false, Public:true }, "data1", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "data2", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_SysWMEvent */ 

(function SDL_SysWMEvent$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_SysWMEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "timestamp", $.UInt32); 
    $.Field({Static:false, Public:true }, "msg", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_Event */ 

(function SDL_Event$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_Event", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $asm00.TypeRef("SDL2.SDL+SDL_EventType")); 
    $.Field({Static:false, Public:true }, "window", $asm00.TypeRef("SDL2.SDL+SDL_WindowEvent")); 
    $.Field({Static:false, Public:true }, "key", $asm00.TypeRef("SDL2.SDL+SDL_KeyboardEvent")); 
    $.Field({Static:false, Public:true }, "edit", $asm00.TypeRef("SDL2.SDL+SDL_TextEditingEvent")); 
    $.Field({Static:false, Public:true }, "text", $asm00.TypeRef("SDL2.SDL+SDL_TextInputEvent")); 
    $.Field({Static:false, Public:true }, "motion", $asm00.TypeRef("SDL2.SDL+SDL_MouseMotionEvent")); 
    $.Field({Static:false, Public:true }, "button", $asm00.TypeRef("SDL2.SDL+SDL_MouseButtonEvent")); 
    $.Field({Static:false, Public:true }, "wheel", $asm00.TypeRef("SDL2.SDL+SDL_MouseWheelEvent")); 
    $.Field({Static:false, Public:true }, "jaxis", $asm00.TypeRef("SDL2.SDL+SDL_JoyAxisEvent")); 
    $.Field({Static:false, Public:true }, "jball", $asm00.TypeRef("SDL2.SDL+SDL_JoyBallEvent")); 
    $.Field({Static:false, Public:true }, "jhat", $asm00.TypeRef("SDL2.SDL+SDL_JoyHatEvent")); 
    $.Field({Static:false, Public:true }, "jbutton", $asm00.TypeRef("SDL2.SDL+SDL_JoyButtonEvent")); 
    $.Field({Static:false, Public:true }, "jdevice", $asm00.TypeRef("SDL2.SDL+SDL_JoyDeviceEvent")); 
    $.Field({Static:false, Public:true }, "caxis", $asm00.TypeRef("SDL2.SDL+SDL_ControllerAxisEvent")); 
    $.Field({Static:false, Public:true }, "cbutton", $asm00.TypeRef("SDL2.SDL+SDL_ControllerButtonEvent")); 
    $.Field({Static:false, Public:true }, "cdevice", $asm00.TypeRef("SDL2.SDL+SDL_ControllerDeviceEvent")); 
    $.Field({Static:false, Public:true }, "quit", $asm00.TypeRef("SDL2.SDL+SDL_QuitEvent")); 
    $.Field({Static:false, Public:true }, "user", $asm00.TypeRef("SDL2.SDL+SDL_UserEvent")); 
    $.Field({Static:false, Public:true }, "syswm", $asm00.TypeRef("SDL2.SDL+SDL_SysWMEvent")); 
    $.Field({Static:false, Public:true }, "tfinger", $asm00.TypeRef("SDL2.SDL+SDL_TouchFingerEvent")); 
    $.Field({Static:false, Public:true }, "mgesture", $asm00.TypeRef("SDL2.SDL+SDL_MultiGestureEvent")); 
    $.Field({Static:false, Public:true }, "dgesture", $asm00.TypeRef("SDL2.SDL+SDL_DollarGestureEvent")); 
    $.Field({Static:false, Public:true }, "drop", $asm00.TypeRef("SDL2.SDL+SDL_DropEvent")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate SDL2.SDL+SDL_EventFilter */ 

JSIL.MakeDelegate("SDL2.SDL+SDL_EventFilter", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")]));

/* enum SDL2.SDL+SDL_eventaction */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_eventaction", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_ADDEVENT: 0, 
    SDL_PEEKEVENT: 1, 
    SDL_GETEVENT: 2, 
  }
);

/* enum SDL2.SDL+SDL_Scancode */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_Scancode", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_SCANCODE_UNKNOWN: 0, 
    SDL_SCANCODE_A: 4, 
    SDL_SCANCODE_B: 5, 
    SDL_SCANCODE_C: 6, 
    SDL_SCANCODE_D: 7, 
    SDL_SCANCODE_E: 8, 
    SDL_SCANCODE_F: 9, 
    SDL_SCANCODE_G: 10, 
    SDL_SCANCODE_H: 11, 
    SDL_SCANCODE_I: 12, 
    SDL_SCANCODE_J: 13, 
    SDL_SCANCODE_K: 14, 
    SDL_SCANCODE_L: 15, 
    SDL_SCANCODE_M: 16, 
    SDL_SCANCODE_N: 17, 
    SDL_SCANCODE_O: 18, 
    SDL_SCANCODE_P: 19, 
    SDL_SCANCODE_Q: 20, 
    SDL_SCANCODE_R: 21, 
    SDL_SCANCODE_S: 22, 
    SDL_SCANCODE_T: 23, 
    SDL_SCANCODE_U: 24, 
    SDL_SCANCODE_V: 25, 
    SDL_SCANCODE_W: 26, 
    SDL_SCANCODE_X: 27, 
    SDL_SCANCODE_Y: 28, 
    SDL_SCANCODE_Z: 29, 
    SDL_SCANCODE_1: 30, 
    SDL_SCANCODE_2: 31, 
    SDL_SCANCODE_3: 32, 
    SDL_SCANCODE_4: 33, 
    SDL_SCANCODE_5: 34, 
    SDL_SCANCODE_6: 35, 
    SDL_SCANCODE_7: 36, 
    SDL_SCANCODE_8: 37, 
    SDL_SCANCODE_9: 38, 
    SDL_SCANCODE_0: 39, 
    SDL_SCANCODE_RETURN: 40, 
    SDL_SCANCODE_ESCAPE: 41, 
    SDL_SCANCODE_BACKSPACE: 42, 
    SDL_SCANCODE_TAB: 43, 
    SDL_SCANCODE_SPACE: 44, 
    SDL_SCANCODE_MINUS: 45, 
    SDL_SCANCODE_EQUALS: 46, 
    SDL_SCANCODE_LEFTBRACKET: 47, 
    SDL_SCANCODE_RIGHTBRACKET: 48, 
    SDL_SCANCODE_BACKSLASH: 49, 
    SDL_SCANCODE_NONUSHASH: 50, 
    SDL_SCANCODE_SEMICOLON: 51, 
    SDL_SCANCODE_APOSTROPHE: 52, 
    SDL_SCANCODE_GRAVE: 53, 
    SDL_SCANCODE_COMMA: 54, 
    SDL_SCANCODE_PERIOD: 55, 
    SDL_SCANCODE_SLASH: 56, 
    SDL_SCANCODE_CAPSLOCK: 57, 
    SDL_SCANCODE_F1: 58, 
    SDL_SCANCODE_F2: 59, 
    SDL_SCANCODE_F3: 60, 
    SDL_SCANCODE_F4: 61, 
    SDL_SCANCODE_F5: 62, 
    SDL_SCANCODE_F6: 63, 
    SDL_SCANCODE_F7: 64, 
    SDL_SCANCODE_F8: 65, 
    SDL_SCANCODE_F9: 66, 
    SDL_SCANCODE_F10: 67, 
    SDL_SCANCODE_F11: 68, 
    SDL_SCANCODE_F12: 69, 
    SDL_SCANCODE_PRINTSCREEN: 70, 
    SDL_SCANCODE_SCROLLLOCK: 71, 
    SDL_SCANCODE_PAUSE: 72, 
    SDL_SCANCODE_INSERT: 73, 
    SDL_SCANCODE_HOME: 74, 
    SDL_SCANCODE_PAGEUP: 75, 
    SDL_SCANCODE_DELETE: 76, 
    SDL_SCANCODE_END: 77, 
    SDL_SCANCODE_PAGEDOWN: 78, 
    SDL_SCANCODE_RIGHT: 79, 
    SDL_SCANCODE_LEFT: 80, 
    SDL_SCANCODE_DOWN: 81, 
    SDL_SCANCODE_UP: 82, 
    SDL_SCANCODE_NUMLOCKCLEAR: 83, 
    SDL_SCANCODE_KP_DIVIDE: 84, 
    SDL_SCANCODE_KP_MULTIPLY: 85, 
    SDL_SCANCODE_KP_MINUS: 86, 
    SDL_SCANCODE_KP_PLUS: 87, 
    SDL_SCANCODE_KP_ENTER: 88, 
    SDL_SCANCODE_KP_1: 89, 
    SDL_SCANCODE_KP_2: 90, 
    SDL_SCANCODE_KP_3: 91, 
    SDL_SCANCODE_KP_4: 92, 
    SDL_SCANCODE_KP_5: 93, 
    SDL_SCANCODE_KP_6: 94, 
    SDL_SCANCODE_KP_7: 95, 
    SDL_SCANCODE_KP_8: 96, 
    SDL_SCANCODE_KP_9: 97, 
    SDL_SCANCODE_KP_0: 98, 
    SDL_SCANCODE_KP_PERIOD: 99, 
    SDL_SCANCODE_NONUSBACKSLASH: 100, 
    SDL_SCANCODE_APPLICATION: 101, 
    SDL_SCANCODE_POWER: 102, 
    SDL_SCANCODE_KP_EQUALS: 103, 
    SDL_SCANCODE_F13: 104, 
    SDL_SCANCODE_F14: 105, 
    SDL_SCANCODE_F15: 106, 
    SDL_SCANCODE_F16: 107, 
    SDL_SCANCODE_F17: 108, 
    SDL_SCANCODE_F18: 109, 
    SDL_SCANCODE_F19: 110, 
    SDL_SCANCODE_F20: 111, 
    SDL_SCANCODE_F21: 112, 
    SDL_SCANCODE_F22: 113, 
    SDL_SCANCODE_F23: 114, 
    SDL_SCANCODE_F24: 115, 
    SDL_SCANCODE_EXECUTE: 116, 
    SDL_SCANCODE_HELP: 117, 
    SDL_SCANCODE_MENU: 118, 
    SDL_SCANCODE_SELECT: 119, 
    SDL_SCANCODE_STOP: 120, 
    SDL_SCANCODE_AGAIN: 121, 
    SDL_SCANCODE_UNDO: 122, 
    SDL_SCANCODE_CUT: 123, 
    SDL_SCANCODE_COPY: 124, 
    SDL_SCANCODE_PASTE: 125, 
    SDL_SCANCODE_FIND: 126, 
    SDL_SCANCODE_MUTE: 127, 
    SDL_SCANCODE_VOLUMEUP: 128, 
    SDL_SCANCODE_VOLUMEDOWN: 129, 
    SDL_SCANCODE_KP_COMMA: 133, 
    SDL_SCANCODE_KP_EQUALSAS400: 134, 
    SDL_SCANCODE_INTERNATIONAL1: 135, 
    SDL_SCANCODE_INTERNATIONAL2: 136, 
    SDL_SCANCODE_INTERNATIONAL3: 137, 
    SDL_SCANCODE_INTERNATIONAL4: 138, 
    SDL_SCANCODE_INTERNATIONAL5: 139, 
    SDL_SCANCODE_INTERNATIONAL6: 140, 
    SDL_SCANCODE_INTERNATIONAL7: 141, 
    SDL_SCANCODE_INTERNATIONAL8: 142, 
    SDL_SCANCODE_INTERNATIONAL9: 143, 
    SDL_SCANCODE_LANG1: 144, 
    SDL_SCANCODE_LANG2: 145, 
    SDL_SCANCODE_LANG3: 146, 
    SDL_SCANCODE_LANG4: 147, 
    SDL_SCANCODE_LANG5: 148, 
    SDL_SCANCODE_LANG6: 149, 
    SDL_SCANCODE_LANG7: 150, 
    SDL_SCANCODE_LANG8: 151, 
    SDL_SCANCODE_LANG9: 152, 
    SDL_SCANCODE_ALTERASE: 153, 
    SDL_SCANCODE_SYSREQ: 154, 
    SDL_SCANCODE_CANCEL: 155, 
    SDL_SCANCODE_CLEAR: 156, 
    SDL_SCANCODE_PRIOR: 157, 
    SDL_SCANCODE_RETURN2: 158, 
    SDL_SCANCODE_SEPARATOR: 159, 
    SDL_SCANCODE_OUT: 160, 
    SDL_SCANCODE_OPER: 161, 
    SDL_SCANCODE_CLEARAGAIN: 162, 
    SDL_SCANCODE_CRSEL: 163, 
    SDL_SCANCODE_EXSEL: 164, 
    SDL_SCANCODE_KP_00: 176, 
    SDL_SCANCODE_KP_000: 177, 
    SDL_SCANCODE_THOUSANDSSEPARATOR: 178, 
    SDL_SCANCODE_DECIMALSEPARATOR: 179, 
    SDL_SCANCODE_CURRENCYUNIT: 180, 
    SDL_SCANCODE_CURRENCYSUBUNIT: 181, 
    SDL_SCANCODE_KP_LEFTPAREN: 182, 
    SDL_SCANCODE_KP_RIGHTPAREN: 183, 
    SDL_SCANCODE_KP_LEFTBRACE: 184, 
    SDL_SCANCODE_KP_RIGHTBRACE: 185, 
    SDL_SCANCODE_KP_TAB: 186, 
    SDL_SCANCODE_KP_BACKSPACE: 187, 
    SDL_SCANCODE_KP_A: 188, 
    SDL_SCANCODE_KP_B: 189, 
    SDL_SCANCODE_KP_C: 190, 
    SDL_SCANCODE_KP_D: 191, 
    SDL_SCANCODE_KP_E: 192, 
    SDL_SCANCODE_KP_F: 193, 
    SDL_SCANCODE_KP_XOR: 194, 
    SDL_SCANCODE_KP_POWER: 195, 
    SDL_SCANCODE_KP_PERCENT: 196, 
    SDL_SCANCODE_KP_LESS: 197, 
    SDL_SCANCODE_KP_GREATER: 198, 
    SDL_SCANCODE_KP_AMPERSAND: 199, 
    SDL_SCANCODE_KP_DBLAMPERSAND: 200, 
    SDL_SCANCODE_KP_VERTICALBAR: 201, 
    SDL_SCANCODE_KP_DBLVERTICALBAR: 202, 
    SDL_SCANCODE_KP_COLON: 203, 
    SDL_SCANCODE_KP_HASH: 204, 
    SDL_SCANCODE_KP_SPACE: 205, 
    SDL_SCANCODE_KP_AT: 206, 
    SDL_SCANCODE_KP_EXCLAM: 207, 
    SDL_SCANCODE_KP_MEMSTORE: 208, 
    SDL_SCANCODE_KP_MEMRECALL: 209, 
    SDL_SCANCODE_KP_MEMCLEAR: 210, 
    SDL_SCANCODE_KP_MEMADD: 211, 
    SDL_SCANCODE_KP_MEMSUBTRACT: 212, 
    SDL_SCANCODE_KP_MEMMULTIPLY: 213, 
    SDL_SCANCODE_KP_MEMDIVIDE: 214, 
    SDL_SCANCODE_KP_PLUSMINUS: 215, 
    SDL_SCANCODE_KP_CLEAR: 216, 
    SDL_SCANCODE_KP_CLEARENTRY: 217, 
    SDL_SCANCODE_KP_BINARY: 218, 
    SDL_SCANCODE_KP_OCTAL: 219, 
    SDL_SCANCODE_KP_DECIMAL: 220, 
    SDL_SCANCODE_KP_HEXADECIMAL: 221, 
    SDL_SCANCODE_LCTRL: 224, 
    SDL_SCANCODE_LSHIFT: 225, 
    SDL_SCANCODE_LALT: 226, 
    SDL_SCANCODE_LGUI: 227, 
    SDL_SCANCODE_RCTRL: 228, 
    SDL_SCANCODE_RSHIFT: 229, 
    SDL_SCANCODE_RALT: 230, 
    SDL_SCANCODE_RGUI: 231, 
    SDL_SCANCODE_MODE: 257, 
    SDL_SCANCODE_AUDIONEXT: 258, 
    SDL_SCANCODE_AUDIOPREV: 259, 
    SDL_SCANCODE_AUDIOSTOP: 260, 
    SDL_SCANCODE_AUDIOPLAY: 261, 
    SDL_SCANCODE_AUDIOMUTE: 262, 
    SDL_SCANCODE_MEDIASELECT: 263, 
    SDL_SCANCODE_WWW: 264, 
    SDL_SCANCODE_MAIL: 265, 
    SDL_SCANCODE_CALCULATOR: 266, 
    SDL_SCANCODE_COMPUTER: 267, 
    SDL_SCANCODE_AC_SEARCH: 268, 
    SDL_SCANCODE_AC_HOME: 269, 
    SDL_SCANCODE_AC_BACK: 270, 
    SDL_SCANCODE_AC_FORWARD: 271, 
    SDL_SCANCODE_AC_STOP: 272, 
    SDL_SCANCODE_AC_REFRESH: 273, 
    SDL_SCANCODE_AC_BOOKMARKS: 274, 
    SDL_SCANCODE_BRIGHTNESSDOWN: 275, 
    SDL_SCANCODE_BRIGHTNESSUP: 276, 
    SDL_SCANCODE_DISPLAYSWITCH: 277, 
    SDL_SCANCODE_KBDILLUMTOGGLE: 278, 
    SDL_SCANCODE_KBDILLUMDOWN: 279, 
    SDL_SCANCODE_KBDILLUMUP: 280, 
    SDL_SCANCODE_EJECT: 281, 
    SDL_SCANCODE_SLEEP: 282, 
    SDL_SCANCODE_APP1: 283, 
    SDL_SCANCODE_APP2: 284, 
    SDL_NUM_SCANCODES: 512, 
  }
);

/* enum SDL2.SDL+SDL_Keycode */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_Keycode", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDLK_UNKNOWN: 0, 
    SDLK_BACKSPACE: 8, 
    SDLK_TAB: 9, 
    SDLK_RETURN: 13, 
    SDLK_ESCAPE: 27, 
    SDLK_SPACE: 32, 
    SDLK_EXCLAIM: 33, 
    SDLK_QUOTEDBL: 34, 
    SDLK_HASH: 35, 
    SDLK_DOLLAR: 36, 
    SDLK_PERCENT: 37, 
    SDLK_AMPERSAND: 38, 
    SDLK_QUOTE: 39, 
    SDLK_LEFTPAREN: 40, 
    SDLK_RIGHTPAREN: 41, 
    SDLK_ASTERISK: 42, 
    SDLK_PLUS: 43, 
    SDLK_COMMA: 44, 
    SDLK_MINUS: 45, 
    SDLK_PERIOD: 46, 
    SDLK_SLASH: 47, 
    SDLK_0: 48, 
    SDLK_1: 49, 
    SDLK_2: 50, 
    SDLK_3: 51, 
    SDLK_4: 52, 
    SDLK_5: 53, 
    SDLK_6: 54, 
    SDLK_7: 55, 
    SDLK_8: 56, 
    SDLK_9: 57, 
    SDLK_COLON: 58, 
    SDLK_SEMICOLON: 59, 
    SDLK_LESS: 60, 
    SDLK_EQUALS: 61, 
    SDLK_GREATER: 62, 
    SDLK_QUESTION: 63, 
    SDLK_AT: 64, 
    SDLK_LEFTBRACKET: 91, 
    SDLK_BACKSLASH: 92, 
    SDLK_RIGHTBRACKET: 93, 
    SDLK_CARET: 94, 
    SDLK_UNDERSCORE: 95, 
    SDLK_BACKQUOTE: 96, 
    SDLK_a: 97, 
    SDLK_b: 98, 
    SDLK_c: 99, 
    SDLK_d: 100, 
    SDLK_e: 101, 
    SDLK_f: 102, 
    SDLK_g: 103, 
    SDLK_h: 104, 
    SDLK_i: 105, 
    SDLK_j: 106, 
    SDLK_k: 107, 
    SDLK_l: 108, 
    SDLK_m: 109, 
    SDLK_n: 110, 
    SDLK_o: 111, 
    SDLK_p: 112, 
    SDLK_q: 113, 
    SDLK_r: 114, 
    SDLK_s: 115, 
    SDLK_t: 116, 
    SDLK_u: 117, 
    SDLK_v: 118, 
    SDLK_w: 119, 
    SDLK_x: 120, 
    SDLK_y: 121, 
    SDLK_z: 122, 
    SDLK_DELETE: 127, 
    SDLK_CAPSLOCK: 1073741881, 
    SDLK_F1: 1073741882, 
    SDLK_F2: 1073741883, 
    SDLK_F3: 1073741884, 
    SDLK_F4: 1073741885, 
    SDLK_F5: 1073741886, 
    SDLK_F6: 1073741887, 
    SDLK_F7: 1073741888, 
    SDLK_F8: 1073741889, 
    SDLK_F9: 1073741890, 
    SDLK_F10: 1073741891, 
    SDLK_F11: 1073741892, 
    SDLK_F12: 1073741893, 
    SDLK_PRINTSCREEN: 1073741894, 
    SDLK_SCROLLLOCK: 1073741895, 
    SDLK_PAUSE: 1073741896, 
    SDLK_INSERT: 1073741897, 
    SDLK_HOME: 1073741898, 
    SDLK_PAGEUP: 1073741899, 
    SDLK_END: 1073741901, 
    SDLK_PAGEDOWN: 1073741902, 
    SDLK_RIGHT: 1073741903, 
    SDLK_LEFT: 1073741904, 
    SDLK_DOWN: 1073741905, 
    SDLK_UP: 1073741906, 
    SDLK_NUMLOCKCLEAR: 1073741907, 
    SDLK_KP_DIVIDE: 1073741908, 
    SDLK_KP_MULTIPLY: 1073741909, 
    SDLK_KP_MINUS: 1073741910, 
    SDLK_KP_PLUS: 1073741911, 
    SDLK_KP_ENTER: 1073741912, 
    SDLK_KP_1: 1073741913, 
    SDLK_KP_2: 1073741914, 
    SDLK_KP_3: 1073741915, 
    SDLK_KP_4: 1073741916, 
    SDLK_KP_5: 1073741917, 
    SDLK_KP_6: 1073741918, 
    SDLK_KP_7: 1073741919, 
    SDLK_KP_8: 1073741920, 
    SDLK_KP_9: 1073741921, 
    SDLK_KP_0: 1073741922, 
    SDLK_KP_PERIOD: 1073741923, 
    SDLK_APPLICATION: 1073741925, 
    SDLK_POWER: 1073741926, 
    SDLK_KP_EQUALS: 1073741927, 
    SDLK_F13: 1073741928, 
    SDLK_F14: 1073741929, 
    SDLK_F15: 1073741930, 
    SDLK_F16: 1073741931, 
    SDLK_F17: 1073741932, 
    SDLK_F18: 1073741933, 
    SDLK_F19: 1073741934, 
    SDLK_F20: 1073741935, 
    SDLK_F21: 1073741936, 
    SDLK_F22: 1073741937, 
    SDLK_F23: 1073741938, 
    SDLK_F24: 1073741939, 
    SDLK_EXECUTE: 1073741940, 
    SDLK_HELP: 1073741941, 
    SDLK_MENU: 1073741942, 
    SDLK_SELECT: 1073741943, 
    SDLK_STOP: 1073741944, 
    SDLK_AGAIN: 1073741945, 
    SDLK_UNDO: 1073741946, 
    SDLK_CUT: 1073741947, 
    SDLK_COPY: 1073741948, 
    SDLK_PASTE: 1073741949, 
    SDLK_FIND: 1073741950, 
    SDLK_MUTE: 1073741951, 
    SDLK_VOLUMEUP: 1073741952, 
    SDLK_VOLUMEDOWN: 1073741953, 
    SDLK_KP_COMMA: 1073741957, 
    SDLK_KP_EQUALSAS400: 1073741958, 
    SDLK_ALTERASE: 1073741977, 
    SDLK_SYSREQ: 1073741978, 
    SDLK_CANCEL: 1073741979, 
    SDLK_CLEAR: 1073741980, 
    SDLK_PRIOR: 1073741981, 
    SDLK_RETURN2: 1073741982, 
    SDLK_SEPARATOR: 1073741983, 
    SDLK_OUT: 1073741984, 
    SDLK_OPER: 1073741985, 
    SDLK_CLEARAGAIN: 1073741986, 
    SDLK_CRSEL: 1073741987, 
    SDLK_EXSEL: 1073741988, 
    SDLK_KP_00: 1073742000, 
    SDLK_KP_000: 1073742001, 
    SDLK_THOUSANDSSEPARATOR: 1073742002, 
    SDLK_DECIMALSEPARATOR: 1073742003, 
    SDLK_CURRENCYUNIT: 1073742004, 
    SDLK_CURRENCYSUBUNIT: 1073742005, 
    SDLK_KP_LEFTPAREN: 1073742006, 
    SDLK_KP_RIGHTPAREN: 1073742007, 
    SDLK_KP_LEFTBRACE: 1073742008, 
    SDLK_KP_RIGHTBRACE: 1073742009, 
    SDLK_KP_TAB: 1073742010, 
    SDLK_KP_BACKSPACE: 1073742011, 
    SDLK_KP_A: 1073742012, 
    SDLK_KP_B: 1073742013, 
    SDLK_KP_C: 1073742014, 
    SDLK_KP_D: 1073742015, 
    SDLK_KP_E: 1073742016, 
    SDLK_KP_F: 1073742017, 
    SDLK_KP_XOR: 1073742018, 
    SDLK_KP_POWER: 1073742019, 
    SDLK_KP_PERCENT: 1073742020, 
    SDLK_KP_LESS: 1073742021, 
    SDLK_KP_GREATER: 1073742022, 
    SDLK_KP_AMPERSAND: 1073742023, 
    SDLK_KP_DBLAMPERSAND: 1073742024, 
    SDLK_KP_VERTICALBAR: 1073742025, 
    SDLK_KP_DBLVERTICALBAR: 1073742026, 
    SDLK_KP_COLON: 1073742027, 
    SDLK_KP_HASH: 1073742028, 
    SDLK_KP_SPACE: 1073742029, 
    SDLK_KP_AT: 1073742030, 
    SDLK_KP_EXCLAM: 1073742031, 
    SDLK_KP_MEMSTORE: 1073742032, 
    SDLK_KP_MEMRECALL: 1073742033, 
    SDLK_KP_MEMCLEAR: 1073742034, 
    SDLK_KP_MEMADD: 1073742035, 
    SDLK_KP_MEMSUBTRACT: 1073742036, 
    SDLK_KP_MEMMULTIPLY: 1073742037, 
    SDLK_KP_MEMDIVIDE: 1073742038, 
    SDLK_KP_PLUSMINUS: 1073742039, 
    SDLK_KP_CLEAR: 1073742040, 
    SDLK_KP_CLEARENTRY: 1073742041, 
    SDLK_KP_BINARY: 1073742042, 
    SDLK_KP_OCTAL: 1073742043, 
    SDLK_KP_DECIMAL: 1073742044, 
    SDLK_KP_HEXADECIMAL: 1073742045, 
    SDLK_LCTRL: 1073742048, 
    SDLK_LSHIFT: 1073742049, 
    SDLK_LALT: 1073742050, 
    SDLK_LGUI: 1073742051, 
    SDLK_RCTRL: 1073742052, 
    SDLK_RSHIFT: 1073742053, 
    SDLK_RALT: 1073742054, 
    SDLK_RGUI: 1073742055, 
    SDLK_MODE: 1073742081, 
    SDLK_AUDIONEXT: 1073742082, 
    SDLK_AUDIOPREV: 1073742083, 
    SDLK_AUDIOSTOP: 1073742084, 
    SDLK_AUDIOPLAY: 1073742085, 
    SDLK_AUDIOMUTE: 1073742086, 
    SDLK_MEDIASELECT: 1073742087, 
    SDLK_WWW: 1073742088, 
    SDLK_MAIL: 1073742089, 
    SDLK_CALCULATOR: 1073742090, 
    SDLK_COMPUTER: 1073742091, 
    SDLK_AC_SEARCH: 1073742092, 
    SDLK_AC_HOME: 1073742093, 
    SDLK_AC_BACK: 1073742094, 
    SDLK_AC_FORWARD: 1073742095, 
    SDLK_AC_STOP: 1073742096, 
    SDLK_AC_REFRESH: 1073742097, 
    SDLK_AC_BOOKMARKS: 1073742098, 
    SDLK_BRIGHTNESSDOWN: 1073742099, 
    SDLK_BRIGHTNESSUP: 1073742100, 
    SDLK_DISPLAYSWITCH: 1073742101, 
    SDLK_KBDILLUMTOGGLE: 1073742102, 
    SDLK_KBDILLUMDOWN: 1073742103, 
    SDLK_KBDILLUMUP: 1073742104, 
    SDLK_EJECT: 1073742105, 
    SDLK_SLEEP: 1073742106, 
  }
);

/* enum SDL2.SDL+SDL_Keymod */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_Keymod", 
    BaseType: $asm01.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    KMOD_NONE: 0, 
    KMOD_LSHIFT: 1, 
    KMOD_RSHIFT: 2, 
    KMOD_SHIFT: 3, 
    KMOD_LCTRL: 64, 
    KMOD_RCTRL: 128, 
    KMOD_CTRL: 192, 
    KMOD_LALT: 256, 
    KMOD_RALT: 512, 
    KMOD_ALT: 768, 
    KMOD_LGUI: 1024, 
    KMOD_RGUI: 2048, 
    KMOD_GUI: 3072, 
    KMOD_NUM: 4096, 
    KMOD_CAPS: 8192, 
    KMOD_MODE: 16384, 
    KMOD_RESERVED: 32768, 
  }
);

/* struct SDL2.SDL+SDL_Keysym */ 

(function SDL_Keysym$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_Keysym", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "scancode", $asm00.TypeRef("SDL2.SDL+SDL_Scancode")); 
    $.Field({Static:false, Public:true }, "sym", $asm00.TypeRef("SDL2.SDL+SDL_Keycode")); 
    $.Field({Static:false, Public:true }, "mod", $asm00.TypeRef("SDL2.SDL+SDL_Keymod")); 
    $.Field({Static:false, Public:true }, "unicode", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SDL2.SDL+SDL_SystemCursor */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_SystemCursor", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_SYSTEM_CURSOR_ARROW: 0, 
    SDL_SYSTEM_CURSOR_IBEAM: 1, 
    SDL_SYSTEM_CURSOR_WAIT: 2, 
    SDL_SYSTEM_CURSOR_CROSSHAIR: 3, 
    SDL_SYSTEM_CURSOR_WAITARROW: 4, 
    SDL_SYSTEM_CURSOR_SIZENWSE: 5, 
    SDL_SYSTEM_CURSOR_SIZENESW: 6, 
    SDL_SYSTEM_CURSOR_SIZEWE: 7, 
    SDL_SYSTEM_CURSOR_SIZENS: 8, 
    SDL_SYSTEM_CURSOR_SIZEALL: 9, 
    SDL_SYSTEM_CURSOR_NO: 10, 
    SDL_SYSTEM_CURSOR_HAND: 11, 
    SDL_NUM_SYSTEM_CURSORS: 12, 
  }
);

/* struct SDL2.SDL+SDL_Finger */ 

(function SDL_Finger$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_Finger", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "id", $.Int64); 
    $.Field({Static:false, Public:true }, "x", $.Single); 
    $.Field({Static:false, Public:true }, "y", $.Single); 
    $.Field({Static:false, Public:true }, "pressure", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SDL2.SDL+SDL_GameControllerBindType */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_GameControllerBindType", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_CONTROLLER_BINDTYPE_NONE: 0, 
    SDL_CONTROLLER_BINDTYPE_BUTTON: 1, 
    SDL_CONTROLLER_BINDTYPE_AXIS: 2, 
    SDL_CONTROLLER_BINDTYPE_HAT: 3, 
  }
);

/* enum SDL2.SDL+SDL_GameControllerAxis */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_GameControllerAxis", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_CONTROLLER_AXIS_INVALID: -1, 
    SDL_CONTROLLER_AXIS_LEFTX: 0, 
    SDL_CONTROLLER_AXIS_LEFTY: 1, 
    SDL_CONTROLLER_AXIS_RIGHTX: 2, 
    SDL_CONTROLLER_AXIS_RIGHTY: 3, 
    SDL_CONTROLLER_AXIS_TRIGGERLEFT: 4, 
    SDL_CONTROLLER_AXIS_TRIGGERRIGHT: 5, 
    SDL_CONTROLLER_AXIS_MAX: 6, 
  }
);

/* enum SDL2.SDL+SDL_GameControllerButton */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_GameControllerButton", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_CONTROLLER_BUTTON_INVALID: -1, 
    SDL_CONTROLLER_BUTTON_A: 0, 
    SDL_CONTROLLER_BUTTON_B: 1, 
    SDL_CONTROLLER_BUTTON_X: 2, 
    SDL_CONTROLLER_BUTTON_Y: 3, 
    SDL_CONTROLLER_BUTTON_BACK: 4, 
    SDL_CONTROLLER_BUTTON_GUIDE: 5, 
    SDL_CONTROLLER_BUTTON_START: 6, 
    SDL_CONTROLLER_BUTTON_LEFTSTICK: 7, 
    SDL_CONTROLLER_BUTTON_RIGHTSTICK: 8, 
    SDL_CONTROLLER_BUTTON_LEFTSHOULDER: 9, 
    SDL_CONTROLLER_BUTTON_RIGHTSHOULDER: 10, 
    SDL_CONTROLLER_BUTTON_DPAD_UP: 11, 
    SDL_CONTROLLER_BUTTON_DPAD_DOWN: 12, 
    SDL_CONTROLLER_BUTTON_DPAD_LEFT: 13, 
    SDL_CONTROLLER_BUTTON_DPAD_RIGHT: 14, 
    SDL_CONTROLLER_BUTTON_MAX: 15, 
  }
);

/* struct SDL2.SDL+INTERNAL_GameControllerButtonBind_hat */ 

(function INTERNAL_GameControllerButtonBind_hat$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+INTERNAL_GameControllerButtonBind_hat", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "hat", $.Int32); 
    $.Field({Static:false, Public:true }, "hat_mask", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_GameControllerButtonBind */ 

(function SDL_GameControllerButtonBind$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_GameControllerButtonBind", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "bindType", $asm00.TypeRef("SDL2.SDL+SDL_GameControllerBindType")); 
    $.Field({Static:false, Public:true }, "button", $.Int32); 
    $.Field({Static:false, Public:true }, "axis", $.Int32); 
    $.Field({Static:false, Public:true }, "hat", $asm00.TypeRef("SDL2.SDL+INTERNAL_GameControllerButtonBind_hat")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_HapticDirection */ 

(function SDL_HapticDirection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_HapticDirection", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.Byte); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_HapticConstant */ 

(function SDL_HapticConstant$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_HapticConstant", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.UInt16); 
    $.Field({Static:false, Public:true }, "direction", $asm00.TypeRef("SDL2.SDL+SDL_HapticDirection")); 
    $.Field({Static:false, Public:true }, "$length", $.UInt32); 
    $.Field({Static:false, Public:true }, "delay", $.UInt16); 
    $.Field({Static:false, Public:true }, "button", $.UInt16); 
    $.Field({Static:false, Public:true }, "interval", $.UInt16); 
    $.Field({Static:false, Public:true }, "level", $.Int16); 
    $.Field({Static:false, Public:true }, "attack_length", $.UInt16); 
    $.Field({Static:false, Public:true }, "attack_level", $.UInt16); 
    $.Field({Static:false, Public:true }, "fade_length", $.UInt16); 
    $.Field({Static:false, Public:true }, "fade_level", $.UInt16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_HapticPeriodic */ 

(function SDL_HapticPeriodic$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_HapticPeriodic", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.UInt16); 
    $.Field({Static:false, Public:true }, "direction", $asm00.TypeRef("SDL2.SDL+SDL_HapticDirection")); 
    $.Field({Static:false, Public:true }, "$length", $.UInt32); 
    $.Field({Static:false, Public:true }, "delay", $.UInt16); 
    $.Field({Static:false, Public:true }, "button", $.UInt16); 
    $.Field({Static:false, Public:true }, "interval", $.UInt16); 
    $.Field({Static:false, Public:true }, "period", $.UInt16); 
    $.Field({Static:false, Public:true }, "magnitude", $.Int16); 
    $.Field({Static:false, Public:true }, "offset", $.Int16); 
    $.Field({Static:false, Public:true }, "phase", $.UInt16); 
    $.Field({Static:false, Public:true }, "attack_length", $.UInt16); 
    $.Field({Static:false, Public:true }, "attack_level", $.UInt16); 
    $.Field({Static:false, Public:true }, "fade_length", $.UInt16); 
    $.Field({Static:false, Public:true }, "fade_level", $.UInt16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_HapticCondition */ 

(function SDL_HapticCondition$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_HapticCondition", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.UInt16); 
    $.Field({Static:false, Public:true }, "direction", $asm00.TypeRef("SDL2.SDL+SDL_HapticDirection")); 
    $.Field({Static:false, Public:true }, "$length", $.UInt32); 
    $.Field({Static:false, Public:true }, "delay", $.UInt16); 
    $.Field({Static:false, Public:true }, "button", $.UInt16); 
    $.Field({Static:false, Public:true }, "interval", $.UInt16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_HapticRamp */ 

(function SDL_HapticRamp$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_HapticRamp", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.UInt16); 
    $.Field({Static:false, Public:true }, "direction", $asm00.TypeRef("SDL2.SDL+SDL_HapticDirection")); 
    $.Field({Static:false, Public:true }, "$length", $.UInt32); 
    $.Field({Static:false, Public:true }, "delay", $.UInt16); 
    $.Field({Static:false, Public:true }, "button", $.UInt16); 
    $.Field({Static:false, Public:true }, "interval", $.UInt16); 
    $.Field({Static:false, Public:true }, "start", $.Int16); 
    $.Field({Static:false, Public:true }, "end", $.Int16); 
    $.Field({Static:false, Public:true }, "attack_length", $.UInt16); 
    $.Field({Static:false, Public:true }, "attack_level", $.UInt16); 
    $.Field({Static:false, Public:true }, "fade_length", $.UInt16); 
    $.Field({Static:false, Public:true }, "fade_level", $.UInt16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_HapticLeftRight */ 

(function SDL_HapticLeftRight$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_HapticLeftRight", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.UInt16); 
    $.Field({Static:false, Public:true }, "$length", $.UInt32); 
    $.Field({Static:false, Public:true }, "large_magnitude", $.UInt16); 
    $.Field({Static:false, Public:true }, "small_magnitude", $.UInt16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_HapticCustom */ 

(function SDL_HapticCustom$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_HapticCustom", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.UInt16); 
    $.Field({Static:false, Public:true }, "direction", $asm00.TypeRef("SDL2.SDL+SDL_HapticDirection")); 
    $.Field({Static:false, Public:true }, "$length", $.UInt32); 
    $.Field({Static:false, Public:true }, "delay", $.UInt16); 
    $.Field({Static:false, Public:true }, "button", $.UInt16); 
    $.Field({Static:false, Public:true }, "interval", $.UInt16); 
    $.Field({Static:false, Public:true }, "channels", $.Byte); 
    $.Field({Static:false, Public:true }, "period", $.UInt16); 
    $.Field({Static:false, Public:true }, "samples", $.UInt16); 
    $.Field({Static:false, Public:true }, "data", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "attack_length", $.UInt16); 
    $.Field({Static:false, Public:true }, "attack_level", $.UInt16); 
    $.Field({Static:false, Public:true }, "fade_length", $.UInt16); 
    $.Field({Static:false, Public:true }, "fade_level", $.UInt16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_HapticEffect */ 

(function SDL_HapticEffect$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_HapticEffect", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "type", $.UInt16); 
    $.Field({Static:false, Public:true }, "constant", $asm00.TypeRef("SDL2.SDL+SDL_HapticConstant")); 
    $.Field({Static:false, Public:true }, "periodic", $asm00.TypeRef("SDL2.SDL+SDL_HapticPeriodic")); 
    $.Field({Static:false, Public:true }, "condition", $asm00.TypeRef("SDL2.SDL+SDL_HapticCondition")); 
    $.Field({Static:false, Public:true }, "ramp", $asm00.TypeRef("SDL2.SDL+SDL_HapticRamp")); 
    $.Field({Static:false, Public:true }, "leftright", $asm00.TypeRef("SDL2.SDL+SDL_HapticLeftRight")); 
    $.Field({Static:false, Public:true }, "custom", $asm00.TypeRef("SDL2.SDL+SDL_HapticCustom")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SDL2.SDL+SDL_AudioStatus */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_AudioStatus", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_AUDIO_STOPPED: 0, 
    SDL_AUDIO_PLAYING: 1, 
    SDL_AUDIO_PAUSED: 2, 
  }
);

/* struct SDL2.SDL+SDL_AudioSpec */ 

(function SDL_AudioSpec$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_AudioSpec", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "freq", $.Int32); 
    $.Field({Static:false, Public:true }, "format", $.UInt16); 
    $.Field({Static:false, Public:true }, "channels", $.Byte); 
    $.Field({Static:false, Public:true }, "silence", $.Byte); 
    $.Field({Static:false, Public:true }, "samples", $.UInt16); 
    $.Field({Static:false, Public:true }, "size", $.UInt32); 
    $.Field({Static:false, Public:true }, "callback", $asm00.TypeRef("SDL2.SDL+SDL_AudioCallback")); 
    $.Field({Static:false, Public:true }, "userdata", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate SDL2.SDL+SDL_AudioCallback */ 

JSIL.MakeDelegate("SDL2.SDL+SDL_AudioCallback", false, [], 
  new JSIL.MethodSignature(null, [
      $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
      $asm01.TypeRef("System.Int32")
    ]));

/* delegate SDL2.SDL+SDL_TimerCallback */ 

JSIL.MakeDelegate("SDL2.SDL+SDL_TimerCallback", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("System.UInt32"), [$asm01.TypeRef("System.UInt32"), $asm01.TypeRef("System.IntPtr")]));

/* enum SDL2.SDL+SDL_SYSWM_TYPE */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL+SDL_SYSWM_TYPE", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SDL_SYSWM_UNKNOWN: 0, 
    SDL_SYSWM_WINDOWS: 1, 
    SDL_SYSWM_X11: 2, 
    SDL_SYSWM_DIRECTFB: 3, 
    SDL_SYSWM_COCOA: 4, 
    SDL_SYSWM_UIKIT: 5, 
  }
);

/* struct SDL2.SDL+INTERNAL_windows_wminfo */ 

(function INTERNAL_windows_wminfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+INTERNAL_windows_wminfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "window", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+INTERNAL_x11_wminfo */ 

(function INTERNAL_x11_wminfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+INTERNAL_x11_wminfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "display", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "window", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+INTERNAL_directfb_wminfo */ 

(function INTERNAL_directfb_wminfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+INTERNAL_directfb_wminfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "dfb", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "window", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "surface", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+INTERNAL_cocoa_wminfo */ 

(function INTERNAL_cocoa_wminfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+INTERNAL_cocoa_wminfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "window", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+INTERNAL_uikit_wminfo */ 

(function INTERNAL_uikit_wminfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+INTERNAL_uikit_wminfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "window", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+INTERNAL_SysWMDriverUnion */ 

(function INTERNAL_SysWMDriverUnion$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+INTERNAL_SysWMDriverUnion", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "win", $asm00.TypeRef("SDL2.SDL+INTERNAL_windows_wminfo")); 
    $.Field({Static:false, Public:true }, "x11", $asm00.TypeRef("SDL2.SDL+INTERNAL_x11_wminfo")); 
    $.Field({Static:false, Public:true }, "dfb", $asm00.TypeRef("SDL2.SDL+INTERNAL_directfb_wminfo")); 
    $.Field({Static:false, Public:true }, "cocoa", $asm00.TypeRef("SDL2.SDL+INTERNAL_cocoa_wminfo")); 
    $.Field({Static:false, Public:true }, "uikit", $asm00.TypeRef("SDL2.SDL+INTERNAL_uikit_wminfo")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SDL2.SDL+SDL_SysWMinfo */ 

(function SDL_SysWMinfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "SDL2.SDL+SDL_SysWMinfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "version", $asm00.TypeRef("SDL2.SDL+SDL_version")); 
    $.Field({Static:false, Public:true }, "subsystem", $asm00.TypeRef("SDL2.SDL+SDL_SYSWM_TYPE")); 
    $.Field({Static:false, Public:true }, "info", $asm00.TypeRef("SDL2.SDL+INTERNAL_SysWMDriverUnion")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SDL2.SDL_image */ 

(function SDL_image$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.SDL2.SDL_SDL_version)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.Type")]))) ();
  };

  function SDL_image_IMG_LinkedVersion () {
    var result_ptr = $thisType.INTERNAL_IMG_LinkedVersion().MemberwiseClone();
    return $T01().$Cast($S00().CallStatic($T02(), "PtrToStructure", null, result_ptr.MemberwiseClone(), $T01().__Type__));
  };

  function SDL_image_SDL_IMAGE_VERSION (/* ref */ X) {
    X.get().major = 2;
    X.get().minor = 0;
    X.get().patch = 0;
  };

  JSIL.MakeStaticClass("SDL2.SDL_image", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.PInvokeMethod({Static:true , Public:true }, "IMG_Init", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("SDL2.SDL_image+IMG_InitFlags")]), 
      {
        Module: "SDL2_image.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "IMG_InvertAlpha", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "SDL2_image.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "IMG_LinkedVersion", 
      JSIL.MethodSignature.Return($asm00.TypeRef("SDL2.SDL+SDL_version")), 
      SDL_image_IMG_LinkedVersion
    );

    $.PInvokeMethod({Static:true , Public:true }, "IMG_Load", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.String]), 
      {
        Module: "SDL2_image.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "IMG_Load_RW", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "SDL2_image.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "IMG_LoadTexture", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr"), $.String]), 
      {
        Module: "SDL2_image.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "IMG_LoadTexture_RW", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $.Int32
        ]), 
      {
        Module: "SDL2_image.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "IMG_LoadTextureTyped_RW", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $.Int32, $.String
        ]), 
      {
        Module: "SDL2_image.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "IMG_LoadTyped_RW", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.String
        ]), 
      {
        Module: "SDL2_image.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "IMG_Quit", 
      JSIL.MethodSignature.Void, 
      {
        Module: "SDL2_image.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "IMG_ReadXPMFromArray", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("System.Array", [$.String])]), 
      {
        Module: "SDL2_image.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "IMG_SavePNG", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.String]), 
      {
        Module: "SDL2_image.dll", 
        Parameters: [
          {
            CustomMarshaler: $asm00.TypeRef("SDL2.LPUtf8StrMarshaler"), Cookie: ""
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "IMG_SavePNG_RW", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $.Int32
        ]), 
      {
        Module: "SDL2_image.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "INTERNAL_IMG_LinkedVersion", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "SDL2_image.dll", 
        EntryPoint: "IMG_LinkedVersion", 
      }
    );

    $.Method({Static:true , Public:true }, "SDL_IMAGE_VERSION", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("SDL2.SDL+SDL_version")])), 
      SDL_image_SDL_IMAGE_VERSION
    );

    $.Constant({Static:true , Public:false}, "nativeLibName", "SDL2_image.dll"); 
    $.Constant({Static:true , Public:true }, "SDL_IMAGE_MAJOR_VERSION", 2); 
    $.Constant({Static:true , Public:true }, "SDL_IMAGE_MINOR_VERSION", 0); 
    $.Constant({Static:true , Public:true }, "SDL_IMAGE_PATCHLEVEL", 0); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SDL2.SDL_image+IMG_InitFlags */ 

JSIL.MakeEnum(
  {
    FullName: "SDL2.SDL_image+IMG_InitFlags", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    IMG_INIT_JPG: 1, 
    IMG_INIT_PNG: 2, 
    IMG_INIT_TIF: 4, 
    IMG_INIT_WEBP: 8, 
  }
);

/* class SDL2.LPUtf8StrMarshaler */ 

(function LPUtf8StrMarshaler$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Runtime.InteropServices.ICustomMarshaler)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Text.Encoding)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")]), [$asm01.TypeRef("System.IntPtr")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };

  function LPUtf8StrMarshaler__ctor (leaveAllocated) {
    this._leaveAllocated = leaveAllocated;
  };

  function LPUtf8StrMarshaler_CleanUpManagedData (ManagedObj) {
  };

  function LPUtf8StrMarshaler_CleanUpNativeData (pNativeData) {
    if (!this._leaveAllocated) {
      $T03().FreeHGlobal(pNativeData.MemberwiseClone());
    }
  };

  function LPUtf8StrMarshaler_GetInstance (cookie) {
    if (cookie !== null) {
      if (cookie == "LeaveAllocated") {
        var result = $thisType._leaveAllocatedInstance;
        return result;
      }
    }
    result = $thisType._defaultInstance;
    return result;
  };

  function LPUtf8StrMarshaler_GetNativeDataSize () {
    return -1;
  };

  function LPUtf8StrMarshaler_MarshalManagedToNative (ManagedObj) {
    if (ManagedObj === null) {
      var result = $T02().Zero.MemberwiseClone();
    } else {
      var str = $T04().$As(ManagedObj);
      if (str === null) {
        throw $S00().Construct("ManagedObj must be a string.", "ManagedObj");
      }
      var bytes = $S01().CallVirtual("GetBytes", null, $T08().get_UTF8(), str);
      var mem = $S02().CallStatic($T03(), "AllocHGlobal", null, (((bytes.length | 0) + 1) | 0)).MemberwiseClone();
      $S03().CallStatic($T03(), "Copy", null, bytes, 0, mem.MemberwiseClone(), bytes.length);
      $S04().CallStatic($T02(), "op_Explicit", null, mem.MemberwiseClone()).add(bytes.length, false).cast(JSIL.Pointer.Of($asm01.System.Byte)).set(0);
      result = mem;
    }
    return result;
  };

  function LPUtf8StrMarshaler_MarshalNativeToManaged (pNativeData) {
    if ($T02().op_Equality(pNativeData.MemberwiseClone(), $T02().Zero.MemberwiseClone())) {
      var result = null;
    } else {

      for (var ptr = $S04().CallStatic($T02(), "op_Explicit", null, pNativeData.MemberwiseClone()).cast(JSIL.Pointer.Of($asm01.System.Byte)); (ptr.get() | 0) !== 0; ptr.add(1, true)) {
      }
      var bytes = JSIL.Array.New($T09(), (ptr.deltaBytes($S04().CallStatic($T02(), "op_Explicit", null, pNativeData.MemberwiseClone())) / 1));
      $S05().CallStatic($T03(), "Copy", null, pNativeData.MemberwiseClone(), bytes, 0, bytes.length);
      result = $T08().get_UTF8().GetString(bytes);
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "SDL2.LPUtf8StrMarshaler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean), 
      LPUtf8StrMarshaler__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CleanUpManagedData", 
      JSIL.MethodSignature.Action($.Object), 
      LPUtf8StrMarshaler_CleanUpManagedData
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CleanUpNativeData", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      LPUtf8StrMarshaler_CleanUpNativeData
    );

    $.Method({Static:true , Public:true }, "GetInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Runtime.InteropServices.ICustomMarshaler"), [$.String]), 
      LPUtf8StrMarshaler_GetInstance
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetNativeDataSize", 
      JSIL.MethodSignature.Return($.Int32), 
      LPUtf8StrMarshaler_GetNativeDataSize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MarshalManagedToNative", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.Object]), 
      LPUtf8StrMarshaler_MarshalManagedToNative
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MarshalNativeToManaged", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.IntPtr")]), 
      LPUtf8StrMarshaler_MarshalNativeToManaged
    );

    $.Constant({Static:true , Public:true }, "LeaveAllocated", "LeaveAllocated"); 
    $.Field({Static:true , Public:false}, "_leaveAllocatedInstance", $asm01.TypeRef("System.Runtime.InteropServices.ICustomMarshaler")); 
    $.Field({Static:true , Public:false}, "_defaultInstance", $asm01.TypeRef("System.Runtime.InteropServices.ICustomMarshaler")); 
    $.Field({Static:false, Public:false}, "_leaveAllocated", $.Boolean); 
    function LPUtf8StrMarshaler__cctor () {
      $thisType._leaveAllocatedInstance = new $thisType(true);
      $thisType._defaultInstance = new $thisType(false);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      LPUtf8StrMarshaler__cctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Runtime.InteropServices.ICustomMarshaler")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("OpenAL");
/* class OpenAL.ALC10 */ 

(function ALC10$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };

  function ALC10_alcGetString (device, param) {
    return $T02().PtrToStringAnsi($thisType.INTERNAL_alcGetString(device.MemberwiseClone(), param).MemberwiseClone());
  };

  JSIL.MakeStaticClass("OpenAL.ALC10", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.PInvokeMethod({Static:true , Public:true }, "alcCloseDevice", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alcCreateContext", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alcDestroyContext", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alcGetContextsDevice", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alcGetCurrentContext", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alcGetEnumValue", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $.String]), 
      {
        Module: "soft_oal.dll", 
        Parameters: [
          {
            NativeType: "LPStr"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alcGetError", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alcGetIntegerv", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alcGetProcAddress", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr"), $.String]), 
      {
        Module: "soft_oal.dll", 
        Parameters: [
          {
            NativeType: "LPStr"
          }
        ]
      }
    );

    $.Method({Static:true , Public:true }, "alcGetString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      ALC10_alcGetString
    );

    $.PInvokeMethod({Static:true , Public:true }, "alcMakeContextCurrent", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alcOpenDevice", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.String]), 
      {
        Module: "soft_oal.dll", 
        Parameters: [
          {
            NativeType: "LPStr"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "INTERNAL_alcGetString", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      {
        Module: "soft_oal.dll", 
        EntryPoint: "alcGetString", 
      }
    );

    $.Constant({Static:true , Public:false}, "nativeLibName", "soft_oal.dll"); 
    $.Constant({Static:true , Public:true }, "ALC_FALSE", 0); 
    $.Constant({Static:true , Public:true }, "ALC_TRUE", 1); 
    $.Constant({Static:true , Public:true }, "ALC_FREQUENCY", 4103); 
    $.Constant({Static:true , Public:true }, "ALC_REFRESH", 4104); 
    $.Constant({Static:true , Public:true }, "ALC_SYNC", 4105); 
    $.Constant({Static:true , Public:true }, "ALC_NO_ERROR", 0); 
    $.Constant({Static:true , Public:true }, "ALC_INVALID_DEVICE", 40961); 
    $.Constant({Static:true , Public:true }, "ALC_INVALID_CONTEXT", 40962); 
    $.Constant({Static:true , Public:true }, "ALC_INVALID_ENUM", 40963); 
    $.Constant({Static:true , Public:true }, "ALC_INVALID_VALUE", 40964); 
    $.Constant({Static:true , Public:true }, "ALC_OUT_OF_MEMORY", 40965); 
    $.Constant({Static:true , Public:true }, "ALC_ATTRIBUTES_SIZE", 4098); 
    $.Constant({Static:true , Public:true }, "ALC_ALL_ATTRIBUTES", 4099); 
    $.Constant({Static:true , Public:true }, "ALC_DEFAULT_DEVICE_SPECIFIER", 4100); 
    $.Constant({Static:true , Public:true }, "ALC_DEVICE_SPECIFIER", 4101); 
    $.Constant({Static:true , Public:true }, "ALC_EXTENSIONS", 4102); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class OpenAL.AL10 */ 

(function AL10$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };

  function AL10_alGetString (param) {
    return $T01().PtrToStringAnsi($thisType.INTERNAL_alGetString(param).MemberwiseClone());
  };

  JSIL.MakeStaticClass("OpenAL.AL10", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.PInvokeMethod({Static:true , Public:true }, "alBuffer3f", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Single, $.Single, 
          $.Single
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alBuffer3i", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alBufferData", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alBufferData", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alBufferData", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single]), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr")
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alBufferf", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Single
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alBufferfv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alBufferi", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alBufferiv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDeleteBuffers", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDeleteBuffers", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDeleteSources", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDeleteSources", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDisable", 
      JSIL.MethodSignature.Action($.Int32), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDistanceModel", 
      JSIL.MethodSignature.Action($.Int32), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alEnable", 
      JSIL.MethodSignature.Action($.Int32), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGenBuffers", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGenBuffers", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGenSources", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGenSources", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetBooleanv", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Boolean])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetBuffer3f", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single]), $jsilcore.TypeRef("JSIL.Reference", [$.Single]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetBuffer3i", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetBufferf", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetBufferfv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetBufferi", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetBufferiv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetDoublev", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Double])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetEnumValue", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      {
        Module: "soft_oal.dll", 
        Parameters: [
          {
            NativeType: "LPStr"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetError", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetFloat", 
      new JSIL.MethodSignature($.Single, [$.Int32]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetFloatv", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Single])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetInteger", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetIntegerv", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetListener3f", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Single]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single]), $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetListener3i", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetListenerf", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Single])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetListenerfv", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Single])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetListeneri", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetListeneriv", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetProcAddress", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.String]), 
      {
        Module: "soft_oal.dll", 
        Parameters: [
          {
            NativeType: "LPStr"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetSource3f", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single]), $jsilcore.TypeRef("JSIL.Reference", [$.Single]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetSource3i", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetSourcef", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetSourcefv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetSourcei", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetSourceiv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "alGetString", 
      new JSIL.MethodSignature($.String, [$.Int32]), 
      AL10_alGetString
    );

    $.PInvokeMethod({Static:true , Public:true }, "alIsBuffer", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alIsExtensionPresent", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      {
        Module: "soft_oal.dll", 
        Parameters: [
          {
            NativeType: "LPStr"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alIsSource", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alListener3f", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $.Single, $.Single
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alListener3i", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alListenerf", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alListenerfv", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Single])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alListeneri", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alListeneriv", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSource3f", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Single, $.Single, 
          $.Single
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSource3i", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourcef", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Single
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourcefv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourcei", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourceiv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourcePause", 
      JSIL.MethodSignature.Action($.UInt32), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourcePausev", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourcePlay", 
      JSIL.MethodSignature.Action($.UInt32), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourcePlayv", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourceQueueBuffers", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("System.Array", [$.UInt32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourceQueueBuffers", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourceRewind", 
      JSIL.MethodSignature.Action($.UInt32), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourceRewindv", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourceStop", 
      JSIL.MethodSignature.Action($.UInt32), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourceStopv", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourceUnqueueBuffers", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("System.Array", [$.UInt32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alSourceUnqueueBuffers", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "INTERNAL_alGetString", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$.Int32]), 
      {
        Module: "soft_oal.dll", 
        EntryPoint: "alGetString", 
      }
    );

    $.Constant({Static:true , Public:false}, "nativeLibName", "soft_oal.dll"); 
    $.Constant({Static:true , Public:true }, "AL_NONE", 0); 
    $.Constant({Static:true , Public:true }, "AL_FALSE", 0); 
    $.Constant({Static:true , Public:true }, "AL_TRUE", 1); 
    $.Constant({Static:true , Public:true }, "AL_SOURCE_RELATIVE", 514); 
    $.Constant({Static:true , Public:true }, "AL_CONE_INNER_ANGLE", 4097); 
    $.Constant({Static:true , Public:true }, "AL_CONE_OUTER_ANGLE", 4098); 
    $.Constant({Static:true , Public:true }, "AL_PITCH", 4099); 
    $.Constant({Static:true , Public:true }, "AL_POSITION", 4100); 
    $.Constant({Static:true , Public:true }, "AL_DIRECTION", 4101); 
    $.Constant({Static:true , Public:true }, "AL_VELOCITY", 4102); 
    $.Constant({Static:true , Public:true }, "AL_LOOPING", 4103); 
    $.Constant({Static:true , Public:true }, "AL_BUFFER", 4105); 
    $.Constant({Static:true , Public:true }, "AL_GAIN", 4106); 
    $.Constant({Static:true , Public:true }, "AL_MIN_GAIN", 4109); 
    $.Constant({Static:true , Public:true }, "AL_MAX_GAIN", 4110); 
    $.Constant({Static:true , Public:true }, "AL_ORIENTATION", 4111); 
    $.Constant({Static:true , Public:true }, "AL_SOURCE_STATE", 4112); 
    $.Constant({Static:true , Public:true }, "AL_INITIAL", 4113); 
    $.Constant({Static:true , Public:true }, "AL_PLAYING", 4114); 
    $.Constant({Static:true , Public:true }, "AL_PAUSED", 4115); 
    $.Constant({Static:true , Public:true }, "AL_STOPPED", 4116); 
    $.Constant({Static:true , Public:true }, "AL_BUFFERS_QUEUED", 4117); 
    $.Constant({Static:true , Public:true }, "AL_BUFFERS_PROCESSED", 4118); 
    $.Constant({Static:true , Public:true }, "AL_REFERENCE_DISTANCE", 4128); 
    $.Constant({Static:true , Public:true }, "AL_ROLLOFF_FACTOR", 4129); 
    $.Constant({Static:true , Public:true }, "AL_CONE_OUTER_GAIN", 4130); 
    $.Constant({Static:true , Public:true }, "AL_MAX_DISTANCE", 4131); 
    $.Constant({Static:true , Public:true }, "AL_SOURCE_TYPE", 4135); 
    $.Constant({Static:true , Public:true }, "AL_STATIC", 4136); 
    $.Constant({Static:true , Public:true }, "AL_STREAMING", 4137); 
    $.Constant({Static:true , Public:true }, "AL_UNDETERMINED", 4144); 
    $.Constant({Static:true , Public:true }, "AL_FORMAT_MONO8", 4352); 
    $.Constant({Static:true , Public:true }, "AL_FORMAT_MONO16", 4353); 
    $.Constant({Static:true , Public:true }, "AL_FORMAT_STEREO8", 4354); 
    $.Constant({Static:true , Public:true }, "AL_FORMAT_STEREO16", 4355); 
    $.Constant({Static:true , Public:true }, "AL_FREQUENCY", 8193); 
    $.Constant({Static:true , Public:true }, "AL_BITS", 8194); 
    $.Constant({Static:true , Public:true }, "AL_CHANNELS", 8195); 
    $.Constant({Static:true , Public:true }, "AL_SIZE", 8196); 
    $.Constant({Static:true , Public:true }, "AL_NO_ERROR", 0); 
    $.Constant({Static:true , Public:true }, "AL_INVALID_NAME", 40961); 
    $.Constant({Static:true , Public:true }, "AL_INVALID_ENUM", 40962); 
    $.Constant({Static:true , Public:true }, "AL_INVALID_VALUE", 40963); 
    $.Constant({Static:true , Public:true }, "AL_INVALID_OPERATION", 40964); 
    $.Constant({Static:true , Public:true }, "AL_OUT_OF_MEMORY", 40965); 
    $.Constant({Static:true , Public:true }, "AL_VENDOR", 45057); 
    $.Constant({Static:true , Public:true }, "AL_VERSION", 45058); 
    $.Constant({Static:true , Public:true }, "AL_RENDERER", 45059); 
    $.Constant({Static:true , Public:true }, "AL_EXTENSIONS", 45060); 
    $.Constant({Static:true , Public:true }, "AL_DOPPLER_VELOCITY", 49153); 
    $.Constant({Static:true , Public:true }, "AL_DISTANCE_MODEL", 53248); 
    $.Constant({Static:true , Public:true }, "AL_INVERSE_DISTANCE", 53249); 
    $.Constant({Static:true , Public:true }, "AL_INVERSE_DISTANCE_CLAMPED", 53250); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class OpenAL.ALEXT */ 

(function ALEXT$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("OpenAL.ALEXT", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "AL_FORMAT_MONO_FLOAT32", 65552); 
    $.Constant({Static:true , Public:true }, "AL_FORMAT_STEREO_FLOAT32", 65553); 
    $.Constant({Static:true , Public:true }, "AL_LOOP_POINTS_SOFT", 8213); 
    $.Constant({Static:true , Public:true }, "AL_UNPACK_BLOCK_ALIGNMENT_SOFT", 8204); 
    $.Constant({Static:true , Public:true }, "AL_PACK_BLOCK_ALIGNMENT_SOFT", 8205); 
    $.Constant({Static:true , Public:true }, "AL_FORMAT_MONO_MSADPCM_SOFT", 4866); 
    $.Constant({Static:true , Public:true }, "AL_FORMAT_STEREO_MSADPCM_SOFT", 4867); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class OpenAL.EFX */ 

(function EFX$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("OpenAL.EFX", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.PInvokeMethod({Static:true , Public:true }, "alAuxiliaryEffectSlotf", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Single
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alAuxiliaryEffectSlotfv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alAuxiliaryEffectSloti", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alAuxiliaryEffectSlotiv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDeleteAuxiliaryEffectSlots", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDeleteAuxiliaryEffectSlots", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDeleteEffects", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDeleteEffects", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDeleteFilters", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alDeleteFilters", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alEffectf", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Single
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alEffectfv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alEffecti", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alEffectiv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alFilterf", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Single
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alFilterfv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alFilteri", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alFilteriv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGenAuxiliaryEffectSlots", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGenAuxiliaryEffectSlots", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGenEffects", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGenEffects", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGenFilters", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGenFilters", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetAuxiliaryEffectSlotf", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetAuxiliaryEffectSlotfv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetAuxiliaryEffectSloti", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetAuxiliaryEffectSlotiv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetEffectf", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetEffectfv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetEffecti", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetEffectiv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetFilterf", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetFilterfv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetFilteri", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alGetFilteriv", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alIsAuxiliaryEffectSlot", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alIsEffect", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "alIsFilter", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32]), 
      {
        Module: "soft_oal.dll", 
      }
    );

    $.Constant({Static:true , Public:false}, "nativeLibName", "soft_oal.dll"); 
    $.Constant({Static:true , Public:true }, "AL_METERS_PER_UNIT", 131076); 
    $.Constant({Static:true , Public:true }, "AL_DIRECT_FILTER", 131077); 
    $.Constant({Static:true , Public:true }, "AL_AUXILIARY_SEND_FILTER", 131078); 
    $.Constant({Static:true , Public:true }, "AL_AIR_ABSORPTION_FACTOR", 131079); 
    $.Constant({Static:true , Public:true }, "AL_ROOM_ROLLOFF_FACTOR", 131080); 
    $.Constant({Static:true , Public:true }, "AL_CONE_OUTER_GAINHF", 131081); 
    $.Constant({Static:true , Public:true }, "AL_DIRECT_FILTER_GAINHF_AUTO", 131082); 
    $.Constant({Static:true , Public:true }, "AL_AUXILIARY_SEND_FILTER_GAIN_AUTO", 131083); 
    $.Constant({Static:true , Public:true }, "AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO", 131084); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_DENSITY", 1); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_DIFFUSION", 2); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_GAIN", 3); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_GAINHF", 4); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_DECAY_TIME", 5); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_DECAY_HFRATIO", 6); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_REFLECTIONS_GAIN", 7); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_REFLECTIONS_DELAY", 8); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_LATE_REVERB_GAIN", 9); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_LATE_REVERB_DELAY", 10); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_AIR_ABSORPTION_FACTOR", 11); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_ROOM_ROLLOFF_FACTOR", 12); 
    $.Constant({Static:true , Public:true }, "AL_REVERB_DECAY_HFLIMIT", 13); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_DENSITY", 1); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_DIFFUSION", 2); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_GAIN", 3); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_GAINHF", 4); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_GAINLF", 5); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_DECAY_TIME", 6); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_DECAY_HFRATIO", 7); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_DECAY_LFRATIO", 8); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_REFLECTIONS_GAIN", 9); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_REFLECTIONS_DELAY", 10); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_REFLECTIONS_PAN", 11); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_LATE_REVERB_GAIN", 12); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_LATE_REVERB_DELAY", 13); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_LATE_REVERT_PAN", 14); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_ECHO_TIME", 15); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_ECHO_DEPTH", 16); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_MODULATION_TIME", 17); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_MODULATION_DEPTH", 18); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_AIR_ABSORPTION_GAINHF", 19); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_HFREFERENCE", 20); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_LFREFERENCE", 21); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_ROOM_ROLLOFF_FACTOR", 22); 
    $.Constant({Static:true , Public:true }, "AL_EAXREVERB_DECAY_HFLIMIT", 23); 
    $.Constant({Static:true , Public:true }, "AL_CHORUS_WAVEFORM", 1); 
    $.Constant({Static:true , Public:true }, "AL_CHORUS_PHASE", 2); 
    $.Constant({Static:true , Public:true }, "AL_CHORUS_RATE", 3); 
    $.Constant({Static:true , Public:true }, "AL_CHORUS_DEPTH", 4); 
    $.Constant({Static:true , Public:true }, "AL_CHORUS_FEEDBACK", 5); 
    $.Constant({Static:true , Public:true }, "AL_CHORUS_DELAY", 6); 
    $.Constant({Static:true , Public:true }, "AL_DISTORTION_EDGE", 1); 
    $.Constant({Static:true , Public:true }, "AL_DISTORTION_GAIN", 2); 
    $.Constant({Static:true , Public:true }, "AL_DISTORTION_LOWPASS_CUTOFF", 3); 
    $.Constant({Static:true , Public:true }, "AL_DISTORTION_EQCENTER", 4); 
    $.Constant({Static:true , Public:true }, "AL_DISTORTION_EQBANDWIDTH", 5); 
    $.Constant({Static:true , Public:true }, "AL_ECHO_DELAY", 1); 
    $.Constant({Static:true , Public:true }, "AL_ECHO_LRDELAY", 2); 
    $.Constant({Static:true , Public:true }, "AL_ECHO_DAMPING", 3); 
    $.Constant({Static:true , Public:true }, "AL_ECHO_FEEDBACK", 4); 
    $.Constant({Static:true , Public:true }, "AL_ECHO_SPREAD", 5); 
    $.Constant({Static:true , Public:true }, "AL_FLANGER_WAVEFORM", 1); 
    $.Constant({Static:true , Public:true }, "AL_FLANGER_PHASE", 2); 
    $.Constant({Static:true , Public:true }, "AL_FLANGER_RATE", 3); 
    $.Constant({Static:true , Public:true }, "AL_FLANGER_DEPTH", 4); 
    $.Constant({Static:true , Public:true }, "AL_FLANGER_FEEDBACK", 5); 
    $.Constant({Static:true , Public:true }, "AL_FLANGER_DELAY", 6); 
    $.Constant({Static:true , Public:true }, "AL_FREQUENCY_SHIFTER_FREQUENCY", 1); 
    $.Constant({Static:true , Public:true }, "AL_FREQUENCY_SHIFTER_LEFT_DIRECTION", 2); 
    $.Constant({Static:true , Public:true }, "AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION", 3); 
    $.Constant({Static:true , Public:true }, "AL_VOCAL_MORPHER_PHONEMEA", 1); 
    $.Constant({Static:true , Public:true }, "AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING", 2); 
    $.Constant({Static:true , Public:true }, "AL_VOCAL_MORPHER_PHONEMEB", 3); 
    $.Constant({Static:true , Public:true }, "AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING", 4); 
    $.Constant({Static:true , Public:true }, "AL_VOCAL_MORPHER_WAVEFORM", 5); 
    $.Constant({Static:true , Public:true }, "AL_VOCAL_MORPHER_RATE", 6); 
    $.Constant({Static:true , Public:true }, "AL_PITCH_SHIFTER_COARSE_TUNE", 1); 
    $.Constant({Static:true , Public:true }, "AL_PITCH_SHIFTER_FINE_TUNE", 2); 
    $.Constant({Static:true , Public:true }, "AL_RING_MODULATOR_FREQUENCY", 1); 
    $.Constant({Static:true , Public:true }, "AL_RING_MODULATOR_HIGHPASS_CUTOFF", 2); 
    $.Constant({Static:true , Public:true }, "AL_RING_MODULATOR_WAVEFORM", 3); 
    $.Constant({Static:true , Public:true }, "AL_AUTOWAH_ATTACK_TIME", 1); 
    $.Constant({Static:true , Public:true }, "AL_AUTOWAH_RELEASE_TIME", 2); 
    $.Constant({Static:true , Public:true }, "AL_AUTOWAH_RESONANCE", 3); 
    $.Constant({Static:true , Public:true }, "AL_AUTOWAH_PEAK_GAIN", 4); 
    $.Constant({Static:true , Public:true }, "AL_COMPRESSOR_ONOFF", 1); 
    $.Constant({Static:true , Public:true }, "AL_EQUALIZER_LOW_GAIN", 1); 
    $.Constant({Static:true , Public:true }, "AL_EQUALIZER_LOW_CUTOFF", 2); 
    $.Constant({Static:true , Public:true }, "AL_EQUALIZER_MID1_GAIN", 3); 
    $.Constant({Static:true , Public:true }, "AL_EQUALIZER_MID1_CENTER", 4); 
    $.Constant({Static:true , Public:true }, "AL_EQUALIZER_MID1_WIDTH", 5); 
    $.Constant({Static:true , Public:true }, "AL_EQUALIZER_MID2_GAIN", 6); 
    $.Constant({Static:true , Public:true }, "AL_EQUALIZER_MID2_CENTER", 7); 
    $.Constant({Static:true , Public:true }, "AL_EQUALIZER_MID2_WIDTH", 8); 
    $.Constant({Static:true , Public:true }, "AL_EQUALIZER_HIGH_GAIN", 9); 
    $.Constant({Static:true , Public:true }, "AL_EQUALIZER_HIGH_CUTOFF", 10); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_FIRST_PARAMETER", 0); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_LAST_PARAMETER", 32768); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_TYPE", 32769); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_NULL", 0); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_REVERB", 1); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_CHORUS", 2); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_DISTORTION", 3); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_ECHO", 4); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_FLANGER", 5); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_FREQUENCY_SHIFTER", 6); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_VOCAL_MORPHER", 7); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_PITCH_SHIFTER", 8); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_RING_MODULATOR", 9); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_AUTOWAH", 10); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_COMPRESSOR", 11); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_EQUALIZER", 12); 
    $.Constant({Static:true , Public:true }, "AL_EFFECT_EAXREVERB", 32768); 
    $.Constant({Static:true , Public:true }, "AL_EFFECTSLOT_EFFECT", 1); 
    $.Constant({Static:true , Public:true }, "AL_EFFECTSLOT_GAIN", 2); 
    $.Constant({Static:true , Public:true }, "AL_EFFECTSLOT_AUXILIARY_SEND_AUTO", 3); 
    $.Constant({Static:true , Public:true }, "AL_EFFECTSLOT_NULL", 0); 
    $.Constant({Static:true , Public:true }, "AL_LOWPASS_GAIN", 1); 
    $.Constant({Static:true , Public:true }, "AL_LOWPASS_GAINHF", 2); 
    $.Constant({Static:true , Public:true }, "AL_HIGHPASS_GAIN", 1); 
    $.Constant({Static:true , Public:true }, "AL_HIGHPASS_GAINLF", 2); 
    $.Constant({Static:true , Public:true }, "AL_BANDPASS_GAIN", 1); 
    $.Constant({Static:true , Public:true }, "AL_BANDPASS_GAINLF", 2); 
    $.Constant({Static:true , Public:true }, "AL_BANDPASS_GAINHF", 3); 
    $.Constant({Static:true , Public:true }, "AL_FILTER_FIRST_PARAMETER", 0); 
    $.Constant({Static:true , Public:true }, "AL_FILTER_LAST_PARAMETER", 32768); 
    $.Constant({Static:true , Public:true }, "AL_FILTER_TYPE", 32769); 
    $.Constant({Static:true , Public:true }, "AL_FILTER_NULL", 0); 
    $.Constant({Static:true , Public:true }, "AL_FILTER_LOWPASS", 1); 
    $.Constant({Static:true , Public:true }, "AL_FILTER_HIGHPASS", 2); 
    $.Constant({Static:true , Public:true }, "AL_FILTER_BANDPASS", 3); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TheoraPlay */ 

(function TheoraPlay$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm01.System.Byte))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm01.System.Single))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.TheoraPlay_THEORAPLAY_VideoFrame)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.OperatingSystem)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Environment)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.PlatformID)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.TheoraPlay_THEORAPLAY_VideoFrame32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")]), [$asm01.TypeRef("System.IntPtr")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Byte")]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Single")]), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };

  function TheoraPlay__ctor () {
  };

  function TheoraPlay_getAudioPacket (packet) {
    var packetPtr = $S00().CallStatic($T00(), "op_Explicit", null, packet.MemberwiseClone()).cast(JSIL.Pointer.Of($asm00.TheoraPlay_THEORAPLAY_AudioPacket));
    return packetPtr.get();
  };

  function TheoraPlay_getPixels (pixels, imageSize) {
    var thePixels = JSIL.Array.New($T03(), imageSize);
    $S01().CallStatic($T04(), "Copy", null, pixels.MemberwiseClone(), thePixels, 0, imageSize);
    return thePixels;
  };

  function TheoraPlay_getSamples (samples, packetSize) {
    var theSamples = JSIL.Array.New($T06(), packetSize);
    $S02().CallStatic($T04(), "Copy", null, samples.MemberwiseClone(), theSamples, 0, packetSize);
    return theSamples;
  };

  function TheoraPlay_getVideoFrame (frame) {
    var theFrame = new ($T07())();
    if (!(($T09().get_OSVersion().get_Platform() === $T0A().Win32NT) || (($T00().get_Size() | 0) !== 4))) {
      var frame32Ptr = $S00().CallStatic($T00(), "op_Explicit", null, frame.MemberwiseClone()).cast(JSIL.Pointer.Of($asm00.TheoraPlay_THEORAPLAY_VideoFrame32));
      var frame2 = frame32Ptr.get();
      theFrame.playms = (frame2.playms >>> 0);
      theFrame.fps = +frame2.fps;
      theFrame.width = (frame2.width >>> 0);
      theFrame.height = (frame2.height >>> 0);
      theFrame.format = frame2.format;
      theFrame.pixels = frame2.pixels.MemberwiseClone();
      theFrame.next = frame2.next.MemberwiseClone();
    } else {
      var framePtr = $S00().CallStatic($T00(), "op_Explicit", null, frame.MemberwiseClone()).cast(JSIL.Pointer.Of($asm00.TheoraPlay_THEORAPLAY_VideoFrame));
      theFrame = framePtr.get().MemberwiseClone();
    }
    return theFrame;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "TheoraPlay", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      TheoraPlay__ctor
    );

    $.Method({Static:true , Public:true }, "getAudioPacket", 
      new JSIL.MethodSignature($asm00.TypeRef("TheoraPlay+THEORAPLAY_AudioPacket"), [$asm01.TypeRef("System.IntPtr")]), 
      TheoraPlay_getAudioPacket
    );

    $.Method({Static:true , Public:true }, "getPixels", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      TheoraPlay_getPixels
    );

    $.Method({Static:true , Public:true }, "getSamples", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Single]), [$asm01.TypeRef("System.IntPtr"), $.Int32]), 
      TheoraPlay_getSamples
    );

    $.Method({Static:true , Public:true }, "getVideoFrame", 
      new JSIL.MethodSignature($asm00.TypeRef("TheoraPlay+THEORAPLAY_VideoFrame"), [$asm01.TypeRef("System.IntPtr")]), 
      TheoraPlay_getVideoFrame
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_availableAudio", 
      new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_availableVideo", 
      new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_decodingError", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_freeAudio", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_freeVideo", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_getAudio", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_getVideo", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_hasAudioStream", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_hasVideoStream", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_isDecoding", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_isInitialized", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")]), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_startDecodeFile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $.String, $.UInt32, 
          $asm00.TypeRef("TheoraPlay+THEORAPLAY_VideoFormat")
        ]), 
      {
        Module: "libtheoraplay.dll", 
        Parameters: [
          {
            NativeType: "LPStr"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "THEORAPLAY_stopDecode", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IntPtr")), 
      {
        Module: "libtheoraplay.dll", 
      }
    );

    $.Constant({Static:true , Public:false}, "theoraplay_libname", "libtheoraplay.dll"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum TheoraPlay+THEORAPLAY_VideoFormat */ 

JSIL.MakeEnum(
  {
    FullName: "TheoraPlay+THEORAPLAY_VideoFormat", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    THEORAPLAY_VIDFMT_YV12: 0, 
    THEORAPLAY_VIDFMT_IYUV: 1, 
    THEORAPLAY_VIDFMT_RGB: 2, 
    THEORAPLAY_VIDFMT_RGBA: 3, 
  }
);

/* struct TheoraPlay+THEORAPLAY_VideoFrame32 */ 

(function THEORAPLAY_VideoFrame32$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "TheoraPlay+THEORAPLAY_VideoFrame32", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "playms", $.UInt32); 
    $.Field({Static:false, Public:true }, "fps", $.Double); 
    $.Field({Static:false, Public:true }, "width", $.UInt32); 
    $.Field({Static:false, Public:true }, "height", $.UInt32); 
    $.Field({Static:false, Public:true }, "format", $asm00.TypeRef("TheoraPlay+THEORAPLAY_VideoFormat")); 
    $.Field({Static:false, Public:true }, "pixels", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "next", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct TheoraPlay+THEORAPLAY_VideoFrame */ 

(function THEORAPLAY_VideoFrame$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "TheoraPlay+THEORAPLAY_VideoFrame", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "playms", $.UInt32); 
    $.Field({Static:false, Public:true }, "fps", $.Double); 
    $.Field({Static:false, Public:true }, "width", $.UInt32); 
    $.Field({Static:false, Public:true }, "height", $.UInt32); 
    $.Field({Static:false, Public:true }, "format", $asm00.TypeRef("TheoraPlay+THEORAPLAY_VideoFormat")); 
    $.Field({Static:false, Public:true }, "pixels", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "next", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct TheoraPlay+THEORAPLAY_AudioPacket */ 

(function THEORAPLAY_AudioPacket$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "TheoraPlay+THEORAPLAY_AudioPacket", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "playms", $.UInt32); 
    $.Field({Static:false, Public:true }, "channels", $.Int32); 
    $.Field({Static:false, Public:true }, "freq", $.Int32); 
    $.Field({Static:false, Public:true }, "frames", $.Int32); 
    $.Field({Static:false, Public:true }, "samples", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "next", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Vorbisfile */ 

(function Vorbisfile$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Vorbisfile_OggVorbis_File)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IntPtr)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Vorbisfile_vorbis_comment)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Runtime.InteropServices.Marshal)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Vorbisfile_vorbis_info)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.Type")]))) ();
  };

  function Vorbisfile_ov_comment (/* ref */ vf, link) {
    var result = $thisType.INTERNAL_ov_comment(/* ref */ vf, link).MemberwiseClone();
    return $T03().$Cast($S00().CallStatic($T04(), "PtrToStructure", null, result.MemberwiseClone(), $T03().__Type__));
  };

  function Vorbisfile_ov_info (/* ref */ vf, link) {
    var result = $thisType.INTERNAL_ov_info(/* ref */ vf, link).MemberwiseClone();
    return $T05().$Cast($S00().CallStatic($T04(), "PtrToStructure", null, result.MemberwiseClone(), $T05().__Type__));
  };

  JSIL.MakeStaticClass("Vorbisfile", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.PInvokeMethod({Static:true , Public:false}, "INTERNAL_ov_comment", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Vorbisfile+OggVorbis_File")]), $.Int32]), 
      {
        Module: "libvorbisfile.dll", 
        EntryPoint: "ov_comment", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "INTERNAL_ov_info", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Vorbisfile+OggVorbis_File")]), $.Int32]), 
      {
        Module: "libvorbisfile.dll", 
        EntryPoint: "ov_info", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ov_clear", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Vorbisfile+OggVorbis_File")])]), 
      {
        Module: "libvorbisfile.dll", 
      }
    );

    $.Method({Static:true , Public:true }, "ov_comment", 
      new JSIL.MethodSignature($asm00.TypeRef("Vorbisfile+vorbis_comment"), [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Vorbisfile+OggVorbis_File")]), $.Int32]), 
      Vorbisfile_ov_comment
    );

    $.PInvokeMethod({Static:true , Public:true }, "ov_fopen", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Vorbisfile+OggVorbis_File")])]), 
      {
        Module: "libvorbisfile.dll", 
        Parameters: [
          {
            NativeType: "LPStr"
          }, null

        ]
      }
    );

    $.Method({Static:true , Public:true }, "ov_info", 
      new JSIL.MethodSignature($asm00.TypeRef("Vorbisfile+vorbis_info"), [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Vorbisfile+OggVorbis_File")]), $.Int32]), 
      Vorbisfile_ov_info
    );

    $.PInvokeMethod({Static:true , Public:true }, "ov_read", 
      new JSIL.MethodSignature($.Int64, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Vorbisfile+OggVorbis_File")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "libvorbisfile.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ov_time_total", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Vorbisfile+OggVorbis_File")]), $.Int32]), 
      {
        Module: "libvorbisfile.dll", 
      }
    );

    $.Constant({Static:true , Public:false}, "nativeLibName", "libvorbisfile.dll"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Vorbisfile+oggpack_buffer */ 

(function oggpack_buffer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Vorbisfile+oggpack_buffer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "endbyte", $.Int64); 
    $.Field({Static:false, Public:true }, "endbit", $.Int32); 
    $.Field({Static:false, Public:true }, "buffer", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "ptr", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "storage", $.Int64); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Vorbisfile+ogg_sync_state */ 

(function ogg_sync_state$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Vorbisfile+ogg_sync_state", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "data", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "storage", $.Int32); 
    $.Field({Static:false, Public:true }, "fill", $.Int32); 
    $.Field({Static:false, Public:true }, "returned", $.Int32); 
    $.Field({Static:false, Public:true }, "unsynced", $.Int32); 
    $.Field({Static:false, Public:true }, "headerbytes", $.Int32); 
    $.Field({Static:false, Public:true }, "bodybytes", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Vorbisfile+ogg_stream_state */ 

(function ogg_stream_state$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Vorbisfile+ogg_stream_state", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "body_data", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "body_storage", $.Int64); 
    $.Field({Static:false, Public:true }, "body_fill", $.Int64); 
    $.Field({Static:false, Public:true }, "body_returned", $.Int64); 
    $.Field({Static:false, Public:true }, "lacing_vals", $.Int32); 
    $.Field({Static:false, Public:true }, "granule_vals", $.Int64); 
    $.Field({Static:false, Public:true }, "lacing_storage", $.Int64); 
    $.Field({Static:false, Public:true }, "lacing_fill", $.Int64); 
    $.Field({Static:false, Public:true }, "lacing_packet", $.Int64); 
    $.Field({Static:false, Public:true }, "lacing_returned", $.Int64); 
    $.Field({Static:false, Public:true }, "header_fill", $.Int32); 
    $.Field({Static:false, Public:true }, "e_o_s", $.Int32); 
    $.Field({Static:false, Public:true }, "b_o_s", $.Int32); 
    $.Field({Static:false, Public:true }, "serialno", $.Int64); 
    $.Field({Static:false, Public:true }, "pageno", $.Int32); 
    $.Field({Static:false, Public:true }, "packetno", $.Int64); 
    $.Field({Static:false, Public:true }, "granulepos", $.Int64); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Vorbisfile+vorbis_dsp_state */ 

(function vorbis_dsp_state$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Vorbisfile+vorbis_dsp_state", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "analysisp", $.Int32); 
    $.Field({Static:false, Public:true }, "vi", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "pcm", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "pcmret", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "pcm_storage", $.Int32); 
    $.Field({Static:false, Public:true }, "pcm_current", $.Int32); 
    $.Field({Static:false, Public:true }, "pcm_returned", $.Int32); 
    $.Field({Static:false, Public:true }, "preextrapolate", $.Int32); 
    $.Field({Static:false, Public:true }, "eofflag", $.Int32); 
    $.Field({Static:false, Public:true }, "lW", $.Int64); 
    $.Field({Static:false, Public:true }, "W", $.Int64); 
    $.Field({Static:false, Public:true }, "nW", $.Int64); 
    $.Field({Static:false, Public:true }, "centerW", $.Int64); 
    $.Field({Static:false, Public:true }, "granulepos", $.Int64); 
    $.Field({Static:false, Public:true }, "sequence", $.Int64); 
    $.Field({Static:false, Public:true }, "glue_bits", $.Int64); 
    $.Field({Static:false, Public:true }, "time_bits", $.Int64); 
    $.Field({Static:false, Public:true }, "floor_bits", $.Int64); 
    $.Field({Static:false, Public:true }, "res_bits", $.Int64); 
    $.Field({Static:false, Public:true }, "backend_state", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Vorbisfile+vorbis_block */ 

(function vorbis_block$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Vorbisfile+vorbis_block", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "pcm", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "opb", $asm00.TypeRef("Vorbisfile+oggpack_buffer")); 
    $.Field({Static:false, Public:true }, "lW", $.Int64); 
    $.Field({Static:false, Public:true }, "W", $.Int64); 
    $.Field({Static:false, Public:true }, "nW", $.Int64); 
    $.Field({Static:false, Public:true }, "pcmend", $.Int32); 
    $.Field({Static:false, Public:true }, "mode", $.Int32); 
    $.Field({Static:false, Public:true }, "eofflag", $.Int32); 
    $.Field({Static:false, Public:true }, "granulepos", $.Int64); 
    $.Field({Static:false, Public:true }, "sequence", $.Int64); 
    $.Field({Static:false, Public:true }, "vd", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "localstore", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "localtop", $.Int64); 
    $.Field({Static:false, Public:true }, "localalloc", $.Int64); 
    $.Field({Static:false, Public:true }, "totaluse", $.Int64); 
    $.Field({Static:false, Public:true }, "reap", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "glue_bits", $.Int64); 
    $.Field({Static:false, Public:true }, "time_bits", $.Int64); 
    $.Field({Static:false, Public:true }, "floor_bits", $.Int64); 
    $.Field({Static:false, Public:true }, "res_bits", $.Int64); 
    $.Field({Static:false, Public:true }, "blockinternal", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Vorbisfile+vorbis_info */ 

(function vorbis_info$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Vorbisfile+vorbis_info", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "version", $.Int32); 
    $.Field({Static:false, Public:true }, "channels", $.Int32); 
    $.Field({Static:false, Public:true }, "rate", $.Int32); 
    $.Field({Static:false, Public:true }, "bitrate_upper", $.Int64); 
    $.Field({Static:false, Public:true }, "bitrate_nominal", $.Int64); 
    $.Field({Static:false, Public:true }, "bitrate_lower", $.Int64); 
    $.Field({Static:false, Public:true }, "bitrate_window", $.Int64); 
    $.Field({Static:false, Public:true }, "codec_setup", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Vorbisfile+vorbis_comment */ 

(function vorbis_comment$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Vorbisfile+vorbis_comment", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "user_comments", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "comment_lengths", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "comments", $.Int32); 
    $.Field({Static:false, Public:true }, "vendor", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Vorbisfile+ov_callbacks */ 

(function ov_callbacks$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Vorbisfile+ov_callbacks", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "read_func", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "seek_func", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "close_func", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "tell_func", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Vorbisfile+OggVorbis_File */ 

(function OggVorbis_File$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Vorbisfile+OggVorbis_File", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "datasource", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "seekable", $.Int32); 
    $.Field({Static:false, Public:true }, "offset", $.Int64); 
    $.Field({Static:false, Public:true }, "end", $.Int64); 
    $.Field({Static:false, Public:true }, "oy", $asm00.TypeRef("Vorbisfile+ogg_sync_state")); 
    $.Field({Static:false, Public:true }, "links", $.Int32); 
    $.Field({Static:false, Public:true }, "offsets", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "dataoffsets", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "serialnos", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "pcmlengths", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "vi", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "vc", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "pcm_offset", $.Int64); 
    $.Field({Static:false, Public:true }, "ready_state", $.Int32); 
    $.Field({Static:false, Public:true }, "current_serialno", $.Int64); 
    $.Field({Static:false, Public:true }, "current_link", $.Int32); 
    $.Field({Static:false, Public:true }, "bittrack", $.Int64); 
    $.Field({Static:false, Public:true }, "samptrack", $.Int64); 
    $.Field({Static:false, Public:true }, "os", $asm00.TypeRef("Vorbisfile+ogg_stream_state")); 
    $.Field({Static:false, Public:true }, "vd", $asm00.TypeRef("Vorbisfile+vorbis_dsp_state")); 
    $.Field({Static:false, Public:true }, "vb", $asm00.TypeRef("Vorbisfile+vorbis_block")); 
    $.Field({Static:false, Public:true }, "callbacks", $asm00.TypeRef("Vorbisfile+ov_callbacks")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

