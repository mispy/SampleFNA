/* Generated by JSIL v0.8.1 build 270. See http://jsil.org/ for more information. */ 
var $asm02 = JSIL.DeclareAssembly("Platformer2D, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm02, $asm02.TypeRef("Platformer2D.Program"), "Main", JSIL.MethodSignature.Void);

JSIL.DeclareNamespace("Platformer2D");
/* class Platformer2D.Accelerometer */ 

(function Accelerometer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Platformer2D.AccelerometerState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function Accelerometer_GetState () {
    if (!$thisType.isInitialized) {
      throw $S00().Construct("You must Initialize before you can call GetState");
    }
    return new ($T01())(new ($T02())(), $thisType.isActive);
  };

  function Accelerometer_Initialize () {
    if ($thisType.isInitialized) {
      throw $S00().Construct("Initialize can only be called once");
    }
    $thisType.isInitialized = true;
  };

  JSIL.MakeStaticClass("Platformer2D.Accelerometer", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "GetState", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Platformer2D.AccelerometerState")), 
      Accelerometer_GetState
    );

    $.Method({Static:true , Public:true }, "Initialize", 
      JSIL.MethodSignature.Void, 
      Accelerometer_Initialize
    );

    $.Field({Static:true , Public:false}, "isInitialized", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "isActive", $.Boolean, false); 
    function Accelerometer__cctor () {
      $thisType.isInitialized = false;
      $thisType.isActive = false;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Accelerometer__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Platformer2D.AccelerometerState */ 

(function AccelerometerState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };

  function AccelerometerState__ctor (acceleration, isActive) {
    JSIL.CopyMembers(new $thisType(), this);
    (this.AccelerometerState$Acceleration$value = acceleration.MemberwiseClone());
    this.AccelerometerState$IsActive$value = isActive;
  };

  function AccelerometerState_get_Acceleration () {
    return this.AccelerometerState$Acceleration$value;
  };

  function AccelerometerState_get_IsActive () {
    return this.AccelerometerState$IsActive$value;
  };

  function AccelerometerState_set_Acceleration (value) {
    this.AccelerometerState$Acceleration$value = value.MemberwiseClone();
  };

  function AccelerometerState_set_IsActive (value) {
    this.AccelerometerState$IsActive$value = value;
  };

  function AccelerometerState_toString () {
    return $T02().Format("Acceleration: {0}, IsActive: {1}", this.AccelerometerState$Acceleration$value, this.AccelerometerState$IsActive$value);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Platformer2D.AccelerometerState", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Boolean]), 
      AccelerometerState__ctor
    );

    $.Method({Static:false, Public:true }, "get_Acceleration", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AccelerometerState_get_Acceleration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsActive", 
      JSIL.MethodSignature.Return($.Boolean), 
      AccelerometerState_get_IsActive
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Acceleration", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector3")), 
      AccelerometerState_set_Acceleration
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsActive", 
      JSIL.MethodSignature.Action($.Boolean), 
      AccelerometerState_set_IsActive
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      AccelerometerState_toString
    );

    $.Field({Static:false, Public:false}, "AccelerometerState$Acceleration$value", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "AccelerometerState$IsActive$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Acceleration", $asm00.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "IsActive", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Platformer2D.Animation */ 

(function Animation$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function Animation__ctor (texture, frameTime, isLooping) {
    this.texture = texture;
    this.frameTime = +frameTime;
    this.isLooping = isLooping;
  };

  function Animation_get_FrameCount () {
    return ((((this.get_Texture()).get_Width() | 0) / (this.get_FrameWidth() | 0)) | 0);
  };

  function Animation_get_FrameHeight () {
    return (this.get_Texture()).get_Height();
  };

  function Animation_get_FrameTime () {
    return this.frameTime;
  };

  function Animation_get_FrameWidth () {
    return (this.get_Texture()).get_Height();
  };

  function Animation_get_IsLooping () {
    return this.isLooping;
  };

  function Animation_get_Texture () {
    return this.texture;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Platformer2D.Animation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $.Single, 
          $.Boolean
        ]), 
      Animation__ctor
    );

    $.Method({Static:false, Public:true }, "get_FrameCount", 
      JSIL.MethodSignature.Return($.Int32), 
      Animation_get_FrameCount
    );

    $.Method({Static:false, Public:true }, "get_FrameHeight", 
      JSIL.MethodSignature.Return($.Int32), 
      Animation_get_FrameHeight
    );

    $.Method({Static:false, Public:true }, "get_FrameTime", 
      JSIL.MethodSignature.Return($.Single), 
      Animation_get_FrameTime
    );

    $.Method({Static:false, Public:true }, "get_FrameWidth", 
      JSIL.MethodSignature.Return($.Int32), 
      Animation_get_FrameWidth
    );

    $.Method({Static:false, Public:true }, "get_IsLooping", 
      JSIL.MethodSignature.Return($.Boolean), 
      Animation_get_IsLooping
    );

    $.Method({Static:false, Public:true }, "get_Texture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")), 
      Animation_get_Texture
    );

    $.Field({Static:false, Public:false}, "texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "frameTime", $.Single); 
    $.Field({Static:false, Public:false}, "isLooping", $.Boolean); 
    $.Property({Static:false, Public:true }, "Texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Property({Static:false, Public:true }, "FrameTime", $.Single);

    $.Property({Static:false, Public:true }, "IsLooping", $.Boolean);

    $.Property({Static:false, Public:true }, "FrameCount", $.Int32);

    $.Property({Static:false, Public:true }, "FrameWidth", $.Int32);

    $.Property({Static:false, Public:true }, "FrameHeight", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Platformer2D.AnimationPlayer */ 

(function AnimationPlayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Platformer2D.Animation)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
        $asm01.TypeRef("System.Single"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $asm01.TypeRef("System.Single"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };

  function AnimationPlayer_Draw (gameTime, spriteBatch, position, spriteEffects) {
    if (this.get_Animation() === null) {
      throw $S00().Construct("No animation is currently playing.");
    }
    this.time += Math.fround((gameTime.GameTime$ElapsedGameTime$value).get_TotalSeconds());

    while (+this.time > +(this.get_Animation()).get_FrameTime()) {
      this.time -= +(this.get_Animation()).get_FrameTime();
      if ((this.get_Animation()).get_IsLooping()) {
        this.frameIndex = (((((this.frameIndex | 0) + 1) | 0) % ((this.get_Animation()).get_FrameCount() | 0)) | 0);
      } else {
        this.frameIndex = ($T07().Min((((this.frameIndex | 0) + 1) | 0), ((((this.get_Animation()).get_FrameCount() | 0) - 1) | 0)) | 0);
      }
    }
    var source = new ($T08())(Math.imul(this.get_FrameIndex(), ((this.get_Animation()).get_Texture()).get_Height()), 0, ((this.get_Animation()).get_Texture()).get_Height(), ((this.get_Animation()).get_Texture()).get_Height());
    $S01().CallVirtual("Draw", null, spriteBatch, 
      (this.get_Animation()).get_Texture(), 
      position.MemberwiseClone(), 
      source.MemberwiseClone(), 
      $T0A().Color$White$value.MemberwiseClone(), 
      0, 
      this.get_Origin().MemberwiseClone(), 
      1, 
      spriteEffects, 
      0
    );
  };

  function AnimationPlayer_get_Animation () {
    return this.animation;
  };

  function AnimationPlayer_get_FrameIndex () {
    return this.frameIndex;
  };

  function AnimationPlayer_get_Origin () {
    return $S02().Construct(+((+((this.get_Animation()).get_FrameWidth()) / 2)), +((this.get_Animation()).get_FrameHeight()));
  };

  function AnimationPlayer_PlayAnimation (animation) {
    if (this.get_Animation() !== animation) {
      this.animation = animation;
      this.frameIndex = 0;
      this.time = 0;
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Platformer2D.AnimationPlayer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects")
        ]), 
      AnimationPlayer_Draw
    );

    $.Method({Static:false, Public:true }, "get_Animation", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Platformer2D.Animation")), 
      AnimationPlayer_get_Animation
    );

    $.Method({Static:false, Public:true }, "get_FrameIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      AnimationPlayer_get_FrameIndex
    );

    $.Method({Static:false, Public:true }, "get_Origin", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      AnimationPlayer_get_Origin
    );

    $.Method({Static:false, Public:true }, "PlayAnimation", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Platformer2D.Animation")), 
      AnimationPlayer_PlayAnimation
    );

    $.Field({Static:false, Public:false}, "animation", $asm02.TypeRef("Platformer2D.Animation")); 
    $.Field({Static:false, Public:false}, "frameIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "time", $.Single); 
    $.Property({Static:false, Public:true }, "Animation", $asm02.TypeRef("Platformer2D.Animation"));

    $.Property({Static:false, Public:true }, "FrameIndex", $.Int32);

    $.Property({Static:false, Public:true }, "Origin", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Platformer2D.Circle */ 

(function Circle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };

  function Circle__ctor (position, radius) {
    this.Center = position.MemberwiseClone();
    this.Radius = +radius;
  };

  function Circle_Intersects (rectangle) {
    var v = $S00().Construct($S01().CallStatic($T03(), "Clamp", null, 
        this.Center.X, 
        +(rectangle.get_Left()), 
        +(rectangle.get_Right())
      ), $S01().CallStatic($T03(), "Clamp", null, 
        this.Center.Y, 
        +(rectangle.get_Top()), 
        +(rectangle.get_Bottom())
      ));
    var distanceSquared = +($T00().op_Subtraction(this.Center.MemberwiseClone(), v)).LengthSquared();
    return ((distanceSquared > 0) && (distanceSquared < (+this.Radius * +this.Radius)));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Platformer2D.Circle", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Single]), 
      Circle__ctor
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Circle_Intersects
    );

    $.Field({Static:false, Public:true }, "Center", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:true }, "Radius", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Platformer2D.FaceDirection */ 

JSIL.MakeEnum(
  {
    FullName: "Platformer2D.FaceDirection", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Left: -1, 
    Right: 1, 
  }
);

/* class Platformer2D.Enemy */ 

(function Enemy$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Platformer2D.Level)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Platformer2D.FaceDirection)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Platformer2D.Player)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.Platformer2D.AnimationPlayer)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.Platformer2D.Animation)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.Platformer2D.TileCollision)) ();
  };

  function Enemy__ctor (level, position, spriteSet) {
    this.direction = $T03().Left;
    this.level = level;
    this.position = position.MemberwiseClone();
    this.LoadContent(spriteSet);
  };

  function Enemy_Draw (gameTime, spriteBatch) {
    if (!(!(!((this.get_Level()).get_Player()).get_IsAlive() || 
          (this.get_Level()).get_ReachedExit() || 
          $T07().op_Equality((this.get_Level()).get_TimeRemaining().MemberwiseClone(), $T07().Zero.MemberwiseClone())) && (+this.waitTime <= 0))) {
      (this.sprite).PlayAnimation(this.idleAnimation);
    } else {
      (this.sprite).PlayAnimation(this.runAnimation);
    }
    (this.sprite).Draw(gameTime, spriteBatch, this.get_Position().MemberwiseClone(), (
        (this.direction > $T03().$Cast(0))
           ? $T09().FlipHorizontally
           : $T09().None)
    );
  };

  function Enemy_get_BoundingRectangle () {
    var left = ((((Math.round((+this.get_Position().X - +(this.sprite).get_Origin().X))) | 0) + (this.localBounds.X | 0)) | 0);
    var top = ((((Math.round((+this.get_Position().Y - +(this.sprite).get_Origin().Y))) | 0) + (this.localBounds.Y | 0)) | 0);
    return new ($T0D())(left, top, this.localBounds.Width, this.localBounds.Height);
  };

  function Enemy_get_Level () {
    return this.level;
  };

  function Enemy_get_Position () {
    return this.position;
  };

  function Enemy_LoadContent (spriteSet) {
    spriteSet = (("Sprites/" + spriteSet + "/"));
    this.runAnimation = new ($T0E())(((this.get_Level()).get_Content()).Load$b1($T0F())(JSIL.ConcatString(spriteSet, "Run")), 0.1, true);
    this.idleAnimation = new ($T0E())(((this.get_Level()).get_Content()).Load$b1($T0F())(JSIL.ConcatString(spriteSet, "Idle")), 0.15, true);
    (this.sprite).PlayAnimation(this.idleAnimation);
    var width = ((+((this.idleAnimation).get_FrameWidth()) * 0.35) | 0);
    var left = ((((((this.idleAnimation).get_FrameWidth() | 0) - width) | 0) / 2) | 0);
    var height = ((+((this.idleAnimation).get_FrameWidth()) * 0.7) | 0);
    var top = ((((this.idleAnimation).get_FrameHeight() | 0) - height) | 0);
    this.localBounds = new ($T0D())(left, top, width, height);
  };

  function Enemy_Update (gameTime) {
    var velocity = new ($T01())();
    var elapsed = Math.fround((gameTime.GameTime$ElapsedGameTime$value).get_TotalSeconds());
    var posX = +this.get_Position().X + +((((this.localBounds.Width | 0) / 2) | 0) * ((this.direction).valueOf() | 0));
    var tileX = (($asm02.Platformer2D.FaceDirection.$Cast((($T03().$Cast(Math.floor(+((posX / 40))))).valueOf() | 0) - this.direction)).valueOf() | 0);
    var tileY = ((Math.floor(+((+this.get_Position().Y / 32)))) | 0);
    if (+this.waitTime > 0) {
      this.waitTime = +$T0B().Max(0, +this.waitTime - Math.fround((gameTime.GameTime$ElapsedGameTime$value).get_TotalSeconds()));
      if (+this.waitTime <= 0) {
        this.direction = $T03().$Cast(-(this.direction).valueOf());
      }
    } else if (!(((this.get_Level()).GetCollision(($asm02.Platformer2D.FaceDirection.$Cast(tileX + this.direction)).valueOf(), ((tileY - 1) | 0)) !== $T12().Impassable) && ((this.get_Level()).GetCollision(($asm02.Platformer2D.FaceDirection.$Cast(tileX + this.direction)).valueOf(), tileY) !== $T12().Passable))) {
      this.waitTime = 0.5;
    } else {
      $T01().prototype._ctor.call(velocity, (+(this.direction).valueOf() * 64) * elapsed, 0);
      this.position = $T01().op_Addition(this.position.MemberwiseClone(), velocity);
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Platformer2D.Enemy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Platformer2D.Level"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.String
        ]), 
      Enemy__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")]), 
      Enemy_Draw
    );

    $.Method({Static:false, Public:true }, "get_BoundingRectangle", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Enemy_get_BoundingRectangle
    );

    $.Method({Static:false, Public:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Platformer2D.Level")), 
      Enemy_get_Level
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Enemy_get_Position
    );

    $.Method({Static:false, Public:true }, "LoadContent", 
      JSIL.MethodSignature.Action($.String), 
      Enemy_LoadContent
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Enemy_Update
    );

    $.Constant({Static:true , Public:false}, "MaxWaitTime", 0.5); 
    $.Constant({Static:true , Public:false}, "MoveSpeed", 64); 
    $.Field({Static:false, Public:false}, "level", $asm02.TypeRef("Platformer2D.Level")); 
    $.Field({Static:false, Public:false}, "position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "localBounds", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:false, Public:false}, "runAnimation", $asm02.TypeRef("Platformer2D.Animation")); 
    $.Field({Static:false, Public:false}, "idleAnimation", $asm02.TypeRef("Platformer2D.Animation")); 
    $.Field({Static:false, Public:false}, "sprite", $asm02.TypeRef("Platformer2D.AnimationPlayer")); 
    $.Field({Static:false, Public:false}, "direction", $asm02.TypeRef("Platformer2D.FaceDirection")); 
    $.Field({Static:false, Public:false}, "waitTime", $.Single); 
    $.Property({Static:false, Public:true }, "Level", $asm02.TypeRef("Platformer2D.Level"));

    $.Property({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "BoundingRectangle", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Platformer2D.Gem */ 

(function Gem$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Platformer2D.Level)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Platformer2D.Circle)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.Platformer2D.Player)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
        $asm01.TypeRef("System.Single"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $asm01.TypeRef("System.Single"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };

  function Gem__ctor (level, position) {
    this.Color = $T02().Color$Yellow$value.MemberwiseClone();
    this.level = level;
    this.basePosition = position.MemberwiseClone();
    this.LoadContent();
  };

  function Gem_Draw (gameTime, spriteBatch) {
    $S00().CallVirtual("Draw", null, spriteBatch, 
      this.texture, 
      this.get_Position().MemberwiseClone(), 
      null, 
      this.Color.MemberwiseClone(), 
      0, 
      this.origin.MemberwiseClone(), 
      1, 
      $T05().None, 
      0
    );
  };

  function Gem_get_BoundingCircle () {
    return new ($T06())(this.get_Position().MemberwiseClone(), 13.333333);
  };

  function Gem_get_Level () {
    return this.level;
  };

  function Gem_get_Position () {
    return $T01().op_Addition(this.basePosition.MemberwiseClone(), $S01().Construct(0, this.bounce));
  };

  function Gem_LoadContent () {
    this.texture = ((this.get_Level()).get_Content()).Load$b1($T07())("Sprites/Gem");
    this.origin = $S01().Construct(+((+((this.texture).get_Width()) / 2)), +((+((this.texture).get_Height()) / 2)));
    this.collectedSound = ((this.get_Level()).get_Content()).Load$b1($T09())("Sounds/GemCollected");
  };

  function Gem_OnCollected (collectedBy) {
    (this.collectedSound).Play();
  };

  function Gem_Update (gameTime) {
    var t = (+(gameTime.GameTime$TotalGameTime$value).get_TotalSeconds() * 3) + (+this.get_Position().X * -0.75);
    this.bounce = (Math.fround(Math.sin(t)) * 0.18) * +((this.texture).get_Height());
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Platformer2D.Gem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Platformer2D.Level"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Gem__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")]), 
      Gem_Draw
    );

    $.Method({Static:false, Public:true }, "get_BoundingCircle", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Platformer2D.Circle")), 
      Gem_get_BoundingCircle
    );

    $.Method({Static:false, Public:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Platformer2D.Level")), 
      Gem_get_Level
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Gem_get_Position
    );

    $.Method({Static:false, Public:true }, "LoadContent", 
      JSIL.MethodSignature.Void, 
      Gem_LoadContent
    );

    $.Method({Static:false, Public:true }, "OnCollected", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Platformer2D.Player")), 
      Gem_OnCollected
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Gem_Update
    );

    $.Constant({Static:true , Public:true }, "PointValue", 30); 
    $.Field({Static:false, Public:false}, "texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "origin", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "collectedSound", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Color", $asm00.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false}, "basePosition", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "bounce", $.Single); 
    $.Field({Static:false, Public:false}, "level", $asm02.TypeRef("Platformer2D.Level")); 
    $.Property({Static:false, Public:true }, "Level", $asm02.TypeRef("Platformer2D.Level"));

    $.Property({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "BoundingCircle", $asm02.TypeRef("Platformer2D.Circle"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Platformer2D.Level */ 

(function Level$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Point)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.IServiceProvider)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm02.Platformer2D.Gem))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm02.Platformer2D.Enemy))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Random)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Xna.Framework.Graphics.Texture2D))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.Platformer2D.Gem)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm02.Platformer2D.Player)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm02.Platformer2D.Enemy)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize(System.Array.Of($asm02.Platformer2D.Tile))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm02.Platformer2D.Tile)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm02.Platformer2D.TileCollision)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm02.Platformer2D.RectangleExtensions)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.String))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.IO.StreamReader)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.IO.TextReader)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm02.Platformer2D.AccelerometerState)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.DisplayOrientation)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm02.Platformer2D.Circle)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Platformer2D.Gem")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Platformer2D.Enemy")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Random"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), [$asm01.TypeRef("System.IServiceProvider"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Color")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.String")]), null))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.IO.StreamReader"), [$asm01.TypeRef("System.IO.Stream")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm00.TypeRef("Microsoft.Xna.Framework.Point")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function Level__ctor (serviceProvider, fileStream, levelIndex) {
    this.gems = $S00().Construct();
    this.enemies = $S01().Construct();
    this.exit = $thisType.InvalidPosition.MemberwiseClone();
    this.random = $S02().Construct(354668);
    this.content = $S03().Construct(serviceProvider, "Content");
    this.timeRemaining = $T08().FromMinutes(2).MemberwiseClone();
    this.LoadTiles(fileStream);
    this.layers = JSIL.Array.New($T09(), 3);

    for (var i = 0; i < (this.layers.length | 0); i = ((i + 1) | 0)) {
      this.layers[i] = (this.get_Content()).Load$b1($T09())(JSIL.ConcatString.apply(null, JSIL.Array.New($T0C(), ["Backgrounds/Layer", i, "_", levelIndex])));
    }
    this.exitReachedSound = (this.get_Content()).Load$b1($T0E())("Sounds/ExitReached");
  };

  function Level_Dispose () {
    (this.get_Content()).Unload();
  };

  function Level_Draw (gameTime, spriteBatch) {
    var $temp00, $temp01;

    for (var i = 0; i <= 2; i = ((i + 1) | 0)) {
      $S04().CallVirtual("Draw", null, spriteBatch, this.layers[i], $T11().get_Zero().MemberwiseClone(), $T12().Color$White$value.MemberwiseClone());
    }
    this.DrawTiles(spriteBatch);

    for (var a$0 = this.gems._items, i$0 = 0, l$0 = (this.gems._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var gem = a$0[i$0];
      gem.Draw(gameTime, spriteBatch);
    }
    (this.get_Player()).Draw(gameTime, spriteBatch);

    for (var a$1 = this.enemies._items, i$1 = 0, l$1 = (this.enemies._size | 0); i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      var enemy = a$1[i$1];
      enemy.Draw(gameTime, spriteBatch);
    }

    for (i = 3; i < (this.layers.length | 0); i = ((i + 1) | 0)) {
      $S04().CallVirtual("Draw", null, spriteBatch, this.layers[i], $T11().get_Zero().MemberwiseClone(), $T12().Color$White$value.MemberwiseClone());
    }
  };

  function Level_DrawTiles (spriteBatch) {
    var $temp00;
    $temp00 = new ($T11())();

    for (var y = 0; y < (this.get_Height() | 0); y = ((y + 1) | 0)) {

      for (var x = 0; x < (this.get_Width() | 0); x = ((x + 1) | 0)) {
        var texture = (this.tiles).Get(x, y).Texture;
        if (texture !== null) {
          var position = $S05().CallStatic($T11(), "op_Multiply", null, ($temp00._ctor(+x, +y), 
              $temp00), $T17().Size).MemberwiseClone();
          $S04().CallVirtual("Draw", null, spriteBatch, texture, position.MemberwiseClone(), $T12().Color$White$value.MemberwiseClone());
        }
      }
    }
  };

  function Level_get_Content () {
    return this.content;
  };

  function Level_get_Height () {
    return this.tiles.length1;
  };

  function Level_get_Player () {
    return this.player;
  };

  function Level_get_ReachedExit () {
    return this.reachedExit;
  };

  function Level_get_Score () {
    return this.score;
  };

  function Level_get_TimeRemaining () {
    return this.timeRemaining;
  };

  function Level_get_Width () {
    return this.tiles.length0;
  };

  function Level_GetBounds (x, y) {
    return new ($T18())(Math.imul(x, 40), Math.imul(y, 32), 40, 32);
  };

  function Level_GetCollision (x, y) {
    if (!(((x | 0) >= 0) && ((x | 0) < (this.get_Width() | 0)))) {
      var result = $T19().Impassable;
    } else if (!(((y | 0) >= 0) && ((y | 0) < (this.get_Height() | 0)))) {
      result = $T19().Passable;
    } else {
      result = (this.tiles).Get(x, y).Collision;
    }
    return result;
  };

  function Level_LoadEnemyTile (x, y, spriteSet) {
    var position = $T1A().GetBottomCenter(this.GetBounds(x, y).MemberwiseClone());
    (this.enemies).Add(new ($T15())(this, position.MemberwiseClone(), spriteSet));
    return new ($T17())(null, $T19().Passable);
  };

  function Level_LoadExitTile (x, y) {
    if ($T00().op_Inequality(this.exit, $thisType.InvalidPosition)) {
      throw $S06().Construct("A level may only have one exit.");
    }
    this.exit = (this.GetBounds(x, y)).get_Center().MemberwiseClone();
    return this.LoadTile("Exit", $T19().Passable);
  };

  function Level_LoadGemTile (x, y) {
    var position = (this.GetBounds(x, y)).get_Center().MemberwiseClone();
    (this.gems).Add(new ($T13())(this, $S07().Construct(+(position.X), +(position.Y))));
    return new ($T17())(null, $T19().Passable);
  };

  function Level_LoadStartTile (x, y) {
    if (this.get_Player() !== null) {
      throw $S06().Construct("A level may only have one starting point.");
    }
    this.start = $T1A().GetBottomCenter(this.GetBounds(x, y).MemberwiseClone());
    this.player = new ($T14())(this, this.start.MemberwiseClone());
    return new ($T17())(null, $T19().Passable);
  };

  function Level_LoadTile$00 (tileType, x, y) {
    if ((tileType.charCodeAt(0) | 0) <= ((":").charCodeAt(0) | 0)) {
      if ((tileType.charCodeAt(0) | 0) === (("#").charCodeAt(0) | 0)) {
        var result = this.LoadVarietyTile("BlockA", 7, $T19().Impassable);
        return result;
      }
      switch (tileType) {
        case "-": 
          result = this.LoadTile("Platform", $T19().Platform);
          return result;

        case ".": 
          result = new ($T17())(null, $T19().Passable);
          return result;

        case "/": 
        case "0": 
          break;

        case "1": 
          result = this.LoadStartTile(x, y);
          return result;

        default: 
          if ((tileType.charCodeAt(0) | 0) === ((":").charCodeAt(0) | 0)) {
            result = this.LoadVarietyTile("BlockB", 2, $T19().Passable);
            return result;
          }
          break;

      }
    } else {
      switch (tileType) {
        case "A": 
          result = this.LoadEnemyTile(x, y, "MonsterA");
          return result;

        case "B": 
          result = this.LoadEnemyTile(x, y, "MonsterB");
          return result;

        case "C": 
          result = this.LoadEnemyTile(x, y, "MonsterC");
          return result;

        case "D": 
          result = this.LoadEnemyTile(x, y, "MonsterD");
          return result;

        case "E": 
        case "F": 
          break;

        case "G": 
          result = this.LoadGemTile(x, y);
          return result;

        default: 
          if ((tileType.charCodeAt(0) | 0) === (("X").charCodeAt(0) | 0)) {
            result = this.LoadExitTile(x, y);
            return result;
          }
          if ((tileType.charCodeAt(0) | 0) === (("~").charCodeAt(0) | 0)) {
            result = this.LoadVarietyTile("BlockB", 2, $T19().Platform);
            return result;
          }
          break;

      }
    }
    throw $S06().Construct($T0B().Format("Unsupported tile type character '{0}' at position {1}, {2}.", tileType, x, y));
  };

  function Level_LoadTile$01 (name, collision) {
    return new ($T17())((this.get_Content()).Load$b1($T09())(JSIL.ConcatString("Tiles/", name)), collision);
  };

  function Level_LoadTiles (fileStream) {
    var lines = $S08().Construct();
    var reader = $S09().Construct(fileStream);
    try {
      var line = reader.ReadLine();
      var width = (line.length | 0);

      while (line !== null) {
        lines.Add(line);
        if ((line.length | 0) !== width) {
          throw $S0A().Construct($T0B().Format("The length of line {0} is different from all preceeding lines.", lines.get_Count()));
        }
        line = reader.ReadLine();
      }
    } finally {
      if (reader !== null) {
        $IM00().Call(reader, null);
      }
    }
    this.tiles = JSIL.MultidimensionalArray.New($T17(), width, lines.get_Count());

    for (var y = 0; y < (this.get_Height() | 0); y = ((y + 1) | 0)) {

      for (var x = 0; x < (this.get_Width() | 0); x = ((x + 1) | 0)) {
        var tileType = (lines.get_Item(y)[x]);
        ((this.tiles).GetReference(x, y)).set(this.LoadTile(tileType, x, y).MemberwiseClone());
      }
    }
    if (this.get_Player() === null) {
      throw $S06().Construct("A level must have a starting point.");
    }
    if ($T00().op_Equality(this.exit, $thisType.InvalidPosition)) {
      throw $S06().Construct("A level must have an exit.");
    }
  };

  function Level_LoadVarietyTile (baseName, variationCount, collision) {
    var index = ((this.random).Next(variationCount) | 0);
    return this.LoadTile(JSIL.ConcatString(baseName, index), collision);
  };

  function Level_OnExitReached () {
    (this.get_Player()).OnReachedExit();
    (this.exitReachedSound).Play();
    this.reachedExit = true;
  };

  function Level_OnGemCollected (gem, collectedBy) {
    this.score = (((this.score | 0) + 30) | 0);
    gem.OnCollected(collectedBy);
  };

  function Level_OnPlayerKilled (killedBy) {
    (this.get_Player()).OnKilled(killedBy);
  };

  function Level_StartNewLife () {
    (this.get_Player()).Reset(this.start.MemberwiseClone());
  };

  function Level_Update (gameTime, keyboardState, gamePadState, accelState, orientation) {
    if (!((this.get_Player()).get_IsAlive() && !$T08().op_Equality(this.get_TimeRemaining().MemberwiseClone(), $T08().Zero.MemberwiseClone()))) {
      (this.get_Player()).ApplyPhysics(gameTime);
    } else if (this.get_ReachedExit()) {
      var seconds = ((Math.round((+(gameTime.GameTime$ElapsedGameTime$value).get_TotalSeconds() * 100))) | 0);
      seconds = ($T26().Min(seconds, ((Math.ceil((this.get_TimeRemaining()).get_TotalSeconds())) | 0)) | 0);
      this.timeRemaining = $T08().op_Subtraction(this.timeRemaining, $T08().FromSeconds(+seconds)).MemberwiseClone();
      this.score = (((this.score | 0) + Math.imul(seconds, 5)) | 0);
    } else {
      this.timeRemaining = $T08().op_Subtraction(this.timeRemaining, gameTime.GameTime$ElapsedGameTime$value).MemberwiseClone();
      (this.get_Player()).Update(
        gameTime, 
        keyboardState.MemberwiseClone(), 
        gamePadState.MemberwiseClone(), 
        accelState.MemberwiseClone(), 
        orientation
      );
      this.UpdateGems(gameTime);
      if ((((this.get_Player()).get_BoundingRectangle()).get_Top() | 0) >= Math.imul(this.get_Height(), 32)) {
        this.OnPlayerKilled(null);
      }
      this.UpdateEnemies(gameTime);
      if (!(!(this.get_Player()).get_IsAlive() || 
          !(this.get_Player()).get_IsOnGround() || !$S0B().CallVirtual("Contains", null, (this.get_Player()).get_BoundingRectangle(), this.exit))) {
        this.OnExitReached();
      }
    }
    if ($T08().op_LessThan(this.timeRemaining.MemberwiseClone(), $T08().Zero.MemberwiseClone())) {
      this.timeRemaining = $T08().Zero.MemberwiseClone();
    }
  };

  function Level_UpdateEnemies (gameTime) {
    var $temp00;

    for (var a$0 = this.enemies._items, i$0 = 0, l$0 = (this.enemies._size | 0); i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var enemy = a$0[i$0];
      enemy.Update(gameTime);
      if ((enemy.get_BoundingRectangle()).Intersects((this.get_Player()).get_BoundingRectangle())) {
        this.OnPlayerKilled(enemy);
      }
    }
  };

  function Level_UpdateGems (gameTime) {
    var $temp00;

    for (var i = 0; i < ((this.gems).get_Count() | 0); i = ((i + 1) | 0)) {
      var gem = (this.gems).get_Item(i);
      gem.Update(gameTime);
      if ((gem.get_BoundingCircle().MemberwiseClone()).Intersects((this.get_Player()).get_BoundingRectangle())) {
        (this.gems).RemoveAt(($temp00 = i, 
            i = ((i - 1) | 0), 
            $temp00));
        this.OnGemCollected(gem, this.get_Player());
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Platformer2D.Level", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IServiceProvider"), $asm01.TypeRef("System.IO.Stream"), 
          $.Int32
        ]), 
      Level__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Level_Dispose
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")]), 
      Level_Draw
    );

    $.Method({Static:false, Public:false}, "DrawTiles", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      Level_DrawTiles
    );

    $.Method({Static:false, Public:true }, "get_Content", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")), 
      Level_get_Content
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      JSIL.MethodSignature.Return($.Int32), 
      Level_get_Height
    );

    $.Method({Static:false, Public:true }, "get_Player", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Platformer2D.Player")), 
      Level_get_Player
    );

    $.Method({Static:false, Public:true }, "get_ReachedExit", 
      JSIL.MethodSignature.Return($.Boolean), 
      Level_get_ReachedExit
    );

    $.Method({Static:false, Public:true }, "get_Score", 
      JSIL.MethodSignature.Return($.Int32), 
      Level_get_Score
    );

    $.Method({Static:false, Public:true }, "get_TimeRemaining", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.TimeSpan")), 
      Level_get_TimeRemaining
    );

    $.Method({Static:false, Public:true }, "get_Width", 
      JSIL.MethodSignature.Return($.Int32), 
      Level_get_Width
    );

    $.Method({Static:false, Public:true }, "GetBounds", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"), [$.Int32, $.Int32]), 
      Level_GetBounds
    );

    $.Method({Static:false, Public:true }, "GetCollision", 
      new JSIL.MethodSignature($asm02.TypeRef("Platformer2D.TileCollision"), [$.Int32, $.Int32]), 
      Level_GetCollision
    );

    $.Method({Static:false, Public:false}, "LoadEnemyTile", 
      new JSIL.MethodSignature($asm02.TypeRef("Platformer2D.Tile"), [
          $.Int32, $.Int32, 
          $.String
        ]), 
      Level_LoadEnemyTile
    );

    $.Method({Static:false, Public:false}, "LoadExitTile", 
      new JSIL.MethodSignature($asm02.TypeRef("Platformer2D.Tile"), [$.Int32, $.Int32]), 
      Level_LoadExitTile
    );

    $.Method({Static:false, Public:false}, "LoadGemTile", 
      new JSIL.MethodSignature($asm02.TypeRef("Platformer2D.Tile"), [$.Int32, $.Int32]), 
      Level_LoadGemTile
    );

    $.Method({Static:false, Public:false}, "LoadStartTile", 
      new JSIL.MethodSignature($asm02.TypeRef("Platformer2D.Tile"), [$.Int32, $.Int32]), 
      Level_LoadStartTile
    );

    $.Method({Static:false, Public:false}, "LoadTile", 
      new JSIL.MethodSignature($asm02.TypeRef("Platformer2D.Tile"), [
          $.Char, $.Int32, 
          $.Int32
        ]), 
      Level_LoadTile$00
    );

    $.Method({Static:false, Public:false}, "LoadTile", 
      new JSIL.MethodSignature($asm02.TypeRef("Platformer2D.Tile"), [$.String, $asm02.TypeRef("Platformer2D.TileCollision")]), 
      Level_LoadTile$01
    );

    $.Method({Static:false, Public:false}, "LoadTiles", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IO.Stream")), 
      Level_LoadTiles
    );

    $.Method({Static:false, Public:false}, "LoadVarietyTile", 
      new JSIL.MethodSignature($asm02.TypeRef("Platformer2D.Tile"), [
          $.String, $.Int32, 
          $asm02.TypeRef("Platformer2D.TileCollision")
        ]), 
      Level_LoadVarietyTile
    );

    $.Method({Static:false, Public:false}, "OnExitReached", 
      JSIL.MethodSignature.Void, 
      Level_OnExitReached
    );

    $.Method({Static:false, Public:false}, "OnGemCollected", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Platformer2D.Gem"), $asm02.TypeRef("Platformer2D.Player")]), 
      Level_OnGemCollected
    );

    $.Method({Static:false, Public:false}, "OnPlayerKilled", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Platformer2D.Enemy")), 
      Level_OnPlayerKilled
    );

    $.Method({Static:false, Public:true }, "StartNewLife", 
      JSIL.MethodSignature.Void, 
      Level_StartNewLife
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"), $asm02.TypeRef("Platformer2D.AccelerometerState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")
        ]), 
      Level_Update
    );

    $.Method({Static:false, Public:false}, "UpdateEnemies", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Level_UpdateEnemies
    );

    $.Method({Static:false, Public:false}, "UpdateGems", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Level_UpdateGems
    );

    $.Constant({Static:true , Public:false}, "EntityLayer", 2); 
    $.Constant({Static:true , Public:false}, "PointsPerSecond", 5); 
    $.Field({Static:false, Public:false}, "tiles", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("Platformer2D.Tile")])); 
    $.Field({Static:false, Public:false}, "layers", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")])); 
    $.Field({Static:false, Public:false}, "player", $asm02.TypeRef("Platformer2D.Player")); 
    $.Field({Static:false, Public:false}, "gems", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Platformer2D.Gem")])); 
    $.Field({Static:false, Public:false}, "enemies", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Platformer2D.Enemy")])); 
    $.Field({Static:false, Public:false}, "start", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "exit", $asm00.TypeRef("Microsoft.Xna.Framework.Point")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "InvalidPosition", $asm00.TypeRef("Microsoft.Xna.Framework.Point")); 
    $.Field({Static:false, Public:false}, "random", $asm01.TypeRef("System.Random")); 
    $.Field({Static:false, Public:false}, "score", $.Int32); 
    $.Field({Static:false, Public:false}, "reachedExit", $.Boolean); 
    $.Field({Static:false, Public:false}, "timeRemaining", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "content", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")); 
    $.Field({Static:false, Public:false}, "exitReachedSound", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    function Level__cctor () {
      $thisType.InvalidPosition = new $asm00.Microsoft.Xna.Framework.Point();
      $thisType.InvalidPosition = new ($T00())(-1, -1);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Level__cctor
    );

    $.Property({Static:false, Public:true }, "Player", $asm02.TypeRef("Platformer2D.Player"));

    $.Property({Static:false, Public:true }, "Score", $.Int32);

    $.Property({Static:false, Public:true }, "ReachedExit", $.Boolean);

    $.Property({Static:false, Public:true }, "TimeRemaining", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "Content", $asm00.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"));

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Platformer2D.Player */ 

(function Player$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Platformer2D.Level)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.Platformer2D.AnimationPlayer)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm02.Platformer2D.AccelerometerState)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.DisplayOrientation)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadThumbSticks)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Buttons)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm02.Platformer2D.TileCollision)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm02.Platformer2D.RectangleExtensions)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm02.Platformer2D.Animation)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm02.Platformer2D.Enemy)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Single"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };

  function Player__ctor (level, position) {
    this.flip = $T02().None;
    this.level = level;
    this.LoadContent();
    this.Reset(position.MemberwiseClone());
  };

  function Player_ApplyPhysics (gameTime) {
    var elapsed = Math.fround((gameTime.GameTime$ElapsedGameTime$value).get_TotalSeconds());
    var previousPosition = this.get_Position().MemberwiseClone();
    this.velocity.X += (+this.movement * 13000) * elapsed;
    this.velocity.Y = +$S00().CallStatic($T06(), "Clamp", null, +this.velocity.Y + (3400 * elapsed), -550, 550);
    this.velocity.Y = +this.DoJump(this.velocity.Y, gameTime);
    if (this.get_IsOnGround()) {
      this.velocity.X *= 0.48;
    } else {
      this.velocity.X *= 0.58;
    }
    this.velocity.X = +$S00().CallStatic($T06(), "Clamp", null, this.velocity.X, -1750, 1750);
    (this.Position = $T01().op_Addition(this.Position.MemberwiseClone(), $S01().CallStatic($T01(), "op_Multiply", null, this.velocity.MemberwiseClone(), elapsed)));
    (this.Position = $S02().Construct(Math.fround(Math.round(this.Position.X)), Math.fround(Math.round(this.Position.Y))));
    this.HandleCollisions();
    if (+this.get_Position().X === +previousPosition.X) {
      this.velocity.X = 0;
    }
    if (+this.get_Position().Y === +previousPosition.Y) {
      this.velocity.Y = 0;
    }
  };

  function Player_DoJump (velocityY, gameTime) {
    if (this.isJumping) {
      if (!(!(!this.wasJumping && 
            this.get_IsOnGround()) && (+this.jumpTime <= 0))) {
        if (+this.jumpTime === 0) {
          (this.jumpSound).Play();
        }
        this.jumpTime += Math.fround((gameTime.GameTime$ElapsedGameTime$value).get_TotalSeconds());
        (this.sprite).PlayAnimation(this.jumpAnimation);
      }
      if (!((0 >= +this.jumpTime) || (+this.jumpTime > 0.35))) {
        velocityY = -3500 * (1 - Math.fround(Math.pow(+((+this.jumpTime / 0.35)), 0.14000000059604645)));
      } else {
        this.jumpTime = 0;
      }
    } else {
      this.jumpTime = 0;
    }
    this.wasJumping = this.isJumping;
    return velocityY;
  };

  function Player_Draw (gameTime, spriteBatch) {
    if (+this.get_Velocity().X > 0) {
      this.flip = $T02().FlipHorizontally;
    } else if (+this.get_Velocity().X < 0) {
      this.flip = $T02().None;
    }
    (this.sprite).Draw(gameTime, spriteBatch, this.get_Position().MemberwiseClone(), this.flip);
  };

  function Player_get_BoundingRectangle () {
    var left = ((((Math.round((+this.get_Position().X - +(this.sprite).get_Origin().X))) | 0) + (this.localBounds.X | 0)) | 0);
    var top = ((((Math.round((+this.get_Position().Y - +(this.sprite).get_Origin().Y))) | 0) + (this.localBounds.Y | 0)) | 0);
    return new ($T0D())(left, top, this.localBounds.Width, this.localBounds.Height);
  };

  function Player_get_IsAlive () {
    return this.isAlive;
  };

  function Player_get_IsOnGround () {
    return this.isOnGround;
  };

  function Player_get_Level () {
    return this.level;
  };

  function Player_get_Position () {
    return this.position;
  };

  function Player_get_Velocity () {
    return this.velocity;
  };

  function Player_GetInput (keyboardState, gamePadState, accelState, orientation) {
    this.movement = +(gamePadState.GamePadState$ThumbSticks$value).get_Left().X * 1;
    if ((Math.abs(this.movement)) < 0.5) {
      this.movement = 0;
    }
    if ((Math.abs(accelState.AccelerometerState$Acceleration$value.Y)) > 0.1) {
      this.movement = +$S00().CallStatic($T06(), "Clamp", null, -accelState.AccelerometerState$Acceleration$value.Y * 1.5, -1, 1);
      if (orientation === $T11().LandscapeRight) {
        this.movement = -this.movement;
      }
    }
    if (!(!(gamePadState.IsButtonDown($T13().DPadLeft) || 
          keyboardState.IsKeyDown($T14().Left)) && !keyboardState.IsKeyDown($T14().A))) {
      this.movement = -1;
    } else if (!(!(gamePadState.IsButtonDown($T13().DPadRight) || 
          keyboardState.IsKeyDown($T14().Right)) && !keyboardState.IsKeyDown($T14().D))) {
      this.movement = 1;
    }
    this.isJumping = gamePadState.IsButtonDown($T13().A) || 
    keyboardState.IsKeyDown($T14().Space) || 
    keyboardState.IsKeyDown($T14().Up) || 
    keyboardState.IsKeyDown($T14().W);
  };

  function Player_HandleCollisions () {
    var bounds = this.get_BoundingRectangle().MemberwiseClone();
    var leftTile = ((Math.floor(+((+(bounds.get_Left()) / 40)))) | 0);
    var rightTile = ((((Math.ceil(+((+(bounds.get_Right()) / 40)))) | 0) - 1) | 0);
    var topTile = ((Math.floor(+((+(bounds.get_Top()) / 32)))) | 0);
    var bottomTile = ((((Math.ceil(+((+(bounds.get_Bottom()) / 32)))) | 0) - 1) | 0);
    this.isOnGround = false;

    for (var y = topTile; y <= bottomTile; y = ((y + 1) | 0)) {

      for (var x = leftTile; x <= rightTile; x = ((x + 1) | 0)) {
        var collision = (this.get_Level()).GetCollision(x, y);
        if (collision !== $T15().Passable) {
          var tileBounds = (this.get_Level()).GetBounds(x, y);
          var depth = $T16().GetIntersectionDepth(bounds, tileBounds).MemberwiseClone();
          if ($T01().op_Inequality(depth.MemberwiseClone(), $T01().get_Zero().MemberwiseClone())) {
            var absDepthX = (Math.abs(depth.X));
            var absDepthY = (Math.abs(depth.Y));
            if (!((absDepthY >= absDepthX) && (collision !== $T15().Platform))) {
              if (+this.previousBottom <= +(tileBounds.get_Top())) {
                this.isOnGround = true;
              }
              if (!((collision !== $T15().Impassable) && !this.get_IsOnGround())) {
                (this.Position = $S02().Construct(this.Position.X, (+this.Position.Y + +depth.Y)));
                bounds = this.get_BoundingRectangle().MemberwiseClone();
              }
            } else if (collision === $T15().Impassable) {
              (this.Position = $S02().Construct((+this.Position.X + +depth.X), this.Position.Y));
              bounds = this.get_BoundingRectangle().MemberwiseClone();
            }
          }
        }
      }
    }
    this.previousBottom = +(bounds.get_Bottom());
  };

  function Player_LoadContent () {
    this.idleAnimation = new ($T17())(((this.get_Level()).get_Content()).Load$b1($T18())("Sprites/Player/Idle"), 0.1, true);
    this.runAnimation = new ($T17())(((this.get_Level()).get_Content()).Load$b1($T18())("Sprites/Player/Run"), 0.1, true);
    this.jumpAnimation = new ($T17())(((this.get_Level()).get_Content()).Load$b1($T18())("Sprites/Player/Jump"), 0.1, false);
    this.celebrateAnimation = new ($T17())(((this.get_Level()).get_Content()).Load$b1($T18())("Sprites/Player/Celebrate"), 0.1, false);
    this.dieAnimation = new ($T17())(((this.get_Level()).get_Content()).Load$b1($T18())("Sprites/Player/Die"), 0.1, false);
    var width = ((+((this.idleAnimation).get_FrameWidth()) * 0.4) | 0);
    var left = ((((((this.idleAnimation).get_FrameWidth() | 0) - width) | 0) / 2) | 0);
    var height = ((+((this.idleAnimation).get_FrameWidth()) * 0.8) | 0);
    var top = ((((this.idleAnimation).get_FrameHeight() | 0) - height) | 0);
    this.localBounds = new ($T0D())(left, top, width, height);
    this.killedSound = ((this.get_Level()).get_Content()).Load$b1($T09())("Sounds/PlayerKilled");
    this.jumpSound = ((this.get_Level()).get_Content()).Load$b1($T09())("Sounds/PlayerJump");
    this.fallSound = ((this.get_Level()).get_Content()).Load$b1($T09())("Sounds/PlayerFall");
  };

  function Player_OnKilled (killedBy) {
    this.isAlive = false;
    if (killedBy !== null) {
      (this.killedSound).Play();
    } else {
      (this.fallSound).Play();
    }
    (this.sprite).PlayAnimation(this.dieAnimation);
  };

  function Player_OnReachedExit () {
    (this.sprite).PlayAnimation(this.celebrateAnimation);
  };

  function Player_Reset (position) {
    (this.Position = position.MemberwiseClone());
    (this.Velocity = $T01().get_Zero().MemberwiseClone());
    this.isAlive = true;
    (this.sprite).PlayAnimation(this.idleAnimation);
  };

  function Player_set_Position (value) {
    this.position = value.MemberwiseClone();
  };

  function Player_set_Velocity (value) {
    this.velocity = value.MemberwiseClone();
  };

  function Player_Update (gameTime, keyboardState, gamePadState, accelState, orientation) {
    this.GetInput(keyboardState.MemberwiseClone(), gamePadState.MemberwiseClone(), accelState.MemberwiseClone(), orientation);
    this.ApplyPhysics(gameTime);
    if (!(!this.get_IsAlive() || !this.get_IsOnGround())) {
      if (((Math.abs(this.get_Velocity().X)) - 0.02) > 0) {
        (this.sprite).PlayAnimation(this.runAnimation);
      } else {
        (this.sprite).PlayAnimation(this.idleAnimation);
      }
    }
    this.movement = 0;
    this.isJumping = false;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Platformer2D.Player", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Platformer2D.Level"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Player__ctor
    );

    $.Method({Static:false, Public:true }, "ApplyPhysics", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      Player_ApplyPhysics
    );

    $.Method({Static:false, Public:false}, "DoJump", 
      new JSIL.MethodSignature($.Single, [$.Single, $asm00.TypeRef("Microsoft.Xna.Framework.GameTime")]), 
      Player_DoJump
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")]), 
      Player_Draw
    );

    $.Method({Static:false, Public:true }, "get_BoundingRectangle", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")), 
      Player_get_BoundingRectangle
    );

    $.Method({Static:false, Public:true }, "get_IsAlive", 
      JSIL.MethodSignature.Return($.Boolean), 
      Player_get_IsAlive
    );

    $.Method({Static:false, Public:true }, "get_IsOnGround", 
      JSIL.MethodSignature.Return($.Boolean), 
      Player_get_IsOnGround
    );

    $.Method({Static:false, Public:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Platformer2D.Level")), 
      Player_get_Level
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Player_get_Position
    );

    $.Method({Static:false, Public:true }, "get_Velocity", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Player_get_Velocity
    );

    $.Method({Static:false, Public:false}, "GetInput", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"), 
          $asm02.TypeRef("Platformer2D.AccelerometerState"), $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")
        ]), 
      Player_GetInput
    );

    $.Method({Static:false, Public:false}, "HandleCollisions", 
      JSIL.MethodSignature.Void, 
      Player_HandleCollisions
    );

    $.Method({Static:false, Public:true }, "LoadContent", 
      JSIL.MethodSignature.Void, 
      Player_LoadContent
    );

    $.Method({Static:false, Public:true }, "OnKilled", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Platformer2D.Enemy")), 
      Player_OnKilled
    );

    $.Method({Static:false, Public:true }, "OnReachedExit", 
      JSIL.MethodSignature.Void, 
      Player_OnReachedExit
    );

    $.Method({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Player_Reset
    );

    $.Method({Static:false, Public:true }, "set_Position", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Player_set_Position
    );

    $.Method({Static:false, Public:true }, "set_Velocity", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Vector2")), 
      Player_set_Velocity
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"), $asm02.TypeRef("Platformer2D.AccelerometerState"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")
        ]), 
      Player_Update
    );

    $.Constant({Static:true , Public:false}, "MoveAcceleration", 13000); 
    $.Constant({Static:true , Public:false}, "MaxMoveSpeed", 1750); 
    $.Constant({Static:true , Public:false}, "GroundDragFactor", 0.48); 
    $.Constant({Static:true , Public:false}, "AirDragFactor", 0.58); 
    $.Constant({Static:true , Public:false}, "MaxJumpTime", 0.35); 
    $.Constant({Static:true , Public:false}, "JumpLaunchVelocity", -3500); 
    $.Constant({Static:true , Public:false}, "GravityAcceleration", 3400); 
    $.Constant({Static:true , Public:false}, "MaxFallSpeed", 550); 
    $.Constant({Static:true , Public:false}, "JumpControlPower", 0.14); 
    $.Constant({Static:true , Public:false}, "MoveStickScale", 1); 
    $.Constant({Static:true , Public:false}, "AccelerometerScale", 1.5); 
    $.Constant({Static:true , Public:false}, "JumpButton", 4096); 
    $.Field({Static:false, Public:false}, "idleAnimation", $asm02.TypeRef("Platformer2D.Animation")); 
    $.Field({Static:false, Public:false}, "runAnimation", $asm02.TypeRef("Platformer2D.Animation")); 
    $.Field({Static:false, Public:false}, "jumpAnimation", $asm02.TypeRef("Platformer2D.Animation")); 
    $.Field({Static:false, Public:false}, "celebrateAnimation", $asm02.TypeRef("Platformer2D.Animation")); 
    $.Field({Static:false, Public:false}, "dieAnimation", $asm02.TypeRef("Platformer2D.Animation")); 
    $.Field({Static:false, Public:false}, "flip", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects")); 
    $.Field({Static:false, Public:false}, "sprite", $asm02.TypeRef("Platformer2D.AnimationPlayer")); 
    $.Field({Static:false, Public:false}, "killedSound", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "jumpSound", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "fallSound", $asm00.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "level", $asm02.TypeRef("Platformer2D.Level")); 
    $.Field({Static:false, Public:false}, "isAlive", $.Boolean); 
    $.Field({Static:false, Public:false}, "position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "previousBottom", $.Single); 
    $.Field({Static:false, Public:false}, "velocity", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "isOnGround", $.Boolean); 
    $.Field({Static:false, Public:false}, "movement", $.Single); 
    $.Field({Static:false, Public:false}, "isJumping", $.Boolean); 
    $.Field({Static:false, Public:false}, "wasJumping", $.Boolean); 
    $.Field({Static:false, Public:false}, "jumpTime", $.Single); 
    $.Field({Static:false, Public:false}, "localBounds", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Property({Static:false, Public:true }, "Level", $asm02.TypeRef("Platformer2D.Level"));

    $.Property({Static:false, Public:true }, "IsAlive", $.Boolean);

    $.Property({Static:false, Public:true }, "Position", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Velocity", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "IsOnGround", $.Boolean);

    $.Property({Static:false, Public:true }, "BoundingRectangle", $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Platformer2D.RectangleExtensions */ 

(function RectangleExtensions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };

  function RectangleExtensions_GetBottomCenter (rect) {
    return $S00().Construct((+(rect.X) + +((+(rect.Width) / 2))), +(rect.get_Bottom()));
  };

  function RectangleExtensions_GetIntersectionDepth (rectA, rectB) {
    var halfWidthA = +((+(rectA.Width) / 2));
    var halfHeightA = +((+(rectA.Height) / 2));
    var halfWidthB = +((+(rectB.Width) / 2));
    var halfHeightB = +((+(rectB.Height) / 2));
    var centerA = $S00().Construct((+(rectA.get_Left()) + halfWidthA), (+(rectA.get_Top()) + halfHeightA));
    var centerB = $S00().Construct((+(rectB.get_Left()) + halfWidthB), (+(rectB.get_Top()) + halfHeightB));
    var distanceX = +centerA.X - +centerB.X;
    var distanceY = +centerA.Y - +centerB.Y;
    var minDistanceX = halfWidthA + halfWidthB;
    var minDistanceY = halfHeightA + halfHeightB;
    if (!(((Math.abs(distanceX)) < minDistanceX) && ((Math.abs(distanceY)) < minDistanceY))) {
      var result = $T01().get_Zero().MemberwiseClone();
    } else {
      var depthX = +(
        (distanceX > 0)
           ? (minDistanceX - distanceX)
           : (-minDistanceX - distanceX))
      ;
      var depthY = +(
        (distanceY > 0)
           ? (minDistanceY - distanceY)
           : (-minDistanceY - distanceY))
      ;
      result = $S00().Construct(depthX, depthY);
    }
    return result;
  };

  JSIL.MakeStaticClass("Platformer2D.RectangleExtensions", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "GetBottomCenter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      RectangleExtensions_GetBottomCenter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetIntersectionDepth", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      RectangleExtensions_GetIntersectionDepth
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* enum Platformer2D.TileCollision */ 

JSIL.MakeEnum(
  {
    FullName: "Platformer2D.TileCollision", 
    BaseType: $asm01.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Passable: 0, 
    Impassable: 1, 
    Platform: 2, 
  }
);

/* struct Platformer2D.Tile */ 

(function Tile$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Platformer2D.TileCollision)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };

  function Tile__ctor (texture, collision) {
    this.Texture = texture;
    this.Collision = collision;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Platformer2D.Tile", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm02.TypeRef("Platformer2D.TileCollision")]), 
      Tile__ctor
    );

    $.Constant({Static:true , Public:true }, "Width", 40); 
    $.Constant({Static:true , Public:true }, "Height", 32); 
    $.Field({Static:false, Public:true }, "Texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:true }, "Collision", $asm02.TypeRef("Platformer2D.TileCollision")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Size", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    function Tile__cctor () {
      $thisType.Size = new $asm00.Microsoft.Xna.Framework.Vector2();
      $thisType.Size = $S00().Construct(40, 32);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Tile__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Platformer2D.TouchCollectionExtensions */ 

(function TouchCollectionExtensions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchCollection)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchCollection_Enumerator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocation)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocationState)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function TouchCollectionExtensions_AnyTouch (touchState) {
    var enumerator = touchState.GetEnumerator();
    try {

      while (enumerator.MoveNext()) {
        var location = enumerator.get_Current().MemberwiseClone();
        if (!((location.get_State() !== $T03().Pressed) && (location.get_State() !== $T03().Moved))) {
          var result = true;
          return result;
        }
      }
    } finally {
      $IM00().Call(enumerator, null);
    }
    result = false;
    return result;
  };

  JSIL.MakeStaticClass("Platformer2D.TouchCollectionExtensions", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "AnyTouch", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection")]), 
      TouchCollectionExtensions_AnyTouch
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Platformer2D.PlatformerGame */ 

(function PlatformerGame$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.DisplayOrientation)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Platformer2D.Accelerometer)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.Platformer2D.Level)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm02.Platformer2D.Player)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchCollection)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm02.Platformer2D.VirtualGamePad)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchPanel)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePad)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadButtons)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Buttons)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm02.Platformer2D.TouchCollectionExtensions)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.PresentationParameters)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.MediaPlayer)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Media.Song)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm01.System.IO.Stream)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.TitleContainer)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Color")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $asm01.TypeRef("System.String"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Color")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm00.TypeRef("Microsoft.Xna.Framework.Vector3")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function PlatformerGame__ctor () {
    this.baseScreenSize = $S00().Construct(800, 480);
    this.levelIndex = -1;
    $T02().prototype._ctor.call(this);
    this.graphics = new ($T03())(this);
    this.Game$Content.ContentManager$RootDirectory$value = "Content";
    this.graphics.GraphicsDeviceManager$IsFullScreen$value = false;
    this.graphics.GraphicsDeviceManager$PreferredBackBufferWidth$value = 800;
    this.graphics.GraphicsDeviceManager$PreferredBackBufferHeight$value = 480;
    (this.graphics).set_SupportedOrientations($T05().$Flags("LandscapeLeft", "LandscapeRight"));
    $T06().Initialize();
  };

  function PlatformerGame_Draw (gameTime) {
    ((this.graphics).get_GraphicsDevice()).Clear($T09().Color$CornflowerBlue$value.MemberwiseClone());
    (this.spriteBatch).Begin(
      $T0B().Immediate, 
      null, 
      null, 
      null, 
      null, 
      null, 
      this.globalTransformation.MemberwiseClone()
    );
    (this.level).Draw(gameTime, this.spriteBatch);
    this.DrawHud();
    (this.spriteBatch).End();
    $T02().prototype.Draw.call(this, gameTime);
  };

  function PlatformerGame_DrawHud () {
    var statusSize = new ($T01())();
    var titleSafeArea = ((this.get_GraphicsDevice()).get_Viewport()).get_TitleSafeArea().MemberwiseClone();
    var hudLocation = $S00().Construct(+(titleSafeArea.X), +(titleSafeArea.Y));
    var center = $S00().Construct(+((+this.baseScreenSize.X / 2)), +((+this.baseScreenSize.Y / 2)));
    var timeString = (("TIME: " + JSIL.NumberToFormattedString(((this.level).get_TimeRemaining()).get_Minutes(), null, "00") + ":" + JSIL.NumberToFormattedString(((this.level).get_TimeRemaining()).get_Seconds(), null, "00")));
    if (!(!($T00().op_GreaterThan((this.level).get_TimeRemaining().MemberwiseClone(), $thisType.WarningTime.MemberwiseClone()) || 
          (this.level).get_ReachedExit()) && (((((((this.level).get_TimeRemaining()).get_TotalSeconds()) | 0) % 2) | 0) !== 0))) {
      var timeColor = $T09().Color$Yellow$value.MemberwiseClone();
    } else {
      timeColor = $T09().Color$Red$value.MemberwiseClone();
    }
    this.DrawShadowedString(this.hudFont, timeString, hudLocation.MemberwiseClone(), timeColor.MemberwiseClone());
    var timeHeight = +$S01().CallVirtual("MeasureString", null, this.hudFont, timeString).Y;
    this.DrawShadowedString(
      this.hudFont, 
      JSIL.ConcatString("SCORE: ", ((this.level).get_Score()).toString()), 
      $T01().op_Addition(hudLocation.MemberwiseClone(), $S00().Construct(0, (timeHeight * 1.2))).MemberwiseClone(), 
      $T09().Color$Yellow$value.MemberwiseClone()
    );
    var status = null;
    if ($T00().op_Equality((this.level).get_TimeRemaining().MemberwiseClone(), $T00().Zero.MemberwiseClone())) {
      if ((this.level).get_ReachedExit()) {
        status = this.winOverlay;
      } else {
        status = this.loseOverlay;
      }
    } else if (!((this.level).get_Player()).get_IsAlive()) {
      status = this.diedOverlay;
    }
    if (status !== null) {
      $T01().prototype._ctor.call(statusSize, 
        +(status.get_Width()), 
        +(status.get_Height())
      );
      $S02().CallVirtual("Draw", null, this.spriteBatch, status, $T01().op_Subtraction(center.MemberwiseClone(), $S03().CallStatic($T01(), "op_Division", null, statusSize.MemberwiseClone(), 2)).MemberwiseClone(), $T09().Color$White$value.MemberwiseClone());
    }
    if ((this.touchState).get_IsConnected()) {
      (this.virtualGamePad).Draw(this.spriteBatch);
    }
  };

  function PlatformerGame_DrawShadowedString (font, value, position, color) {
    $S04().CallVirtual("DrawString", null, this.spriteBatch, font, value, $T01().op_Addition(position.MemberwiseClone(), $S00().Construct(1, 1)).MemberwiseClone(), $T09().Color$Black$value.MemberwiseClone());
    $S04().CallVirtual("DrawString", null, this.spriteBatch, font, value, position.MemberwiseClone(), color.MemberwiseClone());
  };

  function PlatformerGame_HandleInput (gameTime) {
    this.keyboardState = $T17().GetState();
    this.touchState = $T18().GetState().MemberwiseClone();
    this.gamePadState = (this.virtualGamePad).GetState(this.touchState.MemberwiseClone(), $T19().GetState($T1A().One).MemberwiseClone());
    this.accelerometerState = $T06().GetState();
    if ((this.gamePadState.GamePadState$Buttons$value).get_Back() === $T1D().Pressed) {
      this.Exit();
    }
    var continuePressed = (this.keyboardState).IsKeyDown($T20().Space) || 
    (this.gamePadState).IsButtonDown($T21().A) || 
    $T22().AnyTouch(this.touchState.MemberwiseClone());
    if (!(this.wasContinuePressed || !continuePressed)) {
      if (!((this.level).get_Player()).get_IsAlive()) {
        (this.level).StartNewLife();
      } else if ($T00().op_Equality((this.level).get_TimeRemaining().MemberwiseClone(), $T00().Zero.MemberwiseClone())) {
        if ((this.level).get_ReachedExit()) {
          this.LoadNextLevel();
        } else {
          this.ReloadCurrentLevel();
        }
      }
    }
    this.wasContinuePressed = continuePressed;
    (this.virtualGamePad).Update(gameTime);
  };

  function PlatformerGame_LoadContent ($exception) {
    this.spriteBatch = new ($T0A())(this.get_GraphicsDevice());
    this.hudFont = (this.get_Content()).Load$b1($T12())("Fonts/Hud");
    this.winOverlay = (this.get_Content()).Load$b1($T13())("Overlays/you_win");
    this.loseOverlay = (this.get_Content()).Load$b1($T13())("Overlays/you_lose");
    this.diedOverlay = (this.get_Content()).Load$b1($T13())("Overlays/you_died");
    var horScaling = +((+(this.get_GraphicsDevice().GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferWidth$value) / +this.baseScreenSize.X));
    var verScaling = +((+(this.get_GraphicsDevice().GraphicsDevice$PresentationParameters$value.PresentationParameters$BackBufferHeight$value) / +this.baseScreenSize.Y));
    var screenScalingFactor = $S05().Construct(horScaling, verScaling, 1);
    this.globalTransformation = $S06().CallStatic($T26(), "CreateScale", null, screenScalingFactor.MemberwiseClone()).MemberwiseClone();
    this.virtualGamePad = new ($T16())(this.baseScreenSize.MemberwiseClone(), this.globalTransformation.MemberwiseClone(), (this.get_Content()).Load$b1($T13())("Sprites/VirtualControlArrow"));
    try {
      $T27().MediaPlayer$IsRepeating$value = true;
      $T27().Play((this.get_Content()).Load$b1($T28())("Sounds/Music"));
    } catch ($exception) {
    }
    this.LoadNextLevel();
  };

  function PlatformerGame_LoadNextLevel () {
    this.levelIndex = (((((this.levelIndex | 0) + 1) | 0) % 3) | 0);
    if (this.level !== null) {
      (this.level).Dispose();
    }
    var levelPath = $T0F().Format("Content/Levels/{0}.txt", this.levelIndex);
    var fileStream = $T2A().OpenStream(levelPath);
    try {
      this.level = new ($T0C())(this.get_Services(), fileStream, this.levelIndex);
    } finally {
      if (fileStream !== null) {
        $IM00().Call(fileStream, null);
      }
    }
  };

  function PlatformerGame_ReloadCurrentLevel () {
    this.levelIndex = (((this.levelIndex | 0) - 1) | 0);
    this.LoadNextLevel();
  };

  function PlatformerGame_Update (gameTime) {
    this.HandleInput(gameTime);
    (this.level).Update(
      gameTime, 
      this.keyboardState.MemberwiseClone(), 
      this.gamePadState.MemberwiseClone(), 
      this.accelerometerState.MemberwiseClone(), 
      (this.get_Window()).get_CurrentOrientation()
    );
    if ($T01().op_Inequality(
        ((this.level).get_Player()).get_Velocity().MemberwiseClone(), 
        $T01().get_Zero().MemberwiseClone()
      )) {
      (this.virtualGamePad).NotifyPlayerIsMoving();
    }
    $T02().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Xna.Framework.Game"), 
      Name: "Platformer2D.PlatformerGame", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      PlatformerGame__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Draw", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      PlatformerGame_Draw
    );

    $.Method({Static:false, Public:false}, "DrawHud", 
      JSIL.MethodSignature.Void, 
      PlatformerGame_DrawHud
    );

    $.Method({Static:false, Public:false}, "DrawShadowedString", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Color")
        ]), 
      PlatformerGame_DrawShadowedString
    );

    $.Method({Static:false, Public:false}, "HandleInput", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      PlatformerGame_HandleInput
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      JSIL.MethodSignature.Void, 
      PlatformerGame_LoadContent
    );

    $.Method({Static:false, Public:false}, "LoadNextLevel", 
      JSIL.MethodSignature.Void, 
      PlatformerGame_LoadNextLevel
    );

    $.Method({Static:false, Public:false}, "ReloadCurrentLevel", 
      JSIL.MethodSignature.Void, 
      PlatformerGame_ReloadCurrentLevel
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      PlatformerGame_Update
    );

    $.Constant({Static:true , Public:false}, "numberOfLevels", 3); 
    $.Field({Static:false, Public:false}, "graphics", $asm00.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")); 
    $.Field({Static:false, Public:false}, "spriteBatch", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")); 
    $.Field({Static:false, Public:false}, "baseScreenSize", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "globalTransformation", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "hudFont", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:false, Public:false}, "winOverlay", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "loseOverlay", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "diedOverlay", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "levelIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "level", $asm02.TypeRef("Platformer2D.Level")); 
    $.Field({Static:false, Public:false}, "wasContinuePressed", $.Boolean); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "WarningTime", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "gamePadState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")); 
    $.Field({Static:false, Public:false}, "keyboardState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
    $.Field({Static:false, Public:false}, "touchState", $asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection")); 
    $.Field({Static:false, Public:false}, "accelerometerState", $asm02.TypeRef("Platformer2D.AccelerometerState")); 
    $.Field({Static:false, Public:false}, "virtualGamePad", $asm02.TypeRef("Platformer2D.VirtualGamePad")); 
    function PlatformerGame__cctor () {
      $thisType.WarningTime = new $asm01.System.TimeSpan();
      $thisType.WarningTime = $T00().FromSeconds(30).MemberwiseClone();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      PlatformerGame__cctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Platformer2D.VirtualGamePad */ 

(function VirtualGamePad$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Color)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchCollection)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Buttons)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchCollection_Enumerator)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocation)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.Touch.TouchLocationState)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.GamePadButtons)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.TimeSpan)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("System.Single"), $asm01.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $asm01.TypeRef("System.Nullable`1", [$asm00.TypeRef("Microsoft.Xna.Framework.Rectangle")]), $asm00.TypeRef("Microsoft.Xna.Framework.Color"), 
        $asm01.TypeRef("System.Single"), $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), 
        $asm01.TypeRef("System.Single"), $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), 
        $asm01.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Xna.Framework.Vector2")])
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"), [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Buttons")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"), [
        $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers"), 
        $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function VirtualGamePad__ctor (baseScreenSize, globalTransformation, texture) {
    this.baseScreenSize = baseScreenSize.MemberwiseClone();
    this.globalTransformation = $T01().Invert(globalTransformation.MemberwiseClone());
    this.texture = texture;
    this.secondsSinceLastInput = 3.40282347E+38;
  };

  function VirtualGamePad_Draw (spriteBatch) {
    var spriteCenter = $S00().Construct(64, 64);
    var color = $T04().Multiply($T04().Color$White$value, this.opacity);
    $S01().CallVirtual("Draw", null, spriteBatch, 
      this.texture, 
      $S00().Construct(64, (+this.baseScreenSize.Y - 64)), 
      null, 
      color.MemberwiseClone(), 
      -1.57079637, 
      spriteCenter.MemberwiseClone(), 
      1, 
      $T05().None, 
      0
    );
    $S01().CallVirtual("Draw", null, spriteBatch, 
      this.texture, 
      $S00().Construct(192, (+this.baseScreenSize.Y - 64)), 
      null, 
      color.MemberwiseClone(), 
      1.57079637, 
      spriteCenter.MemberwiseClone(), 
      1, 
      $T05().None, 
      0
    );
    $S01().CallVirtual("Draw", null, spriteBatch, 
      this.texture, 
      $S00().Construct((+this.baseScreenSize.X - 128), (+this.baseScreenSize.Y - 128)), 
      null, 
      color.MemberwiseClone(), 
      0, 
      $T00().get_Zero().MemberwiseClone(), 
      1, 
      $T05().None, 
      0
    );
  };

  function VirtualGamePad_GetState (touchState, gpState) {
    var buttonsPressed = $T08().$Cast(0);
    var enumerator = touchState.GetEnumerator();
    var pos = new JSIL.BoxedVariable(null);
    try {

      while (enumerator.MoveNext()) {
        var touch = enumerator.get_Current().MemberwiseClone();
        if (!((touch.get_State() !== $T0B().Moved) && (touch.get_State() !== $T0B().Pressed))) {
          pos.set(touch.get_Position().MemberwiseClone());
          $S02().CallStatic($T00(), "Transform", null, /* ref */ pos, /* ref */ new JSIL.MemberReference(this, "globalTransformation"), /* ref */ pos);
          if (+pos.get().X < 128) {
            buttonsPressed = $T08().$Cast(buttonsPressed | $T08().DPadLeft);
          } else if (+pos.get().X < 256) {
            buttonsPressed = $T08().$Cast(buttonsPressed | $T08().DPadRight);
          } else if (+pos.get().X >= (+this.baseScreenSize.X - 128)) {
            buttonsPressed = $T08().$Cast(buttonsPressed | $T08().A);
          }
        }
      }
    } finally {
      $IM00().Call(enumerator, null);
    }
    var gpButtons = gpState.GamePadState$Buttons$value;
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        (gpButtons.get_A() === $T0E().Pressed)
           ? $T08().A
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        (gpButtons.get_B() === $T0E().Pressed)
           ? $T08().B
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        (gpButtons.get_X() === $T0E().Pressed)
           ? $T08().X
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        (gpButtons.get_Y() === $T0E().Pressed)
           ? $T08().Y
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        (gpButtons.get_Start() === $T0E().Pressed)
           ? $T08().Start
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        (gpButtons.get_Back() === $T0E().Pressed)
           ? $T08().Back
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        gpState.IsButtonDown($T08().DPadDown)
           ? $T08().DPadDown
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        gpState.IsButtonDown($T08().DPadLeft)
           ? $T08().DPadLeft
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        gpState.IsButtonDown($T08().DPadRight)
           ? $T08().DPadRight
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        gpState.IsButtonDown($T08().DPadUp)
           ? $T08().DPadUp
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        (gpButtons.get_BigButton() === $T0E().Pressed)
           ? $T08().BigButton
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        (gpButtons.get_LeftShoulder() === $T0E().Pressed)
           ? $T08().LeftShoulder
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        (gpButtons.get_RightShoulder() === $T0E().Pressed)
           ? $T08().RightShoulder
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        (gpButtons.get_LeftStick() === $T0E().Pressed)
           ? $T08().LeftStick
           : $T08().$Cast(0))
    );
    buttonsPressed = $T08().$Cast(buttonsPressed | (
        (gpButtons.get_RightStick() === $T0E().Pressed)
           ? $T08().RightStick
           : $T08().$Cast(0))
    );
    var buttons = $S03().Construct(buttonsPressed);
    return $S04().Construct(gpState.GamePadState$ThumbSticks$value.MemberwiseClone(), gpState.GamePadState$Triggers$value.MemberwiseClone(), buttons.MemberwiseClone(), gpState.GamePadState$DPad$value.MemberwiseClone());
  };

  function VirtualGamePad_NotifyPlayerIsMoving () {
    this.secondsSinceLastInput = 0;
  };

  function VirtualGamePad_Update (gameTime) {
    var secondsElapsed = Math.fround((gameTime.GameTime$ElapsedGameTime$value).get_TotalSeconds());
    this.secondsSinceLastInput += secondsElapsed;
    if (+this.secondsSinceLastInput < 4) {
      this.opacity = +$T12().Max(0, +this.opacity - (secondsElapsed * 4));
    } else {
      this.opacity = +$T12().Min(1, +this.opacity + (secondsElapsed * 2));
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Platformer2D.VirtualGamePad", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm00.TypeRef("Microsoft.Xna.Framework.Matrix"), 
          $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")
        ]), 
      VirtualGamePad__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")), 
      VirtualGamePad_Draw
    );

    $.Method({Static:false, Public:true }, "GetState", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"), [$asm00.TypeRef("Microsoft.Xna.Framework.Input.Touch.TouchCollection"), $asm00.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")]), 
      VirtualGamePad_GetState
    );

    $.Method({Static:false, Public:true }, "NotifyPlayerIsMoving", 
      JSIL.MethodSignature.Void, 
      VirtualGamePad_NotifyPlayerIsMoving
    );

    $.Method({Static:false, Public:true }, "Update", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Xna.Framework.GameTime")), 
      VirtualGamePad_Update
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "baseScreenSize", $asm00.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "globalTransformation", $asm00.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "texture", $asm00.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "secondsSinceLastInput", $.Single); 
    $.Field({Static:false, Public:false}, "opacity", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Platformer2D.Program */ 

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Platformer2D.PlatformerGame)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Xna.Framework.Game)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function Program_Main () {
    var game = new ($T00())();
    try {
      game.Run();
    } finally {
      if (game !== null) {
        $IM00().Call(game, null);
      }
    }
  };

  JSIL.MakeStaticClass("Platformer2D.Program", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "Main", 
      JSIL.MethodSignature.Void, 
      Program_Main
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

